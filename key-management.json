{"header": ["ClassName", "QualifiedName", "ExtendedClasses", "ImplementedInterfaces", "Path", "LineNumber", "Link", "FieldTypesByName", "DataFieldNames", "MethodNames", "Usings", "IsSerializable", "IsComparable", "ClassAttributes", "HasId", "HasIdentifierAttribute", "FieldAttributes", "FieldAttributesByName", "MethodAttributes", "PropertiesCount", "HasEquals", "HasToString", "HasGetHashCode", "LogicMethodCount", "LogicMethodRatio", "ContainedByClasses", "AverageMethodBodyLen", "MedianMethodBodyLen", "StaticMethodsPercentage", "PublicMethodsPercentage", "ConstructorsCount", "DestructorsCount", "IsPrivateOrInternal", "IsAbstract", "IsStatic", "HasAsync", "Visibility", "IsGeneric", "ExternalClassesMethodCalls", "ExternalCoreMethodCalls", "IsAttribute", "IsException", "IsDisposable", "DefinedInParts", "StringLiterals", "IsCloneable", "GetterCount", "SetterCount", "RawComments", "IsLeaf", "HasClassLevelSchemaAnnotations", "HasClassLevelDataAnnotations", "HasMethodLevelSchemaAnnotations", "HasMethodLevelDataAnnotations", "!ModelLabel!IsEFDbSetPropertyDataModelAsync", "!ModelLabel!IsEFModelBuilderDataModelAsync", "!ModelLabel!IsEFTransitiveDataModelAsync", "HasJsonClassAnnotations", "HasJsonPropertyAnnotations", "!ModelLabel!IsLinqToDBGetTableTypeArgumentAsync", "!ModelLabel!HasLinqToDBClassAnnotations", "!ModelLabel!HasLinqToDBPropertyAnnotations", "!ModelLabel!IsMongoGetCollectionTargetAsync", "!ModelLabel!IsMongoClassMapTargetAsync", "!ModelLabel!HasBsonClassAttributes", "!ModelLabel!HasBsonPropertyAttributes", "ObjectIdTypedPropertiesCount", "BsonTypedPropertiesCount", "UsesMongoNamespaces"], "rows": [["SimpleClass", "Acme.TestProject.SimpleClass", [], [], "tests/Lim.UnitTests/FeaturesExtractorDotNet/Resources/Acme.TestSolution/Acme.TestProject/Classes.cs", 8, 0, {}, [], [], ["System", "System.ComponentModel", "System.Runtime.CompilerServices", "System.Xml.Serialization"], false, false, [], false, false, [], {}, [], 0, false, false, false, 0, 0.0, [], 0.0, 0, 0.0, 0.0, 0, 0, false, false, false, false, "public", false, [], [], false, false, false, false, [], false, 0, 0, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, false], ["WrappingClass", "Acme.TestProject.WrappingClass", [], [], "tests/Lim.UnitTests/FeaturesExtractorDotNet/Resources/Acme.TestSolution/Acme.TestProject/Classes.cs", 12, 0, {}, [], [], ["System", "System.ComponentModel", "System.Runtime.CompilerServices", "System.Xml.Serialization"], false, false, [], false, false, [], {}, [], 0, false, false, false, 0, 0.0, [], 0.0, 0, 0.0, 0.0, 0, 0, false, false, false, false, "public", false, [], [], false, false, false, false, [], false, 0, 0, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, false], ["InnerPrivateClass", "Acme.TestProject.WrappingClass.InnerPrivateClass", [], [], "tests/Lim.UnitTests/FeaturesExtractorDotNet/Resources/Acme.TestSolution/Acme.TestProject/Classes.cs", 14, 0, {}, [], [], ["System", "System.ComponentModel", "System.Runtime.CompilerServices", "System.Xml.Serialization"], false, false, [], false, false, [], {}, [], 0, false, false, false, 0, 0.0, ["Acme.TestProject.WrappingClass"], 0.0, 0, 0.0, 0.0, 0, 0, true, false, false, false, "private", false, [], [], false, false, false, false, [], false, 0, 0, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, false], ["InnerPublicClass", "Acme.TestProject.WrappingClass.InnerPublicClass", [], [], "tests/Lim.UnitTests/FeaturesExtractorDotNet/Resources/Acme.TestSolution/Acme.TestProject/Classes.cs", 18, 0, {}, [], [], ["System", "System.ComponentModel", "System.Runtime.CompilerServices", "System.Xml.Serialization"], false, false, [], false, false, [], {}, [], 0, false, false, false, 0, 0.0, ["Acme.TestProject.WrappingClass"], 0.0, 0, 0.0, 0.0, 0, 0, false, false, false, false, "public", false, [], [], false, false, false, false, [], false, 0, 0, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, false], ["InnerInnerPublicClass", "Acme.TestProject.WrappingClass.InnerPublicClass.InnerInnerPublicClass", [], [], "tests/Lim.UnitTests/FeaturesExtractorDotNet/Resources/Acme.TestSolution/Acme.TestProject/Classes.cs", 20, 0, {}, [], [], ["System", "System.ComponentModel", "System.Runtime.CompilerServices", "System.Xml.Serialization"], false, false, [], false, false, [], {}, [], 0, false, false, false, 0, 0.0, ["Acme.TestProject.WrappingClass", "Acme.TestProject.WrappingClass.InnerPublicClass"], 0.0, 0, 0.0, 0.0, 0, 0, false, false, false, false, "public", false, [], [], false, false, false, false, [], false, 0, 0, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, false], ["StaticClass", "Acme.TestProject.StaticClass", [], [], "tests/Lim.UnitTests/FeaturesExtractorDotNet/Resources/Acme.TestSolution/Acme.TestProject/Classes.cs", 26, 0, {}, [], [], ["System", "System.ComponentModel", "System.Runtime.CompilerServices", "System.Xml.Serialization"], false, false, [], false, false, [], {}, [], 0, false, false, false, 0, 0.0, [], 0.0, 0, 0.0, 0.0, 0, 0, false, false, true, false, "public", false, [], [], false, false, false, false, [], false, 0, 0, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, false], ["GenericClass", "Acme.TestProject.GenericClass<T>", [], [], "tests/Lim.UnitTests/FeaturesExtractorDotNet/Resources/Acme.TestSolution/Acme.TestProject/Classes.cs", 30, 0, {}, [], [], ["System", "System.ComponentModel", "System.Runtime.CompilerServices", "System.Xml.Serialization"], false, false, [], false, false, [], {}, [], 0, false, false, false, 0, 0.0, [], 0.0, 0, 0.0, 0.0, 0, 0, false, false, false, false, "public", true, [], [], false, false, false, false, [], false, 0, 0, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, false], ["BaseClass", "Acme.TestProject.BaseClass", [], [], "tests/Lim.UnitTests/FeaturesExtractorDotNet/Resources/Acme.TestSolution/Acme.TestProject/Classes.cs", 34, 0, {}, [], [], ["System", "System.ComponentModel", "System.Runtime.CompilerServices", "System.Xml.Serialization"], false, false, [], false, false, [], {}, [], 0, false, false, false, 0, 0.0, [], 0.0, 0, 0.0, 0.0, 0, 0, false, true, false, false, "public", false, [], [], false, false, false, false, [], false, 0, 0, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, false], ["SuperClass", "Acme.TestProject.SuperClass", ["Acme.TestProject.BaseClass"], [], "tests/Lim.UnitTests/FeaturesExtractorDotNet/Resources/Acme.TestSolution/Acme.TestProject/Classes.cs", 38, 0, {}, [], [], ["System", "System.ComponentModel", "System.Runtime.CompilerServices", "System.Xml.Serialization"], false, false, [], false, false, [], {}, [], 0, false, false, false, 0, 0.0, [], 0.0, 0, 0.0, 0.0, 0, 0, false, false, false, false, "public", false, [], [], false, false, false, false, [], false, 0, 0, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, false], ["ImplementingClass", "Acme.TestProject.ImplementingClass", [], ["Acme.TestProject.IInterface"], "tests/Lim.UnitTests/FeaturesExtractorDotNet/Resources/Acme.TestSolution/Acme.TestProject/Classes.cs", 46, 0, {}, [], [], ["System", "System.ComponentModel", "System.Runtime.CompilerServices", "System.Xml.Serialization"], false, false, [], false, false, [], {}, [], 0, false, false, false, 0, 0.0, [], 0.0, 0, 0.0, 0.0, 0, 0, false, false, false, false, "public", false, [], [], false, false, false, false, [], false, 0, 0, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, false], ["AttributedClass", "Acme.TestProject.AttributedClass", [], [], "tests/Lim.UnitTests/FeaturesExtractorDotNet/Resources/Acme.TestSolution/Acme.TestProject/Classes.cs", 50, 0, {}, [], [], ["System", "System.ComponentModel", "System.Runtime.CompilerServices", "System.Xml.Serialization"], false, false, ["Bindable", "Description", "CustomAttribute"], false, false, [], {}, [], 0, false, false, false, 0, 0.0, [], 0.0, 0, 0.0, 0.0, 0, 0, false, false, false, false, "public", false, [], [], false, false, false, false, ["description", "param"], false, 0, 0, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, false], ["JustStruct", "Acme.TestProject.JustStruct", [], [], "tests/Lim.UnitTests/FeaturesExtractorDotNet/Resources/Acme.TestSolution/Acme.TestProject/Classes.cs", 57, 0, {}, [], [], ["System", "System.ComponentModel", "System.Runtime.CompilerServices", "System.Xml.Serialization"], false, false, [], false, false, [], {}, [], 0, false, false, false, 0, 0.0, [], 0.0, 0, 0.0, 0.0, 0, 0, false, false, false, false, "public", false, [], [], false, false, false, false, [], false, 0, 0, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, false], ["IEnamerable", "Acme.TestProject.IEnamerable", [], [], "tests/Lim.UnitTests/FeaturesExtractorDotNet/Resources/Acme.TestSolution/Acme.TestProject/Classes.cs", 61, 0, {}, [], [], ["System", "System.ComponentModel", "System.Runtime.CompilerServices", "System.Xml.Serialization"], false, false, [], false, false, [], {}, [], 0, false, false, false, 0, 0.0, [], 0.0, 0, 0.0, 0.0, 0, 0, false, false, false, false, "public", false, [], [], false, false, false, false, [], false, 0, 0, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, false], ["IEnamerable", "Acme.TestProject.IEnamerable<T>", [], [], "tests/Lim.UnitTests/FeaturesExtractorDotNet/Resources/Acme.TestSolution/Acme.TestProject/Classes.cs", 65, 0, {}, [], ["Get"], ["System", "System.ComponentModel", "System.Runtime.CompilerServices", "System.Xml.Serialization"], false, false, [], false, false, [], {}, [], 0, false, false, false, 2, 1.0, [], 20.0, 20, 0.0, 0.0, 0, 0, false, false, false, false, "public", true, [], [], false, false, false, false, [], false, 0, 0, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, false], ["ClassWithContent", "Acme.TestProject.ClassWithContent", [], [], "tests/Lim.UnitTests/FeaturesExtractorDotNet/Resources/Acme.TestSolution/Acme.TestProject/ClassWithContent.cs", 9, 0, {"StaticField": "string", "ConstField": "string", "optionalField": "int?", "arrayField": "int[]", "genericField": "System.Collections.Generic.List<ClassWithContent>", "simpleTuple": "(int, int)", "namedTuple": "(int Num1, int Num2)", "_valueField": "string", "mBool": "bool"}, ["optionalField", "arrayField", "genericField", "simpleTuple", "namedTuple", "_valueField", "Property1", "Property2", "Property3", "Getter", "Setter"], ["ClassWithContent", "~ClassWithContent", "SimpleMethod", "Property1", "Property2", "Property3", "Getter", "Setter", "AbstractMethod", "VirtualMethod", "Method1", "Method2", "MethodWithOut", "AttributedMethod", "MethodWithComplicatedReturnType", "GenericMethod", "AsyncMethod1", "AsyncMethod2", "AsyncMethod3", "Enumerable", "AsyncEnumerable", "ParamsMethod", "MethodReturnsTuple"], ["System", "System.Collections.Generic", "System.ComponentModel", "System.Linq", "System.Threading.Tasks"], false, false, [], false, false, ["Description"], {"StaticField": [], "ConstField": [], "optionalField": [], "arrayField": [], "genericField": [], "simpleTuple": [], "namedTuple": [], "_valueField": ["Description"], "mBool": []}, ["Description"], 5, false, false, false, 19, 0.7916666666666666, [], 35.791666666666664, 39, 4.166666666666667, 91.66666666666667, 2, 1, false, true, false, true, "public", false, [], ["Console.Out.WriteLine", "dictionary.Keys.First", "Task.Delay", "TimeSpan.FromDays", "Task.FromResult"], false, false, false, false, ["value1", "value2", "value3", "wat1", "wat2"], false, 4, 4, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, false], ["CustomAttribute", "Acme.TestProject.CustomAttribute", ["System.Attribute"], [], "tests/Lim.UnitTests/FeaturesExtractorDotNet/Resources/Acme.TestSolution/Acme.TestProject/CustomAttribute.cs", 5, 0, {}, ["Param"], ["Param", "CustomAttribute"], ["System"], false, false, ["AttributeUsage"], false, false, [], {}, [], 1, false, false, false, 1, 0.5, [], 23.5, 23, 0.0, 100.0, 1, 0, false, false, false, false, "public", false, [], [], true, false, false, false, [], false, 1, 0, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, false], ["ExtensionsClass", "Acme.TestProject.ExtensionsClass", [], [], "tests/Lim.UnitTests/FeaturesExtractorDotNet/Resources/Acme.TestSolution/Acme.TestProject/ExtensionsClass.cs", 3, 0, {}, [], ["ExtensionMethod"], [], false, false, [], false, false, [], {}, [], 0, false, false, false, 1, 1.0, [], 22.0, 22, 100.0, 100.0, 0, 0, false, false, true, false, "public", false, [], [], false, false, false, false, [], false, 0, 0, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, false], ["MethodCalls", "Acme.TestProject.MethodCalls", [], [], "tests/Lim.UnitTests/FeaturesExtractorDotNet/Resources/Acme.TestSolution/Acme.TestProject/MethodCalls.cs", 5, 0, {}, [], ["Identity", "DoStuff"], ["System"], false, false, [], false, false, [], {}, [], 0, false, false, false, 2, 1.0, [], 89.0, 89, 50.0, 50.0, 0, 0, false, false, false, false, "public", false, [], ["Console.WriteLine"], false, false, false, false, ["line"], false, 0, 0, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, false], ["ClassWithParitality", "Acme.TestProject.ClassWithParitality", [], [], "tests/Lim.UnitTests/FeaturesExtractorDotNet/Resources/Acme.TestSolution/Acme.TestProject/PartialClassPart1.cs", 3, 0, {}, [], ["foo", "bar"], [], false, false, [], false, false, [], {}, [], 0, false, false, false, 2, 1.0, [], 3.0, 3, 0.0, 100.0, 0, 0, false, false, false, false, "public", false, [], [], false, false, false, true, [], false, 0, 0, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, false], ["Program", "Acme.TestProject.Program.Program", [], [], "tests/Lim.UnitTests/FeaturesExtractorDotNet/Resources/Acme.TestSolution/Acme.TestProject/Program/Program.cs", 6, 0, {}, [], ["Main"], ["System", "System.Reflection.Assembly"], false, false, [], false, false, [], {}, [], 0, false, false, false, 1, 1.0, [], 67.0, 67, 100.0, 0.0, 0, 0, false, false, false, false, "internal", false, [], ["Console.WriteLine"], false, false, false, false, ["Hello World!"], false, 0, 0, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, false], ["BranchNotFoundException", "Lim.GitListener.BranchNotFoundException", ["System.Exception"], [], "src/Lim.GitListener/Exceptions/BranchNotFoundException.cs", 8, 0, {}, [], ["BranchNotFoundException"], ["System", "Infrastructure.Dotnet.Common", "LibGit2Sharp", "Lim.Common.DotNET.Repository"], false, false, [], false, false, [], {}, [], 0, false, false, false, 1, 1.0, [], 20.0, 20, 0.0, 100.0, 1, 0, false, false, false, false, "public", false, [], ["branchCollection.JoinToString"], false, true, false, false, [", "], false, 0, 0, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, false], ["PartialHistoryException", "Lim.GitListener.PartialHistoryException", ["System.Exception"], [], "src/Lim.GitListener/Exceptions/PartialHistoryException.cs", 5, 0, {}, [], [], ["System"], false, false, [], false, false, [], {}, [], 0, false, false, false, 0, 0.0, [], 0.0, 0, 0.0, 0.0, 0, 0, false, false, false, false, "public", false, [], [], false, true, false, false, [], false, 0, 0, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, false], ["ReleaseCandidateDoesNotExistException", "Lim.GitListener.ReleaseCandidateDoesNotExistException", ["Lim.GitListener.ReleaseSideDoestNotExistException"], [], "src/Lim.GitListener/Exceptions/ReleaseCandidateDoesNotExistException.cs", 6, 0, {}, [], ["ReleaseCandidateDoesNotExistException", "ReleaseSideDoestNotExistException"], ["System", "Lim.Common.DotNET"], false, false, [], false, false, [], {}, [], 0, false, false, false, 2, 1.0, [], 20.0, 20, 0.0, 50.0, 2, 0, false, false, false, false, "public", false, [], [], false, true, false, false, [], false, 0, 0, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, false], ["ReleaseSideDoestNotExistException", "Lim.GitListener.ReleaseSideDoestNotExistException", ["System.Exception"], [], "src/Lim.GitListener/Exceptions/ReleaseSideDoestNotExistException.cs", 6, 0, {}, [], ["ReleaseSideDoestNotExistException"], ["System", "Lim.Common.DotNET"], false, false, [], false, false, [], {}, [], 0, false, false, false, 1, 1.0, [], 20.0, 20, 0.0, 0.0, 1, 0, false, false, false, false, "public", false, [], [], false, true, false, false, [], false, 0, 0, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, false], ["ReleaseBaselineDoesNotExist", "Lim.GitListener.ReleaseBaselineDoesNotExist", ["Lim.GitListener.ReleaseSideDoestNotExistException"], [], "src/Lim.GitListener/Exceptions/ReleaseTargetDoesNotExistException.cs", 6, 0, {}, [], ["ReleaseBaselineDoesNotExist", "ReleaseSideDoestNotExistException"], ["System", "Lim.Common.DotNET"], false, false, [], false, false, [], {}, [], 0, false, false, false, 2, 1.0, [], 20.0, 20, 0.0, 50.0, 2, 0, false, false, false, false, "public", false, [], [], false, true, false, false, [], false, 0, 0, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, false], ["CommitDeletedException", "Lim.GitListener.CommitDeletedException", ["System.Exception"], [], "src/Lim.GitListener/Git/CommitDeletedException.cs", 6, 0, {}, [], ["CommitDeletedException"], ["System", "Infrastructure.Dotnet.Common"], false, false, [], false, false, [], {}, [], 0, false, false, false, 1, 1.0, [], 20.0, 20, 0.0, 100.0, 1, 0, false, false, false, false, "public", false, [], [], false, true, false, false, [], false, 0, 0, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, false], ["CommitTreeExtensions", "Lim.GitListener.CommitTreeExtensions", [], [], "src/Lim.GitListener/Git/CommitTreeExtensions.cs", 11, 0, {}, [], ["ExtractLanguages", "CollectPaths"], ["System", "System.Collections.Generic", "System.Linq", "Infrastructure.Dotnet.Common", "LibGit2Sharp", "Lim.Common.DotNET", "LibGit2Sharp.Commit"], false, false, [], false, false, [], {}, [], 0, false, false, false, 4, 1.0, [], 317.25, 258, 100.0, 25.0, 0, 0, false, false, true, false, "public", false, [], ["commit.Tree.CollectPaths", "repositoryAccess.Diff", "LanguageUtils.ExtractLanguages", "paths.AddRange", "tree.Select", "paths.Add", "(treeEntry.Target as Tree).CollectPaths", "nameof"], false, false, false, false, ["Target type is unknown"], false, 0, 0, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, false], ["GitCommandExtensions", "Lim.GitListener.GitCommandExtensions", [], [], "src/Lim.GitListener/Git/GitCommand.cs", 46, 0, {}, [], ["CommandString", "ArgumentCount", "DefaultFlags"], ["System.Collections.Generic", "Infrastructure.Dotnet.Common", "Lim.Common.DotNET"], false, false, [], false, false, [], {}, [], 0, false, false, false, 3, 1.0, [], 195.66666666666666, 223, 100.0, 100.0, 0, 0, false, false, true, false, "public", false, [], ["command.GetCustomAttribute<GitCommand, GitCommandStringAttribute>", "command.ToString()\n                    .ToLower", "command.ToString", "command.GetCustomAttribute<GitCommand, GitArgumentCountAttribute>", "command.GetCustomAttribute<GitCommand, GitDefaultFlagsAttribute>"], false, false, false, false, [], false, 0, 0, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, false], ["GitCommandLineTemplate", "Lim.GitListener.GitCommandLineTemplate", [], [], "src/Lim.GitListener/Git/GitCommandLineBuilder.cs", 7, 0, {"_template": "string"}, ["_template"], ["GitCommandLineTemplate", "BuildWithArguments"], ["System", "System.Collections.Generic", "Infrastructure.Dotnet.Common"], false, false, [], false, false, [], {"_template": []}, [], 0, false, false, false, 2, 1.0, [], 42.5, 42, 0.0, 100.0, 1, 0, false, false, false, false, "public", false, [], ["string.Format"], false, false, false, false, [], false, 0, 0, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, false], ["GitCommandLineBuilder", "Lim.GitListener.GitCommandLineBuilder", [], [], "src/Lim.GitListener/Git/GitCommandLineBuilder.cs", 18, 0, {"_arguments": "System.Collections.Generic.List<string>", "_command": "Lim.GitListener.GitCommand", "_flags": "System.Collections.Generic.List<string>", "_ioLimit": "bool"}, ["_arguments", "_command", "_flags"], ["GitCommandLineBuilder", "WithFlags", "WithArguments", "Build", "BuildTemplate", "LimitIo"], ["System", "System.Collections.Generic", "Infrastructure.Dotnet.Common"], false, false, [], false, false, [], {"_arguments": [], "_command": [], "_flags": [], "_ioLimit": []}, [], 0, false, false, false, 6, 1.0, [], 216.5, 115, 16.666666666666668, 83.33333333333333, 1, 0, false, false, false, false, "public", false, ["Lim.GitListener.GitCommandExtensions.ArgumentCount", "Lim.GitListener.GitCommandExtensions.CommandString", "Lim.GitListener.GitCommandExtensions.DefaultFlags"], ["_flags.AddRange", "_arguments.AddRange", "_arguments.JoinToString", "$\"git {_command.CommandString()} {_flags.JoinToString(\" \")} {_arguments.JoinToString(\" \")}\".TrimEnd", "_flags.JoinToString", "$\"git {_command.CommandString()} {_flags.JoinToString(\" \")}\".TrimEnd"], false, false, false, false, [" "], false, 0, 0, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, false], ["LocalGitCommands", "Lim.GitListener.LocalGitCommands", [], ["Lim.GitListener.ILocalGitCommands"], "src/Lim.GitListener/Git/LocalGitCommands.cs", 19, 0, {"RetryCloneOnExitCodes": "System.Collections.Generic.ISet<int>", "_asyncProcessExecutor": "???.IAsyncProcessExecutor", "_configureUntrustedCertificatePolicy": "???.IConfigureUntrustedCertificatePolicy", "_developerIdentityProvider": "Lim.GitRestApi.IDeveloperIdentityProvider", "_fileSystem": "???.IFileSystem", "_gitArchiveTemplate": "Lim.GitListener.GitCommandLineTemplate", "_localGitConfig": "Lim.GitListener.LocalGitConfig", "_logger": "???.ILogger<LocalGitCommands>", "_reCloneThrottledDedupExecute": "???.ThrottledDedupExecute<string, bool>", "_releasesDirectory": "string", "_repositoriesStorage": "Lim.Common.DotNET.IRepositoriesStorage", "_rootWorkingDirectory": "string"}, ["_asyncProcessExecutor", "_configureUntrustedCertificatePolicy", "_developerIdentityProvider", "_fileSystem", "_gitArchiveTemplate", "_localGitConfig", "_logger", "_reCloneThrottledDedupExecute", "_releasesDirectory", "_repositoriesStorage", "_rootWorkingDirectory"], ["LocalGitCommands", "CloneAsync", "CloneForReleaseAsync", "FetchAndResetAsync", "ArchiveSnapshotAsync", "GetCommitsFlowChainAsync", "GetRepositoryDevelopersFirstActivity", "GetCommitsBetweenAsync", "CommitExistsAsync", "GetCommitAsync", "DeleteLocalClone", "CurrentRepositoryDepthAsync", "IsEmptyRepository", "GetRepositoryCommits", "MinDate", "FetchCommitishIfNeeded", "FetchCommitishAsync", "GetCloneUrl", "GetExecutionEnvironment", "GetRsaPrivateKeyPath", "IsValidGitRepository", "FetchHistoryChunkAsync", "FetchFullHistory", "ReCloneAsync", "ArchiveAsync", "RepositoryLocalDirectoryPath", "IsShallowRepository", "TransformCommitAsync", "RunCommandAsync"], ["System", "System.Collections.Generic", "System.IO", "System.Linq", "System.Threading.Tasks", "Infrastructure.Dotnet.Common", "LibGit2Sharp", "Lim.Common.DotNET", "Lim.GitRestApi", "Microsoft.Extensions.Logging", "Mono.Unix.Native", "Polly", "RestSharp.Extensions", "Lim.Common.DotNET.Commit", "Lim.Common.DotNET.Repository"], false, false, [], false, false, [], {"RetryCloneOnExitCodes": [], "_asyncProcessExecutor": [], "_configureUntrustedCertificatePolicy": [], "_developerIdentityProvider": [], "_fileSystem": [], "_gitArchiveTemplate": [], "_localGitConfig": [], "_logger": [], "_reCloneThrottledDedupExecute": [], "_releasesDirectory": [], "_repositoriesStorage": [], "_rootWorkingDirectory": []}, [], 0, false, false, false, 31, 1.0, [], 778.4516129032259, 539, 0.0, 38.70967741935484, 1, 0, false, false, false, true, "public", false, ["Lim.GitListener.GitCommandLineBuilder.WithFlags", "Lim.GitListener.GitCommandLineBuilder.Build", "Lim.GitListener.GitCommandLineBuilder.WithArguments", "Lim.GitListener.ThrottledDedupExecute<string, bool>.TryExecuteAsync", "Lim.GitListener.GitCommandLineBuilder.BuildTemplate"], ["_logger.LogInformation", "_logger.LogDebug", "_fileSystem.RecreateDirectory", "Policy.Handle<ProcessExecutionFailedException>(exception => RetryCloneOnExitCodes.Contains(exception.ExitCode))\n                    .RetryAsync(3)\n                    .ExecuteAsync", "Policy.Handle<ProcessExecutionFailedException>(exception => RetryCloneOnExitCodes.Contains(exception.ExitCode))\n                    .RetryAsync", "Policy.Handle<ProcessExecutionFailedException>", "RetryCloneOnExitCodes.Contains", "exception.StandardError.Contains", "_logger.LogWarning", "_repositoriesStorage.DisableRepositoryAsync", "_fileSystem.DeleteDirectory", "_fileSystem.CopyDirectoryAsync", "TransformCommitAsync", "developers.ContainsKey", "MinDate", "GetCommitAsync", "int.Parse", "repositoryAccess.Branches.None", ".Parent", "observedCommitsSha.Contains", "Math.Min", "onError", "repositoryAccess.Lookup<LibGit2Sharp.Commit>", "string.IsNullOrEmpty", "new UriBuilder(repository.HttpCloneUrl) {Scheme = \"ssh\", Port = 22}.ToString", "repository.Server.Username.UrlEncode", "repository.Server.Password.UrlEncode", "_asyncProcessExecutor.MarkTokenToNotLog", "new UriBuilder(repository.HttpCloneUrl)\n            {\n                UserName = userName,\n                Password = password\n            }.ToString", "Path.Combine", "server.Url.Escape", "_fileSystem.FileExists", "_fileSystem.Write", "Convert.FromBase64String", "_fileSystem.DirectoryExists", "exception.Message.Contains", "_logger.LogError", "_gitArchiveTemplate.BuildWithArguments", "_fileSystem.CopyFileAsync", "exception.StandardError.ContainsAny", "bool.Parse", "commit.Parent", "_developerIdentityProvider.GetOrCreateDeveloperAsync", "commit.ExtractLanguages", "_asyncProcessExecutor.RunAsync", "fileSystem.CreateDirectoryIfNotExists"], false, false, false, false, ["Directory at {local} exists, assuming it's properly cloned", "Cloning repository {repository} to {local}", "-c http.sslVerify=false", "--depth=1", "Authentication failed", "Failed to clone repository {repository} due to authentication failure", "Repository not found", "Repository {repository} is not found on remote - disabling it", "--count", "--first-parent", "origin", "ssh", "GIT_SSH_COMMAND", "--is-inside-work-tree", "true", "--hard", "unknown revision or path not in the working tree", "Failed to reset on {branch} of repository {repository}, will attempt to re-clone", "Archiving repository {repository} on {sha}", "Repository local directory does not exist at expected '{path}' when archiving {commitish}", "tar", "not a tree object", "bad object", "Failed to snapshot commit {commit} of repository {repository}, will attempt to re-clone", "Failed to snapshot commit {commit} of repository {repository} due to repository clone failure", "", "--is-shallow-repository", "Failed to transform commit '{commit}' for repository '{repository}'"], true, 0, 0, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, false], ["GitListenerLimMicroService", "Lim.GitListener.GitListenerLimMicroService", ["Lim.Common.DotNET.LimMicroService"], [], "src/Lim.GitListener/GitListenerLimMicroService.cs", 11, 0, {"_logMetrics": "bool"}, [], ["ConfigureServices", "RunAsync", "ConfigureLogging", "DecorateWithMetricsLogging", "RegisterCommonServices"], ["System", "System.Threading.Tasks.Dataflow", "Infrastructure.Dotnet.Common", "Lim.Common.DotNET", "Lim.GitRestApi", "Microsoft.Extensions.Configuration", "Microsoft.Extensions.DependencyInjection"], false, false, [], false, false, [], {"_logMetrics": []}, [], 0, false, false, false, 5, 1.0, [], 1232.2, 1047, 40.0, 40.0, 0, 0, false, false, false, true, "public", false, ["Lim.Common.DotNET.MongoCredentials.FromConfiguration"], ["RegisterCommonServices", "RegisterGitRestApi.RegisterProviders", "services.AddHostedServiceWithConstructorParams<CommitsForwarderService>", "configuration.GetValueWithEnv", "configuration.GetValue<string>", "configuration.GetValue<int>", "TimeSpan.FromMinutes", "services.AddHostedServiceWithConstructorParams<CommitsListenerService>", "services.AddSingleton", "configuration.GetValue<bool>", "configuration.GetValueWithEnv<bool>", "services.AddHostedServiceWithConstructorParams<ReleasesListenerService>", "services.AddSingleton<ILocalGitCommands, LocalGitCommands>", "services.AddSingleton<IGitAssistantService, GitAssistantService>", "DecorateWithMetricsLogging<ILocalGitCommands>", "services.AddSingleton<IRepositoryFileSystemInUse, RepositoryFileSystemInUse>", "services.AddSingleton<IDirectoryCapacityEnforcer, DirectoryCapacityEnforcer>", "services.AddSingleton<IResolvedApiClassificationStorage, ResolvedApiClassificationStorage>", "new HostBuilder()\n                .ConfigureHostConfiguration(configHost => configHost.AddEnvironmentVariables())\n                .ConfigureAppConfiguration(\n                    (hostContext, configApp) =>\n                        hostContext.HostingEnvironment.ApplicationName = name\n                )\n                .ConfigureAppConfiguration(\n                    (hostContext, configApp) =>\n                        configApp\n                            .AddAppSettings()\n                            .AddCommandLine(args)\n                )\n                .ConfigureServices(\n                    (hostContext, services) =>\n                    {\n                        var configuration = hostContext.Configuration;\n                        _logMetrics = configuration.GetValue<bool>(\"App:LogPerformanceCounters\");\n                        ConfigureServices(configuration, services);\n                    }\n                )\n                .ConfigureLogging(ConfigureLogging)\n                .Build()\n                .RunAsyncSafe", "new HostBuilder()\n                .ConfigureHostConfiguration(configHost => configHost.AddEnvironmentVariables())\n                .ConfigureAppConfiguration(\n                    (hostContext, configApp) =>\n                        hostContext.HostingEnvironment.ApplicationName = name\n                )\n                .ConfigureAppConfiguration(\n                    (hostContext, configApp) =>\n                        configApp\n                            .AddAppSettings()\n                            .AddCommandLine(args)\n                )\n                .ConfigureServices(\n                    (hostContext, services) =>\n                    {\n                        var configuration = hostContext.Configuration;\n                        _logMetrics = configuration.GetValue<bool>(\"App:LogPerformanceCounters\");\n                        ConfigureServices(configuration, services);\n                    }\n                )\n                .ConfigureLogging(ConfigureLogging)\n                .Build", "new HostBuilder()\n                .ConfigureHostConfiguration(configHost => configHost.AddEnvironmentVariables())\n                .ConfigureAppConfiguration(\n                    (hostContext, configApp) =>\n                        hostContext.HostingEnvironment.ApplicationName = name\n                )\n                .ConfigureAppConfiguration(\n                    (hostContext, configApp) =>\n                        configApp\n                            .AddAppSettings()\n                            .AddCommandLine(args)\n                )\n                .ConfigureServices(\n                    (hostContext, services) =>\n                    {\n                        var configuration = hostContext.Configuration;\n                        _logMetrics = configuration.GetValue<bool>(\"App:LogPerformanceCounters\");\n                        ConfigureServices(configuration, services);\n                    }\n                )\n                .ConfigureLogging", "new HostBuilder()\n                .ConfigureHostConfiguration(configHost => configHost.AddEnvironmentVariables())\n                .ConfigureAppConfiguration(\n                    (hostContext, configApp) =>\n                        hostContext.HostingEnvironment.ApplicationName = name\n                )\n                .ConfigureAppConfiguration(\n                    (hostContext, configApp) =>\n                        configApp\n                            .AddAppSettings()\n                            .AddCommandLine(args)\n                )\n                .ConfigureServices", "new HostBuilder()\n                .ConfigureHostConfiguration(configHost => configHost.AddEnvironmentVariables())\n                .ConfigureAppConfiguration(\n                    (hostContext, configApp) =>\n                        hostContext.HostingEnvironment.ApplicationName = name\n                )\n                .ConfigureAppConfiguration", "new HostBuilder()\n                .ConfigureHostConfiguration(configHost => configHost.AddEnvironmentVariables())\n                .ConfigureAppConfiguration", "new HostBuilder()\n                .ConfigureHostConfiguration", "configHost.AddEnvironmentVariables", "configApp\n                            .AddAppSettings()\n                            .AddCommandLine", "configApp\n                            .AddAppSettings", "configLogging.ClearProviders", "configLogging.AddConfiguration", "hostContext.Configuration.GetSection", "configLogging.AddFile", "hostContext.Configuration.GetSection(\"FileLoggingOptions\")\n                        .Bind", "configLogging.AddConsoleLogger", "services.DecorateWithMetricsLogging<T>", "services.RegisterServicesFromAssembly", "Assembly.Load", "services.AddSingletonWithConstructorParams<ICommitsStorage, CommitsStorage>", "services.AddSingleton<IConfigureUntrustedCertificatePolicy, AllowUntrustedCertificatePolicy>", "services.AddSingleton<IConfigureUntrustedCertificatePolicy, DefaultUntrustedCertificatePolicy>", "services.RegisterCacheBuilder<string, Developer>", "services.RegisterCacheBuilder<string, DeveloperIdentity>", "services.RegisterCacheBuilder<string, IReadOnlyCollection<Repository>>", "services.RegisterCacheBuilder<(Consumable, string), int>", "services.RegisterCacheBuilder<(string, CodeParsingTarget), string>", "services.AddBuilder<IBoundAsyncExecutor, BoundAsyncExecutor, ExecutionDataflowBlockOptions>"], false, false, false, false, ["App:BoundedSnapshotsCapacity", "App:CommitSnapshotsDirectory", "App:CommitsForwarderService:BoundedCapacity", "App:CommitsForwarderService:MaxDegreeOfParallelism", "App:IntervalsInMinutes:CommitsForwarderService", "App:ListenerServices:BoundedCapacity", "App:ListenerServices:MaxDegreeOfParallelism", "App:IntervalsInMinutes:CommitsListenerService:New", "App:IntervalsInMinutes:CommitsListenerService:Continuous", "App:Git:CommitScanChunkSize", "App:Git:WorkingDirectory", "App:Git:ReleasesDirectory", "App:Git:AssertExistingDirectoryIsCloned", "App:Git:RevisionsChunkSize", "App:LimitDiskIo", "App:Git:ReCloneThrottleLimitInMinutes", "App:IntervalsInMinutes:ReleasesListenerService"], false, 0, 0, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, false], ["Program", "Lim.GitListener.Program", [], [], "src/Lim.GitListener/Program.cs", 5, 0, {}, [], ["Main"], ["System.Threading.Tasks"], false, false, [], false, false, [], {}, [], 0, false, false, false, 1, 1.0, [], 87.0, 87, 100.0, 100.0, 0, 0, false, false, true, true, "public", false, [], ["new GitListenerLimMicroService().RunAsync"], false, false, false, false, ["Lim.GitListener"], false, 0, 0, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, false], ["CommitsForwarderService", "Lim.GitListener.CommitsForwarderService", ["???.HostedIntervalWorkingService"], [], "src/Lim.GitListener/Services/CommitsForwarderService.cs", 17, 0, {"MaxIterationCommitsCount": "int", "_blockOptions": "System.Threading.Tasks.Dataflow.ExecutionDataflowBlockOptions", "_boundAsyncExecutorBuilder": "System.Func<ExecutionDataflowBlockOptions, IBoundAsyncExecutor>", "_boundedSnapshotsCapacity": "int", "_commitsStorage": "Lim.Common.DotNET.ICommitsStorage", "_directoryCapacityEnforcer": "Lim.GitListener.IDirectoryCapacityEnforcer", "_fileSystem": "???.IFileSystem", "_gitAssistantService": "Lim.GitListener.IGitAssistantService", "_localGitCommands": "Lim.GitListener.ILocalGitCommands", "_logger": "???.ILogger<CommitsForwarderService>", "_releasesStorage": "Lim.Common.DotNET.IReleasesStorage", "_repositoriesStorage": "Lim.Common.DotNET.IRepositoriesStorage", "_snapshotsRootDirectory": "string"}, ["_blockOptions", "_boundAsyncExecutorBuilder", "_boundedSnapshotsCapacity", "_commitsStorage", "_directoryCapacityEnforcer", "_fileSystem", "_gitAssistantService", "_localGitCommands", "_logger", "_releasesStorage", "_repositoriesStorage", "_snapshotsRootDirectory"], ["CommitsForwarderService", "DeleteStaleSnapshots", "IsStale", "Work", "ForwardLatestAsync", "ForwardCommitAsync", "CreateSnapshotsAsync", "SnapshotCommit"], ["System", "System.Collections.Concurrent", "System.Collections.Generic", "System.IO", "System.Linq", "System.Threading", "System.Threading.Tasks", "System.Threading.Tasks.Dataflow", "Infrastructure.Dotnet.Common", "JetBrains.Annotations", "Lim.Common.DotNET", "Microsoft.Extensions.Logging", "Microsoft.VisualStudio.Services.Common"], false, false, ["UsedImplicitly"], false, false, [], {"MaxIterationCommitsCount": [], "_blockOptions": [], "_boundAsyncExecutorBuilder": [], "_boundedSnapshotsCapacity": [], "_commitsStorage": [], "_directoryCapacityEnforcer": [], "_fileSystem": [], "_gitAssistantService": [], "_localGitCommands": [], "_logger": [], "_releasesStorage": [], "_repositoriesStorage": [], "_snapshotsRootDirectory": []}, [], 0, false, false, false, 8, 1.0, [], 1340.25, 758, 0.0, 12.5, 1, 0, false, false, false, true, "public", false, ["Lim.GitListener.IDirectoryCapacityEnforcer.WaitForAllowedCapacity", "Lim.GitListener.ILocalGitCommands.DeleteLocalClone", "Lim.GitListener.ILocalGitCommands.ArchiveSnapshotAsync", "Lim.GitListener.IGitAssistantService.HandleDeletedCommitAsync"], ["_fileSystem.CreateDirectoryIfNotExists", "_fileSystem.GetDirectoryPaths", "IsStale", "_logger.LogInformation", "_fileSystem.DeleteDirectory", "Path.Combine", "_fileSystem.FileExists", "Logger.LogError", "(await _repositoriesStorage.GetDeveloperScannedRepositoriesAsync())\n                .Where(repository => !repositoriesWithNoHits.Contains(repository.Key))\n                .ToDictionary", "(await _repositoriesStorage.GetDeveloperScannedRepositoriesAsync())\n                .Where", "_repositoriesStorage.GetDeveloperScannedRepositoriesAsync", "repositoriesWithNoHits.Contains", "(await _releasesStorage.GetAllClonedAsync()).Select(release => release.Key)\n                .ToHashSet", "(await _releasesStorage.GetAllClonedAsync()).Select", "_releasesStorage.GetAllClonedAsync", "Math.Ceiling", "MaxIterationCommitsCount.SafeDivision", "repositoriesByKey.Values.OrderByDescending(repository => repository.Languages.Any(language => language.SupportsCodeParsing()))\n                .ThenBy", "repositoriesByKey.Values.OrderByDescending", "repository.Languages.Any", "language.SupportsCodeParsing", "cancellationToken.ThrowIfCancellationRequested", "(await _commitsStorage.GetCommitsToForwardAsync(\n                        commitCountPerRepository,\n                        repository.Key,\n                        ongoingReleaseKeys\n                    ))\n                    .Where(\n                        commitContext =>\n                            !collectedCommitShas.Contains(commitContext.Sha) &&\n                            (commitContext.IsMainBranchCommit || commitContext.ReleaseKeys.Intersects(ongoingReleaseKeys))\n                    )\n                    .ToList", "(await _commitsStorage.GetCommitsToForwardAsync(\n                        commitCountPerRepository,\n                        repository.Key,\n                        ongoingReleaseKeys\n                    ))\n                    .Where", "_commitsStorage.GetCommitsToForwardAsync", "collectedCommitShas.Contains", "commitContext.ReleaseKeys.Intersects", "commitContexts.None", "repositoriesWithNoHits.Add", "collectedCommitShas.AddRange", "commitContexts.Select", "collectedCommitShas.None", "_logger.LogDebug", "collectedCommitsByRepository.Values.ZipAll()\n                .ToList", "collectedCommitsByRepository.Values.ZipAll", "_boundAsyncExecutorBuilder", "executor.ProcessAsync", "ForwardCommitAsync", "EnumUtils.GetValues<CodeParsingTarget>", "commitContext.GetState", "Revisions.TargetFeaturesRevision", "_commitsStorage.SetStateAsync", "commitContext.RepositoryKeys.First", "_fileSystem.DirectoryExists", "_logger.LogWarning", "commitContext.ReleaseKeys.Any", "_releasesStorage.SetStatusAsync", "commitContext.RepositoryKeys.Where(repositoriesByKey.ContainsKey)\n                .ToList", "commitContext.RepositoryKeys.Where", "repositoryKeys.SelectMany(\n                        key => repositoriesByKey[key]\n                            .Languages ?? new HashSet<Language>()\n                    )\n                    .ToHashSet", "repositoryKeys.SelectMany", "snapshotData.ToJson", "_fileSystem.Write", "currentBatchDeletedCommits.Contains", "Logger.LogDebug"], false, false, false, false, ["Deleting stale directory at '{path}'", "Failed to forward commits", "No commits found to forward", "Will forward {count} commits for {count} repositories", "Directory already exists for snapshot {path} and is not stale - assuming its properly set", "Failed to create snapshot at '{path}' for {commit}", "Commit {commit} was detected as deleted - skipping creating its snapshot", "Created commit {commit} snapshot tar at {tarPath}", "Commit {} was detected as deleted - skipping creating its snapshot"], false, 0, 0, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, false], ["CommitsListenerService", "Lim.GitListener.CommitsListenerService", ["Lim.Common.DotNET.BaseRepositoryListenerService"], [], "src/Lim.GitListener/Services/CommitsListenerService.cs", 15, 0, {"_commitsStorage": "Lim.Common.DotNET.ICommitsStorage", "_configurationStorage": "Lim.Common.DotNET.IConfigurationStorage", "_developerIdentityProvider": "Lim.GitRestApi.IDeveloperIdentityProvider", "_developerRepositoryProfilesStorage": "Lim.Common.DotNET.IDeveloperRepositoryProfilesStorage", "_fileSystem": "???.IFileSystem", "_localGitCommands": "Lim.GitListener.ILocalGitCommands", "_logger": "???.ILogger<CommitsListenerService>", "_maxCommitsPerCycle": "int", "_repositoryFileSystemInUse": "Lim.GitListener.IRepositoryFileSystemInUse", "_shouldReSyncCommits": "bool", "RepositoriesStorage": "Lim.Common.DotNET.IRepositoriesStorage"}, ["_commitsStorage", "_configurationStorage", "_developerIdentityProvider", "_developerRepositoryProfilesStorage", "_fileSystem", "_localGitCommands", "_logger", "_maxCommitsPerCycle", "_repositoryFileSystemInUse", "RepositoriesStorage"], ["CommitsListenerService", "Work", "HandleRepositoryAsync", "FirstSyncRepositoryDevelopersAsync", "SyncRepositoryDeveloperAsync", "PerformInitialClone", "VerifyRepositoryTotalRelevanceAsync", "SyncLatestCommits", "SyncCommitsAsync", "MarkRepositoryScanCompleteAsync", "IsNew", "BaseRepositoryListenerService", "FetchAsync", "HandleAsync"], ["System", "System.Collections.Generic", "System.Linq", "System.Threading", "System.Threading.Tasks", "System.Threading.Tasks.Dataflow", "Infrastructure.Dotnet.Common", "JetBrains.Annotations", "Lim.Common.DotNET", "Lim.GitRestApi", "Microsoft.Extensions.Logging"], false, false, ["UsedImplicitly"], false, false, [], {"_commitsStorage": [], "_configurationStorage": [], "_developerIdentityProvider": [], "_developerRepositoryProfilesStorage": [], "_fileSystem": [], "_localGitCommands": [], "_logger": [], "_maxCommitsPerCycle": [], "_repositoryFileSystemInUse": [], "_shouldReSyncCommits": [], "RepositoriesStorage": []}, [], 0, false, false, false, 15, 1.0, [], 484.73333333333335, 444, 0.0, 13.333333333333334, 2, 0, false, false, false, true, "public", false, ["Lim.GitListener.ILocalGitCommands.FetchAndResetAsync", "Lim.GitListener.IRepositoryFileSystemInUse.UseRepositoryFileSystem", "Lim.GitListener.ILocalGitCommands.GetRepositoryDevelopersFirstActivity", "Lim.GitListener.ILocalGitCommands.CloneAsync", "Lim.GitListener.ILocalGitCommands.GetCommitsFlowChainAsync", "Lim.Common.DotNET.IRepositoriesStorage.GetMonitoredRepositoriesAsync", "Lim.Common.DotNET.IRepositoriesStorage.GetRepositoriesAsync"], ["_configurationStorage.GetConfigurationAsync", "base.Work", "_configurationStorage.SyncConfigurationFieldAsync", "syncDeveloperTasks.Add", "Task.WhenAll", "_logger.LogError", "_developerIdentityProvider.GetOrCreateDeveloperAsync", "_developerRepositoryProfilesStorage.SyncDeveloperRepositoryProfileAsync", "Logger.LogInformation", "string.IsNullOrEmpty", "LanguageUtils.GetRepositoryLanguages", "_fileSystem.GetFilePathsRecursive(localPath)\n                    .ToList", "_fileSystem.GetFilePathsRecursive", "RepositoriesStorage.UpdateRepositoryClonedAsync", "repository.Languages.Any", "language.SupportsCodeParsing", "language.SupportsPropertiesExtraction", "RepositoriesStorage.DisableRepositoryAsync", "RepositoriesStorage.RemoveRepositoryLanguagesAsync", "_fileSystem.DeleteDirectory", "(await _commitsStorage.GetCommitsWithNonPendingParentShaAsync(repository.Key)).ToHashSet", "_commitsStorage.GetCommitsWithNonPendingParentShaAsync", "_localGitCommands\n                    .GetCommitsFlowChainAsync(\n                        repository,\n                        targetBranch,\n                        observedCommitsSha\n                    )\n                    .WithCancellation", "_commitsStorage.SyncCommitAsync", "_logger.LogInformation", "RepositoriesStorage.MarkDeveloperScanCompleteAsync"], false, false, false, false, ["Failed to sync repository developers for {}", "Cloning repository {repository}", "Repository {repository} does not contain any files of interest, marking it as such and removing clone", "Synced {} commits for repository {}", "Repository {} developer scan completed"], true, 0, 0, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, false], ["GitAssistantService", "Lim.GitListener.GitAssistantService", [], ["Lim.GitListener.IGitAssistantService"], "src/Lim.GitListener/Services/GitAssistantService.cs", 11, 0, {"_commitsStorage": "Lim.Common.DotNET.ICommitsStorage", "_localGitCommands": "Lim.GitListener.ILocalGitCommands", "_logger": "???.ILogger<GitAssistantService>"}, ["_commitsStorage", "_localGitCommands", "_logger"], ["GitAssistantService", "HandleDeletedCommitAsync", "GetNextValidParentSha"], ["System.Collections.Concurrent", "System.Collections.Generic", "System.Linq", "System.Threading.Tasks", "Infrastructure.Dotnet.Common", "Lim.Common.DotNET", "Microsoft.Extensions.Logging"], false, false, [], false, false, [], {"_commitsStorage": [], "_localGitCommands": [], "_logger": []}, [], 0, false, false, false, 3, 1.0, [], 569.3333333333334, 781, 0.0, 66.66666666666667, 1, 0, false, false, false, true, "public", false, ["Lim.GitListener.ILocalGitCommands.CommitExistsAsync"], ["currentBatchDeletedCommits.Contains", "_logger.LogInformation", "deletedCommits.JoinToString", "_commitsStorage.HandleDeletedCommitsAsync", "deletedCommits.Add", "currentBatchDeletedCommits.Add", "_commitsStorage.GetCommitContextAsync"], false, false, false, false, ["Commits {} were deleted from repository {}, marking in storage"], false, 0, 0, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, false], ["ReleasesListenerService", "Lim.GitListener.ReleasesListenerService", ["???.HostedIntervalWorkingService"], [], "src/Lim.GitListener/Services/ReleasesListenerService.cs", 11, 0, {"_commitsStorage": "Lim.Common.DotNET.ICommitsStorage", "_localGitCommands": "Lim.GitListener.ILocalGitCommands", "_logger": "???.ILogger<ReleasesListenerService>", "_releasesStorage": "Lim.Common.DotNET.IReleasesStorage", "_repositoriesStorage": "Lim.Common.DotNET.IRepositoriesStorage"}, ["_commitsStorage", "_localGitCommands", "_logger", "_releasesStorage", "_repositoriesStorage"], ["ReleasesListenerService", "Work", "CloneAndSyncReleasesAsync", "HandleReleaseAsync", "DeleteFinishedRepositoriesAsync"], ["System", "System.Threading", "System.Threading.Tasks", "Infrastructure.Dotnet.Common", "JetBrains.Annotations", "Lim.Common.DotNET", "Microsoft.Extensions.Logging"], false, false, ["UsedImplicitly"], false, false, [], {"_commitsStorage": [], "_localGitCommands": [], "_logger": [], "_releasesStorage": [], "_repositoriesStorage": []}, [], 0, false, false, false, 5, 1.0, [], 1158.6, 883, 0.0, 20.0, 1, 0, false, false, false, true, "public", false, ["Lim.GitListener.ILocalGitCommands.DeleteLocalClone", "Lim.GitListener.ILocalGitCommands.CloneForReleaseAsync", "Lim.GitListener.ILocalGitCommands.GetCommitAsync", "Lim.GitListener.ILocalGitCommands.GetCommitsBetweenAsync"], ["Task.WhenAll", "_releasesStorage.GetPendingReleasesAsync", "_logger.LogInformation", "_logger.LogError", "_repositoriesStorage.GetRepositoryAsync", "_releasesStorage.SetStatusAsync", "string.IsNullOrEmpty", "TaskUtils.WhenAll", "baselineTipCommit.ReleaseKeys.Add", "candidateTipCommit.ReleaseKeys.Add", "_commitsStorage.SyncCommitAsync", "_localGitCommands.GetCommitsBetweenAsync(\n                    repository,\n                    repositoryPath,\n                    release.Baseline.CommitSha,\n                    release.Candidate.CommitSha\n                )\n                .WithCancellation", "release.DeveloperIdentitiesKeys.Add", "release.CandidateBranchCommitShas.Add", "_releasesStorage.SyncReleaseAsync", "_releasesStorage.GetAllClonedAsync", "clonedReleases\n                .ToDictionaryGrouped", "_localGitCommands.DeleteLocalClone", "_releasesStorage.BulkChangeCloneStatusAsync"], false, false, false, false, ["Found {count} pending releases", "Could not calculate release {key}", "Candidate for release {release} is not found {candidate}: {exception}", "Baseline for release {release} is not found {baseline}: {exception}", "Failed to clone repository {repository}", "Release {release} includes {count} in-between commits"], true, 0, 0, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, false], ["DirectoryCapacityEnforcer", "Lim.GitListener.DirectoryCapacityEnforcer", [], ["Lim.GitListener.IDirectoryCapacityEnforcer"], "src/Lim.GitListener/Utils/DirectoryCapacityEnforcer.cs", 8, 0, {"_busyWaitInterval": "System.TimeSpan", "_fileSystem": "???.IFileSystem"}, ["_busyWaitInterval", "_fileSystem"], ["DirectoryCapacityEnforcer", "WaitForAllowedCapacity"], ["System", "System.Threading.Tasks", "Infrastructure.Dotnet.Common", "JetBrains.Annotations"], false, false, ["UsedImplicitly"], false, false, [], {"_busyWaitInterval": [], "_fileSystem": []}, [], 0, false, false, false, 2, 1.0, [], 139.5, 139, 0.0, 100.0, 1, 0, false, false, false, true, "public", false, [], ["_fileSystem.CreateDirectoryIfNotExists", "_fileSystem.ContentsCount", "Task.Delay", "TimeSpan.FromSeconds"], false, false, false, false, [], false, 0, 0, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, false], ["GitExtensions", "Lim.GitListener.GitExtensions", [], [], "src/Lim.GitListener/Utils/GitExtensions.cs", 8, 0, {}, [], ["Parent", "Diff"], ["System", "System.Collections.Generic", "System.Linq", "LibGit2Sharp"], false, false, [], false, false, [], {}, [], 0, false, false, false, 2, 1.0, [], 333.0, 333, 100.0, 100.0, 0, 0, false, false, true, false, "public", false, [], ["commit.Parents.FirstOrDefault", "repositoryAccess.Diff\n                        .Compare<TreeChanges>(parent.Tree, commit.Tree)\n                        .AsEnumerable", "repositoryAccess.Diff\n                        .Compare<TreeChanges>", "Array.Empty<TreeEntryChanges>"], false, false, false, false, [], false, 0, 0, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, false], ["LocalGitConfig", "Lim.GitListener.LocalGitConfig", [], [], "src/Lim.GitListener/Utils/LocalGitConfig.cs", 5, 0, {}, ["WorkingDirectory", "ReleasesDirectory", "RevisionsChunkSize", "ReCloneThrottleLimit"], ["LocalGitConfig", "WorkingDirectory", "ReleasesDirectory", "AssertExistingDirectoryIsCloned", "RevisionsChunkSize", "LimitDiskIo", "ReCloneThrottleLimit"], ["System"], false, false, [], false, false, [], {}, [], 6, false, false, false, 1, 0.14285714285714285, [], 49.714285714285715, 0, 0.0, 100.0, 1, 0, false, false, false, false, "public", false, [], [], false, false, false, false, [], true, 6, 0, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, false], ["RepositoryFileSystemInUse", "Lim.GitListener.RepositoryFileSystemInUse", [], ["Lim.GitListener.IRepositoryFileSystemInUse"], "src/Lim.GitListener/Utils/RepositoryFileSystemInUse.cs", 9, 0, {"_logger": "???.ILogger<RepositoryFileSystemInUse>", "_stripedAsyncLock": "???.StripedAsyncLock<Repository>"}, ["_logger", "_stripedAsyncLock"], ["RepositoryFileSystemInUse", "UseRepositoryFileSystem"], ["System", "System.Threading.Tasks", "AsyncUtilities", "Lim.Common.DotNET", "Microsoft.Extensions.Logging"], false, false, [], false, false, [], {"_logger": [], "_stripedAsyncLock": []}, [], 0, false, false, false, 2, 1.0, [], 110.0, 110, 0.0, 100.0, 1, 0, false, false, false, true, "public", false, [], ["_logger.LogDebug", "_stripedAsyncLock.LockAsync"], false, false, false, false, ["Going to mark repository {repository} as in use by fs"], false, 0, 0, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, false], ["ThrottledDedupExecute", "Lim.GitListener.ThrottledDedupExecute<TKey, TValue>", [], [], "src/Lim.GitListener/Utils/ThrottledDedupExecute.cs", 8, 0, {"_dedupExecuteByKey": "System.Collections.Concurrent.ConcurrentDictionary<TKey, DedupExecute<TValue>>", "_lastExecuteByKey": "System.Collections.Concurrent.ConcurrentDictionary<TKey, DateTime>", "_throttleLimit": "System.TimeSpan"}, ["_dedupExecuteByKey", "_lastExecuteByKey", "_throttleLimit"], ["ThrottledDedupExecute", "TryExecuteAsync"], ["System", "System.Collections.Concurrent", "System.Threading.Tasks", "Infrastructure.Dotnet.Common"], false, false, [], false, false, [], {"_dedupExecuteByKey": [], "_lastExecuteByKey": [], "_throttleLimit": []}, [], 0, false, false, false, 2, 1.0, [], 461.5, 461, 0.0, 100.0, 1, 0, false, false, false, false, "public", true, [], ["_dedupExecuteByKey.GetOrAdd(\n                    key,\n                    _ => new DedupExecute<TValue>(\n                        async () =>\n                        {\n                            if (_lastExecuteByKey.TryGetValue(key, out var lastExecuteTimestamp) && DateTime.UtcNow - lastExecuteTimestamp >= _throttleLimit)\n                            {\n                                return valueOnThrottled;\n                            }\n\n                            try\n                            {\n                                return await asyncExecute();\n                            }\n                            finally\n                            {\n                                _lastExecuteByKey[key] = DateTime.UtcNow;\n                            }\n                        }\n                    )\n                )\n                .ExecuteAsync", "_dedupExecuteByKey.GetOrAdd", "_lastExecuteByKey.TryGetValue", "asyncExecute"], false, false, false, false, [], false, 0, 0, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, false], ["AuditLogsStorage", "Lim.Common.DotNET.AuditLogsStorage", [], ["Lim.Common.DotNET.IAuditLogsStorage"], "src/Lim.Common.DotNET/DataStore/AuditLogsStorage.cs", 9, 0, {"_mongoClient": "Lim.Common.DotNET.IMongoClient"}, ["_mongoClient"], ["AuditLogsStorage", "CreateAuditLogPlaceholderAsync", "SetAuditLogResultKeyAsync", "CountAuditLogsForWorkflowByTypeAsync", "GetTriggeredOnKeysForWorkflowsWithResultsAsync"], ["System", "System.Collections.Generic", "System.Linq", "System.Threading.Tasks", "JetBrains.Annotations"], false, false, ["UsedImplicitly"], false, false, [], {"_mongoClient": []}, [], 0, false, false, false, 5, 1.0, [], 253.6, 200, 0.0, 100.0, 1, 0, false, false, false, true, "public", false, ["Lim.Common.DotNET.IMongoClient.UpsertAsync", "Lim.Common.DotNET.IMongoClient.UpdateAsync", "Lim.Common.DotNET.IMongoClient.CountAsync", "Lim.Common.DotNET.IMongoClient.GetAllAsync"], ["(await _mongoClient.GetAllAsync<AuditLog>(\n                    log => log.ActionResultKey != null\n                )).Select(log => log.ActionTriggeredOnKey)\n                .ToHashSet", "(await _mongoClient.GetAllAsync<AuditLog>(\n                    log => log.ActionResultKey != null\n                )).Select"], false, false, false, false, [], false, 0, 0, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, false], ["BaseConfigurationStorage", "Lim.Common.DotNET.BaseConfigurationStorage<TConfiguration>", [], [], "src/Lim.Common.DotNET/DataStore/BaseConfigurationStorage.cs", 11, 0, {"_asyncLock": "???.AsyncLock", "MongoClient": "Lim.Common.DotNET.IMongoClient"}, ["_asyncLock", "MongoClient"], ["BaseConfigurationStorage", "GetAllAsync", "CountAsync", "SyncConfigurationAsync", "DeleteConfigurationAsync"], ["System", "System.Collections.Generic", "System.Linq", "System.Threading.Tasks", "AsyncUtilities", "JetBrains.Annotations", "MongoDB.Driver"], false, false, ["UsedImplicitly"], false, false, [], {"_asyncLock": [], "MongoClient": []}, [], 0, false, false, false, 5, 1.0, [], 296.0, 104, 0.0, 0.0, 1, 0, false, false, false, true, "public", true, ["Lim.Common.DotNET.IMongoClient.GetAllAsync", "Lim.Common.DotNET.IMongoClient.CountAsync", "Lim.Common.DotNET.IMongoClient.ExistsAsync", "Lim.Common.DotNET.IMongoClient.UpsertAsync"], ["_asyncLock.LockAsync", "Guid.NewGuid()\n                    .ToString", "Guid.NewGuid", "(await MongoClient.GetPageAsync(\n                        Builders<TConfiguration>.Sort.Descending(_ => _.OrdinalId),\n                        1,\n                        0\n                    )).FirstOrDefault", "MongoClient.GetPageAsync", "Builders<TConfiguration>.Sort.Descending", "MongoClient.UpdateAsync", "Builders<TConfiguration>.Update\n                    .Set(configuration => configuration.RemovedAt, DateTime.UtcNow)\n                    .SetIfNotEmpty", "Builders<TConfiguration>.Update\n                    .Set"], false, false, false, false, [], false, 0, 0, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, true], ["BaseRulesStorage", "Lim.Common.DotNET.BaseRulesStorage<TRule>", ["???.BaseConfigurationStorage<TRule>"], [], "src/Lim.Common.DotNET/DataStore/BaseRulesStorage.cs", 9, 0, {}, [], ["BaseRulesStorage", "GetRulesAsync", "SyncRuleAsync", "DeleteRuleAsync", "DeleteRulesAsync"], ["System", "System.Collections.Generic", "System.Threading.Tasks", "JetBrains.Annotations", "MongoDB.Driver"], false, false, ["UsedImplicitly"], false, false, [], {}, [], 0, false, false, false, 5, 1.0, [], 75.6, 49, 0.0, 0.0, 1, 0, false, true, false, true, "public", true, ["Lim.Common.DotNET.BaseConfigurationStorage<TRule>.GetAllAsync", "Lim.Common.DotNET.BaseConfigurationStorage<TRule>.SyncConfigurationAsync", "Lim.Common.DotNET.BaseConfigurationStorage<TRule>.DeleteConfigurationAsync"], ["MongoClient.UpdateManyAsync", "ruleKeys.Contains", "Builders<TRule>.Update\n                    .Set"], false, false, false, false, [], false, 0, 0, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, true], ["CommitsStorage", "Lim.Common.DotNET.CommitsStorage", [], ["Lim.Common.DotNET.ICommitsStorage"], "src/Lim.Common.DotNET/DataStore/CommitsStorage.cs", 13, 0, {"ForwardPendingCommitExpression": "System.Linq.Expressions.Expression<Func<Commit, bool>>", "_cacheParentShaBySourceAndCodeTarget": "???.IAsyncCache<(string, CodeParsingTarget), string>", "_developerIdentityStorage": "Lim.Common.DotNET.IDeveloperIdentityStorage", "_developerRepositoryProfilesStorage": "Lim.Common.DotNET.IDeveloperRepositoryProfilesStorage", "_mongoClient": "Lim.Common.DotNET.IMongoClient", "_projectsStorage": "Lim.Common.DotNET.IProjectsStorage", "_repositoriesStorage": "Lim.Common.DotNET.IRepositoriesStorage", "_customAssetCollectionConfigurationStorage": "Lim.Common.DotNET.ICustomAssetCollectionConfigurationStorage", "Recently": "System.TimeSpan"}, ["_cacheParentShaBySourceAndCodeTarget", "_developerIdentityStorage", "_developerRepositoryProfilesStorage", "_mongoClient", "_projectsStorage", "_repositoriesStorage", "_customAssetCollectionConfigurationStorage", "Recently", "LatestFirst", "ContextFields", "PropertyFieldsInclusions", "ExportFieldsInclusions", "MaterialChangesFieldsInclusions", "ExcludeDeleted"], ["CommitsStorage", "LatestFirst", "ContextFields", "PropertyFieldsInclusions", "ExportFieldsInclusions", "MaterialChangesFieldsInclusions", "ExcludeDeleted", "SyncCommitAsync", "SyncCommitInsightsAsync", "GetCommitsToExportAsync", "GetCommitsWithNonPendingParentShaAsync", "GetCommitsToForwardAsync", "GetLatestFeaturesExtractedCommitShaAsync", "GetCommitFieldAsync", "SetCommitFieldAsync", "GetPropertiesAsync", "SetPropertiesAsync", "GetLatestRepositoryCommitAsync", "GetLatestPropertiesAsync", "SetStateAsync", "GetCommitGraph", "GetMaterialChangeGraph", "RecentMaterialChangeCountByRepository", "LowerMaterialChangesAsync", "HandleDeletedCommitsAsync", "GetDiffReadyCommitsAsync", "IsCommitInAnyRepository", "GetFullCommitAsync", "GetCommitContextAsync", "GetRepositoryMaterialChangesFilterOptionsAsync", "GetModuleMaterialChangesFilterOptionsAsync", "GetDeveloperMaterialChangesFilterOptionsAsync", "GetProjectMaterialChangesFilterOptionsAsync", "GetCustomAssetCollectionMaterialChangesFilterOptionsAsync", "GetRepositoriesMaterialChangesFilterOptionsAsync", "GetMaterialChangesFilterOptionsAsync", "GetMaterialChangesAsync", "GetMaterialChangesLabelsAsync", "GetDeveloperMaterialChangesAsync", "GetDeveloperMaterialChangesLabelsAsync", "GetRepositoryMaterialChangesAsync", "GetRepositoryMaterialChangesLabelsAsync", "GetModuleMaterialChangesAsync", "GetProjectMaterialChangesAsync", "GetCustomAssetCollectionMaterialChangesAsync", "GetRepositoriesMaterialChangesAsync", "GetRepositoriesMaterialChangesLabelsAsync", "GetCommitsForWorkflowsAsync", "GetFirstCommitWithFeatures", "GetFirstCommitWithFeaturesPerParsingTarget"], ["System", "System.Collections.Generic", "System.Linq", "System.Linq.Expressions", "System.Threading.Tasks", "Infrastructure.Dotnet.Common", "JetBrains.Annotations", "MongoDB.Bson", "MongoDB.Driver"], false, false, ["UsedImplicitly"], false, false, [], {"ForwardPendingCommitExpression": [], "_cacheParentShaBySourceAndCodeTarget": [], "_developerIdentityStorage": [], "_developerRepositoryProfilesStorage": [], "_mongoClient": [], "_projectsStorage": [], "_repositoriesStorage": [], "_customAssetCollectionConfigurationStorage": [], "Recently": []}, [], 6, false, false, false, 45, 0.8823529411764706, [], 414.47058823529414, 303, 13.72549019607843, 76.47058823529412, 1, 0, false, false, false, true, "public", false, ["Lim.Common.DotNET.MongoExtensions.GetFieldDefinitions", "Lim.Common.DotNET.IMongoClient.GetAllIncludeFieldsAsync", "Lim.Common.DotNET.IMongoClient.FindDistinctAsync", "Lim.Common.DotNET.IMongoClient.GetScalarAsync", "Lim.Common.DotNET.IMongoClient.UpdateAsync", "Lim.Common.DotNET.IMongoClient.GetIncludeFieldsAsync", "Lim.Common.DotNET.IMongoClient.GetPageAsync", "Lim.Common.DotNET.IMongoClient.UpdateManyAsync", "Lim.Common.DotNET.IMongoClient.GetAsync", "Lim.Common.DotNET.NestedKeyStringSerializer.SerializeString", "Lim.Common.DotNET.IDeveloperIdentityStorage.GetDeveloperIdentitiesByDeveloperKeyAsync", "Lim.Common.DotNET.IProjectsStorage.GetProjectAsync", "Lim.Common.DotNET.IRepositoriesStorage.GetRepositoryKeysAssociatedWithProjectAsync", "Lim.Common.DotNET.ICustomAssetCollectionConfigurationStorage.GetCustomAssetCollectionConfigurationAsync", "Lim.Common.DotNET.ICommitContext.GetState", "Lim.Common.DotNET.Revisions.TargetFeaturesRevision"], ["Builders<Commit>.Sort.Descending", "Builders<Commit>.Filter.Where", "_mongoClient.UpsertAsync", "Builders<Commit>.Update\n                    .AddToSetEach(\n                        existingCommit => existingCommit.RepositoryKeys,\n                        commit.RepositoryKeys\n                    )\n                    .AddToSetEach(\n                        existingCommit => existingCommit.ReleaseKeys,\n                        commit.ReleaseKeys\n                    )\n                    .Set(existingCommit => existingCommit.ParentSha, commit.ParentSha)\n                    .Set(existingCommit => existingCommit.Languages, commit.Languages)\n                    .Max(\n                        existingCommit => existingCommit.IsMainBranchCommit,\n                        commit.IsMainBranchCommit\n                    )\n                    .Set(existingCommit => existingCommit.DiffRevision, 0)\n                    .Set(existingCommit => existingCommit.CommitterIdentityKey, commit.CommitterIdentityKey)\n                    .Set", "Builders<Commit>.Update\n                    .AddToSetEach(\n                        existingCommit => existingCommit.RepositoryKeys,\n                        commit.RepositoryKeys\n                    )\n                    .AddToSetEach(\n                        existingCommit => existingCommit.ReleaseKeys,\n                        commit.ReleaseKeys\n                    )\n                    .Set(existingCommit => existingCommit.ParentSha, commit.ParentSha)\n                    .Set(existingCommit => existingCommit.Languages, commit.Languages)\n                    .Max(\n                        existingCommit => existingCommit.IsMainBranchCommit,\n                        commit.IsMainBranchCommit\n                    )\n                    .Set(existingCommit => existingCommit.DiffRevision, 0)\n                    .Set", "Builders<Commit>.Update\n                    .AddToSetEach(\n                        existingCommit => existingCommit.RepositoryKeys,\n                        commit.RepositoryKeys\n                    )\n                    .AddToSetEach(\n                        existingCommit => existingCommit.ReleaseKeys,\n                        commit.ReleaseKeys\n                    )\n                    .Set(existingCommit => existingCommit.ParentSha, commit.ParentSha)\n                    .Set(existingCommit => existingCommit.Languages, commit.Languages)\n                    .Max(\n                        existingCommit => existingCommit.IsMainBranchCommit,\n                        commit.IsMainBranchCommit\n                    )\n                    .Set", "Builders<Commit>.Update\n                    .AddToSetEach(\n                        existingCommit => existingCommit.RepositoryKeys,\n                        commit.RepositoryKeys\n                    )\n                    .AddToSetEach(\n                        existingCommit => existingCommit.ReleaseKeys,\n                        commit.ReleaseKeys\n                    )\n                    .Set(existingCommit => existingCommit.ParentSha, commit.ParentSha)\n                    .Set(existingCommit => existingCommit.Languages, commit.Languages)\n                    .Max", "Builders<Commit>.Update\n                    .AddToSetEach(\n                        existingCommit => existingCommit.RepositoryKeys,\n                        commit.RepositoryKeys\n                    )\n                    .AddToSetEach(\n                        existingCommit => existingCommit.ReleaseKeys,\n                        commit.ReleaseKeys\n                    )\n                    .Set(existingCommit => existingCommit.ParentSha, commit.ParentSha)\n                    .Set", "Builders<Commit>.Update\n                    .AddToSetEach(\n                        existingCommit => existingCommit.RepositoryKeys,\n                        commit.RepositoryKeys\n                    )\n                    .AddToSetEach(\n                        existingCommit => existingCommit.ReleaseKeys,\n                        commit.ReleaseKeys\n                    )\n                    .Set", "Builders<Commit>.Update\n                    .AddToSetEach(\n                        existingCommit => existingCommit.RepositoryKeys,\n                        commit.RepositoryKeys\n                    )\n                    .AddToSetEach", "Builders<Commit>.Update\n                    .AddToSetEach", "commit.RepositoryKeys.ForEachAsync", "_developerRepositoryProfilesStorage.SyncDeveloperRepositoryProfileAsync", "_mongoClient.UpdateAsync", "Builders<Commit>.Update\n                    .Set(_ => _.SecurityExpertise, commitInsights.SecurityExpertise)\n                    .Set(\n                        _ => _.MaterialChangesGovernanceRuleKeys,\n                        commitInsights.MaterialChanges.Select(_ => _.GovernanceRuleKey)\n                            .ToHashSet()\n                    )\n                    .Set(_ => _.MaterialChangesCount, commitInsights.MaterialChanges.Count)\n                    .Set(_ => _.MaterialChangesRiskLevel, commitInsights.CombinedRiskLevel)\n                    .Set(_ => _.MaterialChangesLabelsToCount, commitInsights.MaterialChangesLabelsToCount)\n                    .Set(_ => _.MaterialChangesLabels, commitInsights.MaterialChangesLabelsToCount.Keys.ToHashSet())\n                    .Set(_ => _.ModuleKeysWithMaterialChange, commitInsights.ModuleKeysWithMaterialChange)\n                    .Set", "Builders<Commit>.Update\n                    .Set(_ => _.SecurityExpertise, commitInsights.SecurityExpertise)\n                    .Set(\n                        _ => _.MaterialChangesGovernanceRuleKeys,\n                        commitInsights.MaterialChanges.Select(_ => _.GovernanceRuleKey)\n                            .ToHashSet()\n                    )\n                    .Set(_ => _.MaterialChangesCount, commitInsights.MaterialChanges.Count)\n                    .Set(_ => _.MaterialChangesRiskLevel, commitInsights.CombinedRiskLevel)\n                    .Set(_ => _.MaterialChangesLabelsToCount, commitInsights.MaterialChangesLabelsToCount)\n                    .Set(_ => _.MaterialChangesLabels, commitInsights.MaterialChangesLabelsToCount.Keys.ToHashSet())\n                    .Set", "Builders<Commit>.Update\n                    .Set(_ => _.SecurityExpertise, commitInsights.SecurityExpertise)\n                    .Set(\n                        _ => _.MaterialChangesGovernanceRuleKeys,\n                        commitInsights.MaterialChanges.Select(_ => _.GovernanceRuleKey)\n                            .ToHashSet()\n                    )\n                    .Set(_ => _.MaterialChangesCount, commitInsights.MaterialChanges.Count)\n                    .Set(_ => _.MaterialChangesRiskLevel, commitInsights.CombinedRiskLevel)\n                    .Set(_ => _.MaterialChangesLabelsToCount, commitInsights.MaterialChangesLabelsToCount)\n                    .Set", "Builders<Commit>.Update\n                    .Set(_ => _.SecurityExpertise, commitInsights.SecurityExpertise)\n                    .Set(\n                        _ => _.MaterialChangesGovernanceRuleKeys,\n                        commitInsights.MaterialChanges.Select(_ => _.GovernanceRuleKey)\n                            .ToHashSet()\n                    )\n                    .Set(_ => _.MaterialChangesCount, commitInsights.MaterialChanges.Count)\n                    .Set(_ => _.MaterialChangesRiskLevel, commitInsights.CombinedRiskLevel)\n                    .Set", "Builders<Commit>.Update\n                    .Set(_ => _.SecurityExpertise, commitInsights.SecurityExpertise)\n                    .Set(\n                        _ => _.MaterialChangesGovernanceRuleKeys,\n                        commitInsights.MaterialChanges.Select(_ => _.GovernanceRuleKey)\n                            .ToHashSet()\n                    )\n                    .Set(_ => _.MaterialChangesCount, commitInsights.MaterialChanges.Count)\n                    .Set", "Builders<Commit>.Update\n                    .Set(_ => _.SecurityExpertise, commitInsights.SecurityExpertise)\n                    .Set(\n                        _ => _.MaterialChangesGovernanceRuleKeys,\n                        commitInsights.MaterialChanges.Select(_ => _.GovernanceRuleKey)\n                            .ToHashSet()\n                    )\n                    .Set", "Builders<Commit>.Update\n                    .Set(_ => _.SecurityExpertise, commitInsights.SecurityExpertise)\n                    .Set", "Builders<Commit>.Update\n                    .Set", "commitInsights.MaterialChanges.Select(_ => _.GovernanceRuleKey)\n                            .ToHashSet", "commitInsights.MaterialChanges.Select", "commitInsights.MaterialChangesLabelsToCount.Keys.ToHashSet", "commitContext.RepositoryKeys.ForEachAsync", "_mongoClient.GetAllIncludeFieldsAsync", "Builders<Commit>.Filter.In", "commit.RepositoryKeys.Contains", "_mongoClient.GetPageAsync", "Builders<Commit>.Sort.Descending(_ => _.IsMainBranchCommit)\n                    .Combine", "Builders<Commit>.Filter.AnyIn", "nameof", "Builders<Commit>.Update\n                    .Set(commit => commit.Dependencies, commitProperties.Dependencies)\n                    .Set(commit => commit.ExposedSecrets, commitProperties.ExposedSecrets)\n                    .Set(commit => commit.ComponentsNonCodeIndications, commitProperties.ComponentsNonCodeIndications)\n                    .Set(commit => commit.Modules, commitProperties.Modules)\n                    .Set", "Builders<Commit>.Update\n                    .Set(commit => commit.Dependencies, commitProperties.Dependencies)\n                    .Set(commit => commit.ExposedSecrets, commitProperties.ExposedSecrets)\n                    .Set(commit => commit.ComponentsNonCodeIndications, commitProperties.ComponentsNonCodeIndications)\n                    .Set", "Builders<Commit>.Update\n                    .Set(commit => commit.Dependencies, commitProperties.Dependencies)\n                    .Set(commit => commit.ExposedSecrets, commitProperties.ExposedSecrets)\n                    .Set", "Builders<Commit>.Update\n                    .Set(commit => commit.Dependencies, commitProperties.Dependencies)\n                    .Set", "(await _mongoClient.GetPageAsync(\n                LatestFirst,\n                1,\n                commit =>\n                    !commit.Deleted &&\n                    commit.IsMainBranchCommit &&\n                    commit.RepositoryKeys.Contains(repositoryKey) &&\n                    commit.PropertiesState.ExtractionRevision > 0,\n                ContextFields\n            )).FirstOrDefault", "(await _mongoClient.GetPageAsync(\n                LatestFirst,\n                1,\n                commit => !commit.Deleted && commit.RepositoryKeys.Contains(repositoryKey) && commit.PropertiesState.ExtractionRevision > 0,\n                PropertyFieldsInclusions\n            )).FirstOrDefault", "Builders<Commit>.Update\n                    .Set(commit => commit.PropertiesState, commitContext.PropertiesState)\n                    .Set(commit => commit.JavaState, commitContext.JavaState)\n                    .Set(commit => commit.NodeState, commitContext.NodeState)\n                    .Set", "Builders<Commit>.Update\n                    .Set(commit => commit.PropertiesState, commitContext.PropertiesState)\n                    .Set(commit => commit.JavaState, commitContext.JavaState)\n                    .Set", "Builders<Commit>.Update\n                    .Set(commit => commit.PropertiesState, commitContext.PropertiesState)\n                    .Set", "_mongoClient.CountByIsoWeekAndSumAsync", "(await _mongoClient.GroupAndCountAsync(\n                    new BsonDocument {{\"RepositoryKey\", $\"${nameof(Commit.RepositoryKeys)}\"}},\n                    document => document[\"_id\"][\"RepositoryKey\"]\n                        .AsString,\n                    where: ExcludeDeleted &\n                           Builders<Commit>.Filter.Gt(commit => commit.Timestamp, DateTime.UtcNow.Subtract((30).Days())),\n                    pipelineBuilder: aggregate => aggregate.Unwind<Commit>(nameof(Commit.RepositoryKeys)),\n                    sumFieldName: nameof(Commit.MaterialChangesCount)\n                ))\n                .ToDictionary", "_mongoClient.GroupAndCountAsync", "Builders<Commit>.Filter.Gt", "DateTime.UtcNow.Subtract", "TimeSpan.FromDays", "aggregate.Unwind<Commit>", "Builders<Commit>.Update.Dec", "deletedCommitsShas.Contains", "GetMaterialChangesFilterOptionsAsync", "developerIdentities.Select(_ => _.Key)\n                        .ToList", "developerIdentities.Select", "repositoryKeys.None", "commit.RepositoryKeys.Any", "repositoryKeys.Contains", "_mongoClient.GroupAndCountAsync<Commit, string>", "aggregate\n                    .Match(ExcludeDeleted & filter)\n                    .AppendIfNotNull(additionalStage)\n                    .AppendStage<Commit>(\n                        new BsonDocument(\n                            \"$addFields\",\n                            new BsonDocument(\n                                \"MaterialChangesLabel\",\n                                new BsonDocument(\"$objectToArray\", $\"${nameof(Commit.MaterialChangesLabelsToCount)}\")\n                            )\n                        )\n                    )\n                    .Unwind<Commit>", "aggregate\n                    .Match(ExcludeDeleted & filter)\n                    .AppendIfNotNull(additionalStage)\n                    .AppendStage<Commit>", "aggregate\n                    .Match(ExcludeDeleted & filter)\n                    .AppendIfNotNull", "aggregate\n                    .Match", "groupAndCountAsync\n                .ToDictionary", "NestedKeyStringSerializer.DeserializeString", "_mongoClient.GetCollectionAggregate<Commit>", "aggregate\n                    .ApplyFilters(tableFilterToValue)\n                    .Match(where & ExcludeDeleted)\n                    .Project<Commit>(Builders<Commit>.Projection.IncludeAll(MaterialChangesFieldsInclusions))\n                    .ToPage", "aggregate\n                    .ApplyFilters(tableFilterToValue)\n                    .Match(where & ExcludeDeleted)\n                    .Project<Commit>", "aggregate\n                    .ApplyFilters(tableFilterToValue)\n                    .Match", "aggregate\n                    .ApplyFilters", "Builders<Commit>.Projection.IncludeAll", "(await _mongoClient.GetAllAsync(\n                    (where & ExcludeDeleted),\n                    new FindOptions<Commit> {Projection = Builders<Commit>.Projection.Include(nameof(Commit.MaterialChangesLabels))}\n                )).SelectMany(commit => commit.MaterialChangesLabels)\n                .ToHashSet", "(await _mongoClient.GetAllAsync(\n                    (where & ExcludeDeleted),\n                    new FindOptions<Commit> {Projection = Builders<Commit>.Projection.Include(nameof(Commit.MaterialChangesLabels))}\n                )).SelectMany", "_mongoClient.GetAllAsync", "Builders<Commit>.Projection.Include", "(await _developerIdentityStorage.GetDeveloperIdentitiesByDeveloperKeyAsync(developerKey))\n                .Select(_ => _.Key)\n                .ToList", "(await _developerIdentityStorage.GetDeveloperIdentitiesByDeveloperKeyAsync(developerKey))\n                .Select", "developerIdentitiesKeys.Contains", "commit.ModuleKeysWithMaterialChange.Contains", "Array.Empty<ICommitMaterialChanges>", ".GetValueOrDefault", "string.IsNullOrEmpty", "parsingTargetToCommitSha.ContainsKey", "_cacheParentShaBySourceAndCodeTarget.TryGetAsync", "parsingTargetToCommitSha.Add", "_cacheParentShaBySourceAndCodeTarget.PutAsync", "codeParsingTargets\n                    .All", "cacheBuilder", "TimeSpan.FromHours"], false, false, false, false, ["RepositoryKey", "_id", "$addFields", "MaterialChangesLabelsToCount", "MaterialChangesLabel", "$MaterialChangesLabel.k", "$objectToArray", "MaterialChangesLabel.v"], false, 6, 0, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, true], ["ApiClassificationStorage", "Lim.Common.DotNET.ApiClassificationStorage", ["???.BaseRulesStorage<ApiClassificationDefinition>"], ["Lim.Common.DotNET.IApiClassificationStorage"], "src/Lim.Common.DotNET/DataStore/Configuration/ApiClassificationStorage.cs", 6, 0, {}, [], ["ApiClassificationStorage", "GetAllAsync", "SyncApiClassificationDefinitionAsync", "DeleteApiClassificationDefinitionAsync", "DeleteApiClassificationDefinitionsAsync", "CountAllAsync", "GetApiClassificationDefinitionAsync"], ["System.Collections.Generic", "System.Threading.Tasks"], false, false, [], false, false, [], {}, [], 0, false, false, false, 7, 1.0, [], 47.857142857142854, 47, 0.0, 100.0, 1, 0, false, false, false, true, "public", false, ["Lim.Common.DotNET.BaseRulesStorage<Lim.Common.DotNET.ApiClassificationDefinition>.GetRulesAsync", "Lim.Common.DotNET.BaseRulesStorage<Lim.Common.DotNET.ApiClassificationDefinition>.SyncRuleAsync", "Lim.Common.DotNET.BaseRulesStorage<Lim.Common.DotNET.ApiClassificationDefinition>.DeleteRuleAsync", "Lim.Common.DotNET.BaseRulesStorage<Lim.Common.DotNET.ApiClassificationDefinition>.DeleteRulesAsync", "Lim.Common.DotNET.BaseConfigurationStorage<Lim.Common.DotNET.ApiClassificationDefinition>.CountAsync", "Lim.Common.DotNET.IMongoClient.GetAsync"], [], false, false, false, false, [], false, 0, 0, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, false], ["ConfigurationStorage", "Lim.Common.DotNET.ConfigurationStorage", [], ["Lim.Common.DotNET.IConfigurationStorage"], "src/Lim.Common.DotNET/DataStore/ConfigurationStorage.cs", 8, 0, {"_mongoClient": "Lim.Common.DotNET.IMongoClient"}, ["_mongoClient"], ["ConfigurationStorage", "SyncConfigurationFieldAsync", "GetConfigurationAsync"], ["System", "System.Linq.Expressions", "System.Threading.Tasks", "JetBrains.Annotations"], false, false, ["UsedImplicitly"], false, false, [], {"_mongoClient": []}, [], 0, false, false, false, 3, 1.0, [], 110.33333333333333, 108, 0.0, 100.0, 1, 0, false, false, false, true, "public", false, ["Lim.Common.DotNET.IMongoClient.UpsertAsync", "Lim.Common.DotNET.IMongoClient.GetAsync"], [], false, false, false, false, [], false, 0, 0, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, false], ["ConsumableProfilesStorage", "Lim.Common.DotNET.ConsumableProfilesStorage<TProfile, TConsumable>", ["???.EntityProfilesStorage<TProfile, TConsumable>"], ["???.IConsumableProfilesStorage<TProfile, TConsumable>"], "src/Lim.Common.DotNET/DataStore/ConsumableProfilesStorage.cs", 11, 0, {"SortOptions": "System.Collections.Generic.Dictionary<TableSortOption, IReadOnlyCollection<ConsumableSortOption>>", "DefaultSecondarySort": "System.Collections.Generic.IReadOnlyCollection<TableSortOption>", "_consumablesStorage": "???.IConsumablesStorage<TConsumable>"}, ["_consumablesStorage", "IsRisky", "SortOrder"], ["ConsumableProfilesStorage", "IsRisky", "SortOrder", "GetRiskyProfilesAsync", "DeleteServerProfilesAsync", "CountRiskyProfilesByLevelAsync", "CountActiveConsumableProfilesAsync", "GetSortOrderOrDefault", "BuildEmptyProfile", "BuildEmptyProfileAsync", "EnrichProfiles"], ["System", "System.Collections.Generic", "System.Linq", "System.Linq.Expressions", "System.Threading.Tasks", "MongoDB.Bson", "MongoDB.Driver"], false, false, [], false, false, [], {"SortOptions": [], "DefaultSecondarySort": [], "_consumablesStorage": []}, [], 2, false, false, false, 9, 0.8181818181818182, [], 156.0, 83, 9.090909090909092, 36.36363636363637, 1, 0, false, true, false, true, "public", true, ["Lim.Common.DotNET.ProfilesStorage<TProfile>.GetProfilesAsync", "Lim.Common.DotNET.EntityProfilesStorage<TProfile, TConsumable>.DeleteProfilesAsync", "Lim.Common.DotNET.IMongoClient.GroupAndCountAsync", "Lim.Common.DotNET.IMongoClient.CountAsync", "Lim.Common.DotNET.ProfilesStorage<TProfile>.GetSortOrderOrDefault", "Lim.Common.DotNET.IConsumablesStorage<TConsumable>.GetConsumableAsync", "Lim.Common.DotNET.MongoExtensions.LookupAndUnwind", "Lim.Common.DotNET.EntityProfilesStorage<TProfile, TConsumable>.EnrichProfiles"], ["Builders<TProfile>.Sort\n            .Descending(profile => profile.Risk.CombinedRiskLevelNumeric)\n            .Descending(profile => profile.Risk.CombinedRiskScore)\n            .Ascending", "Builders<TProfile>.Sort\n            .Descending(profile => profile.Risk.CombinedRiskLevelNumeric)\n            .Descending", "Builders<TProfile>.Sort\n            .Descending", "Builders<TProfile>.Filter.In", "nameof", "(await MongoClient.GroupAndCountAsync<TProfile, RiskLevel>(\n                    groupBy,\n                    document => (RiskLevel) document[\"_id\"][valueTemporaryFieldName]\n                        .AsInt32\n                ))\n                .ToDictionary"], false, false, false, false, ["Risk.CombinedRiskLevelNumeric", "Risk.CombinedRiskScore", "NameLower", "RecentMaterialChangeCount", "ActiveDevelopersCount", "LastActivity", "value", "_id"], false, 2, 0, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, true], ["ConsumablesStorage", "Lim.Common.DotNET.ConsumablesStorage<TConsumable>", [], ["???.IConsumablesStorage<TConsumable>"], "src/Lim.Common.DotNET/DataStore/ConsumablesStorage.cs", 11, 0, {"_lookupNotRemovedServers": "???.BsonDocument", "_sortOrder": "???.SortDefinition<TConsumable>", "MongoClient": "Lim.Common.DotNET.IMongoClient"}, ["_lookupNotRemovedServers", "_sortOrder", "MongoClient"], ["ConsumablesStorage", "GetConsumableAsync", "SyncConsumableAsync", "SetFieldAsync", "SetAllIsMonitoredAsync", "GetAllAsync", "GetAllForServerAsync", "GetPageAsync", "GetPageWithCountAsync", "DeleteConsumableAsync", "DisableConsumableAsync", "GetFilterOptionsAsync", "SyncUpdateDefinition", "GetAsync", "ApplyBaseEnrichAndFilter", "GetKeysByServerUrlAsync", "GetMonitoredKeysByServerUrlAsync"], ["System", "System.Collections.Generic", "System.Linq", "System.Linq.Expressions", "System.Threading.Tasks", "MongoDB.Bson", "MongoDB.Driver"], false, false, [], false, false, [], {"_lookupNotRemovedServers": [], "_sortOrder": [], "MongoClient": []}, [], 0, false, false, false, 20, 1.0, [], 180.2, 189, 0.0, 60.0, 1, 0, false, true, false, true, "public", true, ["Lim.Common.DotNET.MongoExtensions.IdFilter", "Lim.Common.DotNET.IMongoClient.UpsertAsync", "Lim.Common.DotNET.IMongoClient.UpdateAsync", "Lim.Common.DotNET.IMongoClient.UpdateManyAsync", "Lim.Common.DotNET.IMongoClient.GetCollectionAggregate", "Lim.Common.DotNET.IMongoClient.GetCollectionAggregateWithCount", "Lim.Common.DotNET.IMongoClient.FindDistinctAsync", "Lim.Common.DotNET.IMongoClient.AllKeysAsync"], ["(await GetAsync(consumableKey.IdFilter<TConsumable>())).SingleOrDefault", "SyncUpdateDefinition", "GetAsync", "Builders<TConsumable>.Filter.In", "ApplyBaseEnrichAndFilter(aggregate)\n                    .ApplyFilters(tableFilterToValue, tableFilterOperator)\n                    .ToPage", "ApplyBaseEnrichAndFilter(aggregate)\n                    .ApplyFilters", "DisableConsumableAsync", "Builders<TConsumable>.Update\n                    .Set", "Builders<TConsumable>.Update.Combine", "ApplyBaseEnrichAndFilter(aggregate)\n                        .ApplyFiltersAndProject", "updateDefinitionBuilder\n                .Set(_ => _.Id, consumable.Id)\n                .Set(_ => _.Name, consumable.Name)\n                .Set(_ => _.NameLower, consumable.NameLower)\n                .Set(_ => _.Url, consumable.Url)\n                .Set", "updateDefinitionBuilder\n                .Set(_ => _.Id, consumable.Id)\n                .Set(_ => _.Name, consumable.Name)\n                .Set(_ => _.NameLower, consumable.NameLower)\n                .Set", "updateDefinitionBuilder\n                .Set(_ => _.Id, consumable.Id)\n                .Set(_ => _.Name, consumable.Name)\n                .Set", "updateDefinitionBuilder\n                .Set(_ => _.Id, consumable.Id)\n                .Set", "updateDefinitionBuilder\n                .Set", "MongoClient.UpdateAsync", "updateDefinitionBuilder\n                    .Set(_ => _.IsRelevant, false)\n                    .Set", "updateDefinitionBuilder\n                    .Set", "aggregation\n                .AppendStage<BsonDocument>(_lookupNotRemovedServers)\n                .Unwind<TConsumable>(nameof(BaseConsumableEntity.Server))\n                .Match", "aggregation\n                .AppendStage<BsonDocument>(_lookupNotRemovedServers)\n                .Unwind<TConsumable>", "aggregation\n                .AppendStage<BsonDocument>", "nameof", "ApplyBaseEnrichAndFilter(aggregate)\n                        .MatchIfNotNull", "BsonDocument.Parse", "Builders<TConsumable>.Sort\n            .Descending(consumable => consumable.IsMonitored)\n            .Descending(consumable => consumable.IsRelevant)\n            .Descending(consumable => consumable.EstimatedInterestScore)\n            .Ascending", "Builders<TConsumable>.Sort\n            .Descending(consumable => consumable.IsMonitored)\n            .Descending(consumable => consumable.IsRelevant)\n            .Descending", "Builders<TConsumable>.Sort\n            .Descending(consumable => consumable.IsMonitored)\n            .Descending", "Builders<TConsumable>.Sort\n            .Descending"], false, false, false, false, ["{\"$lookup\":\n{\n    \"from\": \"servers\",\n    \"let\": {\"server_url\": \"$ServerUrl\"},\n    \"pipeline\": [\n        {\"$match\":\n            {\"$expr\":\n                {\"$and\": [\n                    {\"$eq\": [\"$_id\", \"$$server_url\"]},\n                    {\"$eq\": [\"$Removed\", false]}\n                ]}\n            }\n        }\n    ],\n    \"as\": \"Server\"\n}}"], false, 0, 0, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, true], ["AggregationResult", "Lim.Common.DotNET.AggregationResult<TResultEntity>", [], [], "src/Lim.Common.DotNET/DataStore/Core/AggregationResult.cs", 5, 0, {}, ["Items", "Count"], ["AggregationResult", "Items", "Count"], ["System.Collections.Generic"], false, false, [], false, false, [], {}, [], 2, false, false, false, 1, 0.3333333333333333, [], 24.666666666666668, 0, 0.0, 100.0, 1, 0, false, false, false, false, "public", true, [], [], false, false, false, false, [], false, 2, 0, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, false], ["Execute", "Lim.Common.DotNET.Execute", [], [], "src/Lim.Common.DotNET/DataStore/Core/Execute.cs", 9, 0, {"RetryCount": "int", "Policy": "???.PolicyBuilder", "RetryPolicy": "???.RetryPolicy", "AsyncRetryPolicy": "???.AsyncRetryPolicy"}, [], ["WithRetry", "WithRetryAsync"], ["System", "System.Threading.Tasks", "MongoDB.Driver", "Polly", "Polly.Retry"], false, false, [], false, false, [], {"RetryCount": [], "Policy": [], "RetryPolicy": [], "AsyncRetryPolicy": []}, [], 0, false, false, false, 3, 1.0, [], 48.666666666666664, 52, 100.0, 100.0, 0, 0, false, false, true, true, "public", false, [], ["RetryPolicy.Execute", "AsyncRetryPolicy.ExecuteAsync", "Polly.Policy.Handle<TimeoutException>()\n                .Or<MongoConnectionException>()\n                .Or<MongoWaitQueueFullException>()\n                .Or<MongoNodeIsRecoveringException>()\n                .Or<MongoWriteException>(exception => exception.IsDuplicateKeyError())\n                .Or<MongoCommandException>", "Polly.Policy.Handle<TimeoutException>()\n                .Or<MongoConnectionException>()\n                .Or<MongoWaitQueueFullException>()\n                .Or<MongoNodeIsRecoveringException>()\n                .Or<MongoWriteException>", "Polly.Policy.Handle<TimeoutException>()\n                .Or<MongoConnectionException>()\n                .Or<MongoWaitQueueFullException>()\n                .Or<MongoNodeIsRecoveringException>", "Polly.Policy.Handle<TimeoutException>()\n                .Or<MongoConnectionException>()\n                .Or<MongoWaitQueueFullException>", "Polly.Policy.Handle<TimeoutException>()\n                .Or<MongoConnectionException>", "Polly.Policy.Handle<TimeoutException>", "exception.IsDuplicateKeyError", "exception.Message.Contains", "Policy.Retry", "Policy.RetryAsync"], false, false, false, false, ["cursor", "not found"], false, 0, 0, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, true], ["FilterableExtensions", "Lim.Common.DotNET.FilterableExtensions", [], [], "src/Lim.Common.DotNET/DataStore/Core/FilterableExtensions.cs", 11, 0, {"JoinedIntermediateProperty": "string"}, [], ["ApplyFiltersAndProject", "ApplyFilters", "ApplyFiltersAndFindFilteredFieldName", "GetUpdatedFilterDefinition", "LookupAndUnwind", "IsFilterOnCollectionProperty", "ToFilterDefinition", "ToBooleanFilterDefinition", "GetFilteredFieldName", "CaseInsensitiveContainsFilter", "CaseInsensitiveCollectionContainsFilter", "CaseInsensitiveCollectionMultipleFiltersOrSubString", "CaseSensitiveCollectionMultipleFiltersAndExactMatch", "CaseSensitiveMultipleFiltersOrExactMatch", "CaseInsensitiveCollectionMultipleFiltersGetFiltersSubString", "CaseSensitiveCollectionMultipleFiltersGetFiltersExactMatch", "CaseSensitiveMultipleFiltersGetFiltersExactMatch", "ToBsonRegex"], ["System", "System.Collections.Generic", "System.Linq", "System.Text.RegularExpressions", "JetBrains.Annotations", "MongoDB.Bson", "MongoDB.Driver"], false, false, [], false, false, [], {"JoinedIntermediateProperty": []}, [], 0, false, false, false, 19, 1.0, [], 499.94736842105266, 165, 100.0, 15.789473684210526, 0, 0, false, false, true, false, "public", false, ["Lim.Common.DotNET.FilterableMapping.GetTypeForJoin", "Lim.Common.DotNET.FilterableMapping.GetFieldName", "Lim.Common.DotNET.FilterableMapping.AvailableFilters"], ["aggregation.ApplyFiltersAndFindFilteredFieldName", "aggregation.Project<BsonDocument>", "Builders<TEntity>.Projection.Include", "resultAggregation.Unwind", "resultAggregation\n                .Distinct(filteredFieldName)\n                .Sort(Builders<BsonDocument>.Sort.Ascending(\"_id\"))\n                .Limit", "resultAggregation\n                .Distinct(filteredFieldName)\n                .Sort", "resultAggregation\n                .Distinct", "Builders<BsonDocument>.Sort.Ascending", "LookupAndUnwind", "GetUpdatedFilterDefinition", "aggregation.Match", "aggregation.Project<TEntity>", "Builders<TEntity>.Projection.Exclude", "nameof", "aggregation.LookupAndUnwind", "values.First", "bool.TryParse", "Builders<TResult>.Filter.Eq", "string.IsNullOrEmpty", "Builders<TResult>.Filter.Regex", "Builders<TResult>\n                .Filter\n                .Or", "Builders<TResult>\n                .Filter\n                .And", "values.Select", "Builders<TResult>.Filter.AnyEq", "Regex.Escape"], false, false, false, false, ["Joined", "_id", "i"], false, 0, 0, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, true], ["FilterableMapping", "Lim.Common.DotNET.FilterableMapping", [], [], "src/Lim.Common.DotNET/DataStore/Core/FilterableMapping.cs", 9, 0, {"TableFilterToFieldNameByType": "System.Collections.Concurrent.ConcurrentDictionary<Type, Dictionary<TableFilter, string>>", "TableFilterToTargetJoinByType": "System.Collections.Concurrent.ConcurrentDictionary<Type, Dictionary<TableFilter, (Type Type, string JoinPropertyName)>>"}, [], ["GetTypeForJoin", "JoinInfoForType", "GetFieldName", "FieldNamesForType", "AvailableFilters"], ["System", "System.Collections.Concurrent", "System.Collections.Generic", "System.Linq", "Infrastructure.Dotnet.Common"], false, false, [], false, false, [], {"TableFilterToFieldNameByType": [], "TableFilterToTargetJoinByType": []}, [], 0, false, false, false, 6, 1.0, [], 414.0, 152, 100.0, 66.66666666666667, 0, 0, false, false, true, false, "public", false, [], ["JoinInfoForType(typeof(TEntity))\n                .GetValueOrDefault", "TableFilterToTargetJoinByType.GetOrAdd", "type.GetPropertyNamesWithCustomAttributes<FilterableByJoinAttribute>", "tableFilterToJoinType.ContainsKey", "type.GetDisplayName", "FieldNamesForType(typeof(TEntity))\n                .GetValueOrDefault", "FieldNamesForType(type)\n                .GetValueOrDefault", "TableFilterToFieldNameByType.GetOrAdd", "type.GetPropertyNamesWithCustomAttributes<FilterableAttribute>", "tableFilterToFieldName.ContainsKey", "FieldNamesForType(typeof(TEntity))\n                .Keys.Union(\n                    JoinInfoForType(typeof(TEntity))\n                        .Keys\n                )\n                .Distinct", "FieldNamesForType(typeof(TEntity))\n                .Keys.Union"], false, false, false, false, [], false, 0, 0, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, false], ["MongoClient", "Lim.Common.DotNET.MongoClient", [], ["Lim.Common.DotNET.IMongoClientAdvanced"], "src/Lim.Common.DotNET/DataStore/Core/MongoClient.cs", 15, 0, {"Timeout": "System.TimeSpan", "_database": "???.IMongoDatabase", "_databaseName": "string", "_mongoClient": "???.MongoDB.Driver.MongoClient"}, ["_database", "_databaseName", "_mongoClient"], ["MongoClient", "ExistsAsync", "AllKeysAsync", "GetAsync", "GetIncludeFieldsAsync", "GetAllAsync", "GetAllIncludeFieldsAsync", "GetCollectionAggregate", "GetCollectionAggregateWithCount", "FindDistinctAsync", "GetScalarAsync", "GetPageAsync", "CountAsync", "CountByIsoWeekAndSumAsync", "GroupAndCountAsync", "TryInsertAsync", "UpsertAsync", "UpsertManyAsync", "UpdateAsync", "UpdateManyAsync", "TryDeleteAsync", "DeleteManyAsync", "ExecuteRawAsync", "RenameCollectionAsync", "DropCollectionAsync", "IterateAllAsync", "DropIndexAsync", "DropDatabaseAsync"], ["System", "System.Collections.Generic", "System.Linq", "System.Linq.Expressions", "System.Threading.Tasks", "Infrastructure.Dotnet.Common", "Microsoft.Extensions.Configuration", "Microsoft.Extensions.Logging", "MongoDB.Bson", "MongoDB.Driver", "MongoDB.Driver.Core.Events"], false, false, [], false, false, [], {"Timeout": [], "_database": [], "_databaseName": [], "_mongoClient": []}, [], 0, false, false, false, 46, 1.0, [], 380.3695652173913, 255, 0.0, 82.6086956521739, 1, 0, false, false, false, true, "public", false, ["Lim.Common.DotNET.Execute.WithRetryAsync", "Lim.Common.DotNET.MongoExtensions.GetCollection", "Lim.Common.DotNET.MongoExtensions.IdFilter", "Lim.Common.DotNET.MongoExtensions.SizeAwareInsertOneAsync", "Lim.Common.DotNET.MongoExtensions.SizeAwareReplaceOneAsync", "Lim.Common.DotNET.SerializablePropertiesConvention.Register", "Lim.Common.DotNET.SerializationPolymorphismUtil.RegisterClassMapsFor"], ["_database.GetCollection<TEntity>()\n                    .CountDocumentsAsync", "AllKeysAsync", "Execute.WithRetryAsync", "(await (\n                        await _database.GetCollection<TEntity>()\n                            .FindAsync(\n                                where ?? FilterDefinition<TEntity>.Empty,\n                                new FindOptions<TEntity, BsonDocument>\n                                {\n                                    Projection = Builders<TEntity>.Projection.Include(\"_id\")\n                                }\n                            )\n                    ).ToListAsync()).Select(\n                        document => document[\"_id\"]\n                            .ToString()\n                    )\n                    .ToHashSet", "(await (\n                        await _database.GetCollection<TEntity>()\n                            .FindAsync(\n                                where ?? FilterDefinition<TEntity>.Empty,\n                                new FindOptions<TEntity, BsonDocument>\n                                {\n                                    Projection = Builders<TEntity>.Projection.Include(\"_id\")\n                                }\n                            )\n                    ).ToListAsync()).Select", "(\n                        await _database.GetCollection<TEntity>()\n                            .FindAsync(\n                                where ?? FilterDefinition<TEntity>.Empty,\n                                new FindOptions<TEntity, BsonDocument>\n                                {\n                                    Projection = Builders<TEntity>.Projection.Include(\"_id\")\n                                }\n                            )\n                    ).ToListAsync", "_database.GetCollection<TEntity>()\n                            .FindAsync", "Builders<TEntity>.Projection.Include", "document[\"_id\"]\n                            .ToString", "Array.Empty<FieldDefinition<TEntity>>", "(\n                    await _database.GetCollection<TEntity>()\n                        .FindAsync(\n                            key.IdFilter<TEntity>(),\n                            new FindOptions<TEntity>\n                            {\n                                Projection = Builders<TEntity>.Projection.IncludeAll(inclusions)\n                            }\n                        )\n                ).FirstOrDefaultAsync", "_database.GetCollection<TEntity>()\n                        .FindAsync", "Builders<TEntity>.Projection.IncludeAll", "GetAllAsync", "(await _database.GetCollection<TEntity>()\n                    .FindAsync(\n                        where ?? FilterDefinition<TEntity>.Empty,\n                        findOptions ?? new FindOptions<TEntity>()\n                    )).ToListAsync", "_database.GetCollection<TEntity>()\n                    .FindAsync", "inclusions.NullOrNone", "pipelineBuilder(\n                        _database.GetCollection<TEntity>()\n                            .Aggregate()\n                    )\n                    .ToListAsyncWithErrorDetails", "pipelineBuilder", "_database.GetCollection<TEntity>()\n                            .Aggregate", "AggregateFacet.Create", "PipelineDefinition<TResultEntity, AggregateCountResult>.Create", "PipelineStageDefinitionBuilder.Count<TResultEntity>", "PipelineDefinition<TResultEntity, TResultEntity>.Create", "pageBuilder", "queryBuilder(\n                        _database.GetCollection<TEntity>()\n                            .Aggregate()\n                    )\n                    .Facet(countFacet, pageFacet)\n                    .FirstAsync", "queryBuilder(\n                        _database.GetCollection<TEntity>()\n                            .Aggregate()\n                    )\n                    .Facet", "queryBuilder", "aggregationResults.Facets.First(_ => _.Name == facetNameCount)\n                .Output<AggregateCountResult>()\n                .FirstOrDefault", "aggregationResults.Facets.First(_ => _.Name == facetNameCount)\n                .Output<AggregateCountResult>", "aggregationResults.Facets.First", "aggregationResults.Facets.First(_ => _.Name == facetNamePage)\n                .Output<TResultEntity>", "(await pipelineBuilder(\n                            _database.GetCollection<TEntity>()\n                                .Aggregate()\n                        )\n                        .ToListAsyncWithErrorDetails())\n                    .Select(\n                        document =>\n                        {\n                            var documentValue = document?.FirstOrDefault()\n                                .Value;\n                            return documentValue == BsonNull.Value\n                                ? \"\"\n                                : documentValue?.AsString;\n                        }\n                    )\n                    .ToList", "(await pipelineBuilder(\n                            _database.GetCollection<TEntity>()\n                                .Aggregate()\n                        )\n                        .ToListAsyncWithErrorDetails())\n                    .Select", "pipelineBuilder(\n                            _database.GetCollection<TEntity>()\n                                .Aggregate()\n                        )\n                        .ToListAsyncWithErrorDetails", "_database.GetCollection<TEntity>()\n                                .Aggregate", ".FirstOrDefault", "FindDistinctAsync", "inclusions.HasItems", "(await _database.GetCollection<TEntity>()\n                        .FindAsync(\n                            where ?? FilterDefinition<TEntity>.Empty,\n                            findOptions\n                        )).ToListAsync", "(await GroupAndCountAsync(\n                    groupBy,\n                    document => document[valueTemporaryFieldName]\n                        .ToUniversalTime(),\n                    fields,\n                    Builders<TEntity>.Filter.Gt(\n                        timeFieldName,\n                        startDate\n                    ) & where,\n                    sumFieldName: sumFieldName\n                )).ToList()\n                .Select(valueCount => new DateCount(valueCount.Value, valueCount.Count))\n                .ToList", "(await GroupAndCountAsync(\n                    groupBy,\n                    document => document[valueTemporaryFieldName]\n                        .ToUniversalTime(),\n                    fields,\n                    Builders<TEntity>.Filter.Gt(\n                        timeFieldName,\n                        startDate\n                    ) & where,\n                    sumFieldName: sumFieldName\n                )).ToList()\n                .Select", "(await GroupAndCountAsync(\n                    groupBy,\n                    document => document[valueTemporaryFieldName]\n                        .ToUniversalTime(),\n                    fields,\n                    Builders<TEntity>.Filter.Gt(\n                        timeFieldName,\n                        startDate\n                    ) & where,\n                    sumFieldName: sumFieldName\n                )).ToList", "GroupAndCountAsync", "document[valueTemporaryFieldName]\n                        .ToUniversalTime", "Builders<TEntity>.Filter.Gt", "_database.GetCollection<TEntity>()\n                .Aggregate", "(await Execute.WithRetryAsync(\n                    () => aggregation\n                        .MatchIfNotNull(where)\n                        .Group(\n                            new BsonDocument\n                            {\n                                {\n                                    \"_id\",\n                                    groupBy\n                                },\n                                {\n                                    \"count\",\n                                    sumFieldName == null\n                                        ? new BsonDocument {{\"$sum\", 1}}\n                                        : new BsonDocument {{\"$sum\", $\"${sumFieldName}\"}}\n                                }\n                            }.AddRange(additionalFields ?? new BsonDocument())\n                        )\n                        .ToListAsync()\n                )).Select(\n                    document => new ValueCount<TValue>(\n                        valueFromBson(document),\n                        document[\"count\"]\n                            .AsLong()\n                    )\n                )\n                .ToList", "(await Execute.WithRetryAsync(\n                    () => aggregation\n                        .MatchIfNotNull(where)\n                        .Group(\n                            new BsonDocument\n                            {\n                                {\n                                    \"_id\",\n                                    groupBy\n                                },\n                                {\n                                    \"count\",\n                                    sumFieldName == null\n                                        ? new BsonDocument {{\"$sum\", 1}}\n                                        : new BsonDocument {{\"$sum\", $\"${sumFieldName}\"}}\n                                }\n                            }.AddRange(additionalFields ?? new BsonDocument())\n                        )\n                        .ToListAsync()\n                )).Select", "aggregation\n                        .MatchIfNotNull(where)\n                        .Group(\n                            new BsonDocument\n                            {\n                                {\n                                    \"_id\",\n                                    groupBy\n                                },\n                                {\n                                    \"count\",\n                                    sumFieldName == null\n                                        ? new BsonDocument {{\"$sum\", 1}}\n                                        : new BsonDocument {{\"$sum\", $\"${sumFieldName}\"}}\n                                }\n                            }.AddRange(additionalFields ?? new BsonDocument())\n                        )\n                        .ToListAsync", "aggregation\n                        .MatchIfNotNull(where)\n                        .Group", "aggregation\n                        .MatchIfNotNull", "new BsonDocument\n                            {\n                                {\n                                    \"_id\",\n                                    groupBy\n                                },\n                                {\n                                    \"count\",\n                                    sumFieldName == null\n                                        ? new BsonDocument {{\"$sum\", 1}}\n                                        : new BsonDocument {{\"$sum\", $\"${sumFieldName}\"}}\n                                }\n                            }.AddRange", "valueFromBson", "document[\"count\"]\n                            .AsLong", "insertCreator", "UpsertAsync", "Builders<TEntity>.Update.Set", "_database.GetCollection<TEntity>()\n                        .SizeAwareUpdateOneAsync", "_database.GetCollection<TEntity>()\n                        .BulkWriteSafeAsync", "entities.Select(\n                                    entity => new ReplaceOneModel<TEntity>(\n                                        entity.IdFilter(),\n                                        entity\n                                    ) {IsUpsert = true}\n                                )\n                                .ToList", "entities.Select", "UpdateAsync", "UpdateManyAsync", "_database.GetCollection<TEntity>()\n                        .DeleteOneAsync", "DeleteManyAsync", "_database.GetCollection<TEntity>()\n                        .DeleteManyAsync", "_database.RunCommandAsync", "result.TryGetValue", ".ToString", ".Select(pair => $\"{pair.Key}:{pair.Value}\").JoinToString", ".Select", "_database.RenameCollectionAsync", "_database.DropCollectionAsync", "_database.GetCollection<TEntity>(false)\n                .FindAsync", "(await collection.Indexes.ListAsync()).ToListAsync", "collection.Indexes.ListAsync", "indexes.Where(\n                    index => index[\"key\"]\n                        .AsBsonDocument.GetElement(0)\n                        .Name == indexName\n                )\n                .Select", "indexes.Where", "index[\"key\"]\n                        .AsBsonDocument.GetElement", "collection.Indexes.DropOneAsync", "_database.GetCollection<TEntity>()\n                        .SizeAwareUpdateManyAsync", "(await _database.GetCollection<TEntity>()\n                    .DistinctAsync(fieldDefinition, where ?? FilterDefinition<TEntity>.Empty)).ToListAsync", "_database.GetCollection<TEntity>()\n                    .DistinctAsync", "_mongoClient.DropDatabaseAsync", "(await _database.GetCollection<TEntity>()\n                    .FindAsync(\n                        where,\n                        new FindOptions<TEntity, TField>\n                        {\n                            Projection = Builders<TEntity>.Projection.Expression(fieldSelector),\n                            Sort = getFirstBy,\n                            Limit = 1\n                        }\n                    )).FirstOrDefaultAsync", "Builders<TEntity>.Projection.Expression", "GetCollectionAggregateWithCount", "PipelineStageDefinitionBuilder.Sort", "PipelineStageDefinitionBuilder.Skip<TResultEntity>", "PipelineStageDefinitionBuilder.Limit<TResultEntity>", "TimeSpan.FromSeconds", "MongoClientSettings.FromConnectionString", "configuration.GetValue", "clusterBuilder.Subscribe<CommandStartedEvent>", "logger.LogDebug", "startedEvent.Command.ToJson", "_mongoClient.GetDatabase"], false, false, false, false, ["App:Mongo:LogQueries", "_id", "count", "page", "", "value", "isoWeek", "$isoWeek", "isoWeekYear", "$isoWeekYear", "$first", "$sum", "ok", "1", ";", "key", "name"], false, 0, 0, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, true], ["MongoCredentials", "Lim.Common.DotNET.MongoCredentials", [], [], "src/Lim.Common.DotNET/DataStore/Core/MongoCredentials.cs", 7, 0, {}, ["DatabaseName", "WorkflowDatabaseName", "ConnectionString"], ["MongoCredentials", "DatabaseName", "WorkflowDatabaseName", "ConnectionString", "FromConfiguration"], ["System.Web", "Infrastructure.Dotnet.Common", "Microsoft.Extensions.Configuration"], false, false, [], false, false, [], {}, [], 3, false, false, false, 3, 0.5, [], 235.0, 79, 16.666666666666668, 66.66666666666667, 2, 0, false, false, false, false, "public", false, [], ["configuration.GetValueWithEnv", "string.IsNullOrEmpty", "HttpUtility.UrlEncode"], false, false, false, false, ["App:Mongo:DatabaseName", "lim", "App:Mongo:ConnectionString", "", "App:Mongo:WorkflowDatabaseName", "workflow", "App:Mongo:Url", "lim-mongo:27017", "App:Mongo:Username", "root", "App:Mongo:Password"], false, 3, 0, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, false], ["MongoExtensions", "Lim.Common.DotNET.MongoExtensions", [], [], "src/Lim.Common.DotNET/DataStore/Core/MongoExtensions.cs", 15, 0, {"DefaultPageSize": "int", "CollectionsCache": "System.Collections.Concurrent.ConcurrentDictionary<Type, object>", "IdPropertiesCache": "System.Collections.Concurrent.ConcurrentDictionary<Type, PropertyInfo>"}, [], ["IndexProperties", "CreateAllIndexes", "GetCollection", "GetCollectionName", "IdProperty", "IdFilter", "SetIfNotEmpty", "SetIf", "AddToSetIf", "AddToSetEachIf", "Dec", "IncludeAll", "IsDuplicateKeyError", "IsDocumentTooLargeError", "BulkWriteSafeAsync", "SizeAwareUpdateManyAsync", "SizeAwareInsertOneAsync", "SizeAwareReplaceOneAsync", "SizeAwareUpdateOneAsync", "ToPage", "MatchIfNotNull", "AppendIfNotNull", "LimitIfNotNull", "ProjectIfNotNull", "ToListAsyncWithErrorDetails", "Distinct", "LookupAndUnwind", "LookupAndGroup", "AsLong", "ToJsonString", "GetFieldDefinitions", "ToFieldDefinitions", "Combine"], ["System", "System.Collections.Concurrent", "System.Collections.Generic", "System.Linq", "System.Linq.Expressions", "System.Reflection", "System.Threading.Tasks", "Infrastructure.Dotnet.Common", "MongoDB.Bson", "MongoDB.Bson.Serialization.Attributes", "MongoDB.Driver"], false, false, [], false, false, [], {"DefaultPageSize": [], "CollectionsCache": [], "IdPropertiesCache": []}, [], 0, false, false, false, 35, 1.0, [], 255.9142857142857, 144, 100.0, 82.85714285714286, 0, 0, false, false, true, true, "public", false, ["Lim.Common.DotNET.Execute.WithRetry"], ["typeof(T).GetProperties()\n                .ToDictionaryWhere", "typeof(T).GetProperties", "info.GetCustomAttribute<MongoIndexAttribute>", "IndexProperties<T>()\n                .Select(\n                    indexProperty => new CreateIndexModel<T>(\n                        $\"{{ {indexProperty.Key}: 1 }}\",\n                        indexProperty.Value.Options\n                    )\n                )\n                .ToList", "IndexProperties<T>()\n                .Select", "createIndexModels.None", "collection.Indexes.CreateMany", "CollectionsCache.GetOrAdd", "database.GetCollection<T>", "collection.CreateAllIndexes", "type.GetCustomAttribute<MongoCollectionAttribute>", "IdPropertiesCache.GetOrAdd", "propertyInfo.HasCustomAttribute<BsonIdAttribute>", "nameof", "IdProperty<T>()\n                    .GetValue", ".ToString", "Builders<T>.Filter.Eq", "string.IsNullOrEmpty", "update.Set", "shouldAdd.GetValueOrDefault", "update.AddToSet", "update.AddToSetEach", "updateDefinitionBuilder.Inc", "projections.NullOrNone", "projectionDefinitionBuilder.Combine", "projections.Skip(1)\n                    .Aggregate", "projections.Skip", "projectionDefinitionBuilder.Include", "projections.First", "aggregated.Include", "exception.WriteError.Message.Contains", "exception.Message.Contains", "requests.Any", "collection.BulkWriteAsync", "exception.IsDocumentTooLargeError", "collection.UpdateManyAsync", "filter.ToJsonString", "collection.InsertOneAsync", "collection.ReplaceOneAsync", "collection.UpdateOneAsync", "aggregation\n                .Sort(sort)\n                .Skip(skip)\n                .Limit", "aggregation\n                .Sort(sort)\n                .Skip", "aggregation\n                .Sort", "aggregation.Match", "aggregation.AppendStage", "aggregation.Limit", "aggregation.Project<TEntity>", "source.ToListAsync", "aggregate.Group", "aggregate.LookupAndUnwind", "aggregate\n                .Lookup(\n                    joinedType.GetCollectionName(),\n                    localField,\n                    foreignField,\n                    asField\n                )\n                .Unwind<TDocument>", "aggregate\n                .Lookup", "aggregate\n                .LookupAndUnwind(\n                    joinedType,\n                    localField,\n                    foreignField,\n                    asField\n                )\n                .Group(\n                    new JsonProjectionDefinition<TDocument, BsonDocument>(\n                        $@\"{{\n    _id: '$_id',\n    _data: {{$first: '$$ROOT'}},\n    {asField}: {{ $addToSet: '${asField}'}}\n}}\"\n                    )\n                )\n                .ReplaceRoot", "aggregate\n                .LookupAndUnwind(\n                    joinedType,\n                    localField,\n                    foreignField,\n                    asField\n                )\n                .Group", "aggregate\n                .LookupAndUnwind", "BsonDocument.Parse", "collection.Find(filterDefinition)\n                .ToString", "collection.Find", "type.GetProperties", "propertyInfos\n                .Select(\n                    propertyInfo => (FieldDefinition<TEntity>) propertyInfo.Name\n                )\n                .ToList", "propertyInfos\n                .Select", "Builders<TDocument>.Sort.Combine"], false, false, false, false, ["dup key", "Resulting document after update is larger than", "_id"], false, 0, 0, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, true], ["BsonExtensions", "Lim.Common.DotNET.BsonExtensions", [], [], "src/Lim.Common.DotNET/DataStore/Core/Serializers/BsonExtensions.cs", 10, 0, {}, [], ["WriteRulePortion", "ReadRulePortion", "ReadRulePortionInternal"], ["System", "System.Collections.Generic", "System.Collections.Immutable", "System.Linq", "Infrastructure.Dotnet.Common", "MongoDB.Bson.IO"], false, false, [], false, false, [], {}, [], 0, false, false, false, 4, 1.0, [], 823.75, 669, 100.0, 75.0, 0, 0, false, false, true, false, "public", false, [], ["new Dictionary<string, Action<IBsonWriter, TPortion>>\n            {\n                {nameof(RulePortion<TType>.Type), (portionWriter, portion) => portionWriter.WriteString(portion.Type.ToString())},\n                {nameof(RulePortion<TType>.Value), (portionWriter, portion) => portionWriter.WriteString(portion.Value)}\n            }.MergeWithOverwrite", "nameof", "portionWriter.WriteString", "portion.Type.ToString", "writer.WriteStartDocument", "writer.WriteName", "valueSerializer", "writer.WriteEndDocument", "new Dictionary<string, Action<IBsonReader, RulePortion<string>>>\n                {\n                    {nameof(RulePortion<string>.Type), (portionReader, portion) => portion.Type = portionReader.ReadString()}\n                }.MergeWithOverwrite", "portionReader.ReadString", "new Dictionary<string, Action<IBsonReader, TPortion>>\n                {\n                    {nameof(RulePortion<TType>.Type), (portionReader, portion) => portion.Type = EnumUtils.FromString<TType>(portionReader.ReadString())}\n                }.MergeWithOverwrite", "EnumUtils.FromString<TType>", "new Dictionary<string, Action<IBsonReader, TPortion>>\n            {\n                {nameof(RulePortion<TType>.Value), (portionReader, portion) => portion.Value = portionReader.ReadString()}\n            }.MergeWithOverwrite", "mandatoryFields.ExceptWith", "reader.ReadStartDocument", "reader.ReadBsonType", "reader.ReadName", "fieldDeserializers.TryGetValue", "deserializer", "mandatoryFields.Remove", "mandatoryFields.Any", "mandatoryFields.JoinToString", "reader.ReadEndDocument"], false, false, false, false, [], false, 0, 0, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, true], ["BsonReadOnlyDeserializer", "Lim.Common.DotNET.BsonReadOnlyDeserializer<TType>", ["???.SerializerBase<TType>"], [], "src/Lim.Common.DotNET/DataStore/Core/Serializers/BsonReadOnlyDeserializer.cs", 6, 0, {}, [], ["Serialize", "Deserialize"], ["MongoDB.Bson.Serialization", "MongoDB.Bson.Serialization.Serializers"], false, false, [], false, false, [], {}, [], 0, false, false, false, 2, 1.0, [], 189.0, 189, 0.0, 100.0, 0, 0, false, false, false, false, "public", true, [], ["context.Writer.WriteInt32", "context.Writer.WriteNull", "BsonSerializer.Deserialize<TType>"], false, false, false, false, [], false, 0, 0, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, true], ["DictionarySerializer", "Lim.Common.DotNET.DictionarySerializer<TDictionary, TKeySerializer, TValueSerializer>", ["???.DictionarySerializerBase<TDictionary>"], [], "src/Lim.Common.DotNET/DataStore/Core/Serializers/DictionarySerializer.cs", 11, 0, {}, [], ["DictionarySerializer", "CreateInstance", "Serialize", "DictionaryToString"], ["System", "System.Collections", "System.Collections.Generic", "Infrastructure.Dotnet.Common", "MongoDB.Bson.Serialization", "MongoDB.Bson.Serialization.Options", "MongoDB.Bson.Serialization.Serializers"], false, false, [], false, false, [], {}, [], 0, false, false, false, 4, 1.0, [], 199.5, 158, 0.0, 50.0, 1, 0, false, false, false, false, "public", true, [], ["base.Serialize", "value.GetType().GetDisplayName", "value.GetType", "strings.Add", "strings.JoinToString"], false, false, false, false, [], false, 0, 0, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, true], ["EnumHashSetSerializer", "Lim.Common.DotNET.EnumHashSetSerializer<TEnum>", ["???.SerializerBase<HashSet<TEnum>>"], ["???.IBsonArraySerializer"], "src/Lim.Common.DotNET/DataStore/Core/Serializers/EnumHashSetSerializer.cs", 10, 0, {}, [], ["TryGetItemSerializationInfo", "Serialize", "Deserialize"], ["System.Collections.Generic", "Infrastructure.Dotnet.Common", "MongoDB.Bson", "MongoDB.Bson.IO", "MongoDB.Bson.Serialization", "MongoDB.Bson.Serialization.Serializers"], false, false, [], false, false, [], {}, [], 0, false, false, false, 3, 1.0, [], 428.0, 380, 0.0, 100.0, 0, 0, false, false, false, false, "public", true, [], ["context.Writer.WriteNull", "context.Writer.WriteStartArray", "context.Writer.WriteString", "element.ToString", "context.Writer.WriteEndArray", "context.Reader.GetCurrentBsonType", "context.Reader.ReadNull", "context.Reader.ReadStartArray", "context.Reader.ReadBsonType", "elements.Add", "EnumUtils.FromString<TEnum>", "context.Reader.ReadString", "context.Reader.ReadEndArray"], false, false, false, false, [], false, 0, 0, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, true], ["EnumStringSerializer", "Lim.Common.DotNET.EnumStringSerializer<TEnum>", ["???.EnumSerializer<TEnum>"], [], "src/Lim.Common.DotNET/DataStore/Core/Serializers/EnumStringSerializer.cs", 6, 0, {}, [], ["EnumStringSerializer"], ["MongoDB.Bson", "MongoDB.Bson.Serialization.Serializers"], false, false, [], false, false, [], {}, [], 0, false, false, false, 1, 1.0, [], 20.0, 20, 0.0, 100.0, 1, 0, false, false, false, false, "public", true, [], [], false, false, false, false, [], false, 0, 0, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, true], ["NestedKeyStringSerializer", "Lim.Common.DotNET.NestedKeyStringSerializer", ["???.StringSerializer"], [], "src/Lim.Common.DotNET/DataStore/Core/Serializers/NestedKeyStringSerializer.cs", 6, 0, {}, [], ["Deserialize", "Serialize", "DeserializeString", "SerializeString"], ["MongoDB.Bson.Serialization", "MongoDB.Bson.Serialization.Serializers"], false, false, [], false, false, [], {}, [], 0, false, false, false, 4, 1.0, [], 103.0, 73, 50.0, 100.0, 0, 0, false, false, false, false, "public", false, [], ["DeserializeString", "context.Reader.ReadString", "string.IsNullOrEmpty", "context.Writer.WriteString", "value.Replace('?', '.')\n                .Replace", "value.Replace", "value.Replace('.', '?')\n                .Replace"], false, false, false, false, [], false, 0, 0, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, true], ["RulePortionListSerializer", "Lim.Common.DotNET.RulePortionListSerializer<TType>", ["???.SerializerBase<IReadOnlyList<RulePortion<TType>>>"], [], "src/Lim.Common.DotNET/DataStore/Core/Serializers/RulePortionListSerializer.cs", 9, 0, {}, [], ["Serialize", "Deserialize"], ["System", "System.Collections.Generic", "MongoDB.Bson.IO", "MongoDB.Bson.Serialization", "MongoDB.Bson.Serialization.Serializers"], false, false, [], false, false, [], {}, [], 0, false, false, false, 2, 1.0, [], 386.5, 386, 0.0, 100.0, 0, 0, false, false, false, false, "public", true, [], ["context.Writer.WriteStartArray", "context.Writer.WriteRulePortion<RulePortion<TType>, TType>", "context.Writer.WriteEndArray", "context.Reader.ReadStartArray", "context.Reader.ReadBsonType", "context.Reader.ReadRulePortion<RulePortion<TType>, TType>", "portion.Add", "context.Reader.ReadEndArray"], false, false, false, false, [], false, 0, 0, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, true], ["RulePortionSerializer", "Lim.Common.DotNET.RulePortionSerializer<TType>", ["???.SerializerBase<RulePortion<TType>>"], [], "src/Lim.Common.DotNET/DataStore/Core/Serializers/RulePortionSerializer.cs", 7, 0, {}, [], ["Serialize", "Deserialize"], ["System", "MongoDB.Bson.Serialization", "MongoDB.Bson.Serialization.Serializers"], false, false, [], false, false, [], {}, [], 0, false, false, false, 2, 1.0, [], 78.0, 78, 0.0, 100.0, 0, 0, false, false, false, false, "public", true, [], ["context.Writer.WriteRulePortion<RulePortion<TType>, TType>", "context.Reader.ReadRulePortion<RulePortion<TType>, TType>"], false, false, false, false, [], false, 0, 0, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, true], ["RulePortionWithPropertiesListSerializer", "Lim.Common.DotNET.RulePortionWithPropertiesListSerializer<TType>", ["???.SerializerBase<IReadOnlyList<RulePortionWithProperties<TType>>>"], [], "src/Lim.Common.DotNET/DataStore/Core/Serializers/RulePortionWithPropertiesListSerializer.cs", 9, 0, {}, [], ["Serialize", "Deserialize"], ["System", "System.Collections.Generic", "MongoDB.Bson.IO", "MongoDB.Bson.Serialization", "MongoDB.Bson.Serialization.Serializers"], false, false, [], false, false, [], {}, [], 0, false, false, false, 2, 1.0, [], 1615.5, 1615, 0.0, 100.0, 0, 0, false, false, false, false, "public", true, ["Lim.Common.DotNET.BsonExtensions.WriteRulePortion"], ["context.Writer.WriteStartArray", "nameof", "writer.WriteString", "writer.WriteStartArray", "writer.WriteEndArray", "context.Writer.WriteRulePortion<RulePortionWithProperties<TType>, TType>", "context.Writer.WriteEndArray", "context.Reader.ReadStartArray", "context.Reader.ReadBsonType", "context.Reader.ReadRulePortion<RulePortionWithProperties<TType>, TType>", "reader.ReadString", "reader.ReadStartArray", "reader.ReadBsonType", "context.Reader.ReadRulePortion", "portionItem.AdditionalProperties.Add", "reader.ReadEndArray", "portion.Add", "context.Reader.ReadEndArray"], false, false, false, false, [], false, 0, 0, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, true], ["RulePortionWithSubTypeListSerializer", "Lim.Common.DotNET.RulePortionWithSubTypeListSerializer<TType, TSubType>", ["???.SerializerBase<IReadOnlyList<RulePortionWithSubType<TType, TSubType>>>"], [], "src/Lim.Common.DotNET/DataStore/Core/Serializers/RulePortionWithSubTypeListSerializer.cs", 10, 0, {}, [], ["Serialize", "Deserialize"], ["System", "System.Collections.Generic", "Infrastructure.Dotnet.Common", "MongoDB.Bson.IO", "MongoDB.Bson.Serialization", "MongoDB.Bson.Serialization.Serializers"], false, false, [], false, false, [], {}, [], 0, false, false, false, 2, 1.0, [], 861.5, 861, 0.0, 100.0, 0, 0, false, false, false, false, "public", true, [], ["context.Writer.WriteStartArray", "context.Writer.WriteRulePortion<RulePortionWithSubType<TType, TSubType>, TType>", "nameof", "portionWriter.WriteString", "portionItem.SubType.ToString", "context.Writer.WriteEndArray", "context.Reader.ReadStartArray", "context.Reader.ReadBsonType", "context.Reader.ReadRulePortion<RulePortionWithSubType<TType, TSubType>, TType>", "EnumUtils.FromString<TSubType>", "portionReader.ReadString", "portion.Add", "context.Reader.ReadEndArray"], false, false, false, false, [], false, 0, 0, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, true], ["SerializablePropertiesConvention", "Lim.Common.DotNET.SerializablePropertiesConvention", ["???.ConventionBase"], ["???.IClassMapConvention"], "src/Lim.Common.DotNET/DataStore/Core/Serializers/SerializablePropertiesConvention.cs", 13, 0, {}, [], ["Apply", "Register", "GetBsonSerializedProperties", "GetBsonPropertiesWithoutSetters"], ["System", "System.Collections.Generic", "System.Linq", "System.Reflection", "Infrastructure.Dotnet.Common", "MongoDB.Bson.Serialization", "MongoDB.Bson.Serialization.Attributes", "MongoDB.Bson.Serialization.Conventions", "MongoDB.Driver"], false, false, [], false, false, [], {}, [], 0, false, false, false, 4, 1.0, [], 378.5, 401, 75.0, 50.0, 0, 0, false, false, false, false, "public", false, [], ["GetBsonPropertiesWithoutSetters", "invalidPropertiesNames.Any", "classMap.ClassType.GetDisplayName", "invalidPropertiesNames.JoinToString", "ConventionRegistry.Register", "nameof", "type\n                .GetTypeInfo()\n                .GetProperties(BindingFlags.Instance | BindingFlags.Public)\n                .Where(\n                    propertyInfo =>\n                        !propertyInfo.HasCustomAttribute<BsonIgnoreAttribute>() &&\n                        propertyInfo.CanRead &&\n                        (!propertyInfo.GetMethod.IsVirtual || !type.IsAbstract)\n                )\n                .ToList", "type\n                .GetTypeInfo()\n                .GetProperties(BindingFlags.Instance | BindingFlags.Public)\n                .Where", "type\n                .GetTypeInfo()\n                .GetProperties", "type\n                .GetTypeInfo", "propertyInfo.HasCustomAttribute<BsonIgnoreAttribute>", "GetBsonSerializedProperties(type)\n                .Where(\n                    propertyInfo =>\n                        !propertyInfo.HasCustomAttribute<BsonIdAttribute>() &&\n                        !propertyInfo.HasCustomAttribute<BsonSkipSetterCheckAttribute>() &&\n                        !propertyInfo.CanWrite\n                )\n                .Select(propertyInfo => propertyInfo.Name)\n                .ToList", "GetBsonSerializedProperties(type)\n                .Where(\n                    propertyInfo =>\n                        !propertyInfo.HasCustomAttribute<BsonIdAttribute>() &&\n                        !propertyInfo.HasCustomAttribute<BsonSkipSetterCheckAttribute>() &&\n                        !propertyInfo.CanWrite\n                )\n                .Select", "GetBsonSerializedProperties(type)\n                .Where", "propertyInfo.HasCustomAttribute<BsonIdAttribute>", "propertyInfo.HasCustomAttribute<BsonSkipSetterCheckAttribute>"], false, false, false, false, [", "], false, 0, 0, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, true], ["SerializationPolymorphismUtil", "Lim.Common.DotNET.SerializationPolymorphismUtil", [], [], "src/Lim.Common.DotNET/DataStore/Core/Serializers/SerializationPolymorphismUtil.cs", 8, 0, {}, [], ["RegisterClassMapsFor", "IsAssignableFrom"], ["System", "System.Linq", "System.Reflection", "MongoDB.Bson.Serialization"], false, false, [], false, false, [], {}, [], 0, false, false, false, 3, 1.0, [], 329.6666666666667, 359, 100.0, 66.66666666666667, 0, 0, false, false, true, false, "public", false, [], ["Assembly.GetAssembly(type)\n                .GetTypes()\n                .Where", "Assembly.GetAssembly(type)\n                .GetTypes", "Assembly.GetAssembly", "BsonClassMap.LookupClassMap", "baseType.IsAssignableFrom", "extendType.GetGenericTypeDefinition"], false, false, false, false, [], false, 0, 0, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, true], ["StringHashSetSerializer", "Lim.Common.DotNET.StringHashSetSerializer", ["???.SerializerBase<HashSet<string>>"], ["???.IBsonArraySerializer"], "src/Lim.Common.DotNET/DataStore/Core/Serializers/StringHashSetSerializer.cs", 9, 0, {}, [], ["TryGetItemSerializationInfo", "Serialize", "Deserialize"], ["System.Collections.Generic", "MongoDB.Bson", "MongoDB.Bson.IO", "MongoDB.Bson.Serialization", "MongoDB.Bson.Serialization.Serializers"], false, false, [], false, false, [], {}, [], 0, false, false, false, 3, 1.0, [], 408.3333333333333, 369, 0.0, 100.0, 0, 0, false, false, false, false, "public", false, [], ["context.Writer.WriteNull", "context.Writer.WriteStartArray", "context.Writer.WriteString", "context.Writer.WriteEndArray", "context.Reader.GetCurrentBsonType", "context.Reader.ReadNull", "context.Reader.ReadStartArray", "context.Reader.ReadBsonType", "elements.Add", "context.Reader.ReadString", "context.Reader.ReadEndArray"], false, false, false, false, [], false, 0, 0, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, true], ["StringKeysDictionarySerializerAttribute", "Lim.Common.DotNET.StringKeysDictionarySerializerAttribute", ["???.BsonSerializerAttribute"], [], "src/Lim.Common.DotNET/DataStore/Core/Serializers/StringKeysDictionarySerializerAttribute.cs", 10, 0, {"GetSerializerTypeMethod": "System.Reflection.MethodInfo"}, [], ["StringKeysDictionarySerializerAttribute", "GetSerializerType"], ["System", "System.Collections.Generic", "System.Reflection", "JetBrains.Annotations", "MongoDB.Bson.Serialization.Attributes", "MongoDB.Bson.Serialization.Serializers"], false, false, ["MeansImplicitUse", "AttributeUsage"], false, false, [], {"GetSerializerTypeMethod": []}, [], 0, false, false, false, 2, 1.0, [], 323.0, 323, 50.0, 50.0, 1, 0, false, false, false, false, "public", false, [], ["typeof(StringKeysDictionarySerializerAttribute).GetMethod", "nameof", "GetSerializerTypeMethod.MakeGenericMethod(dictionaryValueType)\n                .Invoke", "GetSerializerTypeMethod.MakeGenericMethod"], false, false, false, false, [], false, 0, 0, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, true], ["CustomAssetCollectionConfigurationStorage", "Lim.Common.DotNET.CustomAssetCollectionConfigurationStorage", ["???.BaseConfigurationStorage<CustomAssetCollectionConfiguration>"], ["Lim.Common.DotNET.ICustomAssetCollectionConfigurationStorage"], "src/Lim.Common.DotNET/DataStore/CustomAssetCollectionConfigurationStorage.cs", 7, 0, {}, [], ["CustomAssetCollectionConfigurationStorage", "GetAllCustomAssetCollectionConfigurationsAsync", "GetCustomAssetCollectionConfigurationAsync", "SyncCustomAssetCollectionConfigurationAsync", "DeleteCustomAssetCollectionAsync"], ["System.Collections.Generic", "System.Threading.Tasks", "JetBrains.Annotations"], false, false, ["UsedImplicitly"], false, false, [], {}, [], 0, false, false, false, 5, 1.0, [], 46.8, 52, 0.0, 100.0, 1, 0, false, false, false, true, "public", false, ["Lim.Common.DotNET.BaseConfigurationStorage<Lim.Common.DotNET.CustomAssetCollectionConfiguration>.GetAllAsync", "Lim.Common.DotNET.IMongoClient.GetAsync", "Lim.Common.DotNET.BaseConfigurationStorage<Lim.Common.DotNET.CustomAssetCollectionConfiguration>.SyncConfigurationAsync", "Lim.Common.DotNET.BaseConfigurationStorage<Lim.Common.DotNET.CustomAssetCollectionConfiguration>.DeleteConfigurationAsync"], [], false, false, false, false, [], false, 0, 0, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, false], ["CustomAssetCollectionProfilesStorage", "Lim.Common.DotNET.CustomAssetCollectionProfilesStorage", ["???.ProfilesStorage<CustomAssetCollectionProfile>"], ["Lim.Common.DotNET.ICustomAssetCollectionProfilesStorage"], "src/Lim.Common.DotNET/DataStore/CustomAssetCollectionProfilesStorage.cs", 10, 0, {"_repositoriesStorage": "Lim.Common.DotNET.IRepositoriesStorage", "SortOptions": "System.Collections.Generic.Dictionary<TableSortOption, IReadOnlyCollection<ConsumableSortOption>>", "DefaultSecondarySort": "System.Collections.Generic.IReadOnlyCollection<TableSortOption>"}, ["_repositoriesStorage", "SortOrder"], ["CustomAssetCollectionProfilesStorage", "SortOrder", "GetSortOrderOrDefault", "BuildEmptyProfileAsync", "CountActiveCustomAssetCollectionProfilesAsync", "CountCustomAssetCollectionProfilesAsync", "GetProfileAsync", "GetProfilesAndCountAsync", "GetAllKeysAsync", "SyncProfilesAsync", "DeleteStaleProfilesAsync"], ["System", "System.Collections.Generic", "System.Linq", "System.Threading.Tasks", "JetBrains.Annotations", "MongoDB.Driver"], false, false, ["UsedImplicitly"], false, false, [], {"_repositoriesStorage": [], "SortOptions": [], "DefaultSecondarySort": []}, [], 1, false, false, false, 10, 0.9090909090909091, [], 157.36363636363637, 57, 0.0, 45.45454545454545, 1, 0, false, false, false, true, "public", false, ["Lim.Common.DotNET.ProfilesStorage<Lim.Common.DotNET.CustomAssetCollectionProfile>.GetSortOrderOrDefault", "Lim.Common.DotNET.IMongoClient.CountAsync", "Lim.Common.DotNET.ProfilesStorage<Lim.Common.DotNET.CustomAssetCollectionProfile>.GetProfileByKeyAsync", "Lim.Common.DotNET.IRepositoriesStorage.GetRepositoriesAsync", "Lim.Common.DotNET.ProfilesStorage<Lim.Common.DotNET.CustomAssetCollectionProfile>.GetProfilesAndCountAsync"], ["Builders<CustomAssetCollectionProfile>.Sort\n            .Descending(profile => profile.Risk.CombinedRiskLevelNumeric)\n            .Descending(profile => profile.Risk.CombinedRiskScore)\n            .Ascending", "Builders<CustomAssetCollectionProfile>.Sort\n            .Descending(profile => profile.Risk.CombinedRiskLevelNumeric)\n            .Descending", "Builders<CustomAssetCollectionProfile>.Sort\n            .Descending", "repositories.ToDictionary", "(await _repositoriesStorage.GetRepositoriesAsync(\n                profilesAndCount.Items.SelectMany(profile => profile.Configuration.RepositoryKeys)\n                    .ToHashSet()\n            )).ToDictionary", "profilesAndCount.Items.SelectMany(profile => profile.Configuration.RepositoryKeys)\n                    .ToHashSet", "profilesAndCount.Items.SelectMany", "profile.Configuration.RepositoryKeys.ToDictionary"], false, false, false, false, ["Risk.CombinedRiskLevelNumeric", "Risk.CombinedRiskScore", "NameLower", "RecentMaterialChangeCount", "ActiveDevelopersCount", "LastActivity"], false, 1, 0, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, true], ["CustomFiltersStorage", "Lim.Common.DotNET.CustomFiltersStorage", [], ["Lim.Common.DotNET.ICustomFiltersStorage"], "src/Lim.Common.DotNET/DataStore/CustomFiltersStorage.cs", 7, 0, {"_mongoClient": "Lim.Common.DotNET.IMongoClient"}, ["_mongoClient"], ["CustomFiltersStorage", "GetCustomFiltersAsync", "CreateCustomFilterAsync", "DeleteCustomFilterAsync"], ["System.Collections.Generic", "System.Threading.Tasks", "JetBrains.Annotations"], false, false, ["UsedImplicitly"], false, false, [], {"_mongoClient": []}, [], 0, false, false, false, 4, 1.0, [], 72.5, 73, 0.0, 100.0, 1, 0, false, false, false, true, "public", false, ["Lim.Common.DotNET.IMongoClient.GetAllAsync", "Lim.Common.DotNET.IMongoClient.TryInsertAsync", "Lim.Common.DotNET.IMongoClient.TryDeleteAsync"], [], false, false, false, false, [], false, 0, 0, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, false], ["DeveloperIdentityStorage", "Lim.Common.DotNET.DeveloperIdentityStorage", [], ["Lim.Common.DotNET.IDeveloperIdentityStorage"], "src/Lim.Common.DotNET/DataStore/DeveloperIdentityStorage.cs", 8, 0, {"_mongoClient": "Lim.Common.DotNET.IMongoClient"}, ["_mongoClient"], ["DeveloperIdentityStorage", "SyncDeveloperIdentityAsync", "GetDeveloperIdentitiesAsync", "GetRelatedDeveloperIdentitiesByIdentitiesAsync", "GetDeveloperIdentityByKeyAsync", "GetDeveloperIdentitiesByDeveloperKeyAsync"], ["System.Collections.Generic", "System.Threading.Tasks", "JetBrains.Annotations", "MongoDB.Driver"], false, false, ["UsedImplicitly"], false, false, [], {"_mongoClient": []}, [], 0, false, false, false, 7, 1.0, [], 134.57142857142858, 119, 0.0, 100.0, 1, 0, false, false, false, true, "public", false, ["Lim.Common.DotNET.IMongoClient.GetAllAsync", "Lim.Common.DotNET.IMongoClient.GetAsync"], ["_mongoClient.UpsertAsync", "Builders<DeveloperIdentity>.Update\n                    .Set", "_mongoClient.GetAllAsync", "Builders<DeveloperIdentity>.Filter.In", "Builders<DeveloperIdentity>.Filter.Eq"], false, false, false, false, [], false, 0, 0, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, true], ["DeveloperProfilesStorage", "Lim.Common.DotNET.DeveloperProfilesStorage", ["???.EntityProfilesStorage<DeveloperProfile, Developer>"], ["Lim.Common.DotNET.IDeveloperProfilesStorage"], "src/Lim.Common.DotNET/DataStore/DeveloperProfilesStorage.cs", 9, 0, {"DeveloperIsActiveThreshold": "System.TimeSpan", "SortOptions": "System.Collections.Generic.Dictionary<TableSortOption, IReadOnlyCollection<ConsumableSortOption>>", "DefaultSecondarySort": "System.Collections.Generic.IReadOnlyCollection<TableSortOption>", "_developerIdentityStorage": "Lim.Common.DotNET.IDeveloperIdentityStorage", "_developersStorage": "Lim.Common.DotNET.IDevelopersStorage"}, ["_developerIdentityStorage", "_developersStorage", "SortOrder", "EntityPropertyName"], ["DeveloperProfilesStorage", "SortOrder", "EntityPropertyName", "GetDeveloperProfilesAsync", "GetDeveloperProfilesAndCountAsync", "GetDeveloperProfileByKeyAsync", "SyncDeveloperProfilesAsync", "GetTopSecurityBadgedDeveloperKeysAsync", "CountDeveloperProfilesAsync", "CountActiveDeveloperProfilesAsync", "GetSortOrderOrDefault", "BuildEmptyProfileAsync", "EnrichProfiles", "GetAllKeysAsync", "DeleteStaleProfilesAsync", "GetFilterOptionsAsync"], ["System", "System.Collections.Generic", "System.Threading.Tasks", "JetBrains.Annotations", "MongoDB.Driver"], false, false, ["UsedImplicitly"], false, false, [], {"DeveloperIsActiveThreshold": [], "SortOptions": [], "DefaultSecondarySort": [], "_developerIdentityStorage": [], "_developersStorage": []}, [], 2, false, false, false, 18, 0.9, [], 125.9, 76, 0.0, 55.0, 1, 0, false, false, false, true, "public", false, ["Lim.Common.DotNET.ProfilesStorage<Lim.Common.DotNET.DeveloperProfile>.GetProfilesAsync", "Lim.Common.DotNET.ProfilesStorage<Lim.Common.DotNET.DeveloperProfile>.GetProfilesAndCountAsync", "Lim.Common.DotNET.ProfilesStorage<Lim.Common.DotNET.DeveloperProfile>.GetProfileByKeyAsync", "Lim.Common.DotNET.ProfilesStorage<Lim.Common.DotNET.DeveloperProfile>.SyncProfilesAsync", "Lim.Common.DotNET.IMongoClient.CountAsync", "Lim.Common.DotNET.ProfilesStorage<Lim.Common.DotNET.DeveloperProfile>.GetSortOrderOrDefault", "Lim.Common.DotNET.IDevelopersStorage.GetDeveloperByKeyAsync", "Lim.Common.DotNET.IDeveloperIdentityStorage.GetDeveloperIdentitiesByDeveloperKeyAsync", "Lim.Common.DotNET.DeveloperProfile.EmptyProfileFor", "Lim.Common.DotNET.EntityProfilesStorage<Lim.Common.DotNET.DeveloperProfile, Lim.Common.DotNET.Developer>.EnrichProfiles"], ["Builders<DeveloperProfile>.Sort\n            .Descending(developerProfile => developerProfile.CommitCount)\n            .Ascending", "Builders<DeveloperProfile>.Sort\n            .Descending", "nameof", "base.EnrichProfiles(aggregation)\n                .LookupAndGroup", "TimeSpan.FromDays"], false, false, false, false, ["_id"], false, 2, 0, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, true], ["DeveloperProjectProfilesStorage", "Lim.Common.DotNET.DeveloperProjectProfilesStorage", ["???.EntityToConsumableProfilesStorage<DeveloperProjectProfile, Project>"], ["Lim.Common.DotNET.IDeveloperProjectProfilesStorage"], "src/Lim.Common.DotNET/DataStore/DeveloperProjectProfilesStorage.cs", 15, 0, {"_developerIdentityStorage": "Lim.Common.DotNET.IDeveloperIdentityStorage", "_logger": "???.ILogger<DeveloperProjectProfilesStorage>"}, ["_developerIdentityStorage", "_logger", "ConsumableKeyField", "DeveloperCountAddFields", "BasicSortDefinition", "ByEntitySortDefinition", "ByConsumableSortDefinition", "ProfileKeyProvider"], ["DeveloperProjectProfilesStorage", "ConsumableKeyField", "DeveloperCountAddFields", "BasicSortDefinition", "ByEntitySortDefinition", "ByConsumableSortDefinition", "ProfileKeyProvider", "SyncDeveloperProjectProfilesAsync", "SyncDeveloperProjectProfileAsync", "AddRequiredFields", "GetMonitoredProfilesAsync", "GetDevelopersKeysByIdentitiesKeys", "BuildKey", "BuildEmptyProfile", "EntityKeyFilter", "ConsumableKeyFilter", "GetProfilesForDeveloperAsync", "GetProfilesForProjectAsync", "GetFilterOptionsForDeveloperAsync", "GetFilterOptionsForProjectAsync"], ["System", "System.Collections.Generic", "System.Linq", "System.Linq.Expressions", "System.Threading.Tasks", "Dasync.Collections", "Infrastructure.Dotnet.Common", "JetBrains.Annotations", "Microsoft.Extensions.Logging", "MongoDB.Bson", "MongoDB.Driver"], false, false, ["UsedImplicitly"], false, false, [], {"_developerIdentityStorage": [], "_logger": []}, [], 6, false, false, false, 15, 0.7142857142857143, [], 167.57142857142858, 86, 4.761904761904762, 23.80952380952381, 1, 0, false, false, false, true, "public", false, ["Lim.Common.DotNET.EntityToConsumableProfilesStorage<Lim.Common.DotNET.DeveloperProjectProfile, Lim.Common.DotNET.Project>.SyncBulk", "Lim.Common.DotNET.IMongoClient.GetAllAsync", "Lim.Common.DotNET.DeveloperIdentityExtensions.SelectDevelopersKeys", "Lim.Common.DotNET.IDeveloperIdentityStorage.GetDeveloperIdentitiesAsync", "Lim.Common.DotNET.DeveloperProjectProfile.BuildKey", "Lim.Common.DotNET.IDeveloperIdentityStorage.GetDeveloperIdentityByKeyAsync", "Lim.Common.DotNET.IEntityToConsumableProfilesStorage<Lim.Common.DotNET.DeveloperProjectProfile>.GetProfilesForEntityAsync", "Lim.Common.DotNET.IEntityToConsumableProfilesStorage<Lim.Common.DotNET.DeveloperProjectProfile>.GetProfilesForConsumableAsync", "Lim.Common.DotNET.IEntityToConsumableProfilesStorage<Lim.Common.DotNET.DeveloperProjectProfile>.GetFilterOptionsForEntityAsync", "Lim.Common.DotNET.IEntityToConsumableProfilesStorage<Lim.Common.DotNET.DeveloperProjectProfile>.GetFilterOptionsForConsumableAsync"], ["nameof", "BsonDocument.Parse", "Builders<DeveloperProjectProfile>.Sort\n                .Descending(profile => profile.AuthoredIssueCount)\n                .Descending", "Builders<DeveloperProjectProfile>.Sort\n                .Descending", "BasicSortDefinition.Ascending", "GetDevelopersKeysByIdentitiesKeys", "issue.ParticipantIdentitiesKeys.AppendIf", "string.IsNullOrEmpty", "developersKeys.ParallelForEachAsync", "SyncDeveloperProjectProfileAsync", "aggregate.AppendStage<DeveloperProjectProfile>", "monitoredProjectKeys.Contains", "developerIdentitiesKeys.ToHashSet", "_logger.LogDebug", "MongoClient.UpsertAsync", "Builders<DeveloperProjectProfile>.Update\n                    .Min(\n                        profile => profile.ActiveSince,\n                        issue.CreationTime\n                    )\n                    .Max(\n                        profile => profile.LastActivity,\n                        issue.CreationTime\n                    )\n                    .AddToSetIf(\n                        profile => profile.AuthoredIssueKeys,\n                        issue.Key.Hash32(),\n                        developerKey == authorIdentity.DeveloperKey\n                    )\n                    .AddToSet", "Builders<DeveloperProjectProfile>.Update\n                    .Min(\n                        profile => profile.ActiveSince,\n                        issue.CreationTime\n                    )\n                    .Max(\n                        profile => profile.LastActivity,\n                        issue.CreationTime\n                    )\n                    .AddToSetIf", "Builders<DeveloperProjectProfile>.Update\n                    .Min(\n                        profile => profile.ActiveSince,\n                        issue.CreationTime\n                    )\n                    .Max", "Builders<DeveloperProjectProfile>.Update\n                    .Min", "issue.Key.Hash32"], false, false, false, false, ["Issue {} does not have an {}", "Could not fetch author identity for author {}"], false, 6, 0, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 1, true], ["DeveloperRepositoryProfilesStorage", "Lim.Common.DotNET.DeveloperRepositoryProfilesStorage", ["???.EntityToConsumableProfilesStorage<DeveloperRepositoryProfile, Repository>"], ["Lim.Common.DotNET.IDeveloperRepositoryProfilesStorage"], "src/Lim.Common.DotNET/DataStore/DeveloperRepositoryProfilesStorage.cs", 13, 0, {"_developerIdentityStorage": "Lim.Common.DotNET.IDeveloperIdentityStorage"}, ["_developerIdentityStorage", "ConsumableKeyField", "CommitCountAddField", "BasicSortDefinition", "ByEntitySortDefinition", "ByConsumableSortDefinition", "ProfileKeyProvider"], ["DeveloperRepositoryProfilesStorage", "ConsumableKeyField", "CommitCountAddField", "BasicSortDefinition", "ByEntitySortDefinition", "ByConsumableSortDefinition", "ProfileKeyProvider", "SyncDeveloperRepositoryProfileAsync", "GetForDeveloperAndRepositoryAsync", "AddRequiredFields", "GetMonitoredProfilesAsync", "BuildKey", "BuildEmptyProfile", "EntityKeyFilter", "ConsumableKeyFilter", "GetProfilesForDeveloperAsync", "GetProfilesForRepositoryAsync", "GetFilterOptionsForDeveloperAsync", "GetFilterOptionsForRepositoryAsync"], ["System", "System.Collections.Generic", "System.Linq", "System.Linq.Expressions", "System.Threading.Tasks", "Infrastructure.Dotnet.Common", "JetBrains.Annotations", "MongoDB.Bson", "MongoDB.Driver"], false, false, ["UsedImplicitly"], false, false, [], {"_developerIdentityStorage": []}, [], 6, false, false, false, 15, 0.7142857142857143, [], 347.7142857142857, 79, 4.761904761904762, 33.333333333333336, 1, 0, false, false, false, true, "public", false, ["Lim.Common.DotNET.IDeveloperIdentityStorage.GetDeveloperIdentityByKeyAsync", "Lim.Common.DotNET.IMongoClient.GetAllAsync", "Lim.Common.DotNET.DeveloperRepositoryProfile.BuildKey", "Lim.Common.DotNET.IEntityToConsumableProfilesStorage<Lim.Common.DotNET.DeveloperRepositoryProfile>.GetProfilesForEntityAsync", "Lim.Common.DotNET.IEntityToConsumableProfilesStorage<Lim.Common.DotNET.DeveloperRepositoryProfile>.GetProfilesForConsumableAsync", "Lim.Common.DotNET.IEntityToConsumableProfilesStorage<Lim.Common.DotNET.DeveloperRepositoryProfile>.GetFilterOptionsForEntityAsync", "Lim.Common.DotNET.IEntityToConsumableProfilesStorage<Lim.Common.DotNET.DeveloperRepositoryProfile>.GetFilterOptionsForConsumableAsync"], ["nameof", "BsonDocument.Parse", "Builders<DeveloperRepositoryProfile>.Sort\n                .Descending", "BasicSortDefinition.Ascending", "MongoClient.UpsertAsync", "Builders<DeveloperRepositoryProfile>.Update\n                    .Min(\n                        developerProfile => developerProfile.ActiveSince,\n                        commitContext.Timestamp\n                    )\n                    .Max(\n                        developerProfile => developerProfile.LastActivity,\n                        commitContext.Timestamp\n                    )\n                    .AddToSetEachIf(\n                        developerProfile => developerProfile.SecurityExpertise,\n                        commitInsights?.SecurityExpertise,\n                        commitInsights?.SecurityExpertise.Any()\n                    )\n                    .AddToSetEach(\n                        developerProfile => developerProfile.CommitShasToCommitTraits[commitContext.Sha]\n                            .Languages,\n                        commitContext.Languages\n                    )\n                    .AddToSetIf(\n                        developerProfile => developerProfile.CommitShasToCommitTraits[commitContext.Sha]\n                            .BadgeRelatedInsights,\n                        BadgeRelatedInsight.ApiModified,\n                        commitInsights?.BadgeRelatedInsights.Any(_ => _ == BadgeRelatedInsight.ApiModified)\n                    )\n                    .AddToSetIf(\n                        developerProfile => developerProfile.CommitShasToCommitTraits[commitContext.Sha]\n                            .BadgeRelatedInsights,\n                        BadgeRelatedInsight.PiiModified,\n                        commitInsights?.BadgeRelatedInsights.Any(_ => _ == BadgeRelatedInsight.PiiModified)\n                    )\n                    .AddToSetIf(\n                        developerProfile => developerProfile.CommitShasToCommitTraits[commitContext.Sha]\n                            .BadgeRelatedInsights,\n                        BadgeRelatedInsight.DataModelModified,\n                        commitInsights?.BadgeRelatedInsights.Any(_ => _ == BadgeRelatedInsight.DataModelModified)\n                    )\n                    .AddToSetIf(\n                        developerProfile => developerProfile.SecurityCommits,\n                        commitContext.Sha.Hash32(),\n                        commitInsights != null && commitInsights.SecurityExpertise.Any()\n                    )\n                    .AddToSetEachIf", "Builders<DeveloperRepositoryProfile>.Update\n                    .Min(\n                        developerProfile => developerProfile.ActiveSince,\n                        commitContext.Timestamp\n                    )\n                    .Max(\n                        developerProfile => developerProfile.LastActivity,\n                        commitContext.Timestamp\n                    )\n                    .AddToSetEachIf(\n                        developerProfile => developerProfile.SecurityExpertise,\n                        commitInsights?.SecurityExpertise,\n                        commitInsights?.SecurityExpertise.Any()\n                    )\n                    .AddToSetEach(\n                        developerProfile => developerProfile.CommitShasToCommitTraits[commitContext.Sha]\n                            .Languages,\n                        commitContext.Languages\n                    )\n                    .AddToSetIf(\n                        developerProfile => developerProfile.CommitShasToCommitTraits[commitContext.Sha]\n                            .BadgeRelatedInsights,\n                        BadgeRelatedInsight.ApiModified,\n                        commitInsights?.BadgeRelatedInsights.Any(_ => _ == BadgeRelatedInsight.ApiModified)\n                    )\n                    .AddToSetIf(\n                        developerProfile => developerProfile.CommitShasToCommitTraits[commitContext.Sha]\n                            .BadgeRelatedInsights,\n                        BadgeRelatedInsight.PiiModified,\n                        commitInsights?.BadgeRelatedInsights.Any(_ => _ == BadgeRelatedInsight.PiiModified)\n                    )\n                    .AddToSetIf(\n                        developerProfile => developerProfile.CommitShasToCommitTraits[commitContext.Sha]\n                            .BadgeRelatedInsights,\n                        BadgeRelatedInsight.DataModelModified,\n                        commitInsights?.BadgeRelatedInsights.Any(_ => _ == BadgeRelatedInsight.DataModelModified)\n                    )\n                    .AddToSetIf", "Builders<DeveloperRepositoryProfile>.Update\n                    .Min(\n                        developerProfile => developerProfile.ActiveSince,\n                        commitContext.Timestamp\n                    )\n                    .Max(\n                        developerProfile => developerProfile.LastActivity,\n                        commitContext.Timestamp\n                    )\n                    .AddToSetEachIf(\n                        developerProfile => developerProfile.SecurityExpertise,\n                        commitInsights?.SecurityExpertise,\n                        commitInsights?.SecurityExpertise.Any()\n                    )\n                    .AddToSetEach(\n                        developerProfile => developerProfile.CommitShasToCommitTraits[commitContext.Sha]\n                            .Languages,\n                        commitContext.Languages\n                    )\n                    .AddToSetIf(\n                        developerProfile => developerProfile.CommitShasToCommitTraits[commitContext.Sha]\n                            .BadgeRelatedInsights,\n                        BadgeRelatedInsight.ApiModified,\n                        commitInsights?.BadgeRelatedInsights.Any(_ => _ == BadgeRelatedInsight.ApiModified)\n                    )\n                    .AddToSetIf(\n                        developerProfile => developerProfile.CommitShasToCommitTraits[commitContext.Sha]\n                            .BadgeRelatedInsights,\n                        BadgeRelatedInsight.PiiModified,\n                        commitInsights?.BadgeRelatedInsights.Any(_ => _ == BadgeRelatedInsight.PiiModified)\n                    )\n                    .AddToSetIf", "Builders<DeveloperRepositoryProfile>.Update\n                    .Min(\n                        developerProfile => developerProfile.ActiveSince,\n                        commitContext.Timestamp\n                    )\n                    .Max(\n                        developerProfile => developerProfile.LastActivity,\n                        commitContext.Timestamp\n                    )\n                    .AddToSetEachIf(\n                        developerProfile => developerProfile.SecurityExpertise,\n                        commitInsights?.SecurityExpertise,\n                        commitInsights?.SecurityExpertise.Any()\n                    )\n                    .AddToSetEach(\n                        developerProfile => developerProfile.CommitShasToCommitTraits[commitContext.Sha]\n                            .Languages,\n                        commitContext.Languages\n                    )\n                    .AddToSetIf(\n                        developerProfile => developerProfile.CommitShasToCommitTraits[commitContext.Sha]\n                            .BadgeRelatedInsights,\n                        BadgeRelatedInsight.ApiModified,\n                        commitInsights?.BadgeRelatedInsights.Any(_ => _ == BadgeRelatedInsight.ApiModified)\n                    )\n                    .AddToSetIf", "Builders<DeveloperRepositoryProfile>.Update\n                    .Min(\n                        developerProfile => developerProfile.ActiveSince,\n                        commitContext.Timestamp\n                    )\n                    .Max(\n                        developerProfile => developerProfile.LastActivity,\n                        commitContext.Timestamp\n                    )\n                    .AddToSetEachIf(\n                        developerProfile => developerProfile.SecurityExpertise,\n                        commitInsights?.SecurityExpertise,\n                        commitInsights?.SecurityExpertise.Any()\n                    )\n                    .AddToSetEach(\n                        developerProfile => developerProfile.CommitShasToCommitTraits[commitContext.Sha]\n                            .Languages,\n                        commitContext.Languages\n                    )\n                    .AddToSetIf", "Builders<DeveloperRepositoryProfile>.Update\n                    .Min(\n                        developerProfile => developerProfile.ActiveSince,\n                        commitContext.Timestamp\n                    )\n                    .Max(\n                        developerProfile => developerProfile.LastActivity,\n                        commitContext.Timestamp\n                    )\n                    .AddToSetEachIf(\n                        developerProfile => developerProfile.SecurityExpertise,\n                        commitInsights?.SecurityExpertise,\n                        commitInsights?.SecurityExpertise.Any()\n                    )\n                    .AddToSetEach", "Builders<DeveloperRepositoryProfile>.Update\n                    .Min(\n                        developerProfile => developerProfile.ActiveSince,\n                        commitContext.Timestamp\n                    )\n                    .Max(\n                        developerProfile => developerProfile.LastActivity,\n                        commitContext.Timestamp\n                    )\n                    .AddToSetEachIf", "Builders<DeveloperRepositoryProfile>.Update\n                    .Min(\n                        developerProfile => developerProfile.ActiveSince,\n                        commitContext.Timestamp\n                    )\n                    .Max", "Builders<DeveloperRepositoryProfile>.Update\n                    .Min", ".SecurityExpertise.Any", ".BadgeRelatedInsights.Any", "commitContext.Sha.Hash32", "commitInsights.SecurityExpertise.Any", "commitInsights.CodeFrameworks.Any", "Builders<DeveloperRepositoryProfile>.Update\n                    .Min(\n                        profile => profile.ActiveSince,\n                        pullRequest.CreationTime\n                    )\n                    .Max(\n                        profile => profile.LastActivity,\n                        pullRequest.CreationTime\n                    )\n                    .AddToSetIf(\n                        profile => profile.AuthoredPullRequestIds,\n                        pullRequest.Key.Hash32(),\n                        developerKey == authorDeveloperKey\n                    )\n                    .AddToSetIf", "Builders<DeveloperRepositoryProfile>.Update\n                    .Min(\n                        profile => profile.ActiveSince,\n                        pullRequest.CreationTime\n                    )\n                    .Max(\n                        profile => profile.LastActivity,\n                        pullRequest.CreationTime\n                    )\n                    .AddToSetIf", "Builders<DeveloperRepositoryProfile>.Update\n                    .Min(\n                        profile => profile.ActiveSince,\n                        pullRequest.CreationTime\n                    )\n                    .Max", "pullRequest.Key.Hash32", "(await MongoClient.GetAllAsync<DeveloperRepositoryProfile>(\n                        developerRepositoryProfile =>\n                            developerRepositoryProfile.DeveloperKey == developerKey &&\n                            developerRepositoryProfile.RepositoryKey == repositoryKey\n                    )\n                )\n                .FirstOrDefault", "aggregate.AppendStage<DeveloperRepositoryProfile>", "monitoredRepositoryKeys.Contains", "Builders<DeveloperRepositoryProfile>.Update\n                    .Min(\n                        developerProfile => developerProfile.ActiveSince,\n                        activeSince\n                    )\n                    .Max"], false, false, false, false, [], false, 6, 0, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 1, true], ["DevelopersStorage", "Lim.Common.DotNET.DevelopersStorage", [], ["Lim.Common.DotNET.IDevelopersStorage"], "src/Lim.Common.DotNET/DataStore/DevelopersStorage.cs", 8, 0, {"_mongoClient": "Lim.Common.DotNET.IMongoClient"}, ["_mongoClient"], ["DevelopersStorage", "SyncDeveloperAsync", "GetDevelopersAsync", "TryDeleteDeveloperAsync", "GetDeveloperByKeyAsync"], ["System.Collections.Generic", "System.Threading.Tasks", "JetBrains.Annotations", "MongoDB.Driver"], false, false, ["UsedImplicitly"], false, false, [], {"_mongoClient": []}, [], 0, false, false, false, 6, 1.0, [], 98.66666666666667, 65, 0.0, 100.0, 1, 0, false, false, false, true, "public", false, ["Lim.Common.DotNET.IMongoClient.GetAllAsync", "Lim.Common.DotNET.IMongoClient.TryDeleteAsync", "Lim.Common.DotNET.IMongoClient.GetAsync"], ["_mongoClient.UpsertAsync", "Builders<Developer>.Update\n                    .Set", "_mongoClient.GetAllAsync", "Builders<Developer>.Filter.In"], false, false, false, false, [], false, 0, 0, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, true], ["EntityProfilesStorage", "Lim.Common.DotNET.EntityProfilesStorage<TProfile, TEntity>", ["???.ProfilesStorage<TProfile>"], [], "src/Lim.Common.DotNET/DataStore/EntityProfilesStorage.cs", 8, 0, {}, ["EntityPropertyName"], ["EntityProfilesStorage", "EntityPropertyName", "DeleteProfilesAsync", "EnrichProfiles"], ["System", "System.Linq.Expressions", "System.Threading.Tasks", "MongoDB.Driver"], false, false, [], false, false, [], {}, [], 1, false, false, false, 3, 0.75, [], 73.0, 34, 0.0, 0.0, 1, 0, false, true, false, true, "public", true, ["Lim.Common.DotNET.IMongoClient.DeleteManyAsync", "Lim.Common.DotNET.MongoExtensions.LookupAndUnwind"], ["aggregation\n                .LookupAndUnwind<TProfile, TEntity>(\n                    \"_id\",\n                    \"_id\",\n                    EntityPropertyName\n                )\n                .Sort"], false, false, false, false, ["_id"], false, 1, 0, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, true], ["EntityToConsumableProfilesStorage", "Lim.Common.DotNET.EntityToConsumableProfilesStorage<TProfile, TConsumable>", [], ["???.IEntityToConsumableProfilesStorage<TProfile>"], "src/Lim.Common.DotNET/DataStore/EntityToConsumableProfilesStorage.cs", 11, 0, {"MongoClient": "Lim.Common.DotNET.IMongoClient", "_lookupMonitoredConsumables": "???.BsonDocument"}, ["MongoClient", "_lookupMonitoredConsumables", "ConsumableKeyField", "ByEntitySortDefinition", "ByConsumableSortDefinition", "ProfileKeyProvider"], ["EntityToConsumableProfilesStorage", "LookupMonitoredConsumables", "ConsumableKeyField", "ByEntitySortDefinition", "ByConsumableSortDefinition", "ProfileKeyProvider", "GetProfilesAsync", "GetProfilesForEntityAsync", "GetProfilesForConsumableAsync", "GetProfilesCountForConsumableAsync", "AddRequiredFields", "GetFilterOptionsForEntityAsync", "GetFilterOptionsForConsumableAsync", "BuildKey", "BuildEmptyProfile", "SyncBulk", "EntityKeyFilter", "ConsumableKeyFilter", "ApplyMonitoredFilter", "BuildPipeline"], ["System", "System.Collections.Generic", "System.Linq", "System.Linq.Expressions", "System.Threading.Tasks", "MongoDB.Bson", "MongoDB.Driver"], false, false, [], false, false, [], {"MongoClient": [], "_lookupMonitoredConsumables": []}, [], 5, false, false, false, 15, 0.75, [], 185.8, 48, 0.0, 35.0, 1, 0, false, true, false, true, "public", true, ["Lim.Common.DotNET.MongoExtensions.GetCollectionName", "Lim.Common.DotNET.IMongoClient.GetAllAsync", "Lim.Common.DotNET.IMongoClient.GetCollectionAggregate", "Lim.Common.DotNET.IMongoClient.CountAsync", "Lim.Common.DotNET.IMongoClient.FindDistinctAsync"], ["BsonDocument.Parse", "BuildPipeline", "AddRequiredFields(aggregate)\n                        .ApplyFilters", "ApplyMonitoredFilter(aggregate)\n                        .Match(EntityKeyFilter(entityKey))\n                        .ApplyFiltersAndProject", "ApplyMonitoredFilter(aggregate)\n                        .Match", "ApplyMonitoredFilter(aggregate)\n                        .Match(ConsumableKeyFilter(consumableKey))\n                        .ApplyFiltersAndProject", "MongoClient.AllKeysAsync", "Builders<TProfile>.Filter.In", "combinedKeysToOriginalKeys.Keys.Except", "MongoClient.TryInsertAsync", "aggregation\n                .AppendStage<BsonDocument>(LookupMonitoredConsumables)\n                .Match(Builders<BsonDocument>.Filter.SizeGt(\"consumables\", 0))\n                .Project<TProfile>", "aggregation\n                .AppendStage<BsonDocument>(LookupMonitoredConsumables)\n                .Match", "aggregation\n                .AppendStage<BsonDocument>", "Builders<BsonDocument>.Filter.SizeGt", "Builders<BsonDocument>.Projection.Exclude", "ApplyMonitoredFilter(aggregate)\n                .Match(where)\n                .ToPage", "ApplyMonitoredFilter(aggregate)\n                .Match"], false, false, false, false, ["consumables"], false, 5, 0, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 1, true], ["GovernanceRulesStorage", "Lim.Common.DotNET.GovernanceRulesStorage", ["???.BaseRulesStorage<GovernanceRule>"], ["Lim.Common.DotNET.IGovernanceRulesStorage"], "src/Lim.Common.DotNET/DataStore/GovernanceRulesStorage.cs", 8, 0, {}, [], ["GovernanceRulesStorage", "GetGovernanceRulesAsync", "SyncGovernanceRuleAsync", "UpdateGovernanceRuleNameAsync", "DeleteGovernanceRuleAsync", "DeleteGovernanceRulesAsync"], ["System.Collections.Generic", "System.Threading.Tasks", "JetBrains.Annotations", "MongoDB.Driver"], false, false, ["UsedImplicitly"], false, false, [], {}, [], 0, false, false, false, 7, 1.0, [], 65.85714285714286, 41, 0.0, 100.0, 1, 0, false, false, false, true, "public", false, ["Lim.Common.DotNET.BaseRulesStorage<Lim.Common.DotNET.GovernanceRule>.GetRulesAsync", "Lim.Common.DotNET.IMongoClient.GetAllAsync", "Lim.Common.DotNET.BaseRulesStorage<Lim.Common.DotNET.GovernanceRule>.SyncRuleAsync", "Lim.Common.DotNET.BaseRulesStorage<Lim.Common.DotNET.GovernanceRule>.DeleteRuleAsync", "Lim.Common.DotNET.BaseRulesStorage<Lim.Common.DotNET.GovernanceRule>.DeleteRulesAsync"], ["governanceRuleKeys.Contains", "MongoClient.UpdateAsync", "Builders<GovernanceRule>.Update\n                    .Set"], false, false, false, false, [], false, 0, 0, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, true], ["TerraformModulesStorage", "Lim.Common.DotNET.TerraformModulesStorage", [], ["Lim.Common.DotNET.ITerraformModulesStorage"], "src/Lim.Common.DotNET/DataStore/InfrastructureClustersStorage.cs", 6, 0, {"_mongoClient": "Lim.Common.DotNET.IMongoClient"}, ["_mongoClient"], ["TerraformModulesStorage", "SyncTerraformModuleAsync", "GetTerraformModulesAsync"], ["System.Collections.Generic", "System.Threading.Tasks"], false, false, [], false, false, [], {"_mongoClient": []}, [], 0, false, false, false, 3, 1.0, [], 74.66666666666667, 62, 0.0, 100.0, 1, 0, false, false, false, true, "public", false, ["Lim.Common.DotNET.IMongoClient.UpsertAsync", "Lim.Common.DotNET.IMongoClient.GetAllAsync"], [], false, false, false, false, [], false, 0, 0, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, false], ["IssuesStorage", "Lim.Common.DotNET.IssuesStorage", [], ["Lim.Common.DotNET.IIssuesStorage"], "src/Lim.Common.DotNET/DataStore/IssuesStorage.cs", 10, 0, {"_developerProjectProfilesStorage": "Lim.Common.DotNET.IDeveloperProjectProfilesStorage", "_mongoClient": "Lim.Common.DotNET.IMongoClient", "_repositoryProjectProfileStorage": "Lim.Common.DotNET.IRepositoryProjectProfileStorage"}, ["_developerProjectProfilesStorage", "_mongoClient", "_repositoryProjectProfileStorage", "LatestFirst"], ["IssuesStorage", "LatestFirst", "SyncIssueAsync", "GetOpenIssuesAsync", "GetAllIssuesAsync", "GetProjectIssuesCountAsync", "GetProjectOpenIssuesCountAsync", "GetProjectLatestIssueCreationTime"], ["System", "System.Collections.Generic", "System.Linq", "System.Threading.Tasks", "JetBrains.Annotations", "MongoDB.Driver"], false, false, ["UsedImplicitly"], false, false, [], {"_developerProjectProfilesStorage": [], "_mongoClient": [], "_repositoryProjectProfileStorage": []}, [], 1, false, false, false, 7, 0.875, [], 319.25, 117, 12.5, 87.5, 1, 0, false, false, false, true, "public", false, ["Lim.Common.DotNET.IDeveloperProjectProfilesStorage.SyncDeveloperProjectProfileAsync", "Lim.Common.DotNET.IRepositoryProjectProfileStorage.SyncRepositoryProjectProfileAsync", "Lim.Common.DotNET.IMongoClient.GetAllAsync", "Lim.Common.DotNET.IMongoClient.CountAsync"], ["Builders<Issue>.Sort.Descending", "Builders<Issue>.Update\n                .Set(_ => _.AuthorIdentityKey, issue.AuthorIdentityKey)\n                .Set(_ => _.IsOpen, issue.IsOpen)\n                .SetIfNotEmpty(_ => _.Title, issue.Title)\n                .SetIfNotEmpty(_ => _.Description, issue.Description)\n                .SetIfNotEmpty(_ => _.ParentIssueId, issue.ParentIssueId)\n                .AddToSetEachIf(\n                    _ => _.ParticipantIdentitiesKeys,\n                    issue.ParticipantIdentitiesKeys,\n                    issue.ParticipantIdentitiesKeys.Any()\n                )\n                .AddToSetEachIf(\n                    _ => _.AssigneeIdentitiesKeys,\n                    issue.AssigneeIdentitiesKeys,\n                    issue.AssigneeIdentitiesKeys.Any()\n                )\n                .AddToSetEachIf(\n                    _ => _.Comments,\n                    issue.Comments,\n                    issue.Comments.Any()\n                )\n                .Set(_ => _.Labels, issue.Labels)\n                .Set(_ => _.AdditionalDetails, issue.AdditionalDetails)\n                .AddToSetEachIf", "Builders<Issue>.Update\n                .Set(_ => _.AuthorIdentityKey, issue.AuthorIdentityKey)\n                .Set(_ => _.IsOpen, issue.IsOpen)\n                .SetIfNotEmpty(_ => _.Title, issue.Title)\n                .SetIfNotEmpty(_ => _.Description, issue.Description)\n                .SetIfNotEmpty(_ => _.ParentIssueId, issue.ParentIssueId)\n                .AddToSetEachIf(\n                    _ => _.ParticipantIdentitiesKeys,\n                    issue.ParticipantIdentitiesKeys,\n                    issue.ParticipantIdentitiesKeys.Any()\n                )\n                .AddToSetEachIf(\n                    _ => _.AssigneeIdentitiesKeys,\n                    issue.AssigneeIdentitiesKeys,\n                    issue.AssigneeIdentitiesKeys.Any()\n                )\n                .AddToSetEachIf(\n                    _ => _.Comments,\n                    issue.Comments,\n                    issue.Comments.Any()\n                )\n                .Set(_ => _.Labels, issue.Labels)\n                .Set", "Builders<Issue>.Update\n                .Set(_ => _.AuthorIdentityKey, issue.AuthorIdentityKey)\n                .Set(_ => _.IsOpen, issue.IsOpen)\n                .SetIfNotEmpty(_ => _.Title, issue.Title)\n                .SetIfNotEmpty(_ => _.Description, issue.Description)\n                .SetIfNotEmpty(_ => _.ParentIssueId, issue.ParentIssueId)\n                .AddToSetEachIf(\n                    _ => _.ParticipantIdentitiesKeys,\n                    issue.ParticipantIdentitiesKeys,\n                    issue.ParticipantIdentitiesKeys.Any()\n                )\n                .AddToSetEachIf(\n                    _ => _.AssigneeIdentitiesKeys,\n                    issue.AssigneeIdentitiesKeys,\n                    issue.AssigneeIdentitiesKeys.Any()\n                )\n                .AddToSetEachIf(\n                    _ => _.Comments,\n                    issue.Comments,\n                    issue.Comments.Any()\n                )\n                .Set", "Builders<Issue>.Update\n                .Set(_ => _.AuthorIdentityKey, issue.AuthorIdentityKey)\n                .Set(_ => _.IsOpen, issue.IsOpen)\n                .SetIfNotEmpty(_ => _.Title, issue.Title)\n                .SetIfNotEmpty(_ => _.Description, issue.Description)\n                .SetIfNotEmpty(_ => _.ParentIssueId, issue.ParentIssueId)\n                .AddToSetEachIf(\n                    _ => _.ParticipantIdentitiesKeys,\n                    issue.ParticipantIdentitiesKeys,\n                    issue.ParticipantIdentitiesKeys.Any()\n                )\n                .AddToSetEachIf(\n                    _ => _.AssigneeIdentitiesKeys,\n                    issue.AssigneeIdentitiesKeys,\n                    issue.AssigneeIdentitiesKeys.Any()\n                )\n                .AddToSetEachIf", "Builders<Issue>.Update\n                .Set(_ => _.AuthorIdentityKey, issue.AuthorIdentityKey)\n                .Set(_ => _.IsOpen, issue.IsOpen)\n                .SetIfNotEmpty(_ => _.Title, issue.Title)\n                .SetIfNotEmpty(_ => _.Description, issue.Description)\n                .SetIfNotEmpty(_ => _.ParentIssueId, issue.ParentIssueId)\n                .AddToSetEachIf(\n                    _ => _.ParticipantIdentitiesKeys,\n                    issue.ParticipantIdentitiesKeys,\n                    issue.ParticipantIdentitiesKeys.Any()\n                )\n                .AddToSetEachIf", "Builders<Issue>.Update\n                .Set(_ => _.AuthorIdentityKey, issue.AuthorIdentityKey)\n                .Set(_ => _.IsOpen, issue.IsOpen)\n                .SetIfNotEmpty(_ => _.Title, issue.Title)\n                .SetIfNotEmpty(_ => _.Description, issue.Description)\n                .SetIfNotEmpty(_ => _.ParentIssueId, issue.ParentIssueId)\n                .AddToSetEachIf", "Builders<Issue>.Update\n                .Set(_ => _.AuthorIdentityKey, issue.AuthorIdentityKey)\n                .Set(_ => _.IsOpen, issue.IsOpen)\n                .SetIfNotEmpty(_ => _.Title, issue.Title)\n                .SetIfNotEmpty(_ => _.Description, issue.Description)\n                .SetIfNotEmpty", "Builders<Issue>.Update\n                .Set(_ => _.AuthorIdentityKey, issue.AuthorIdentityKey)\n                .Set(_ => _.IsOpen, issue.IsOpen)\n                .SetIfNotEmpty(_ => _.Title, issue.Title)\n                .SetIfNotEmpty", "Builders<Issue>.Update\n                .Set(_ => _.AuthorIdentityKey, issue.AuthorIdentityKey)\n                .Set(_ => _.IsOpen, issue.IsOpen)\n                .SetIfNotEmpty", "Builders<Issue>.Update\n                .Set(_ => _.AuthorIdentityKey, issue.AuthorIdentityKey)\n                .Set", "Builders<Issue>.Update\n                .Set", "issue.ParticipantIdentitiesKeys.Any", "issue.AssigneeIdentitiesKeys.Any", "issue.Comments.Any", "issue.RelatedPullRequestIdWithRepositoryUrlPairs.Any", "_mongoClient.UpsertAsync", "(await _mongoClient.GetPageAsync(\n                    LatestFirst,\n                    1,\n                    issue => issue.ProjectKey == projectKey\n                )).FirstOrDefault", "_mongoClient.GetPageAsync"], false, false, false, false, [], false, 1, 0, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, true], ["MaterialChangesStorage", "Lim.Common.DotNET.MaterialChangesStorage", [], ["Lim.Common.DotNET.IMaterialChangesStorage"], "src/Lim.Common.DotNET/DataStore/MaterialChangesStorage.cs", 9, 0, {"CommitLookupFieldName": "string", "_mongoClient": "Lim.Common.DotNET.IMongoClient"}, ["_mongoClient"], ["MaterialChangesStorage", "SyncMaterialChangesAsync", "GetMaterialChangesAsync", "GetMaterialChangeAsync", "DismissMaterialChange", "ClearMaterialChangesAsync"], ["System.Collections.Generic", "System.Linq", "System.Threading.Tasks", "Infrastructure.Dotnet.Common", "MongoDB.Driver"], false, false, [], false, false, [], {"CommitLookupFieldName": [], "_mongoClient": []}, [], 0, false, false, false, 7, 1.0, [], 439.85714285714283, 198, 0.0, 100.0, 1, 0, false, false, false, true, "public", false, ["Lim.Common.DotNET.IMongoClient.GetAllAsync", "Lim.Common.DotNET.MaterialChange.GetHashCode", "Lim.Common.DotNET.IMongoClient.UpsertManyAsync", "Lim.Common.DotNET.IMongoClient.GetAsync", "Lim.Common.DotNET.IMongoClient.DeleteManyAsync"], ["materialChanges.None", "(await _mongoClient.GetAllAsync<MaterialChange>(\n                    _ => _.SourceCommitSha == sourceCommitSha && _.TargetCommitSha == targetCommitSha && _.Dismissed\n                ))\n                .Select(materialChange => materialChange.GetHashCode())\n                .ToHashSet", "(await _mongoClient.GetAllAsync<MaterialChange>(\n                    _ => _.SourceCommitSha == sourceCommitSha && _.TargetCommitSha == targetCommitSha && _.Dismissed\n                ))\n                .Select", "previousDismissedMaterialChangesByHash.Contains", "Builders<MaterialChange>.Filter\n                .Where", "Builders<MaterialChange>.Filter.Where", "_.ModuleKeys.Contains", "_mongoClient.GetAllAsync", "materialChanges.OfType<CompoundMaterialChange>()\n                .ToList", "materialChanges.OfType<CompoundMaterialChange>", "compoundMaterialChanges\n                .SelectMany(compoundMaterialChange => compoundMaterialChange.PartialMaterialChangeKeys)\n                .ToHashSet", "compoundMaterialChanges\n                .SelectMany", "(await _mongoClient.GetAllAsync<MaterialChange>(materialChange => partialMaterialChangesKeys.Contains(materialChange.Key))).ToDictionary", "partialMaterialChangesKeys.Contains", "compoundMaterialChange.PartialMaterialChangeKeys.Select(partialKey => partialMaterialChangesByKey[partialKey])\n                    .ToList", "compoundMaterialChange.PartialMaterialChangeKeys.Select", "_.RepositoryKeys.Contains", "governanceRuleKeys.Contains", "_mongoClient.UpdateAsync", "Builders<MaterialChange>.Update\n                    .Set"], false, false, false, false, ["commit"], false, 0, 0, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, true], ["MessagingChannelStorage", "Lim.Common.DotNET.MessagingChannelStorage", [], ["Lim.Common.DotNET.IMessagingChannelStorage"], "src/Lim.Common.DotNET/DataStore/MessagingChannelStorage.cs", 8, 0, {"_mongoClient": "Lim.Common.DotNET.IMongoClient"}, ["_mongoClient"], ["MessagingChannelStorage", "GetMessagingChannelAsync", "FindChannelForServerAsync", "UpsertChannelAsync", "ChannelsForServerAsync"], ["System.Collections.Generic", "System.Linq", "System.Threading.Tasks", "JetBrains.Annotations"], false, false, ["UsedImplicitly"], false, false, [], {"_mongoClient": []}, [], 0, false, false, false, 5, 1.0, [], 116.0, 101, 0.0, 100.0, 1, 0, false, false, false, true, "public", false, ["Lim.Common.DotNET.IMongoClient.GetAsync", "Lim.Common.DotNET.IMongoClient.GetAllAsync", "Lim.Common.DotNET.IMongoClient.UpsertAsync"], ["(await _mongoClient.GetAllAsync<MessagingChannel>\n            (\n                channel => channel.ChannelName == channelName &&\n                           channel.ServerId == serverId\n            )).FirstOrDefault"], false, false, false, false, [], false, 0, 0, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, false], ["OrganizationProfileStorage", "Lim.Common.DotNET.OrganizationProfileStorage", [], ["Lim.Common.DotNET.IOrganizationProfileStorage"], "src/Lim.Common.DotNET/DataStore/OrganizationProfileStorage.cs", 7, 0, {"_mongoClient": "Lim.Common.DotNET.IMongoClient"}, ["_mongoClient"], ["OrganizationProfileStorage", "SyncOrganizationProfileAsync", "UpdateOrganizationHasApiClassificationAsync", "GetOrganizationProfileAsync", "GetOrganizationLanguagesAsync", "GetOrganizationLicensesAsync", "GetOrganizationTechnologiesAsync"], ["System.Collections.Generic", "System.Threading.Tasks", "JetBrains.Annotations"], false, false, ["UsedImplicitly"], false, false, [], {"_mongoClient": []}, [], 0, false, false, false, 7, 1.0, [], 111.42857142857143, 65, 0.0, 100.0, 1, 0, false, false, false, true, "public", false, ["Lim.Common.DotNET.IMongoClient.UpsertAsync", "Lim.Common.DotNET.IMongoClient.GetAsync"], [], false, false, false, false, [], false, 0, 0, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, false], ["ProfilesStorage", "Lim.Common.DotNET.ProfilesStorage<TProfile>", [], [], "src/Lim.Common.DotNET/DataStore/ProfilesStorage.cs", 10, 0, {"MongoClient": "Lim.Common.DotNET.IMongoClient"}, ["MongoClient", "SortOrder"], ["ProfilesStorage", "SortOrder", "GetAllKeysAsync", "AppendSortOption", "GetSortOrderOrDefault", "GetProfilesAsync", "GetProfilesAndCountAsync", "GetProfileByKeyAsync", "SyncProfilesAsync", "DeleteProfileAsync", "DeleteProfilesAsync", "DeleteStaleProfilesAsync", "BuildEmptyProfileAsync", "GetFilterOptionsAsync", "EnrichProfiles"], ["System", "System.Collections.Generic", "System.Linq", "System.Linq.Expressions", "System.Threading.Tasks", "MongoDB.Driver"], false, false, [], false, false, [], {"MongoClient": []}, [], 1, false, false, false, 19, 0.95, [], 174.35, 82, 5.0, 50.0, 1, 0, false, true, false, true, "public", true, ["Lim.Common.DotNET.IMongoClient.AllKeysAsync", "Lim.Common.DotNET.IMongoClient.GetCollectionAggregateWithCount", "Lim.Common.DotNET.IMongoClient.GetCollectionAggregate", "Lim.Common.DotNET.MongoExtensions.IdFilter", "Lim.Common.DotNET.IMongoClient.UpsertManyAsync", "Lim.Common.DotNET.IMongoClient.TryDeleteAsync", "Lim.Common.DotNET.IMongoClient.FindDistinctAsync"], ["currentSort.Ascending", "currentSort.Descending", "Builders<TProfile>.Sort.Combine", "sortOptionsDefinition.GetValueOrDefault", "sortOptions.Aggregate", "defaultSecondarySort.Where(sortOptionKey => sortOptionKey != tableSortOption.Value)\n                .SelectMany(sortOptionKey => sortOptionsDefinition.GetValueOrDefault(sortOptionKey) ?? new List<ConsumableSortOption>())\n                .Aggregate", "defaultSecondarySort.Where(sortOptionKey => sortOptionKey != tableSortOption.Value)\n                .SelectMany", "defaultSecondarySort.Where", "EnrichProfiles", "aggregate\n                            .ApplyFilters(orTableFilterToValue, TableFilterOperator.Or)\n                            .ApplyFilters", "aggregate\n                            .ApplyFilters", "aggregate\n                        .ApplyFilters(orTableFilterToValue, TableFilterOperator.Or)\n                        .ApplyFilters", "aggregate\n                        .ApplyFilters", "GetProfilesAsync", "Builders<TProfile>.Filter.In", "EnrichProfiles(aggregation)\n                        .MatchIfNotNull(where)\n                        .LimitIfNotNull(limit)\n                        .ProjectIfNotNull", "EnrichProfiles(aggregation)\n                        .MatchIfNotNull(where)\n                        .LimitIfNotNull", "EnrichProfiles(aggregation)\n                        .MatchIfNotNull", "(await GetProfilesAsync(key.IdFilter<TProfile>())).FirstOrDefault", "MongoClient.DeleteManyAsync", "DeleteProfilesAsync", "Builders<TProfile>.Filter.Nin", "aggregate.ApplyFiltersAndProject", "aggregation\n                .Sort"], false, false, false, false, [], false, 1, 0, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, true], ["ProjectProfilesStorage", "Lim.Common.DotNET.ProjectProfilesStorage", ["???.ConsumableProfilesStorage<ProjectProfile, Project>"], ["Lim.Common.DotNET.IProjectProfilesStorage"], "src/Lim.Common.DotNET/DataStore/ProjectProfilesStorage.cs", 5, 0, {}, ["EntityPropertyName"], ["ProjectProfilesStorage", "EntityPropertyName", "BuildEmptyProfile"], ["JetBrains.Annotations"], false, false, ["UsedImplicitly"], false, false, [], {}, [], 1, false, false, false, 2, 0.6666666666666666, [], 24.666666666666668, 20, 0.0, 33.333333333333336, 1, 0, false, false, false, false, "public", false, ["Lim.Common.DotNET.ProjectProfile.EmptyProfileFor"], ["nameof"], false, false, false, false, [], false, 1, 0, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, false], ["ProjectsStorage", "Lim.Common.DotNET.ProjectsStorage", ["???.ConsumablesStorage<Project>"], ["Lim.Common.DotNET.IProjectsStorage"], "src/Lim.Common.DotNET/DataStore/ProjectsStorage.cs", 10, 0, {}, [], ["ProjectsStorage", "GetMonitoredProjectsAsync", "GetProjectsAsync", "CountMonitoredProjectsAsync", "GetAssociatedProjectsByProjectIdAsync", "GetAssociatedProjectsByRepositoriesAsync", "GetProjectKeysByServerUrlAsync", "GetMonitoredProjectKeysByServerUrlAsync", "SyncUpdateDefinition", "GetProjectAsync", "GetProjectsPageWithCountAsync"], ["System.Collections.Generic", "System.Linq", "System.Threading.Tasks", "Infrastructure.Dotnet.Common", "JetBrains.Annotations", "MongoDB.Driver"], false, false, ["UsedImplicitly"], false, false, [], {}, [], 0, false, false, false, 12, 1.0, [], 174.41666666666666, 67, 0.0, 66.66666666666667, 1, 0, false, false, false, true, "public", false, ["Lim.Common.DotNET.ConsumablesStorage<Lim.Common.DotNET.Project>.GetAsync", "Lim.Common.DotNET.IMongoClient.CountAsync", "Lim.Common.DotNET.ProviderExtensions.Provides", "Lim.Common.DotNET.ConsumablesStorage<Lim.Common.DotNET.Project>.GetKeysByServerUrlAsync", "Lim.Common.DotNET.ConsumablesStorage<Lim.Common.DotNET.Project>.GetMonitoredKeysByServerUrlAsync", "Lim.Common.DotNET.ConsumablesStorage<Lim.Common.DotNET.Project>.SyncUpdateDefinition", "Lim.Common.DotNET.IConsumablesStorage<Lim.Common.DotNET.Project>.GetConsumableAsync", "Lim.Common.DotNET.IConsumablesStorage<Lim.Common.DotNET.Project>.GetAllAsync", "Lim.Common.DotNET.IConsumablesStorage<Lim.Common.DotNET.Project>.GetPageWithCountAsync"], ["GetAsync", "Builders<Project>.Filter.In", "potentialProjects.Where(\n                    project => !project.Server.Provider.Provides(Consumable.Repositories) ||\n                               project.ServerUrl == serverUrl\n                )\n                .ToList", "potentialProjects.Where", "repositories\n                .GroupBy(repository => repository.ServerUrl)\n                .ToDictionary", "repositories\n                .GroupBy", "group.SelectMany(repository => repository.AssociatedProjectIds)\n                        .ToHashSet", "group.SelectMany", "associatedProjectIdsByServerUrl.Values\n                .Flatten()\n                .ToHashSet", "associatedProjectIdsByServerUrl.Values\n                .Flatten", "allAssociatedProjectIds.Contains", "potentialProjects.Where(\n                    project => !project.Server.Provider.Provides(Consumable.Repositories) ||\n                               associatedProjectIdsByServerUrl.TryGetValue(project.ServerUrl, out var associatedProjectIds) &&\n                               associatedProjectIds.Contains(project.Id)\n                )\n                .ToList", "project.Server.Provider.Provides", "associatedProjectIdsByServerUrl.TryGetValue", "associatedProjectIds.Contains", "base.SyncUpdateDefinition(updateDefinitionBuilder, project)\n                .Set(_ => _.IssueTypes, project.IssueTypes)\n                .Set(_ => _.DefaultIssueTypeId, project.DefaultIssueTypeId)\n                .Set", "base.SyncUpdateDefinition(updateDefinitionBuilder, project)\n                .Set(_ => _.IssueTypes, project.IssueTypes)\n                .Set", "base.SyncUpdateDefinition(updateDefinitionBuilder, project)\n                .Set"], false, false, false, false, [], false, 0, 0, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, true], ["PullRequestsStorage", "Lim.Common.DotNET.PullRequestsStorage", [], ["Lim.Common.DotNET.IPullRequestsStorage"], "src/Lim.Common.DotNET/DataStore/PullRequestsStorage.cs", 10, 0, {"_developerIdentityStorage": "Lim.Common.DotNET.IDeveloperIdentityStorage", "_developerRepositoryProfilesStorage": "Lim.Common.DotNET.IDeveloperRepositoryProfilesStorage", "_mongoClient": "Lim.Common.DotNET.IMongoClient", "_projectsStorage": "Lim.Common.DotNET.IProjectsStorage", "_repositoriesStorage": "Lim.Common.DotNET.IRepositoriesStorage", "_repositoryProjectProfileStorage": "Lim.Common.DotNET.IRepositoryProjectProfileStorage"}, ["_developerIdentityStorage", "_developerRepositoryProfilesStorage", "_mongoClient", "_projectsStorage", "_repositoriesStorage", "_repositoryProjectProfileStorage"], ["PullRequestsStorage", "SyncPullRequestAsync", "GetOpenPullRequestsAsync", "GetAllPullRequestsAsync", "UpdatePullRequestAsync", "SyncProjectDetailsAsync"], ["System", "System.Collections.Generic", "System.Threading.Tasks", "Infrastructure.Dotnet.Common", "JetBrains.Annotations", "MongoDB.Driver"], false, false, ["UsedImplicitly"], false, false, [], {"_developerIdentityStorage": [], "_developerRepositoryProfilesStorage": [], "_mongoClient": [], "_projectsStorage": [], "_repositoriesStorage": [], "_repositoryProjectProfileStorage": []}, [], 0, false, false, false, 7, 1.0, [], 523.4285714285714, 396, 0.0, 85.71428571428571, 1, 0, false, false, false, true, "public", false, ["Lim.Common.DotNET.IMongoClient.UpsertAsync", "Lim.Common.DotNET.IDeveloperIdentityStorage.GetDeveloperIdentityByKeyAsync", "Lim.Common.DotNET.IDeveloperRepositoryProfilesStorage.SyncDeveloperRepositoryProfileAsync", "Lim.Common.DotNET.IDeveloperIdentityStorage.GetDeveloperIdentitiesAsync", "Lim.Common.DotNET.DeveloperIdentityExtensions.SelectDevelopersKeys", "Lim.Common.DotNET.IRepositoryProjectProfileStorage.SyncRepositoryProjectProfileAsync", "Lim.Common.DotNET.IMongoClient.GetAllAsync", "Lim.Common.DotNET.IRepositoriesStorage.SyncAssociatedProjectsAsync", "Lim.Common.DotNET.IProjectsStorage.GetAssociatedProjectsByProjectIdAsync"], ["_mongoClient.UpdateAsync", "Builders<PullRequest>.Update\n                    .Set(_ => _.ReviewersIdentitiesKeys, newDetails.ReviewersIdentitiesKeys)\n                    .Set(_ => _.IsOpen, newDetails.IsOpen)\n                    .Set(_ => _.Comments, newDetails.Comments)\n                    .Set(_ => _.Title, newDetails.Title)\n                    .Set", "Builders<PullRequest>.Update\n                    .Set(_ => _.ReviewersIdentitiesKeys, newDetails.ReviewersIdentitiesKeys)\n                    .Set(_ => _.IsOpen, newDetails.IsOpen)\n                    .Set(_ => _.Comments, newDetails.Comments)\n                    .Set", "Builders<PullRequest>.Update\n                    .Set(_ => _.ReviewersIdentitiesKeys, newDetails.ReviewersIdentitiesKeys)\n                    .Set(_ => _.IsOpen, newDetails.IsOpen)\n                    .Set", "Builders<PullRequest>.Update\n                    .Set(_ => _.ReviewersIdentitiesKeys, newDetails.ReviewersIdentitiesKeys)\n                    .Set", "Builders<PullRequest>.Update\n                    .Set", "pullRequestDetails.IssuesKeysByProjectId.None", "syncRepositoryProjectProfile"], false, false, false, false, [], false, 0, 0, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, true], ["ReleasesStorage", "Lim.Common.DotNET.ReleasesStorage", [], ["Lim.Common.DotNET.IReleasesStorage"], "src/Lim.Common.DotNET/DataStore/ReleasesStorage.cs", 8, 0, {"_mongoClient": "Lim.Common.DotNET.IMongoClient"}, ["_mongoClient"], ["ReleasesStorage", "SyncReleaseAsync", "GetPageAsync", "GetAllByStatusAsync", "GetAllClonedAsync", "GetReleaseAsync", "SetStatusAsync", "UpdateAndResetReleaseAsync", "BulkChangeCloneStatusAsync", "GetPendingReleasesAsync", "GetAllReadyAsync"], ["System.Collections.Generic", "System.Threading.Tasks", "JetBrains.Annotations", "MongoDB.Driver"], false, false, ["UsedImplicitly"], false, false, [], {"_mongoClient": []}, [], 0, false, false, false, 11, 1.0, [], 162.0, 77, 0.0, 81.81818181818181, 1, 0, false, false, false, true, "public", false, ["Lim.Common.DotNET.IMongoClient.UpsertAsync", "Lim.Common.DotNET.IMongoClient.GetAllAsync", "Lim.Common.DotNET.IMongoClient.GetAsync"], ["_mongoClient.GetPageAsync", "Builders<Release>.Sort.Descending", "_mongoClient.UpdateAsync", "Builders<Release>.Update.Set", "Builders<Release>.Update\n                    .Set(_ => _.Status, ReleaseStatus.Pending)\n                    .Set(_ => _.Name, release.Name)\n                    .Set(_ => _.Candidate.Identifier, release.Candidate.Identifier)\n                    .Set(_ => _.Baseline.Identifier, release.Baseline.Identifier)\n                    .Set(_ => _.Candidate.CommitSha, release.Candidate.CommitSha)\n                    .Set(_ => _.Baseline.CommitSha, release.Baseline.CommitSha)\n                    .Set(_ => _.Candidate.RefType, release.Candidate.RefType)\n                    .Set", "Builders<Release>.Update\n                    .Set(_ => _.Status, ReleaseStatus.Pending)\n                    .Set(_ => _.Name, release.Name)\n                    .Set(_ => _.Candidate.Identifier, release.Candidate.Identifier)\n                    .Set(_ => _.Baseline.Identifier, release.Baseline.Identifier)\n                    .Set(_ => _.Candidate.CommitSha, release.Candidate.CommitSha)\n                    .Set(_ => _.Baseline.CommitSha, release.Baseline.CommitSha)\n                    .Set", "Builders<Release>.Update\n                    .Set(_ => _.Status, ReleaseStatus.Pending)\n                    .Set(_ => _.Name, release.Name)\n                    .Set(_ => _.Candidate.Identifier, release.Candidate.Identifier)\n                    .Set(_ => _.Baseline.Identifier, release.Baseline.Identifier)\n                    .Set(_ => _.Candidate.CommitSha, release.Candidate.CommitSha)\n                    .Set", "Builders<Release>.Update\n                    .Set(_ => _.Status, ReleaseStatus.Pending)\n                    .Set(_ => _.Name, release.Name)\n                    .Set(_ => _.Candidate.Identifier, release.Candidate.Identifier)\n                    .Set(_ => _.Baseline.Identifier, release.Baseline.Identifier)\n                    .Set", "Builders<Release>.Update\n                    .Set(_ => _.Status, ReleaseStatus.Pending)\n                    .Set(_ => _.Name, release.Name)\n                    .Set(_ => _.Candidate.Identifier, release.Candidate.Identifier)\n                    .Set", "Builders<Release>.Update\n                    .Set(_ => _.Status, ReleaseStatus.Pending)\n                    .Set(_ => _.Name, release.Name)\n                    .Set", "Builders<Release>.Update\n                    .Set(_ => _.Status, ReleaseStatus.Pending)\n                    .Set", "Builders<Release>.Update\n                    .Set", "_mongoClient.UpdateManyAsync"], false, false, false, false, [], true, 0, 0, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, true], ["RepositoriesStorage", "Lim.Common.DotNET.RepositoriesStorage", ["???.ConsumablesStorage<Repository>"], ["Lim.Common.DotNET.IRepositoriesStorage"], "src/Lim.Common.DotNET/DataStore/RepositoriesStorage.cs", 9, 0, {}, [], ["RepositoriesStorage", "SyncRepositoryAsync", "UpdateRepositoryRelevanceAsync", "UpdateRepositoryClonedAsync", "GetRepositoryKeysAssociatedWithProjectAsync", "RemoveRepositoryLanguagesAsync", "SyncAssociatedProjectsAsync", "GetRepositoryKeysByUrlAsync", "GetRepositoryKeysByServerUrlAsync", "GetMonitoredRepositoryKeyByCloneUrlAsync", "GetMonitoredRepositoryKeysByServerUrlAsync", "GetMonitoredRepositoriesAsync", "GetDeveloperScannedRepositoriesAsync", "GetNotPreScannedRepositoriesAsync", "GetIrrelevantRepositoriesAsync", "MarkDeveloperScanCompleteAsync", "SyncUpdateDefinition", "GetRepositoryAsync", "GetRepositoriesAsync", "GetRepositoriesPageWithCountAsync", "DisableRepositoryAsync"], ["System.Collections.Generic", "System.Linq", "System.Threading.Tasks", "JetBrains.Annotations", "MongoDB.Driver"], false, false, ["UsedImplicitly"], false, false, [], {}, [], 0, false, false, false, 22, 1.0, [], 128.36363636363637, 92, 0.0, 72.72727272727273, 1, 0, false, false, false, true, "public", false, ["Lim.Common.DotNET.ConsumablesStorage<Lim.Common.DotNET.Repository>.SyncConsumableAsync", "Lim.Common.DotNET.IMongoClient.AllKeysAsync", "Lim.Common.DotNET.Repository.IsAssociatedWithProjectExpression", "Lim.Common.DotNET.ConsumablesStorage<Lim.Common.DotNET.Repository>.GetKeysByServerUrlAsync", "Lim.Common.DotNET.ConsumablesStorage<Lim.Common.DotNET.Repository>.GetMonitoredKeysByServerUrlAsync", "Lim.Common.DotNET.ConsumablesStorage<Lim.Common.DotNET.Repository>.GetAsync", "Lim.Common.DotNET.ConsumablesStorage<Lim.Common.DotNET.Repository>.SyncUpdateDefinition", "Lim.Common.DotNET.IConsumablesStorage<Lim.Common.DotNET.Repository>.GetConsumableAsync", "Lim.Common.DotNET.IConsumablesStorage<Lim.Common.DotNET.Repository>.GetAllAsync", "Lim.Common.DotNET.IConsumablesStorage<Lim.Common.DotNET.Repository>.GetPageWithCountAsync", "Lim.Common.DotNET.IConsumablesStorage<Lim.Common.DotNET.Repository>.DisableConsumableAsync"], ["MongoClient.UpdateAsync", "Builders<Repository>.Update\n                    .Set(repository => repository.Languages, languages)\n                    .Set(repository => repository.IsRelevant, isRelevant)\n                    .Set", "Builders<Repository>.Update\n                    .Set(repository => repository.Languages, languages)\n                    .Set", "Builders<Repository>.Update\n                    .Set", "Builders<Repository>.Update\n                    .AddToSetEach", "(await MongoClient.AllKeysAsync<Repository>(\n                    repository => repository.HttpCloneUrl.Contains(repositoryCloneUrl)\n                                  && repository.IsMonitored\n                ))\n                .FirstOrDefault", "repository.HttpCloneUrl.Contains", "base.SyncUpdateDefinition(updateDefinitionBuilder, repository)\n                .Set(_ => _.HttpCloneUrl, repository.HttpCloneUrl)\n                .Set(_ => _.DefaultBranch, repository.DefaultBranch)\n                .Set(_ => _.ProjectUrl, repository.ProjectUrl)\n                .AddToSetEach", "base.SyncUpdateDefinition(updateDefinitionBuilder, repository)\n                .Set(_ => _.HttpCloneUrl, repository.HttpCloneUrl)\n                .Set(_ => _.DefaultBranch, repository.DefaultBranch)\n                .Set", "base.SyncUpdateDefinition(updateDefinitionBuilder, repository)\n                .Set(_ => _.HttpCloneUrl, repository.HttpCloneUrl)\n                .Set", "base.SyncUpdateDefinition(updateDefinitionBuilder, repository)\n                .Set"], false, false, false, false, [], true, 0, 0, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, true], ["RepositoryProfilesStorage", "Lim.Common.DotNET.RepositoryProfilesStorage", ["???.ConsumableProfilesStorage<RepositoryProfile, Repository>"], ["Lim.Common.DotNET.IRepositoryProfilesStorage"], "src/Lim.Common.DotNET/DataStore/RepositoryProfilesStorage.cs", 5, 0, {}, ["EntityPropertyName"], ["RepositoryProfilesStorage", "EntityPropertyName", "BuildEmptyProfile"], ["JetBrains.Annotations"], false, false, ["UsedImplicitly"], false, false, [], {}, [], 1, false, false, false, 2, 0.6666666666666666, [], 26.666666666666668, 20, 0.0, 33.333333333333336, 1, 0, false, false, false, false, "public", false, ["Lim.Common.DotNET.RepositoryProfile.EmptyProfileFor"], ["nameof"], false, false, false, false, [], false, 1, 0, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, false], ["RepositoryProjectProfileStorage", "Lim.Common.DotNET.RepositoryProjectProfileStorage", ["???.EntityToConsumableProfilesStorage<RepositoryProjectProfile, Project>"], ["Lim.Common.DotNET.IRepositoryProjectProfileStorage"], "src/Lim.Common.DotNET/DataStore/RepositoryProjectProfileStorage.cs", 12, 0, {"_repositoriesStorage": "Lim.Common.DotNET.IRepositoriesStorage"}, ["_repositoriesStorage", "RepositoryCountAddFields", "ConsumableKeyField", "BasicSortDefinition", "ByEntitySortDefinition", "ByConsumableSortDefinition", "ProfileKeyProvider"], ["RepositoryProjectProfileStorage", "RepositoryCountAddFields", "ConsumableKeyField", "BasicSortDefinition", "ByEntitySortDefinition", "ByConsumableSortDefinition", "ProfileKeyProvider", "SyncRepositoryProjectProfilesAsync", "SyncRepositoryProjectProfileAsync", "AddRequiredFields", "BuildKey", "BuildEmptyProfile", "EntityKeyFilter", "ConsumableKeyFilter", "GetProfilesForRepositoryAsync", "GetProfilesForProjectAsync", "GetFilterOptionsForRepositoryAsync", "GetFilterOptionsForProjectAsync"], ["System", "System.Collections.Generic", "System.Linq.Expressions", "System.Threading.Tasks", "Infrastructure.Dotnet.Common", "JetBrains.Annotations", "MongoDB.Bson", "MongoDB.Driver"], false, false, ["UsedImplicitly"], false, false, [], {"_repositoriesStorage": []}, [], 6, false, false, false, 14, 0.7, [], 198.15, 69, 5.0, 30.0, 1, 0, false, false, false, true, "public", false, ["Lim.Common.DotNET.EntityToConsumableProfilesStorage<Lim.Common.DotNET.RepositoryProjectProfile, Lim.Common.DotNET.Project>.SyncBulk", "Lim.Common.DotNET.RepositoryProjectProfile.BuildKey", "Lim.Common.DotNET.IEntityToConsumableProfilesStorage<Lim.Common.DotNET.RepositoryProjectProfile>.GetProfilesForEntityAsync", "Lim.Common.DotNET.IEntityToConsumableProfilesStorage<Lim.Common.DotNET.RepositoryProjectProfile>.GetProfilesForConsumableAsync", "Lim.Common.DotNET.IEntityToConsumableProfilesStorage<Lim.Common.DotNET.RepositoryProjectProfile>.GetFilterOptionsForEntityAsync", "Lim.Common.DotNET.IEntityToConsumableProfilesStorage<Lim.Common.DotNET.RepositoryProjectProfile>.GetFilterOptionsForConsumableAsync"], ["BsonDocument.Parse", "nameof", "Builders<RepositoryProjectProfile>.Sort\n                .Descending(profile => profile.IssueCount)\n                .Descending", "Builders<RepositoryProjectProfile>.Sort\n                .Descending", "BasicSortDefinition.Ascending", "pullRequest.IssuesKeysByProjectId.TryGetValue", "MongoClient.UpsertAsync", "Builders<RepositoryProjectProfile>.Update\n                    .AddToSet(profile => profile.PullRequestKeys, pullRequest.Key.Hash32())\n                    .AddToSetEach", "Builders<RepositoryProjectProfile>.Update\n                    .AddToSet", "pullRequest.Key.Hash32", "issueKeys.GetHashes", "pullRequestDetails.IssuesKeysByProjectId.TryGetValue", "Builders<RepositoryProjectProfile>.Update\n                    .AddToSet(profile => profile.PullRequestKeys, pullRequestKey.Hash32())\n                    .AddToSetEach", "pullRequestKey.Hash32", "issue.RelatedPullRequestIdWithRepositoryUrlPairs\n                .ToDictionaryGrouped", "_repositoriesStorage.GetRepositoryKeysByUrlAsync", "BuildKey", "Builders<RepositoryProjectProfile>.Update\n                                .AddToSet(profile => profile.IssueKeys, issue.Key.Hash32())\n                                .AddToSet", "Builders<RepositoryProjectProfile>.Update\n                                .AddToSet", "issue.Key.Hash32", "PullRequest.GetPullRequestKey(repositoryKey, pullRequestId)\n                                        .Hash32", "PullRequest.GetPullRequestKey", "aggregate.AppendStage<RepositoryProjectProfile>"], false, false, false, false, [], false, 6, 0, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 1, true], ["ResolvedApiClassificationStorage", "Lim.Common.DotNET.ResolvedApiClassificationStorage", [], ["Lim.Common.DotNET.IResolvedApiClassificationStorage"], "src/Lim.Common.DotNET/DataStore/ResolvedApiClassificationStorage.cs", 7, 0, {"_mongoClient": "Lim.Common.DotNET.IMongoClient"}, ["_mongoClient"], ["ResolvedApiClassificationStorage", "GetAllResolvedApiClassificationsSettingsAsync", "SyncResolvedApiClassificationAsync", "DeleteResolvedApiClassificationAsync", "CreateKey"], ["System.Collections.Generic", "System.Threading.Tasks", "JetBrains.Annotations"], false, false, ["UsedImplicitly"], false, false, [], {"_mongoClient": []}, [], 0, false, false, false, 5, 1.0, [], 62.8, 55, 20.0, 80.0, 1, 0, false, false, false, true, "public", false, ["Lim.Common.DotNET.IMongoClient.GetAllAsync", "Lim.Common.DotNET.IMongoClient.UpsertAsync", "Lim.Common.DotNET.IMongoClient.TryDeleteAsync", "Lim.Common.DotNET.CompositeKey.Create"], [], false, false, false, false, [], false, 0, 0, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, false], ["RevisionStorage", "Lim.Common.DotNET.RevisionStorage", [], ["Lim.Common.DotNET.IRevisionStorage"], "src/Lim.Common.DotNET/DataStore/RevisionStorage.cs", 5, 0, {"CodeRevisionId": "string", "_mongoClient": "Lim.Common.DotNET.IMongoClient"}, ["_mongoClient"], ["RevisionStorage", "IsUpToDateAsync", "GetRevisionAsync", "SetRevisionAsync"], ["System.Threading.Tasks"], false, false, [], false, false, [], {"CodeRevisionId": [], "_mongoClient": []}, [], 0, false, false, false, 4, 1.0, [], 106.0, 118, 0.0, 100.0, 1, 0, false, false, false, true, "public", false, ["Lim.Common.DotNET.IMongoClient.GetAsync", "Lim.Common.DotNET.IMongoClient.UpsertAsync"], ["((await _mongoClient.GetAsync<DataStorageRevision>(CodeRevisionId))?.Current)\n                .GetValueOrDefault"], false, false, false, false, ["code_revision"], false, 0, 0, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, false], ["SecurityScansProjectsStorage", "Lim.Common.DotNET.SecurityScansProjectsStorage", ["???.ConsumablesStorage<SecurityScansProject>"], ["Lim.Common.DotNET.ISecurityScansProjectsStorage"], "src/Lim.Common.DotNET/DataStore/SecurityScansProjectsStorage.cs", 8, 0, {"_mongoClient": "Lim.Common.DotNET.IMongoClient"}, ["_mongoClient"], ["SecurityScansProjectsStorage", "GetRepositoryMatchingProjectsAsync", "SyncLatestScanIdAsync", "SyncProjectRepositoryMatchAsync"], ["System.Collections.Generic", "System.Threading.Tasks", "JetBrains.Annotations", "MongoDB.Driver"], false, false, ["UsedImplicitly"], false, false, [], {"_mongoClient": []}, [], 0, false, false, false, 4, 1.0, [], 154.75, 173, 0.0, 100.0, 1, 0, false, false, false, true, "public", false, ["Lim.Common.DotNET.IMongoClient.GetAllAsync"], ["_mongoClient.UpdateAsync", "Builders<SecurityScansProject>.Update\n                    .Set"], false, false, false, false, [], false, 0, 0, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, true], ["SecurityScansStorage", "Lim.Common.DotNET.SecurityScansStorage", [], ["Lim.Common.DotNET.ISecurityScansStorage"], "src/Lim.Common.DotNET/DataStore/SecurityScansStorage.cs", 9, 0, {"_mongoClient": "Lim.Common.DotNET.IMongoClient"}, ["_mongoClient", "LatestFirst"], ["SecurityScansStorage", "LatestFirst", "SyncSecurityScansAsync", "GetAllSecurityScans", "GetProjectSecurityScansAsync", "GetLatestScan"], ["System.Collections.Generic", "System.Linq", "System.Threading.Tasks", "JetBrains.Annotations", "MongoDB.Driver"], false, false, ["UsedImplicitly"], false, false, [], {"_mongoClient": []}, [], 1, false, false, false, 5, 0.8333333333333334, [], 80.0, 56, 16.666666666666668, 83.33333333333333, 1, 0, false, false, false, true, "public", false, ["Lim.Common.DotNET.IMongoClient.UpsertManyAsync", "Lim.Common.DotNET.IMongoClient.GetAllAsync"], ["Builders<SecurityScan>.Sort.Descending", "(await _mongoClient.GetPageAsync(\n                LatestFirst,\n                1,\n                scan => scan.SecurityScansProjectKey == securityScansProject.Key\n            )).FirstOrDefault", "_mongoClient.GetPageAsync"], false, false, false, false, [], false, 1, 0, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, true], ["ServersStorage", "Lim.Common.DotNET.ServersStorage", [], ["Lim.Common.DotNET.IServersStorage"], "src/Lim.Common.DotNET/DataStore/ServersStorage.cs", 12, 0, {"_mongoClient": "Lim.Common.DotNET.IMongoClient", "_serversCache": "System.Collections.Concurrent.ConcurrentDictionary<string, Server>"}, ["_mongoClient", "_serversCache"], ["ServersStorage", "SyncServerAsync", "GetServersAsync", "GetServerAsync", "SetServerFieldAsync", "GetSlackServerAsync", "GetTeamsServerAsync"], ["System", "System.Collections.Concurrent", "System.Collections.Generic", "System.Linq", "System.Linq.Expressions", "System.Threading.Tasks", "Infrastructure.Dotnet.Common", "JetBrains.Annotations"], false, false, ["UsedImplicitly"], false, false, [], {"_mongoClient": [], "_serversCache": []}, [], 0, false, false, false, 7, 1.0, [], 121.14285714285714, 128, 0.0, 100.0, 1, 0, false, false, false, true, "public", false, ["Lim.Common.DotNET.IMongoClient.UpsertAsync", "Lim.Common.DotNET.IMongoClient.GetAllAsync", "Lim.Common.DotNET.IMongoClient.GetAsync", "Lim.Common.DotNET.IMongoClient.UpdateAsync"], ["_serversCache.TryRemove", "_serversCache.GetOrAddAsync", "(await _mongoClient.GetAllAsync<Server>(server => !server.Removed && server.Provider == Provider.Slack)).FirstOrDefault", "(await _mongoClient.GetAllAsync<Server>(server => !server.Removed && server.Provider == Provider.Teams)).FirstOrDefault"], false, false, false, false, [], false, 0, 0, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, false], ["WorkflowsStorage", "Lim.Common.DotNET.WorkflowsStorage", ["???.BaseRulesStorage<Workflow>"], ["Lim.Common.DotNET.IWorkflowsStorage"], "src/Lim.Common.DotNET/DataStore/WorkflowsStorage.cs", 7, 0, {}, [], ["WorkflowsStorage", "GetWorkflowsAsync", "GetWorkflowAsync", "SyncWorkflowAsync", "DeleteWorkflowAsync", "DeleteWorkflowsAsync"], ["System.Collections.Generic", "System.Threading.Tasks", "JetBrains.Annotations"], false, false, ["UsedImplicitly"], false, false, [], {}, [], 0, false, false, false, 6, 1.0, [], 42.666666666666664, 41, 0.0, 100.0, 1, 0, false, false, false, true, "public", false, ["Lim.Common.DotNET.BaseRulesStorage<Lim.Common.DotNET.Workflow>.GetRulesAsync", "Lim.Common.DotNET.IMongoClient.GetAsync", "Lim.Common.DotNET.BaseRulesStorage<Lim.Common.DotNET.Workflow>.SyncRuleAsync", "Lim.Common.DotNET.BaseRulesStorage<Lim.Common.DotNET.Workflow>.DeleteRuleAsync", "Lim.Common.DotNET.BaseRulesStorage<Lim.Common.DotNET.Workflow>.DeleteRulesAsync"], [], false, false, false, false, [], false, 0, 0, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, false], ["ApiBase", "Lim.Common.DotNET.ApiBase<TApiEntity>", ["???.DiffableEntity<TApiEntity>"], [], "src/Lim.Common.DotNET/Entities/ApiBase.cs", 6, 0, {}, ["ApiClassification", "SecurityScansReferences", "BaseCodeReference", "HttpMethod", "HttpRoute"], ["ApiClassification", "SecurityScansReferences", "BaseCodeReference", "HttpMethod", "HttpRoute", "GetHashCode"], ["System", "System.Collections.Generic"], false, false, [], false, false, [], {}, [], 5, false, false, true, 0, 0.0, [], 45.0, 0, 0.0, 100.0, 0, 0, false, true, false, false, "public", true, [], ["hashCode.Add", "hashCode.ToHashCode"], false, false, false, false, [], false, 5, 4, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, false], ["ApiClassificationDefinition", "Lim.Common.DotNET.ApiClassificationDefinition", ["Lim.Common.DotNET.BaseRule"], [], "src/Lim.Common.DotNET/Entities/ApiClassificationDefinition.cs", 7, 0, {}, ["RepositoryKey", "FilePath", "ApiClassification", "PartialDisplayName", "FullDisplayName", "Key", "OrdinalId", "Name", "CreatedAt", "RemovedAt", "ReplacedBy"], ["RepositoryKey", "FilePath", "ApiClassification", "BaseDisplayName", "KeysSpecificToRepositories", "ToString", "PartialDisplayName", "FullDisplayName", "Key", "OrdinalId", "Name", "CreatedAt", "RemovedAt", "ReplacedBy", "HasName", "ValidateConfigurationName"], ["System.Collections.Generic", "System.Linq", "Infrastructure.Dotnet.Common"], false, false, ["MongoCollection"], false, false, [], {}, ["BsonIgnore", "BsonId", "MongoIndex", "UsedImplicitly", "JsonProperty", "BsonDateTimeOptions", "BsonIgnoreIfNull", "CanBeNull"], 12, false, true, false, 3, 0.1875, [], 66.875, 0, 12.5, 93.75, 0, 0, false, false, false, false, "public", false, [], ["definitions\n                .Where(\n                    definition =>\n                        !repositoryKeys.NullOrNone() &&\n                        repositoryKeys!.Contains(definition.RepositoryKey)\n                )\n                .Select(definition => definition.Key)\n                .ToHashSet", "definitions\n                .Where(\n                    definition =>\n                        !repositoryKeys.NullOrNone() &&\n                        repositoryKeys!.Contains(definition.RepositoryKey)\n                )\n                .Select", "definitions\n                .Where", "repositoryKeys.NullOrNone", "repositoryKeys!.Contains", "BaseDisplayName().ToUpper", "string.IsNullOrEmpty", "otherConfigurations.Where(\n                    rule => string.Equals(\n                        rule.Name,\n                        configuration.Name,\n                        StringComparison.OrdinalIgnoreCase\n                    ) && rule.Key != configuration.Key\n                )\n                .ToList", "otherConfigurations.Where", "string.Equals", "configurationsWithNames.Any", "configurationsWithNames.First"], false, false, false, false, ["apiClassificationDefinition", "Definition"], false, 12, 9, [], false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, true, 0, 0, false], ["ApiClassificationDiffer", "Lim.Common.DotNET.ApiClassificationDiffer<TApi>", ["???.BaseEntityDiffer<TApi>"], [], "src/Lim.Common.DotNET/Entities/ApiClassificationDiffer.cs", 7, 0, {}, ["CreateMaterialChangeForDiffResults"], ["CreateMaterialChangeForDiffResults", "DiffEntity", "ApiHasCurrentRuleClassification"], ["System.Collections.Generic", "System.Linq", "Infrastructure.Dotnet.Common"], false, false, [], false, false, [], {}, [], 1, false, false, false, 2, 0.6666666666666666, [], 316.0, 80, 33.333333333333336, 0.0, 0, 0, false, true, false, false, "public", true, [], ["EnumUtils.FromString<ApiClassification>", "governanceRule.When.First", "ApiHasCurrentRuleClassification"], false, false, false, false, [], false, 1, 0, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, false], ["ApiMethod", "Lim.Common.DotNET.ApiMethod", ["???.ApiBase<ApiMethod>"], [], "src/Lim.Common.DotNET/Entities/ApiMethod.cs", 9, 0, {}, ["EntityId", "ClassId", "MissingAuthorizationFrameworks", "CodeLinks", "CodeReference", "UnvalidatedParametersByFramework", "InputValidationViolation", "ParametersNameToType", "DisplayString", "Annotations", "ParameterNameToAnnotations", "MethodName", "BodyLength", "ReturnType", "ExposedPiis", "InvolvedPiis", "ParameterNames", "SecurityConfigurationReference", "BaseCodeReference"], ["ApiMethod", "EntityId", "ShouldIgnore", "ClassId", "MissingAuthorizationFrameworks", "AnyAuthorizationFrameworks", "HasAuthorizationViolation", "CodeLinks", "CodeReference", "UnvalidatedParametersByFramework", "AnyValidationFramework", "InputValidationViolation", "ParametersNameToType", "DisplayString", "Annotations", "ParameterNameToAnnotations", "MethodName", "BodyLength", "SupportsSimilarEntities", "ReturnType", "ExposedPiis", "InvolvedPiis", "ParameterNames", "SecurityConfigurationReference", "IsValidationApplicable", "BaseCodeReference", "FromFeatures", "GetCodeReferences", "EnrichFromApplicableGovernanceRule", "FindSimilarEntities", "AggregateMaterialChanges", "IsMaterialChangeForThenSubType", "CanAggregateMaterialChange", "AggregateRelevantMaterialChanges", "MergeApiMaterialChanges", "GetHashCode"], ["System", "System.Collections.Generic", "System.Linq", "Infrastructure.Dotnet.Common", "MongoDB.Bson.Serialization.Attributes"], false, false, [], false, false, [], {}, ["BsonIgnore"], 25, false, false, true, 10, 0.2777777777777778, [], 361.30555555555554, 0, 19.444444444444443, 77.77777777777777, 1, 0, false, false, false, false, "public", false, ["Lim.Common.DotNET.CodeFeatures.GetFeature", "Lim.Common.DotNET.MethodFeatureNames.CodeLinkNeighborsByType", "Lim.Common.DotNET.CodeFeatures.GetJsonFeature", "Lim.Common.DotNET.ClassFeatureNames.ShouldIgnore", "Lim.Common.DotNET.FieldsCodeReference.FromClassFeatures", "Lim.Common.DotNET.MethodInputValidationUtil.GetApplicableUnvalidatedParameters", "Lim.Common.DotNET.ApiBase<Lim.Common.DotNET.ApiMethod>.GetHashCode"], ["methodFeatures.GetFeature<Dictionary<string, string>>(methodId, MethodFeatureNames.ParametersNameToType)\n                    .Keys.ToList", "classIds\n                .Where(classFeatures.ContainsId)\n                .Select(\n                    classId => FieldsCodeReference.FromClassFeatures(\n                        classFeatures,\n                        classId,\n                        classFeatures.GetFeature<HashSet<string>>(classId, ClassFeatureNames.PiiFieldNames)\n                    )\n                )\n                .ToList", "classIds\n                .Where(classFeatures.ContainsId)\n                .Select", "classIds\n                .Where", "previous.WhereKeys", "current.Keys.Contains", "current.Values.Where", "previous.Keys.Contains", "removedApis.Values\n                    .Select<ApiMethod, (ApiMethod method, int score)>(\n                        api => (api, MethodSimilarity.GetScore(currentApi, api))\n                    )\n                    .Where(tuple => tuple.score >= MethodSimilarity.MinimumAcceptableSimilarityScore)\n                    .OrderByDescending(tuple => tuple.score)\n                    .Select(tuple => tuple.method)\n                    .FirstOrDefault", "removedApis.Values\n                    .Select<ApiMethod, (ApiMethod method, int score)>(\n                        api => (api, MethodSimilarity.GetScore(currentApi, api))\n                    )\n                    .Where(tuple => tuple.score >= MethodSimilarity.MinimumAcceptableSimilarityScore)\n                    .OrderByDescending(tuple => tuple.score)\n                    .Select", "removedApis.Values\n                    .Select<ApiMethod, (ApiMethod method, int score)>(\n                        api => (api, MethodSimilarity.GetScore(currentApi, api))\n                    )\n                    .Where(tuple => tuple.score >= MethodSimilarity.MinimumAcceptableSimilarityScore)\n                    .OrderByDescending", "removedApis.Values\n                    .Select<ApiMethod, (ApiMethod method, int score)>(\n                        api => (api, MethodSimilarity.GetScore(currentApi, api))\n                    )\n                    .Where", "removedApis.Values\n                    .Select<ApiMethod, (ApiMethod method, int score)>", "MethodSimilarity.GetScore", "removedApis.Remove", "governanceRules.ToDictionary", "governanceRulesByKey.Values\n                .Where(rule => rule.When.Any(when => when.Type == GovernanceWhenType.Api))\n                .Select(rule => rule.Key)\n                .ToHashSet", "governanceRulesByKey.Values\n                .Where(rule => rule.When.Any(when => when.Type == GovernanceWhenType.Api))\n                .Select", "governanceRulesByKey.Values\n                .Where", "rule.When.Any", "currentMaterialChange.GetType", "methodsMaterialChangesToAggregate.Add", "apiClassificationMaterialChangesToAggregate.Add", "materialChangesToReturn.Add", "AggregateRelevantMaterialChanges(\n                    methodsMaterialChangesToAggregate,\n                    materialChange => (materialChange.EntityId, materialChange.RuleThenIndexes.GetSetAggregatedValuesHash()),\n                    MergeApiMaterialChanges\n                )\n                .Concat", "AggregateRelevantMaterialChanges", "materialChange.RuleThenIndexes.GetSetAggregatedValuesHash", "materialChangesToReturn.AddRange", "thenSubTypes.Add", "thenSubTypes.Contains", "validationFunction", "relevantGovernanceRuleKeys.Contains", "materialChanges.GroupBy(groupBy)\n                .Select", "materialChanges.GroupBy", "changes.Aggregate", "((MethodsMaterialChange) first).CodeReference.ApiMethodsDetails.Add", "((MethodsMaterialChange) second).CodeReference.ApiMethodsDetails.First", "hashCode.Add", "MissingAuthorizationFrameworks.GetAggregatedValuesHash", "UnvalidatedParametersByFramework.GetAggregatedValuesHash", "ParametersNameToType.GetAggregatedValuesHash", "Annotations.GetAggregatedValuesHash", "ParameterNameToAnnotations.GetAggregatedValuesHash", "ExposedPiis.GetAggregatedValuesHash", "InvolvedPiis.GetAggregatedValuesHash", "ParameterNames.GetAggregatedValuesHash", "SecurityScansReferences.GetAggregatedValuesHash", "hashCode.ToHashCode"], false, false, false, false, [], false, 25, 23, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, 0, 0, true], ["ApiMethodClassificationDiffer", "Lim.Common.DotNET.ApiMethodClassificationDiffer", ["???.ApiClassificationDiffer<ApiMethod>"], [], "src/Lim.Common.DotNET/Entities/ApiMethodClassificationDiffer.cs", 7, 0, {}, [], ["GenerateMaterialChanges"], ["System.Collections.Generic", "System.Linq", "Infrastructure.Dotnet.Common"], false, false, [], false, false, [], {}, [], 0, false, false, false, 1, 1.0, [], 585.0, 585, 0.0, 0.0, 0, 0, false, false, false, false, "public", false, [], ["EnumUtils.FromString<ApiClassification>", "governanceRule.When.First"], false, false, false, false, [], false, 0, 0, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, false], ["ApiSecurityConfigurationDiffer", "Lim.Common.DotNET.ApiSecurityConfigurationDiffer", ["???.BaseEntityDiffer<ApiMethod>"], [], "src/Lim.Common.DotNET/Entities/ApiSecurityConfigurationDiffer.cs", 7, 0, {}, ["CreateMaterialChangeForDiffResults"], ["CreateMaterialChangeForDiffResults", "IsRuleRelevant", "IsEntityRelevant", "DiffEntity", "GenerateMaterialChanges", "HasSecurityViolation"], ["System.Collections.Generic", "System.Linq", "JetBrains.Annotations"], false, false, [], false, false, [], {}, [], 1, false, false, false, 5, 0.8333333333333334, [], 319.3333333333333, 106, 16.666666666666668, 16.666666666666668, 0, 0, false, false, false, false, "public", false, [], ["currentInventory.SecurityConfigurations.Any", "string.IsNullOrEmpty", ".LastOrDefault"], false, false, false, false, [], false, 1, 0, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, false], ["ApiSnippet", "Lim.Common.DotNET.ApiSnippet", ["???.ApiBase<ApiSnippet>"], [], "src/Lim.Common.DotNET/Entities/ApiSnippet.cs", 9, 0, {}, ["HintedApiParameter", "HintedApiResponse", "HintedApiRequiredFields", "Description", "CodeReference", "SuspectedApiRouteParams", "EntityId", "BaseCodeReference"], ["ApiSnippet", "PredicatedAsApi", "HintedApiParameter", "HintedApiResponse", "HintedApiRequiredFields", "Description", "ContainsAuthentication", "CodeReference", "SuspectedApiRouteParams", "EntityId", "BaseCodeReference", "RouteHasIdParam", "EntityIdFromFeatures", "FromFeatures", "GetHashCode"], ["System", "System.Collections.Generic", "JetBrains.Annotations", "Lim.Common.DotNET.Utils", "MongoDB.Bson.Serialization.Attributes"], false, false, [], false, false, [], {}, ["UsedImplicitly", "BsonIgnore"], 10, false, false, true, 4, 0.26666666666666666, [], 145.33333333333334, 0, 20.0, 93.33333333333333, 1, 0, false, false, false, false, "public", false, ["Lim.Common.DotNET.Utils.RouteParsing.HasIdParams", "Lim.Common.DotNET.CodeFeatures.GetFeature", "Lim.Common.DotNET.ApiBase<Lim.Common.DotNET.ApiSnippet>.GetHashCode"], ["hashCode.Add", "hashCode.ToHashCode"], false, false, false, false, [], false, 10, 9, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, 0, 0, true], ["ApiSnippetClassificationDiffer", "Lim.Common.DotNET.ApiSnippetClassificationDiffer", ["???.ApiClassificationDiffer<ApiSnippet>"], [], "src/Lim.Common.DotNET/Entities/ApiSnippetClassificationDiffer.cs", 7, 0, {}, [], ["GenerateMaterialChanges"], ["System.Collections.Generic", "System.Linq", "Infrastructure.Dotnet.Common"], false, false, [], false, false, [], {}, [], 0, false, false, false, 1, 1.0, [], 557.0, 557, 0.0, 0.0, 0, 0, false, false, false, false, "public", false, [], ["EnumUtils.FromString<ApiClassification>", "governanceRule.When.First"], false, false, false, false, [], false, 0, 0, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, false], ["ApiSnippetClassificationMaterialChange", "Lim.Common.DotNET.ApiSnippetClassificationMaterialChange", ["???.CodeMaterialChange<ApiSnippetCodeReference>"], [], "src/Lim.Common.DotNET/Entities/ApiSnippetClassificationMaterialChange.cs", 5, 0, {}, ["Classification", "OrderByValue"], ["ApiSnippetClassificationMaterialChange", "Classification", "OrderByValue"], ["System.Collections.Generic"], false, false, [], false, false, [], {}, [], 2, false, false, false, 1, 0.3333333333333333, [], 11.333333333333334, 0, 0.0, 100.0, 1, 0, false, false, false, false, "public", false, [], [], false, false, false, false, [], false, 2, 1, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, false], ["CheckmarxDescriptionAttribute", "Lim.Common.DotNET.CheckmarxDescriptionAttribute", ["System.Attribute"], [], "src/Lim.Common.DotNET/Entities/Attributes/CheckmarxDescriptionAttribute.cs", 5, 0, {}, ["CheckmarxDescription"], ["CheckmarxDescriptionAttribute", "CheckmarxDescription"], ["System"], false, false, ["AttributeUsage"], false, false, [], {}, [], 1, false, false, false, 1, 0.5, [], 29.0, 29, 0.0, 100.0, 1, 0, false, false, false, false, "public", false, [], [], true, false, false, false, [], false, 1, 0, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, false], ["CodeParsingSupportedAttribute", "Lim.Common.DotNET.CodeParsingSupportedAttribute", ["System.Attribute"], [], "src/Lim.Common.DotNET/Entities/Attributes/CodeParsingSupportedAttribute.cs", 5, 0, {}, [], [], ["System"], false, false, ["AttributeUsage"], false, false, [], {}, [], 0, false, false, false, 0, 0.0, [], 0.0, 0, 0.0, 0.0, 0, 0, false, false, false, false, "public", false, [], [], true, false, false, false, [], false, 0, 0, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, false], ["CollectNonDiffableRiskAttribute", "Lim.Common.DotNET.CollectNonDiffableRiskAttribute", ["System.Attribute"], [], "src/Lim.Common.DotNET/Entities/Attributes/CollectNonDiffableRiskAttribute.cs", 5, 0, {}, [], [], ["System"], false, false, [], false, false, [], {}, [], 0, false, false, false, 0, 0.0, [], 0.0, 0, 0.0, 0.0, 0, 0, false, false, false, false, "public", false, [], [], true, false, false, false, [], false, 0, 0, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, false], ["ConsumableTypeAttribute", "Lim.Common.DotNET.ConsumableTypeAttribute", ["System.Attribute"], [], "src/Lim.Common.DotNET/Entities/Attributes/ConsumableTypeAttribute.cs", 5, 0, {}, ["Type"], ["ConsumableTypeAttribute", "Type"], ["System"], false, false, ["AttributeUsage"], false, false, [], {}, [], 1, false, false, false, 1, 0.5, [], 16.0, 16, 0.0, 100.0, 1, 0, false, false, false, false, "public", false, [], [], true, false, false, false, [], false, 1, 0, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, false], ["DefaultSortDirectionAttribute", "Lim.Common.DotNET.DefaultSortDirectionAttribute", ["System.Attribute"], [], "src/Lim.Common.DotNET/Entities/Attributes/DefaultSortDirectionAttribute.cs", 6, 0, {}, ["DefaultSortDirection"], ["DefaultSortDirectionAttribute", "DefaultSortDirection"], ["System", "MongoDB.Driver"], false, false, ["AttributeUsage"], false, false, [], {}, [], 1, false, false, false, 1, 0.5, [], 25.5, 25, 0.0, 100.0, 1, 0, false, false, false, false, "public", false, [], [], true, false, false, false, [], false, 1, 0, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, true], ["DiffableAttribute", "Lim.Common.DotNET.DiffableAttribute", ["System.Attribute"], [], "src/Lim.Common.DotNET/Entities/Attributes/DiffableAttribute.cs", 5, 0, {}, [], [], ["System"], false, false, ["AttributeUsage"], false, false, [], {}, [], 0, false, false, false, 0, 0.0, [], 0.0, 0, 0.0, 0.0, 0, 0, false, false, false, false, "public", false, [], [], true, false, false, false, [], false, 0, 0, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, false], ["FileExtensionsAttribute", "Lim.Common.DotNET.FileExtensionsAttribute", ["System.Attribute"], [], "src/Lim.Common.DotNET/Entities/Attributes/FileExtensionsAttribute.cs", 8, 0, {}, ["Extensions"], ["FileExtensionsAttribute", "Extensions"], ["System", "System.Collections.Generic", "System.Linq", "JetBrains.Annotations"], false, false, ["AttributeUsage", "MeansImplicitUse"], false, false, [], {}, [], 1, false, false, false, 1, 0.5, [], 25.0, 25, 0.0, 100.0, 1, 0, false, false, false, false, "public", false, [], ["extensions.ToHashSet"], true, false, false, false, [], false, 1, 0, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, false], ["FilterableAttribute", "Lim.Common.DotNET.FilterableAttribute", ["Lim.Common.DotNET.MongoIndexAttribute"], [], "src/Lim.Common.DotNET/Entities/Attributes/FilterableAttribute.cs", 5, 0, {"CaseInsensitiveCollation": "???.Collation"}, ["TableFilter", "Options"], ["FilterableAttribute", "TableFilter", "MongoIndexAttribute", "Options"], ["System"], false, false, ["AttributeUsage"], false, false, [], {"CaseInsensitiveCollation": []}, [], 2, false, false, false, 4, 0.6666666666666666, [], 68.5, 31, 0.0, 100.0, 4, 0, false, false, false, false, "public", false, [], [], true, false, false, false, [], false, 2, 0, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, false], ["FilterableByJoinAttribute", "Lim.Common.DotNET.FilterableByJoinAttribute", ["System.Attribute"], [], "src/Lim.Common.DotNET/Entities/Attributes/FilterableByJoinAttribute.cs", 5, 0, {}, ["JoinWithType", "TableFilter"], ["FilterableByJoinAttribute", "JoinWithType", "TableFilter"], ["System"], false, false, ["AttributeUsage"], false, false, [], {}, [], 2, false, false, false, 1, 0.3333333333333333, [], 33.333333333333336, 0, 0.0, 100.0, 1, 0, false, false, false, false, "public", false, [], [], true, false, false, false, [], false, 2, 0, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, false], ["FilterGroupAttribute", "Lim.Common.DotNET.FilterGroupAttribute", ["System.Attribute"], [], "src/Lim.Common.DotNET/Entities/Attributes/FilterGroupAttribute.cs", 5, 0, {}, ["TableFilterGroup"], ["FilterGroupAttribute", "TableFilterGroup"], ["System"], false, false, ["AttributeUsage"], false, false, [], {}, [], 1, false, false, false, 1, 0.5, [], 25.0, 25, 0.0, 100.0, 1, 0, false, false, false, false, "public", false, [], [], true, false, false, false, [], false, 1, 0, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, false], ["GitArgumentCountAttribute", "Lim.Common.DotNET.GitArgumentCountAttribute", ["System.Attribute"], [], "src/Lim.Common.DotNET/Entities/Attributes/GitArgumentCountAttribute.cs", 5, 0, {}, ["Count"], ["GitArgumentCountAttribute", "Count"], ["System"], false, false, ["AttributeUsage"], false, false, [], {}, [], 1, false, false, false, 1, 0.5, [], 14.0, 14, 0.0, 100.0, 1, 0, false, false, false, false, "public", false, [], [], true, false, false, false, [], false, 1, 0, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, false], ["GitCommandStringAttribute", "Lim.Common.DotNET.GitCommandStringAttribute", ["System.Attribute"], [], "src/Lim.Common.DotNET/Entities/Attributes/GitCommandStringAttribute.cs", 5, 0, {}, ["Command"], ["GitCommandStringAttribute", "Command"], ["System"], false, false, ["AttributeUsage"], false, false, [], {}, [], 1, false, false, false, 1, 0.5, [], 16.0, 16, 0.0, 100.0, 1, 0, false, false, false, false, "public", false, [], [], true, false, false, false, [], false, 1, 0, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, false], ["GitDefaultFlagsAttribute", "Lim.Common.DotNET.GitDefaultFlagsAttribute", ["System.Attribute"], [], "src/Lim.Common.DotNET/Entities/Attributes/GitDefaultFlagsAttribute.cs", 6, 0, {}, ["Flags"], ["GitDefaultFlagsAttribute", "Flags"], ["System", "System.Collections.Generic"], false, false, ["AttributeUsage"], false, false, [], {}, [], 1, false, false, false, 1, 0.5, [], 14.0, 14, 0.0, 100.0, 1, 0, false, false, false, false, "public", false, [], [], true, false, false, false, [], false, 1, 0, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, false], ["MongoCollectionAttribute", "Lim.Common.DotNET.MongoCollectionAttribute", ["System.Attribute"], [], "src/Lim.Common.DotNET/Entities/Attributes/MongoCollectionAttribute.cs", 5, 0, {}, ["Collection"], ["MongoCollectionAttribute", "Collection"], ["System"], false, false, ["AttributeUsage"], false, false, [], {}, [], 1, false, false, false, 1, 0.5, [], 19.0, 19, 0.0, 100.0, 1, 0, false, false, false, false, "public", false, [], [], true, false, false, false, [], false, 1, 0, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, false], ["MongoIndexAttribute", "Lim.Common.DotNET.MongoIndexAttribute", ["System.Attribute"], [], "src/Lim.Common.DotNET/Entities/Attributes/MongoIndexAttribute.cs", 6, 0, {"CaseInsensitiveCollation": "???.Collation"}, ["Options"], ["MongoIndexAttribute", "Options"], ["System", "MongoDB.Driver"], false, false, ["AttributeUsage"], false, false, [], {"CaseInsensitiveCollation": []}, [], 1, false, false, false, 2, 0.6666666666666666, [], 110.33333333333333, 22, 0.0, 100.0, 2, 0, false, false, false, false, "public", false, [], [], true, false, false, false, ["en"], false, 1, 0, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, true], ["PredictionEnrichingSupportedAttribute", "Lim.Common.DotNET.PredictionEnrichingSupportedAttribute", ["System.Attribute"], [], "src/Lim.Common.DotNET/Entities/Attributes/PredictionEnrichingSupportedAttribute.cs", 5, 0, {}, [], [], ["System"], false, false, ["AttributeUsage"], false, false, [], {}, [], 0, false, false, false, 0, 0.0, [], 0.0, 0, 0.0, 0.0, 0, 0, false, false, false, false, "public", false, [], [], true, false, false, false, [], false, 0, 0, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, false], ["PropertiesExtractionSupportedAttribute", "Lim.Common.DotNET.PropertiesExtractionSupportedAttribute", ["System.Attribute"], [], "src/Lim.Common.DotNET/Entities/Attributes/PropertiesExtractionSupportedAttribute.cs", 5, 0, {}, [], [], ["System"], false, false, ["AttributeUsage"], false, false, [], {}, [], 0, false, false, false, 0, 0.0, [], 0.0, 0, 0.0, 0.0, 0, 0, false, false, false, false, "public", false, [], [], true, false, false, false, [], false, 0, 0, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, false], ["ProvidesAttribute", "Lim.Common.DotNET.ProvidesAttribute", ["System.Attribute"], [], "src/Lim.Common.DotNET/Entities/Attributes/ProvidesAttribute.cs", 8, 0, {}, ["Provided"], ["ProvidesAttribute", "Provided"], ["System", "System.Collections.Generic", "System.Linq", "JetBrains.Annotations"], false, false, ["AttributeUsage", "MeansImplicitUse"], false, false, [], {}, [], 1, false, false, false, 1, 0.5, [], 24.5, 24, 0.0, 100.0, 1, 0, false, false, false, false, "public", false, [], ["consumables.ToHashSet"], true, false, false, false, [], false, 1, 0, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, false], ["RiskScoreAttribute", "Lim.Common.DotNET.RiskScoreAttribute", ["System.Attribute"], [], "src/Lim.Common.DotNET/Entities/Attributes/RiskScoreAttribute.cs", 5, 0, {}, ["Score"], ["RiskScoreAttribute", "Score"], ["System"], false, false, ["AttributeUsage"], false, false, [], {}, [], 1, false, false, false, 1, 0.5, [], 14.0, 14, 0.0, 100.0, 1, 0, false, false, false, false, "public", false, [], [], true, false, false, false, [], false, 1, 0, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, false], ["BsonSkipSetterCheckAttribute", "Lim.Common.DotNET.BsonSkipSetterCheckAttribute", ["???.BsonElementAttribute"], [], "src/Lim.Common.DotNET/Entities/Attributes/SkipSetterCheckAttribute.cs", 7, 0, {}, [], [], ["System", "JetBrains.Annotations", "MongoDB.Bson.Serialization.Attributes"], false, false, ["AttributeUsage", "MeansImplicitUse"], false, false, [], {}, [], 0, false, false, false, 0, 0.0, [], 0.0, 0, 0.0, 0.0, 0, 0, false, false, false, false, "public", false, [], [], false, false, false, false, [], false, 0, 0, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, true], ["SupportedComponentsDeduction", "Lim.Common.DotNET.SupportedComponentsDeduction", ["System.Attribute"], [], "src/Lim.Common.DotNET/Entities/Attributes/SupportedComponentsDeduction.cs", 5, 0, {}, [], [], ["System"], false, false, ["AttributeUsage"], false, false, [], {}, [], 0, false, false, false, 0, 0.0, [], 0.0, 0, 0.0, 0.0, 0, 0, false, false, false, false, "public", false, [], [], true, false, false, false, [], false, 0, 0, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, false], ["SupportedLanguagesAttribute", "Lim.Common.DotNET.SupportedLanguagesAttribute", ["System.Attribute"], [], "src/Lim.Common.DotNET/Entities/Attributes/SupportedLanguagesAttribute.cs", 7, 0, {}, ["Languages"], ["SupportedLanguagesAttribute", "Languages"], ["System", "System.Collections.Generic", "System.Linq"], false, false, ["AttributeUsage"], false, false, [], {}, [], 1, false, false, false, 1, 0.5, [], 24.0, 24, 0.0, 100.0, 1, 0, false, false, false, false, "public", false, [], ["languages.ToHashSet"], true, false, false, false, [], false, 1, 0, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, false], ["TableSupportedConsumablesAttribute", "Lim.Common.DotNET.TableSupportedConsumablesAttribute", ["System.Attribute"], [], "src/Lim.Common.DotNET/Entities/Attributes/TableSupportedConsumablesAttribute.cs", 8, 0, {}, ["SupportedConsumables"], ["TableSupportedConsumablesAttribute", "SupportedConsumables"], ["System", "System.Collections.Generic", "System.Linq", "JetBrains.Annotations"], false, false, ["AttributeUsage", "MeansImplicitUse"], false, false, [], {}, [], 1, false, false, false, 1, 0.5, [], 35.0, 35, 0.0, 100.0, 1, 0, false, false, false, false, "public", false, [], ["supportedConsumables.ToHashSet"], true, false, false, false, [], false, 1, 0, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, false], ["AuditLog", "Lim.Common.DotNET.AuditLog", [], [], "src/Lim.Common.DotNET/Entities/AuditLog.cs", 30, 0, {}, ["Key", "When", "ActionTriggeredOnType", "ActionTriggeredOnKey", "ActionTriggerType", "ActionTriggerKey", "ActionTargetType", "ActionTargetKey", "ActionResultType", "ActionResultKey"], ["Key", "When", "ActionTriggeredOnType", "ActionTriggeredOnKey", "ActionTriggerType", "ActionTriggerKey", "ActionTargetType", "ActionTargetKey", "ActionResultType", "ActionResultKey", "ToString"], ["System", "MongoDB.Bson", "MongoDB.Bson.Serialization.Attributes"], false, false, ["MongoCollection"], false, false, [], {}, ["BsonId", "BsonDateTimeOptions", "BsonRepresentation", "MongoIndex"], 10, false, true, false, 0, 0.0, [], 1.6363636363636365, 0, 0.0, 100.0, 0, 0, false, false, false, false, "public", false, [], ["Guid.NewGuid()\n            .ToString", "Guid.NewGuid"], false, false, false, false, ["auditLogs"], false, 10, 10, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, 0, 0, true], ["BaseConfiguration", "Lim.Common.DotNET.BaseConfiguration", [], [], "src/Lim.Common.DotNET/Entities/BaseConfiguration.cs", 10, 0, {}, ["Key", "OrdinalId", "Name", "CreatedAt", "RemovedAt", "ReplacedBy"], ["Key", "OrdinalId", "Name", "CreatedAt", "RemovedAt", "ReplacedBy", "HasName", "ToString", "ValidateConfigurationName"], ["System", "System.Collections.Generic", "System.Linq", "JetBrains.Annotations", "MongoDB.Bson.Serialization.Attributes", "Newtonsoft.Json"], false, false, [], false, false, [], {}, ["BsonId", "MongoIndex", "UsedImplicitly", "JsonProperty", "BsonDateTimeOptions", "BsonIgnoreIfNull", "BsonIgnore", "CanBeNull"], 7, false, true, false, 1, 0.1111111111111111, [], 76.11111111111111, 0, 11.11111111111111, 100.0, 0, 0, false, true, false, false, "public", false, [], ["string.IsNullOrEmpty", "otherConfigurations.Where(\n                    rule => string.Equals(\n                        rule.Name,\n                        configuration.Name,\n                        StringComparison.OrdinalIgnoreCase\n                    ) && rule.Key != configuration.Key\n                )\n                .ToList", "otherConfigurations.Where", "string.Equals", "configurationsWithNames.Any", "configurationsWithNames.First"], false, false, false, false, ["createdAt", "name is required"], false, 7, 6, [], false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, true, 0, 0, true], ["BaseConsumableEntity", "Lim.Common.DotNET.BaseConsumableEntity", [], [], "src/Lim.Common.DotNET/Entities/BaseConsumableEntity.cs", 8, 0, {}, ["Key", "Id", "Name", "NameLower", "Type", "ServerUrl", "Server", "Url", "EstimatedInterestScore", "InterestScore"], ["Key", "Id", "Name", "NameLower", "Type", "ServerUrl", "Server", "Url", "IsMonitored", "IsRelevant", "IsDeleted", "EstimatedInterestScore", "InterestScore", "ToString", "Equals", "GetHashCode"], ["System", "JetBrains.Annotations", "MongoDB.Bson.Serialization.Attributes", "Newtonsoft.Json"], false, false, [], false, false, [], {}, ["BsonId", "MongoIndex", "BsonSkipSetterCheckAttribute", "UsedImplicitly", "BsonIgnore", "Filterable", "BsonSerializer", "JsonIgnore"], 13, true, true, true, 0, 0.0, [], 29.375, 0, 0.0, 100.0, 0, 0, false, true, false, false, "public", false, [], ["Name.ToLower", "GetType", "other.GetType", "string.Equals", "hashCode.Add", "hashCode.ToHashCode"], false, false, false, false, [], false, 13, 9, [], false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, true, 0, 0, true], ["BaseEntityDiffer", "Lim.Common.DotNET.BaseEntityDiffer<TEntity>", [], ["???.IEntityDiffer<DiffableEntity<TEntity>>"], "src/Lim.Common.DotNET/Entities/BaseEntityDiffer.cs", 7, 0, {}, ["CreateMaterialChangeForDiffResults"], ["CreateMaterialChangeForDiffResults", "IsEntityRelevantToRule", "Diff", "CollectInsights", "CollectNonGovernanceInsights", "IsRuleRelevant", "IsEntityRelevant", "DiffEntity", "ValidateCompoundRules", "CompoundRuleAlreadyDiscovered", "ValidateCompoundRule", "CreateCompoundMaterialChange", "CollectNonMaterialChangeInsights", "GenerateMaterialChanges"], ["System.Collections.Generic", "System.Linq", "JetBrains.Annotations"], false, false, [], false, false, [], {}, [], 1, false, false, false, 15, 0.9375, [], 387.1875, 157, 25.0, 31.25, 0, 0, false, true, false, false, "public", true, ["Lim.Common.DotNET.GovernanceRule.RelevantLabelsBySubType", "Lim.Common.DotNET.GovernanceRule.GetWhenIndexes", "Lim.Common.DotNET.InventoryExtensions.IsNewDeveloperCommit", "Lim.Common.DotNET.DiffableEntity<TEntity>.CanDiffRule", "Lim.Common.DotNET.DiffableEntity<TEntity>.Diff"], ["GovernanceRule.RelevantLabelsBySubType(new[] {governanceRule}, diffResult)\n                .SelectMany(_ => _.indexes)\n                .ToHashSet", "GovernanceRule.RelevantLabelsBySubType(new[] {governanceRule}, diffResult)\n                .SelectMany", "CreateMaterialChangeForDiffResults.Contains", "currentThenIndexes.Any", "GenerateMaterialChanges(\n                        currentEntity,\n                        previousEntity,\n                        governanceRule,\n                        diffResult,\n                        governanceRule.GetWhenIndexes(whenType),\n                        currentThenIndexes,\n                        commitContext,\n                        currentInventory,\n                        previousInventory\n                    )\n                    .ToList", "commitInsights.MaterialChanges.AddRange", "compoundMaterialChange.PartialMaterialChangeKeys.Add", "commitInsights.MaterialChanges.FirstOrDefault", "governanceRule.When.Where((_, index) => !materialChange.RuleWhenIndexes.Contains(index))\n                .ToList", "governanceRule.When.Where", "materialChange.RuleWhenIndexes.Contains", "whenPortionsToValidate.Any", "whenPortionsToValidate\n                .Where(_ => _.Type != GovernanceWhenType.NewDeveloper)\n                .All", "whenPortionsToValidate\n                .Where", "GovernanceRule.RuleNoLongerRelevantTypes.Contains", "commitInsights.MaterialChanges.Add"], false, false, false, false, [], false, 1, 0, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, false], ["RulePortion", "Lim.Common.DotNET.RulePortion<TType>", [], [], "src/Lim.Common.DotNET/Entities/BaseRule.cs", 9, 0, {}, ["Type", "Value"], ["Type", "Value", "ToString", "Equals", "GetHashCode"], ["System", "System.Collections.Generic", "System.Linq", "Infrastructure.Dotnet.Common", "MongoDB.Bson.Serialization.Attributes"], false, false, [], false, false, [], {}, [], 2, true, true, true, 0, 0.0, [], 34.2, 32, 0.0, 80.0, 0, 0, false, false, false, false, "public", true, [], ["EqualityComparer<TType>.Default.Equals", "HashCode.Combine"], false, false, false, false, [], false, 2, 2, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, true], ["RulePortionWithSubType", "Lim.Common.DotNET.RulePortionWithSubType<TType, TSubType>", ["???.RulePortion<TType>"], [], "src/Lim.Common.DotNET/Entities/BaseRule.cs", 25, 0, {}, ["SubType"], ["SubType", "ToString", "Equals", "GetHashCode"], ["System", "System.Collections.Generic", "System.Linq", "Infrastructure.Dotnet.Common", "MongoDB.Bson.Serialization.Attributes"], false, false, [], false, false, [], {}, [], 1, true, true, true, 0, 0.0, [], 121.2, 60, 0.0, 80.0, 0, 0, false, false, false, false, "public", true, ["Lim.Common.DotNET.RulePortion<TType>.Equals", "Lim.Common.DotNET.RulePortion<TType>.GetHashCode"], ["EqualityComparer<TSubType>.Default.Equals", "ReferenceEquals", "obj.GetType", "GetType", "HashCode.Combine"], false, false, false, false, [], false, 1, 1, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, true], ["RulePortionWithProperties", "Lim.Common.DotNET.RulePortionWithProperties<TType>", ["???.RulePortion<TType>"], [], "src/Lim.Common.DotNET/Entities/BaseRule.cs", 59, 0, {}, ["SubType", "AdditionalProperties"], ["SubType", "AdditionalProperties", "ToString", "Equals", "DeepCompare", "GetHashCode"], ["System", "System.Collections.Generic", "System.Linq", "Infrastructure.Dotnet.Common", "MongoDB.Bson.Serialization.Attributes"], false, false, [], false, false, [], {}, [], 2, true, true, true, 1, 0.14285714285714285, [], 153.28571428571428, 144, 14.285714285714286, 71.42857142857143, 0, 0, false, false, false, false, "public", true, ["Lim.Common.DotNET.RulePortion<TType>.ToString", "Lim.Common.DotNET.RulePortion<TType>.Equals", "Lim.Common.DotNET.RulePortion<TType>.GetHashCode"], ["AdditionalProperties!.JoinToString", "additionalProperties.All", "ReferenceEquals", "obj.GetType", "GetType", "HashCode.Combine"], false, false, false, false, [";"], false, 2, 2, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, true], ["BaseRule", "Lim.Common.DotNET.BaseRule", ["Lim.Common.DotNET.BaseConfiguration"], [], "src/Lim.Common.DotNET/Entities/BaseRule.cs", 106, 0, {}, ["PartialDisplayName", "FullDisplayName", "Key", "OrdinalId", "Name", "CreatedAt", "RemovedAt", "ReplacedBy"], ["PartialDisplayName", "FullDisplayName", "BaseDisplayName", "Key", "OrdinalId", "Name", "CreatedAt", "RemovedAt", "ReplacedBy", "HasName", "ToString", "ValidateConfigurationName"], ["System", "System.Collections.Generic", "System.Linq", "Infrastructure.Dotnet.Common", "MongoDB.Bson.Serialization.Attributes"], false, false, [], false, false, [], {}, ["BsonIgnore", "BsonId", "MongoIndex", "UsedImplicitly", "JsonProperty", "BsonDateTimeOptions", "BsonIgnoreIfNull", "CanBeNull"], 9, false, true, false, 2, 0.16666666666666666, [], 57.083333333333336, 0, 8.333333333333334, 91.66666666666667, 0, 0, false, true, false, false, "public", false, [], ["BaseDisplayName().ToUpper", "string.IsNullOrEmpty", "otherConfigurations.Where(\n                    rule => string.Equals(\n                        rule.Name,\n                        configuration.Name,\n                        StringComparison.OrdinalIgnoreCase\n                    ) && rule.Key != configuration.Key\n                )\n                .ToList", "otherConfigurations.Where", "string.Equals", "configurationsWithNames.Any", "configurationsWithNames.First"], false, false, false, false, [" · ", ""], false, 9, 6, [], false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, true, 0, 0, true], ["CodeParsingTargetExtensions", "Lim.Common.DotNET.CodeParsingTargetExtensions", [], [], "src/Lim.Common.DotNET/Entities/CodeParsingTarget.cs", 20, 0, {}, [], ["GetSupportedLanguages"], ["System.Collections.Generic", "Infrastructure.Dotnet.Common"], false, false, [], false, false, [], {}, [], 0, false, false, false, 1, 1.0, [], 129.0, 129, 100.0, 100.0, 0, 0, false, false, true, false, "public", false, [], ["codeParsingTarget.GetCustomAttribute<CodeParsingTarget, SupportedLanguagesAttribute>"], false, false, false, false, [], false, 0, 0, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, false], ["CodeProfile", "Lim.Common.DotNET.CodeProfile", ["Lim.Common.DotNET.Profile"], [], "src/Lim.Common.DotNET/Entities/CodeProfile.cs", 12, 0, {"UsageThreshold": "double", "DeveloperIsActiveThreshold": "System.TimeSpan"}, ["Inventory", "CommitCount", "RiskPosture", "Risk", "Badges", "Languages", "LanguagePercentages", "DeveloperKeys", "DeveloperCount", "NewDevelopersCount", "ActiveDevelopersCount", "IsActive", "LastActivity", "ActiveSince", "RecentMaterialChangeCount", "MaterialChangeLabels", "FrameworksByType", "Technologies", "Licenses", "StorageBucketsByModule", "BusinessImpact", "Modules", "Key"], ["CodeProfile", "Inventory", "CommitCount", "RiskPosture", "Risk", "Badges", "Languages", "LanguagePercentages", "DeveloperKeys", "DeveloperCount", "NewDevelopersCount", "HasNewDevelopers", "ActiveDevelopersCount", "IsActive", "LastActivity", "ActiveSince", "RecentMaterialChangeCount", "MaterialChangeLabels", "FrameworksByType", "Technologies", "Licenses", "StorageBucketsByModule", "HasAuthorizationUsage", "HasValidationUsage", "HasApis", "HasCheckmarxVulnerabilities", "HasExposedApis", "HasDataModels", "HasPiiData", "HasExternalDependencies", "HasExposedSecrets", "BusinessImpact", "GetInventoryBadges", "GetAllBucketsWithFullPaths", "Modules", "GetHashCode", "Profile", "Key", "ToString"], ["System", "System.Collections.Generic", "System.Linq", "Infrastructure.Dotnet.Common", "JetBrains.Annotations", "MongoDB.Bson", "MongoDB.Bson.Serialization.Attributes", "Newtonsoft.Json"], false, false, [], false, false, [], {"UsageThreshold": [], "DeveloperIsActiveThreshold": []}, ["UsedImplicitly", "MongoIndex", "BsonIgnore", "BsonSerializer", "Filterable", "JsonIgnore", "BsonSkipSetterCheck", "BsonSkipSetterCheckAttribute", "BsonRepresentation", "BsonId"], 33, false, true, true, 4, 0.10256410256410256, [], 31.897435897435898, 0, 2.5641025641025643, 92.3076923076923, 2, 0, false, true, false, false, "public", false, ["Lim.Common.DotNET.CodeFrameworkTypeExtensions.GetDisplayName", "Lim.Common.DotNET.Profile.GetHashCode", "Lim.Common.DotNET.Inventory.GetHashCode"], ["GetInventoryBadges()\n                .Select(badge => badge.ToString())\n                .AppendIf(Risk.CombinedRiskLevel.ToString(), Risk.CombinedRiskLevel != RiskLevel.None)\n                .ToList", "GetInventoryBadges()\n                .Select(badge => badge.ToString())\n                .AppendIf", "GetInventoryBadges()\n                .Select", "badge.ToString", "Risk.CombinedRiskLevel.ToString", "LanguagePercentages.Select(pair => pair.Key)\n            .ToHashSet", "LanguagePercentages.Select", "Inventory.FrameworkGroups.Values\n            .SelectMany(\n                group => group.CodeFrameworksToDirectoryPaths.Keys,\n                (group, framework) => (\n                    Type: group.Type.GetDisplayName(framework),\n                    Framework: framework\n                )\n            )\n            .GroupBy(tuple => tuple.Type, tuple => tuple.Framework)\n            .ToDictionary", "Inventory.FrameworkGroups.Values\n            .SelectMany(\n                group => group.CodeFrameworksToDirectoryPaths.Keys,\n                (group, framework) => (\n                    Type: group.Type.GetDisplayName(framework),\n                    Framework: framework\n                )\n            )\n            .GroupBy", "Inventory.FrameworkGroups.Values\n            .SelectMany", "grouping.ToList", "FrameworksByType.Keys.ToHashSet", "Inventory.Dependencies.Values\n            .SelectMany(\n                dependency => dependency.Licenses\n                    .Where(license => !string.IsNullOrEmpty(license.ResolvedName))\n                    .Select(license => license.ResolvedName)\n            )\n            .ToHashSet", "Inventory.Dependencies.Values\n            .SelectMany", "dependency.Licenses\n                    .Where(license => !string.IsNullOrEmpty(license.ResolvedName))\n                    .Select", "dependency.Licenses\n                    .Where", "string.IsNullOrEmpty", "Inventory.TerraformModules.ToDictionary(\n                pair => pair.Key,\n                pair => GetAllBucketsWithFullPaths(pair.Value.TerraformHighlights)\n                    .Where(bucket => !bucket.Bucket.Contains(\"unassigned_var\"))\n                    .ToHashSet()\n            )\n            .WhereValues", "Inventory.TerraformModules.ToDictionary", "GetAllBucketsWithFullPaths(pair.Value.TerraformHighlights)\n                    .Where(bucket => !bucket.Bucket.Contains(\"unassigned_var\"))\n                    .ToHashSet", "GetAllBucketsWithFullPaths(pair.Value.TerraformHighlights)\n                    .Where", "bucket.Bucket.Contains", "storageSet.Any", "Inventory.ApiMethods.Values.Count(_ => _.AnyAuthorizationFrameworks)\n                .SafeDivision", "Inventory.ApiMethods.Values.Count", "Inventory.ApiMethods.Values.Count(_ => _.IsValidationApplicable && _.AnyValidationFramework)\n                .SafeDivision", "Inventory.ApiSnippets.Any", "Inventory.ApiMethods.Any", "Inventory.CheckmarxVulnerabilities.Any", "Inventory.ApiMethods.Values.Any", "Inventory.ApiSnippets.Values.Any", "Inventory.DataModels.Any", "Inventory.Piis.Any", "Inventory.Dependencies.Values.Any", "Inventory.ExposedSecrets.Any", "moduleHighlights.StorageBuckets.ToList", "moduleHighlights.Modules.Select", "buckets.AddRange", "hashCode.Add", "RiskPosture.GetAggregatedValuesHash", "LanguagePercentages.GetAggregatedValuesHash", "DeveloperKeys.GetSetAggregatedValuesHash", ".GetSetAggregatedValuesHash", "hashCode.ToHashCode", "TimeSpan.FromDays"], false, false, false, false, ["unassigned_var"], false, 33, 16, [], false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, true, 0, 0, true], ["ApiCodeReference", "Lim.Common.DotNET.ApiCodeReference", ["Lim.Common.DotNET.NamedCodeReference"], [], "src/Lim.Common.DotNET/Entities/CodeReference/ApiCodeReference.cs", 6, 0, {}, ["ApiName", "HttpMethod", "HttpRoute", "Name", "RelativeFilePath", "LineNumber", "LastLineInFile"], ["ApiCodeReference", "ApiName", "HttpMethod", "HttpRoute", "ToString", "GetHashCode", "NamedCodeReference", "Name", "GetCodeReferenceDetails", "FromClassFeatures", "FromDataModelSnippetFeatures", "CodeReference", "RelativeFilePath", "LineNumber", "LastLineInFile", "Overlaps"], ["JetBrains.Annotations", "MongoDB.Bson.Serialization.Attributes"], false, false, [], false, false, [], {}, ["BsonIgnore", "UsedImplicitly", "JsonConstructor"], 7, false, true, true, 11, 0.55, [], 122.65, 23, 15.0, 75.0, 7, 0, false, true, false, false, "public", false, ["Lim.Common.DotNET.NamedCodeReference.ToString", "Lim.Common.DotNET.NamedCodeReference.GetHashCode", "Lim.Common.DotNET.CodeFeatures.GetFeature", "Lim.Common.DotNET.SnippetFeatureNames.GetFileLineNumber", "Lim.Common.DotNET.SnippetFeatureNames.GetLastLineInFile", "Lim.Common.DotNET.ApiSnippetFeatureNames.GetApiName", "Lim.Common.DotNET.DataModelSnippetFeatureNames.GetDataModelName"], ["(\n                base.GetHashCode(),\n                HttpMethod,\n                HttpRoute\n            ).GetHashCode", "nameof"], false, false, false, false, [], false, 7, 6, [], false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, true, 0, 0, true], ["ApiMethodCodeReference", "Lim.Common.DotNET.ApiMethodCodeReference", ["Lim.Common.DotNET.ApiCodeReference"], [], "src/Lim.Common.DotNET/Entities/CodeReference/ApiMethodCodeReference.cs", 9, 0, {}, ["MethodName", "MethodSignature", "ExposedPiis", "PotentiallyExposedPiis", "ParameterNames", "MissingAuthorizationFrameworks", "UnvalidatedParametersByFramework", "InputValidationViolation", "SecurityConfigurationReference", "ApiName", "HttpMethod", "HttpRoute", "Name", "RelativeFilePath", "LineNumber", "LastLineInFile"], ["ApiMethodCodeReference", "MethodName", "MethodSignature", "ExposedPiis", "PotentiallyExposedPiis", "ParameterNames", "AnyAuthorizationFramework", "MissingAuthorizationFrameworks", "HasAuthorizationViolation", "AnyValidationFramework", "UnvalidatedParametersByFramework", "InputValidationViolation", "SecurityConfigurationReference", "FromMethodFeatures", "GetHashCode", "ApiCodeReference", "ApiName", "HttpMethod", "HttpRoute", "ToString", "NamedCodeReference", "Name", "GetCodeReferenceDetails", "FromClassFeatures", "FromDataModelSnippetFeatures", "CodeReference", "RelativeFilePath", "LineNumber", "LastLineInFile", "Overlaps"], ["System", "System.Collections.Generic", "System.Linq", "Infrastructure.Dotnet.Common", "JetBrains.Annotations"], false, false, [], false, false, [], {}, ["UsedImplicitly", "BsonIgnore", "JsonConstructor"], 19, false, true, true, 13, 0.38235294117647056, [], 133.35294117647058, 0, 11.764705882352942, 85.29411764705883, 8, 0, false, false, false, false, "public", false, ["Lim.Common.DotNET.NamedCodeReference.ToString", "Lim.Common.DotNET.CodeFeatures.GetFeature", "Lim.Common.DotNET.SnippetFeatureNames.GetFileLineNumber", "Lim.Common.DotNET.SnippetFeatureNames.GetLastLineInFile", "Lim.Common.DotNET.ApiSnippetFeatureNames.GetApiName", "Lim.Common.DotNET.DataModelSnippetFeatureNames.GetDataModelName", "Lim.Common.DotNET.CodeFeatures.GetJsonFeature"], ["hashCode.Add", "ExposedPiis.GetAggregatedValuesHash", "PotentiallyExposedPiis.GetAggregatedValuesHash", "MissingAuthorizationFrameworks.GetSetAggregatedValuesHash", "UnvalidatedParametersByFramework.GetAggregatedValuesHash", "ParameterNames.GetAggregatedValuesHash", "hashCode.ToHashCode", "nameof", "features.GetFeature<Dictionary<string, string>>(methodId, MethodFeatureNames.ParametersNameToType)\n                .Keys.ToList"], false, false, false, false, [], false, 19, 18, [], false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, true, 0, 0, false], ["ApiMethodsCodeReference", "Lim.Common.DotNET.ApiMethodsCodeReference", ["Lim.Common.DotNET.NamedCodeReference"], [], "src/Lim.Common.DotNET/Entities/CodeReference/ApiMethodsCodeReference.cs", 7, 0, {}, ["ApiMethodsDetails", "Name", "RelativeFilePath", "LineNumber", "LastLineInFile"], ["ApiMethodsCodeReference", "ApiMethodsDetails", "FromMethodFeatures", "ToString", "GetHashCode", "NamedCodeReference", "Name", "GetCodeReferenceDetails", "FromClassFeatures", "FromDataModelSnippetFeatures", "CodeReference", "RelativeFilePath", "LineNumber", "LastLineInFile", "Overlaps"], ["System.Collections.Generic", "Infrastructure.Dotnet.Common", "JetBrains.Annotations"], false, false, [], false, false, [], {}, ["UsedImplicitly", "JsonConstructor"], 5, false, true, true, 13, 0.65, [], 144.5, 43, 20.0, 80.0, 8, 0, false, false, false, false, "public", false, ["Lim.Common.DotNET.ApiMethodCodeReference.FromMethodFeatures", "Lim.Common.DotNET.NamedCodeReference.ToString", "Lim.Common.DotNET.NamedCodeReference.GetHashCode", "Lim.Common.DotNET.CodeFeatures.GetFeature", "Lim.Common.DotNET.SnippetFeatureNames.GetFileLineNumber", "Lim.Common.DotNET.SnippetFeatureNames.GetLastLineInFile", "Lim.Common.DotNET.ApiSnippetFeatureNames.GetApiName", "Lim.Common.DotNET.DataModelSnippetFeatureNames.GetDataModelName"], ["ApiMethodsDetails.JoinToString", "(\n                base.GetHashCode(),\n                ApiMethodsDetails.GetAggregatedValuesHash()\n            ).GetHashCode", "ApiMethodsDetails.GetAggregatedValuesHash", "nameof"], false, false, false, false, [";"], false, 5, 5, [], false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, 0, 0, false], ["ApiSnippetCodeReference", "Lim.Common.DotNET.ApiSnippetCodeReference", ["Lim.Common.DotNET.ApiCodeReference"], [], "src/Lim.Common.DotNET/Entities/CodeReference/ApiSnippetCodeReference.cs", 5, 0, {}, ["Description", "ApiName", "HttpMethod", "HttpRoute", "Name", "RelativeFilePath", "LineNumber", "LastLineInFile"], ["ApiSnippetCodeReference", "Description", "ContainsAuthentication", "GetHashCode", "ApiCodeReference", "ApiName", "HttpMethod", "HttpRoute", "ToString", "NamedCodeReference", "Name", "GetCodeReferenceDetails", "FromClassFeatures", "FromDataModelSnippetFeatures", "CodeReference", "RelativeFilePath", "LineNumber", "LastLineInFile", "Overlaps"], ["JetBrains.Annotations"], false, false, [], false, false, [], {}, ["UsedImplicitly", "BsonIgnore", "JsonConstructor"], 9, false, true, true, 12, 0.5217391304347826, [], 116.6086956521739, 20, 13.043478260869565, 78.26086956521739, 8, 0, false, false, false, false, "public", false, ["Lim.Common.DotNET.ApiCodeReference.GetHashCode", "Lim.Common.DotNET.NamedCodeReference.ToString", "Lim.Common.DotNET.CodeFeatures.GetFeature", "Lim.Common.DotNET.SnippetFeatureNames.GetFileLineNumber", "Lim.Common.DotNET.SnippetFeatureNames.GetLastLineInFile", "Lim.Common.DotNET.ApiSnippetFeatureNames.GetApiName", "Lim.Common.DotNET.DataModelSnippetFeatureNames.GetDataModelName", "Lim.Common.DotNET.ApiSnippetFeatureNames.GetApiHttpMethod", "Lim.Common.DotNET.ApiSnippetFeatureNames.GetApiUrl", "Lim.Common.DotNET.ApiSnippetFeatureNames.GetApiDescription"], ["(\n                base.GetHashCode(),\n                Description,\n                ContainsAuthentication\n            ).GetHashCode", "nameof"], false, false, false, false, [], false, 9, 8, [], false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, true, 0, 0, false], ["CodeReference", "Lim.Common.DotNET.CodeReference", [], [], "src/Lim.Common.DotNET/Entities/CodeReference/CodeReference.cs", 6, 0, {}, ["RelativeFilePath", "LineNumber", "LastLineInFile"], ["CodeReference", "RelativeFilePath", "LineNumber", "LastLineInFile", "GetHashCode", "Overlaps", "ToString"], ["JetBrains.Annotations", "Newtonsoft.Json"], false, false, [], false, false, [], {}, ["JsonConstructor", "UsedImplicitly"], 3, false, true, true, 3, 0.375, [], 82.875, 54, 0.0, 100.0, 2, 0, false, false, false, false, "public", false, [], ["(\n            RelativeFilePath,\n            LineNumber\n        ).GetHashCode", "nameof"], false, false, false, false, [], false, 3, 3, [], false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, 0, 0, false], ["FieldsCodeReference", "Lim.Common.DotNET.FieldsCodeReference", ["Lim.Common.DotNET.NamedCodeReference"], [], "src/Lim.Common.DotNET/Entities/CodeReference/FieldsCodeReference.cs", 8, 0, {}, ["FieldNames", "Name", "RelativeFilePath", "LineNumber", "LastLineInFile"], ["FieldsCodeReference", "FieldNames", "FromClassFeatures", "FromDataModelSnippetFeatures", "ToString", "GetHashCode", "NamedCodeReference", "Name", "GetCodeReferenceDetails", "CodeReference", "RelativeFilePath", "LineNumber", "LastLineInFile", "Overlaps"], ["System.Collections.Generic", "System.Linq", "Infrastructure.Dotnet.Common", "JetBrains.Annotations"], false, false, [], false, false, [], {}, ["UsedImplicitly", "JsonConstructor"], 5, false, true, true, 14, 0.6666666666666666, [], 139.95238095238096, 78, 23.80952380952381, 76.19047619047619, 8, 0, false, false, false, false, "public", false, ["Lim.Common.DotNET.NamedCodeReference.ToString", "Lim.Common.DotNET.NamedCodeReference.GetHashCode", "Lim.Common.DotNET.CodeFeatures.GetFeature", "Lim.Common.DotNET.SnippetFeatureNames.GetFileLineNumber", "Lim.Common.DotNET.SnippetFeatureNames.GetLastLineInFile", "Lim.Common.DotNET.ApiSnippetFeatureNames.GetApiName", "Lim.Common.DotNET.DataModelSnippetFeatureNames.GetDataModelName"], ["FieldNames.JoinToString", "(\n                base.GetHashCode(),\n                FieldNames.GetAggregatedValuesHash()\n            ).GetHashCode", "FieldNames.GetAggregatedValuesHash", "nameof", ".Ordered()\n                .ToList", ".Ordered"], false, false, false, false, [", "], false, 5, 5, [], false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, 0, 0, false], ["FieldsWithMethodRelationCodeReference", "Lim.Common.DotNET.FieldsWithMethodRelationCodeReference", ["Lim.Common.DotNET.FieldsCodeReference"], [], "src/Lim.Common.DotNET/Entities/CodeReference/FieldsWithMethodRelationCodeReference.cs", 8, 0, {}, ["ExposingMethods", "InvolvingMethods", "FieldNames", "Name", "RelativeFilePath", "LineNumber", "LastLineInFile"], ["FieldsWithMethodRelationCodeReference", "ExposingMethods", "InvolvingMethods", "FromClassFeatures", "FromDataModelSnippetFeatures", "GetHashCode", "FieldsCodeReference", "FieldNames", "ToString", "NamedCodeReference", "Name", "GetCodeReferenceDetails", "CodeReference", "RelativeFilePath", "LineNumber", "LastLineInFile", "Overlaps"], ["System.Collections.Generic", "System.Linq", "Infrastructure.Dotnet.Common", "JetBrains.Annotations"], false, false, [], false, false, [], {}, ["UsedImplicitly", "JsonConstructor"], 7, false, true, true, 16, 0.64, [], 147.2, 78, 24.0, 80.0, 9, 0, false, false, false, false, "public", false, ["Lim.Common.DotNET.FieldsCodeReference.GetHashCode", "Lim.Common.DotNET.NamedCodeReference.ToString", "Lim.Common.DotNET.CodeFeatures.GetFeature", "Lim.Common.DotNET.SnippetFeatureNames.GetFileLineNumber", "Lim.Common.DotNET.SnippetFeatureNames.GetLastLineInFile", "Lim.Common.DotNET.ApiSnippetFeatureNames.GetApiName", "Lim.Common.DotNET.DataModelSnippetFeatureNames.GetDataModelName"], ["(\n                base.GetHashCode(),\n                ExposingMethods.GetAggregatedValuesHash(),\n                InvolvingMethods.GetAggregatedValuesHash()\n            ).GetHashCode", "ExposingMethods.GetAggregatedValuesHash", "InvolvingMethods.GetAggregatedValuesHash", "FieldNames.JoinToString", "nameof", ".OrderBy(reference => reference.Name)\n                .ToList", ".OrderBy"], false, false, false, false, [], false, 7, 7, [], false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, 0, 0, false], ["InputValidationViolationCodeReference", "Lim.Common.DotNET.InputValidationViolationCodeReference", ["Lim.Common.DotNET.NamedCodeReference"], [], "src/Lim.Common.DotNET/Entities/CodeReference/InputValidationViolationCodeReference.cs", 6, 0, {}, ["MethodViolations", "Name", "RelativeFilePath", "LineNumber", "LastLineInFile"], ["InputValidationViolationCodeReference", "MethodViolations", "NamedCodeReference", "Name", "GetCodeReferenceDetails", "FromClassFeatures", "FromDataModelSnippetFeatures", "GetHashCode", "ToString", "CodeReference", "RelativeFilePath", "LineNumber", "LastLineInFile", "Overlaps"], ["System.Collections.Generic", "JetBrains.Annotations"], false, false, [], false, false, [], {}, ["UsedImplicitly", "JsonConstructor"], 5, false, true, true, 11, 0.6111111111111112, [], 131.0, 30, 16.666666666666668, 77.77777777777777, 7, 0, false, false, false, false, "public", false, ["Lim.Common.DotNET.CodeFeatures.GetFeature", "Lim.Common.DotNET.SnippetFeatureNames.GetFileLineNumber", "Lim.Common.DotNET.SnippetFeatureNames.GetLastLineInFile", "Lim.Common.DotNET.ApiSnippetFeatureNames.GetApiName", "Lim.Common.DotNET.DataModelSnippetFeatureNames.GetDataModelName", "Lim.Common.DotNET.CodeReference.GetHashCode", "Lim.Common.DotNET.CodeReference.ToString"], ["nameof", "(\n            Name,\n            base.GetHashCode()\n        ).GetHashCode"], false, false, false, false, [], false, 5, 5, [], false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, 0, 0, false], ["NamedCodeReference", "Lim.Common.DotNET.NamedCodeReference", ["Lim.Common.DotNET.CodeReference"], [], "src/Lim.Common.DotNET/Entities/CodeReference/NamedCodeReference.cs", 7, 0, {}, ["Name", "RelativeFilePath", "LineNumber", "LastLineInFile"], ["NamedCodeReference", "Name", "GetCodeReferenceDetails", "FromClassFeatures", "FromDataModelSnippetFeatures", "GetHashCode", "ToString", "CodeReference", "RelativeFilePath", "LineNumber", "LastLineInFile", "Overlaps"], ["System", "JetBrains.Annotations", "Newtonsoft.Json"], false, false, [], false, false, [], {}, ["JsonConstructor", "UsedImplicitly"], 4, false, true, true, 10, 0.625, [], 144.25, 30, 18.75, 75.0, 6, 0, false, false, false, false, "public", false, ["Lim.Common.DotNET.CodeFeatures.GetFeature", "Lim.Common.DotNET.SnippetFeatureNames.GetFileLineNumber", "Lim.Common.DotNET.SnippetFeatureNames.GetLastLineInFile", "Lim.Common.DotNET.ApiSnippetFeatureNames.GetApiName", "Lim.Common.DotNET.DataModelSnippetFeatureNames.GetDataModelName", "Lim.Common.DotNET.CodeReference.GetHashCode", "Lim.Common.DotNET.CodeReference.ToString", "Lim.Common.DotNET.NamedCodeReference.GetCodeReferenceDetails"], ["nameof", "(\n            Name,\n            base.GetHashCode()\n        ).GetHashCode"], false, false, false, false, [], false, 4, 4, [], false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, 0, 0, false], ["Comment", "Lim.Common.DotNET.Comment", [], [], "src/Lim.Common.DotNET/Entities/Comment.cs", 6, 0, {}, ["AuthorIdentityKey", "Content", "CreationTime"], ["AuthorIdentityKey", "Content", "CreationTime", "CommentFormatter"], ["System", "System.Collections.Generic"], false, false, [], false, false, [], {}, [], 3, false, false, false, 1, 0.25, [], 58.25, 0, 0.0, 100.0, 0, 0, false, false, false, false, "public", false, [], ["developerIdentityByKey.TryGetValue", "$\"{developerIdentity?.Identity}:{Content}\".Replace", "$\"???:{Content}\".Replace"], false, false, false, false, ["", ";", "."], false, 3, 3, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, false], ["Commit", "Lim.Common.DotNET.Commit", [], ["Lim.Common.DotNET.ICommitContext", "Lim.Common.DotNET.ICommitProperties", "Lim.Common.DotNET.ICommitExportedFields", "Lim.Common.DotNET.ICommitMaterialChanges"], "src/Lim.Common.DotNET/Entities/Commit.cs", 10, 0, {"ShortShaLength": "int", "ParentPendingPlaceholder": "string"}, ["WorkflowRevision", "SecurityExpertise", "MaterialChangesGovernanceRuleKeys", "ModuleKeysWithMaterialChange", "DiffRevision", "PropertiesState", "JavaState", "NodeState", "TerraformState", "Languages", "CommitterIdentityKey", "Sha", "ShortSha", "ParentSha", "AuthorIdentityKey", "Timestamp", "RepositoryKeys", "ReleaseKeys", "MaterialChangesCount", "Message", "MaterialChangesLabelsToCount", "MaterialChangesLabels", "ModuleRootToMaterialChangeLabels", "MaterialChangesRiskLevel", "ExposedSecrets", "ComponentsNonCodeIndications", "CommitSha", "Dependencies", "Modules", "SensitiveFiles"], ["WorkflowRevision", "SecurityExpertise", "MaterialChangesGovernanceRuleKeys", "Deleted", "ModuleKeysWithMaterialChange", "DiffRevision", "PropertiesState", "JavaState", "NodeState", "TerraformState", "HasParent", "Languages", "CommitterIdentityKey", "Sha", "ShortSha", "ParentSha", "AuthorIdentityKey", "Timestamp", "RepositoryKeys", "ReleaseKeys", "MaterialChangesCount", "GetState", "IsMainBranchCommit", "Message", "MaterialChangesLabelsToCount", "MaterialChangesLabels", "ModuleRootToMaterialChangeLabels", "MaterialChangesRiskLevel", "ExposedSecrets", "ComponentsNonCodeIndications", "CommitSha", "Dependencies", "Modules", "SensitiveFiles", "CheckIfStageCompleted", "IsForwarded", "ToString"], ["System", "System.Collections.Generic", "JetBrains.Annotations", "MongoDB.Bson", "MongoDB.Bson.Serialization.Attributes", "Newtonsoft.Json"], false, false, ["MongoCollection"], false, false, [], {"ShortShaLength": [], "ParentPendingPlaceholder": []}, ["MongoIndex", "JsonIgnore", "BsonSerializer", "UsedImplicitly", "BsonIgnore", "BsonId", "BsonDateTimeOptions", "StringKeysDictionarySerializer", "Filterable", "BsonRepresentation"], 33, false, true, false, 3, 0.08108108108108109, [], 33.7027027027027, 0, 0.0, 97.29729729729729, 0, 0, false, false, false, false, "public", false, [], ["string.IsNullOrEmpty", "Sha.Substring", "nameof", "Enum.GetValues", "field", "currentRevision", "ParentSha.Substring"], false, false, false, false, ["commits", "<pending>"], false, 33, 30, [], false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, true, 0, 0, true], ["CommitState", "Lim.Common.DotNET.CommitState", [], [], "src/Lim.Common.DotNET/Entities/CommitState.cs", 3, 0, {}, ["ForwardRevision", "ExtractionRevision"], ["ForwardRevision", "ExtractionRevision", "UseParentFeatures"], [], false, false, [], false, false, [], {}, ["MongoIndex"], 3, false, false, false, 0, 0.0, [], 0.0, 0, 0.0, 100.0, 0, 0, false, false, false, false, "public", false, [], [], false, false, false, false, [], false, 3, 3, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, false], ["CommitTraits", "Lim.Common.DotNET.CommitTraits", [], [], "src/Lim.Common.DotNET/Entities/CommitTraits.cs", 7, 0, {}, ["Languages", "BadgeRelatedInsights", "CodeFrameworks"], ["Languages", "BadgeRelatedInsights", "CodeFrameworks"], ["System.Collections.Generic", "JetBrains.Annotations", "MongoDB.Bson.Serialization.Attributes"], false, false, [], false, false, [], {}, ["UsedImplicitly", "BsonElement"], 3, false, false, false, 0, 0.0, [], 0.0, 0, 0.0, 100.0, 0, 0, false, false, false, false, "public", false, [], [], false, false, false, false, ["Insights"], false, 3, 3, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, 0, 0, true], ["ComponentsNonCodeIndications", "Lim.Common.DotNET.ComponentsNonCodeIndications", [], [], "src/Lim.Common.DotNET/Entities/ComponentsNonCodeIndications.cs", 7, 0, {}, ["CodeFrameworkType", "RelativeFilePath", "GitReferences", "ContainerRegistriesReferences", "IacFrameworks"], ["CodeFrameworkType", "RelativeFilePath", "GitReferences", "ContainerRegistriesReferences", "IacFrameworks"], ["System.Collections.Generic", "MongoDB.Bson", "MongoDB.Bson.Serialization.Attributes"], false, false, [], false, false, [], {}, ["BsonRepresentation"], 5, false, false, false, 0, 0.0, [], 0.0, 0, 0.0, 100.0, 0, 0, false, false, false, false, "public", false, [], [], false, false, false, false, [], false, 5, 5, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, 0, 0, true], ["Configuration", "Lim.Common.DotNET.Configuration", [], [], "src/Lim.Common.DotNET/Entities/Configuration.cs", 6, 0, {"SingletonKey": "string"}, ["Key", "DatabaseSeedVersion", "CommitSyncRevision", "DefaultUserRole"], ["Key", "DatabaseSeedVersion", "CommitSyncRevision", "IsDemo", "DefaultUserRole"], ["MongoDB.Bson", "MongoDB.Bson.Serialization.Attributes"], false, false, ["MongoCollection"], false, false, [], {"SingletonKey": []}, ["BsonId", "BsonRepresentation"], 5, false, false, false, 0, 0.0, [], 0.0, 0, 0.0, 100.0, 0, 0, false, false, false, false, "public", false, [], [], false, false, false, false, ["configurations", "1"], false, 5, 4, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, 0, 0, true], ["ConsumableFilterOption", "Lim.Common.DotNET.ConsumableFilterOption", [], [], "src/Lim.Common.DotNET/Entities/ConsumableFilterOption.cs", 5, 0, {}, ["OptionName", "DisplayName"], ["ConsumableFilterOption", "OptionName", "DisplayName"], ["Infrastructure.Dotnet.Common"], false, false, [], false, false, [], {}, [], 2, false, false, false, 2, 0.5, [], 65.0, 54, 0.0, 100.0, 2, 0, false, false, false, false, "public", false, [], ["tableFilterOption.ToString", "tableFilterOption.GetDescription"], false, false, false, false, [], false, 2, 0, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, false], ["ConsumableProfile", "Lim.Common.DotNET.ConsumableProfile<TConsumable>", ["Lim.Common.DotNET.CodeProfile"], [], "src/Lim.Common.DotNET/Entities/ConsumableProfile.cs", 9, 0, {"UsageThreshold": "double", "DeveloperIsActiveThreshold": "System.TimeSpan"}, ["ServerUrl", "Name", "NameLower", "Inventory", "CommitCount", "RiskPosture", "Risk", "Badges", "Languages", "LanguagePercentages", "DeveloperKeys", "DeveloperCount", "NewDevelopersCount", "ActiveDevelopersCount", "IsActive", "LastActivity", "ActiveSince", "RecentMaterialChangeCount", "MaterialChangeLabels", "FrameworksByType", "Technologies", "Licenses", "StorageBucketsByModule", "BusinessImpact", "Modules", "Key"], ["ConsumableProfile", "ServerUrl", "Name", "NameLower", "GetHashCode", "CodeProfile", "Inventory", "CommitCount", "RiskPosture", "Risk", "Badges", "Languages", "LanguagePercentages", "DeveloperKeys", "DeveloperCount", "NewDevelopersCount", "HasNewDevelopers", "ActiveDevelopersCount", "IsActive", "LastActivity", "ActiveSince", "RecentMaterialChangeCount", "MaterialChangeLabels", "FrameworksByType", "Technologies", "Licenses", "StorageBucketsByModule", "HasAuthorizationUsage", "HasValidationUsage", "HasApis", "HasCheckmarxVulnerabilities", "HasExposedApis", "HasDataModels", "HasPiiData", "HasExternalDependencies", "HasExposedSecrets", "BusinessImpact", "GetInventoryBadges", "GetAllBucketsWithFullPaths", "Modules", "Profile", "Key", "ToString"], ["System", "System.Collections.Generic", "System.Linq", "Infrastructure.Dotnet.Common", "JetBrains.Annotations"], false, false, [], false, false, [], {"UsageThreshold": [], "DeveloperIsActiveThreshold": []}, ["UsedImplicitly", "Filterable", "MongoIndex", "BsonSkipSetterCheckAttribute", "BsonIgnore", "BsonSerializer", "JsonIgnore", "BsonSkipSetterCheck", "BsonRepresentation", "BsonId"], 36, false, true, true, 6, 0.13636363636363635, [], 44.0, 0, 2.272727272727273, 88.63636363636364, 4, 0, false, true, false, false, "public", true, ["Lim.Common.DotNET.CodeProfile.GetHashCode", "Lim.Common.DotNET.CodeFrameworkTypeExtensions.GetDisplayName"], ["Name.ToLower", "hashCode.Add", "hashCode.ToHashCode", "GetInventoryBadges()\n                .Select(badge => badge.ToString())\n                .AppendIf(Risk.CombinedRiskLevel.ToString(), Risk.CombinedRiskLevel != RiskLevel.None)\n                .ToList", "GetInventoryBadges()\n                .Select(badge => badge.ToString())\n                .AppendIf", "GetInventoryBadges()\n                .Select", "badge.ToString", "Risk.CombinedRiskLevel.ToString", "LanguagePercentages.Select(pair => pair.Key)\n            .ToHashSet", "LanguagePercentages.Select", "Inventory.FrameworkGroups.Values\n            .SelectMany(\n                group => group.CodeFrameworksToDirectoryPaths.Keys,\n                (group, framework) => (\n                    Type: group.Type.GetDisplayName(framework),\n                    Framework: framework\n                )\n            )\n            .GroupBy(tuple => tuple.Type, tuple => tuple.Framework)\n            .ToDictionary", "Inventory.FrameworkGroups.Values\n            .SelectMany(\n                group => group.CodeFrameworksToDirectoryPaths.Keys,\n                (group, framework) => (\n                    Type: group.Type.GetDisplayName(framework),\n                    Framework: framework\n                )\n            )\n            .GroupBy", "Inventory.FrameworkGroups.Values\n            .SelectMany", "grouping.ToList", "FrameworksByType.Keys.ToHashSet", "Inventory.Dependencies.Values\n            .SelectMany(\n                dependency => dependency.Licenses\n                    .Where(license => !string.IsNullOrEmpty(license.ResolvedName))\n                    .Select(license => license.ResolvedName)\n            )\n            .ToHashSet", "Inventory.Dependencies.Values\n            .SelectMany", "dependency.Licenses\n                    .Where(license => !string.IsNullOrEmpty(license.ResolvedName))\n                    .Select", "dependency.Licenses\n                    .Where", "string.IsNullOrEmpty", "Inventory.TerraformModules.ToDictionary(\n                pair => pair.Key,\n                pair => GetAllBucketsWithFullPaths(pair.Value.TerraformHighlights)\n                    .Where(bucket => !bucket.Bucket.Contains(\"unassigned_var\"))\n                    .ToHashSet()\n            )\n            .WhereValues", "Inventory.TerraformModules.ToDictionary", "GetAllBucketsWithFullPaths(pair.Value.TerraformHighlights)\n                    .Where(bucket => !bucket.Bucket.Contains(\"unassigned_var\"))\n                    .ToHashSet", "GetAllBucketsWithFullPaths(pair.Value.TerraformHighlights)\n                    .Where", "bucket.Bucket.Contains", "storageSet.Any", "Inventory.ApiMethods.Values.Count(_ => _.AnyAuthorizationFrameworks)\n                .SafeDivision", "Inventory.ApiMethods.Values.Count", "Inventory.ApiMethods.Values.Count(_ => _.IsValidationApplicable && _.AnyValidationFramework)\n                .SafeDivision", "Inventory.ApiSnippets.Any", "Inventory.ApiMethods.Any", "Inventory.CheckmarxVulnerabilities.Any", "Inventory.ApiMethods.Values.Any", "Inventory.ApiSnippets.Values.Any", "Inventory.DataModels.Any", "Inventory.Piis.Any", "Inventory.Dependencies.Values.Any", "Inventory.ExposedSecrets.Any", "moduleHighlights.StorageBuckets.ToList", "moduleHighlights.Modules.Select", "buckets.AddRange", "developerRepositoryProfiles\n                .Count", "developerRepositoryProfiles.SelectMany(_ => _.CommitShasToCommitTraits.Keys)\n                .Distinct()\n                .Count", "developerRepositoryProfiles.SelectMany(_ => _.CommitShasToCommitTraits.Keys)\n                .Distinct", "developerRepositoryProfiles.SelectMany", "developerRepositoryProfiles.Sum", "developerRepositoryProfiles.Any", "developerRepositoryProfiles.SelectMany(_ => _.CommitShasToCommitTraits.Values)\n                    .SelectMany(_ => _.Languages)\n                    .ToOrderedPercentages", "developerRepositoryProfiles.SelectMany(_ => _.CommitShasToCommitTraits.Values)\n                    .SelectMany", ".Select(language => new KeyValuePair<Language, int>(language, 0))\n                    .ToList", ".Select"], false, false, false, false, [], false, 36, 18, [], false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, true, 0, 0, false], ["ConsumableRisk", "Lim.Common.DotNET.ConsumableRisk", [], [], "src/Lim.Common.DotNET/Entities/ConsumableRisk.cs", 11, 0, {"_riskFactors": "System.Collections.Generic.List<RiskFactor>"}, ["_riskFactors", "CombinedRiskLevel", "CombinedRiskLevelNumeric", "CombinedRiskScore"], ["CombinedRiskLevel", "CombinedRiskLevelNumeric", "CombinedRiskScore", "RiskFactors", "Add", "AddRiskFactorToCollection", "GetHashCode", "CombineWith"], ["System.Collections.Generic", "System.Linq", "Infrastructure.Dotnet.Common", "JetBrains.Annotations", "MongoDB.Bson", "MongoDB.Bson.Serialization.Attributes", "Newtonsoft.Json"], false, false, [], false, false, [], {"_riskFactors": []}, ["BsonRepresentation", "JsonIgnore", "UsedImplicitly"], 4, false, false, true, 3, 0.375, [], 175.125, 97, 0.0, 87.5, 0, 0, false, false, false, false, "public", false, ["Lim.Common.DotNET.RiskLevelExtensions.CombineWith", "Lim.Common.DotNET.RiskFactor.CombineWith"], ["value.ToList", "_riskFactors.FirstOrDefault", "another.ConstraintTypes.SequenceEqual", "_riskFactors.Add", "(\n            CombinedRiskLevel,\n            CombinedRiskScore,\n            RiskFactors.GetAggregatedValuesHash()\n        ).GetHashCode", "RiskFactors.GetAggregatedValuesHash"], false, false, false, false, [], false, 4, 4, [], false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, true, 0, 0, true], ["ConsumableRiskPosture", "Lim.Common.DotNET.ConsumableRiskPosture", [], [], "src/Lim.Common.DotNET/Entities/ConsumableRiskPosture.cs", 7, 0, {}, ["RiskLevel", "GovernanceRuleKey", "Instances"], ["ConsumableRiskPosture", "RiskLevel", "GovernanceRuleKey", "Instances", "GetHashCode"], ["JetBrains.Annotations", "MongoDB.Bson", "MongoDB.Bson.Serialization.Attributes"], false, false, [], false, false, [], {}, ["UsedImplicitly", "BsonRepresentation"], 3, false, false, true, 1, 0.2, [], 50.6, 0, 0.0, 100.0, 1, 0, false, false, false, false, "public", false, [], ["(\n            RiskLevel,\n            GovernanceRuleKey,\n            Instances\n        ).GetHashCode"], false, false, false, false, [], false, 3, 3, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, 0, 0, true], ["ConsumablesFilterOptions", "Lim.Common.DotNET.ConsumablesFilterOptions", [], [], "src/Lim.Common.DotNET/Entities/ConsumablesFilterOptions.cs", 9, 0, {"_governanceRulesStorage": "Lim.Common.DotNET.IGovernanceRulesStorage", "_organizationProfileStorage": "Lim.Common.DotNET.IOrganizationProfileStorage", "_configurationStorage": "Lim.Common.DotNET.IConfigurationStorage"}, ["_governanceRulesStorage", "_organizationProfileStorage", "_configurationStorage", "RepositoriesFilterOptionsByGroupAsync", "ProjectsFilterOptionsByGroupAsync", "DevelopersFilterOptionsByGroupAsync", "CustomAssetCollectionFilterOptionsByGroupAsync"], ["ConsumablesFilterOptions", "RepositoriesFilterOptionsByGroupAsync", "ProjectsFilterOptionsByGroupAsync", "DevelopersFilterOptionsByGroupAsync", "CustomAssetCollectionFilterOptionsByGroupAsync", "FromFilterOptionsAsync", "FromFilterOptionsRepositoriesAsync", "FromFilterOptionsDevelopersAsync"], ["System", "System.Collections.Generic", "System.Linq", "System.Threading.Tasks", "Infrastructure.Dotnet.Common"], false, false, [], false, false, [], {"_governanceRulesStorage": [], "_organizationProfileStorage": [], "_configurationStorage": []}, [], 4, false, false, false, 4, 0.5, [], 548.625, 105, 0.0, 62.5, 1, 0, false, false, false, true, "public", false, ["Lim.Common.DotNET.IOrganizationProfileStorage.GetOrganizationLanguagesAsync", "Lim.Common.DotNET.IGovernanceRulesStorage.GetGovernanceRulesAsync", "Lim.Common.DotNET.IConfigurationStorage.GetConfigurationAsync", "Lim.Common.DotNET.IOrganizationProfileStorage.GetOrganizationLicensesAsync", "Lim.Common.DotNET.IOrganizationProfileStorage.GetOrganizationTechnologiesAsync", "Lim.Common.DotNET.IOrganizationProfileStorage.GetOrganizationProfileAsync", "Lim.Common.DotNET.TableFilterExtensions.GetTableFilterGroup"], ["EnumUtils.GetValues<TableFilter>", "tableFilter.GetTableFilterGroup()\n                    .ToString", "tableFilter.GetTableFilterGroup", "string.IsNullOrEmpty", "tableFilter.GetTableSupportedConsumables", "supportedConsumables.Contains", "filterOptions.ContainsKey", "filterOptions[group]\n                    .Add", "TableFilterGroup.Languages.ToString", "(\n                    await _organizationProfileStorage.GetOrganizationLanguagesAsync())\n                .Select(language => new ConsumableFilterOption(language.ToString()))\n                .ToList", "(\n                    await _organizationProfileStorage.GetOrganizationLanguagesAsync())\n                .Select", "language.ToString", "(await _governanceRulesStorage.GetGovernanceRulesAsync())\n                .SelectMany(\n                    rule => rule.Then\n                        .Where(then => then.Type == GovernanceThenType.Label)\n                        .Select(then => then.Value)\n                )\n                .Distinct()\n                .ToList", "(await _governanceRulesStorage.GetGovernanceRulesAsync())\n                .SelectMany(\n                    rule => rule.Then\n                        .Where(then => then.Type == GovernanceThenType.Label)\n                        .Select(then => then.Value)\n                )\n                .Distinct", "(await _governanceRulesStorage.GetGovernanceRulesAsync())\n                .SelectMany", "rule.Then\n                        .Where(then => then.Type == GovernanceThenType.Label)\n                        .Select", "rule.Then\n                        .Where", "TableFilterGroup.Labels.ToString", "materialChangeLabels.Select(label => new ConsumableFilterOption(label))\n                .ToList", "materialChangeLabels.Select", "EnumUtils.GetValues<BusinessImpact>()\n                    .Where", "EnumUtils.GetValues<BusinessImpact>", "TableFilterGroup.BusinessImpact.ToString", "businessImpactLabels\n                    .Select(bi => new ConsumableFilterOption(bi.ToString()))\n                    .ToList", "businessImpactLabels\n                    .Select", "bi.ToString", "TableFilterGroup.Licenses.ToString", "(await _organizationProfileStorage.GetOrganizationLicensesAsync())\n                .Select(license => new ConsumableFilterOption(license))\n                .ToList", "(await _organizationProfileStorage.GetOrganizationLicensesAsync())\n                .Select", "TableFilterGroup.Technologies.ToString", "(await _organizationProfileStorage.GetOrganizationTechnologiesAsync())\n                .Select(technology => new ConsumableFilterOption(technology))\n                .ToList", "(await _organizationProfileStorage.GetOrganizationTechnologiesAsync())\n                .Select", "filterOptions[TableFilter.HasExposedApi.GetTableFilterGroup()\n                        .ToString() ?? throw new InvalidOperationException()]\n                    .RemoveAll", "TableFilter.HasExposedApi.GetTableFilterGroup()\n                        .ToString", "TableFilter.HasExposedApi.ToString", "filterOptions[TableFilter.CheckmarxVulnerabilities.GetTableFilterGroup().ToString() ?? throw new InvalidOperationException()]\n                    .RemoveAll", "TableFilter.CheckmarxVulnerabilities.GetTableFilterGroup().ToString", "TableFilter.CheckmarxVulnerabilities.ToString"], false, false, false, false, [], false, 4, 0, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, false], ["ConsumableSortDefinition", "Lim.Common.DotNET.ConsumableSortDefinition", [], [], "src/Lim.Common.DotNET/Entities/ConsumableSortDefinition.cs", 5, 0, {}, ["Name", "DisplayName"], ["ConsumableSortDefinition", "Name", "DisplayName"], ["Infrastructure.Dotnet.Common"], false, false, [], false, false, [], {}, [], 2, false, false, false, 1, 0.3333333333333333, [], 41.666666666666664, 0, 0.0, 100.0, 1, 0, false, false, false, false, "public", false, [], ["sortOption.ToString", "sortOption.GetDescription"], false, false, false, false, [], false, 2, 0, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, false], ["ConsumableSortOption", "Lim.Common.DotNET.ConsumableSortOption", [], [], "src/Lim.Common.DotNET/Entities/ConsumableSortOption.cs", 5, 0, {}, ["FieldName", "DefaultSortDirection"], ["ConsumableSortOption", "FieldName", "DefaultSortDirection"], ["MongoDB.Driver"], false, false, [], false, false, [], {}, [], 2, false, false, false, 1, 0.3333333333333333, [], 37.333333333333336, 0, 0.0, 100.0, 1, 0, false, false, false, false, "public", false, [], [], false, false, false, false, [], false, 2, 0, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, true], ["ConsumablesSortOptions", "Lim.Common.DotNET.ConsumablesSortOptions", [], [], "src/Lim.Common.DotNET/Entities/ConsumablesSortOptions.cs", 8, 0, {}, ["RepositorySortOptions", "ProjectSortOptions", "DeveloperSortOptions", "CustomAssetCollectionSortOptions"], ["RepositorySortOptions", "ProjectSortOptions", "DeveloperSortOptions", "CustomAssetCollectionSortOptions", "FromSortOptions"], ["System", "System.Collections.Generic", "System.Linq", "Infrastructure.Dotnet.Common"], false, false, [], false, false, [], {}, [], 4, false, false, false, 1, 0.2, [], 59.6, 0, 100.0, 80.0, 0, 0, false, false, true, false, "public", false, [], ["(from tableSort in EnumUtils.GetValues<TableSortOption>()\n                let supportedConsumables = tableSort.GetTableSupportedConsumables()\n                where supportedConsumables.Contains(tableConsumable)\n                select new ConsumableSortDefinition(tableSort)).ToList", "EnumUtils.GetValues<TableSortOption>", "tableSort.GetTableSupportedConsumables", "supportedConsumables.Contains"], false, false, false, false, [], false, 4, 0, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, false], ["CustomAssetCollectionConfiguration", "Lim.Common.DotNET.CustomAssetCollectionConfiguration", ["Lim.Common.DotNET.BaseConfiguration"], [], "src/Lim.Common.DotNET/Entities/CustomAssetCollectionConfiguration.cs", 6, 0, {}, ["RepositoryKeys", "Key", "OrdinalId", "Name", "CreatedAt", "RemovedAt", "ReplacedBy"], ["RepositoryKeys", "BusinessCritical", "InternetFacing", "ToString", "Key", "OrdinalId", "Name", "CreatedAt", "RemovedAt", "ReplacedBy", "HasName", "ValidateConfigurationName"], ["System.Collections.Generic", "JetBrains.Annotations"], false, false, ["MongoCollection"], false, false, [], {}, ["UsedImplicitly", "BsonId", "MongoIndex", "JsonProperty", "BsonDateTimeOptions", "BsonIgnoreIfNull", "BsonIgnore", "CanBeNull"], 10, false, true, false, 1, 0.08333333333333333, [], 64.41666666666667, 0, 8.333333333333334, 100.0, 0, 0, false, false, false, false, "public", false, [], ["string.IsNullOrEmpty", "otherConfigurations.Where(\n                    rule => string.Equals(\n                        rule.Name,\n                        configuration.Name,\n                        StringComparison.OrdinalIgnoreCase\n                    ) && rule.Key != configuration.Key\n                )\n                .ToList", "otherConfigurations.Where", "string.Equals", "configurationsWithNames.Any", "configurationsWithNames.First"], false, false, false, false, ["customAssetCollectionConfiguration"], false, 10, 9, [], false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, true, 0, 0, false], ["CustomAssetCollectionProfile", "Lim.Common.DotNET.CustomAssetCollectionProfile", ["Lim.Common.DotNET.CodeProfile"], [], "src/Lim.Common.DotNET/Entities/CustomAssetCollectionProfile.cs", 11, 0, {"SearchFields": "System.Collections.Generic.HashSet<TableFilter>", "UsageThreshold": "double", "DeveloperIsActiveThreshold": "System.TimeSpan"}, ["Configuration", "Name", "NameLower", "RepositoryByKey", "InventoryBadges", "Inventory", "CommitCount", "RiskPosture", "Risk", "Badges", "Languages", "LanguagePercentages", "DeveloperKeys", "DeveloperCount", "NewDevelopersCount", "ActiveDevelopersCount", "IsActive", "LastActivity", "ActiveSince", "RecentMaterialChangeCount", "MaterialChangeLabels", "FrameworksByType", "Technologies", "Licenses", "StorageBucketsByModule", "BusinessImpact", "Modules", "Key"], ["CustomAssetCollectionProfile", "Configuration", "Name", "NameLower", "RepositoryByKey", "InventoryBadges", "GetInventoryBadges", "MergeRepositoryProfilesModules", "GetHashCode", "CodeProfile", "Inventory", "CommitCount", "RiskPosture", "Risk", "Badges", "Languages", "LanguagePercentages", "DeveloperKeys", "DeveloperCount", "NewDevelopersCount", "HasNewDevelopers", "ActiveDevelopersCount", "IsActive", "LastActivity", "ActiveSince", "RecentMaterialChangeCount", "MaterialChangeLabels", "FrameworksByType", "Technologies", "Licenses", "StorageBucketsByModule", "HasAuthorizationUsage", "HasValidationUsage", "HasApis", "HasCheckmarxVulnerabilities", "HasExposedApis", "HasDataModels", "HasPiiData", "HasExternalDependencies", "HasExposedSecrets", "BusinessImpact", "GetAllBucketsWithFullPaths", "Modules", "Profile", "Key", "ToString"], ["System", "System.Collections.Generic", "System.Linq", "Infrastructure.Dotnet.Common", "JetBrains.Annotations", "MongoDB.Bson.Serialization.Attributes", "Newtonsoft.Json"], false, false, ["MongoCollection"], false, false, [], {"SearchFields": [], "UsageThreshold": [], "DeveloperIsActiveThreshold": []}, ["UsedImplicitly", "Filterable", "MongoIndex", "BsonSkipSetterCheckAttribute", "BsonIgnore", "JsonIgnore", "BsonSerializer", "BsonSkipSetterCheck", "BsonRepresentation", "BsonId"], 38, false, true, true, 6, 0.13043478260869565, [], 97.04347826086956, 0, 2.1739130434782608, 91.30434782608695, 3, 0, false, false, false, false, "public", false, ["Lim.Common.DotNET.CodeProfile.GetHashCode", "Lim.Common.DotNET.CodeFrameworkTypeExtensions.GetDisplayName", "Lim.Common.DotNET.InventoryUtils.MergeInventories", "Lim.Common.DotNET.ConsumableRisk.CombineWith", "Lim.Common.DotNET.RepositoryProfile.GetInventoryBadges", "Lim.Common.DotNET.CustomAssetCollectionProfile.MergeRepositoryProfilesModules"], ["Name.ToLower", "modules.Add", "hashCode.Add", "InventoryBadges.GetSetAggregatedValuesHash", "hashCode.ToHashCode", "GetInventoryBadges()\n                .Select(badge => badge.ToString())\n                .AppendIf(Risk.CombinedRiskLevel.ToString(), Risk.CombinedRiskLevel != RiskLevel.None)\n                .ToList", "GetInventoryBadges()\n                .Select(badge => badge.ToString())\n                .AppendIf", "GetInventoryBadges()\n                .Select", "badge.ToString", "Risk.CombinedRiskLevel.ToString", "LanguagePercentages.Select(pair => pair.Key)\n            .ToHashSet", "LanguagePercentages.Select", "Inventory.FrameworkGroups.Values\n            .SelectMany(\n                group => group.CodeFrameworksToDirectoryPaths.Keys,\n                (group, framework) => (\n                    Type: group.Type.GetDisplayName(framework),\n                    Framework: framework\n                )\n            )\n            .GroupBy(tuple => tuple.Type, tuple => tuple.Framework)\n            .ToDictionary", "Inventory.FrameworkGroups.Values\n            .SelectMany(\n                group => group.CodeFrameworksToDirectoryPaths.Keys,\n                (group, framework) => (\n                    Type: group.Type.GetDisplayName(framework),\n                    Framework: framework\n                )\n            )\n            .GroupBy", "Inventory.FrameworkGroups.Values\n            .SelectMany", "grouping.ToList", "FrameworksByType.Keys.ToHashSet", "Inventory.Dependencies.Values\n            .SelectMany(\n                dependency => dependency.Licenses\n                    .Where(license => !string.IsNullOrEmpty(license.ResolvedName))\n                    .Select(license => license.ResolvedName)\n            )\n            .ToHashSet", "Inventory.Dependencies.Values\n            .SelectMany", "dependency.Licenses\n                    .Where(license => !string.IsNullOrEmpty(license.ResolvedName))\n                    .Select", "dependency.Licenses\n                    .Where", "string.IsNullOrEmpty", "Inventory.TerraformModules.ToDictionary(\n                pair => pair.Key,\n                pair => GetAllBucketsWithFullPaths(pair.Value.TerraformHighlights)\n                    .Where(bucket => !bucket.Bucket.Contains(\"unassigned_var\"))\n                    .ToHashSet()\n            )\n            .WhereValues", "Inventory.TerraformModules.ToDictionary", "GetAllBucketsWithFullPaths(pair.Value.TerraformHighlights)\n                    .Where(bucket => !bucket.Bucket.Contains(\"unassigned_var\"))\n                    .ToHashSet", "GetAllBucketsWithFullPaths(pair.Value.TerraformHighlights)\n                    .Where", "bucket.Bucket.Contains", "storageSet.Any", "Inventory.ApiMethods.Values.Count(_ => _.AnyAuthorizationFrameworks)\n                .SafeDivision", "Inventory.ApiMethods.Values.Count", "Inventory.ApiMethods.Values.Count(_ => _.IsValidationApplicable && _.AnyValidationFramework)\n                .SafeDivision", "Inventory.ApiSnippets.Any", "Inventory.ApiMethods.Any", "Inventory.CheckmarxVulnerabilities.Any", "Inventory.ApiMethods.Values.Any", "Inventory.ApiSnippets.Values.Any", "Inventory.DataModels.Any", "Inventory.Piis.Any", "Inventory.Dependencies.Values.Any", "Inventory.ExposedSecrets.Any", "moduleHighlights.StorageBuckets.ToList", "moduleHighlights.Modules.Select", "buckets.AddRange", "developerRepositoryProfiles\n                .GroupBy(developerRepositoryProfile => developerRepositoryProfile.DeveloperKey)\n                .ToDictionary", "developerRepositoryProfiles\n                .GroupBy", "developerRepositoryProfilesGroup.ToList", "repositoryProfiles.Select(repositoryProfile => (repositoryProfile.Key, repositoryProfile.Inventory))\n                    .ToHashSet", "repositoryProfiles.Select", "repositoryProfiles.Select(repositoryProfile => repositoryProfile.CommitCount)\n                .Sum", "repositoryProfiles.Aggregate", "developerRepositoryProfiles.Sum", "developerRepositoryProfiles.Any", "developerRepositoryProfiles.SelectMany(_ => _.CommitShasToCommitTraits.Values)\n                    .SelectMany(_ => _.Languages)\n                    .ToOrderedPercentages", "developerRepositoryProfiles.SelectMany(_ => _.CommitShasToCommitTraits.Values)\n                    .SelectMany", "developerRepositoryProfiles.SelectMany", "developerRepositoryProfilesByDeveloperKey.Keys.ToHashSet", "developerRepositoryProfilesByDeveloperKey.Count", "developerPair.Value.Any", "developerPair.Value\n                    .Any", "repositoryProfiles\n                .Select(repositoryProfile => repositoryProfile.IsActive)\n                .Any", "repositoryProfiles\n                .Select", "repositoryProfiles\n                .Select(repositoryProfile => repositoryProfile.LastActivity)\n                .Max", "repositoryProfiles\n                .Select(repositoryProfile => repositoryProfile.ActiveSince)\n                .Min", "repositoryProfiles\n                .Select(repositoryProfile => repositoryProfile.RecentMaterialChangeCount)\n                .Sum", "repositoryProfiles\n                .SelectMany(repositoryProfile => repositoryProfile.MaterialChangeLabels)\n                .ToHashSet", "repositoryProfiles\n                .SelectMany", "repositoryProfiles.SelectMany(profile => profile.GetInventoryBadges())\n                .ToHashSet", "repositoryProfiles.SelectMany", "repositoryProfiles\n                .Select(repositoryProfile => repositoryProfile.BusinessImpact)\n                .Max"], false, false, false, false, ["customAssetCollectionProfiles"], false, 38, 20, [], false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, true, 0, 0, true], ["CustomFilter", "Lim.Common.DotNET.CustomFilter", [], [], "src/Lim.Common.DotNET/Entities/CustomFilter.cs", 11, 0, {}, ["Key", "Name", "CreatedBy", "CreatedAt", "EntityType", "SearchTerm", "Filters"], ["Key", "Name", "CreatedBy", "CreatedAt", "EntityType", "SearchTerm", "Filters", "ToString"], ["System", "System.Collections.Generic", "System.Linq", "Infrastructure.Dotnet.Common", "JetBrains.Annotations", "MongoDB.Bson.Serialization.Attributes", "Newtonsoft.Json"], false, false, ["MongoCollection"], false, false, [], {}, ["BsonId", "UsedImplicitly", "JsonProperty", "BsonDateTimeOptions", "BsonSerializer"], 7, false, true, false, 0, 0.0, [], 28.125, 0, 0.0, 100.0, 0, 0, false, false, false, false, "public", false, ["Lim.Common.DotNET.CompositeKey.Create"], ["EntityType.ToString", "Filters.Select(pair => $\"['{pair.Key}':{pair.Value.JoinToString(\", \")}]\")\n                .JoinToString", "Filters.Select", "pair.Value.JoinToString"], false, false, false, false, ["customFilters", "createdAt", ", ", "; "], false, 7, 6, [], false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, true, 0, 0, true], ["DataModel", "Lim.Common.DotNET.DataModel", ["???.DiffableEntity<DataModel>"], [], "src/Lim.Common.DotNET/Entities/DataModel.cs", 8, 0, {}, ["Methods", "FieldNames", "EntityId", "CodeReference"], ["DataModel", "FromDataModelSnippetFeatures", "FromJavaClassFeatures", "Methods", "FieldNames", "EntityId", "CodeReference", "GetHashCode"], ["System", "System.Collections.Generic", "System.Linq", "Infrastructure.Dotnet.Common"], false, false, [], false, false, [], {}, [], 4, false, false, true, 3, 0.375, [], 154.75, 83, 37.5, 87.5, 1, 0, false, false, false, false, "public", false, ["Lim.Common.DotNET.NamedCodeReference.FromDataModelSnippetFeatures", "Lim.Common.DotNET.NamedCodeReference.FromClassFeatures", "Lim.Common.DotNET.CodeFeatures.GetFeature"], ["dataModelFeatures.GetFieldNames(dataModelId)\n                    .ToHashSet", "classFeatures.GetFeature<Dictionary<string, HashSet<string>>>(classId, ClassFeatureNames.FieldAnnotationsByName)\n                    .Keys.ToHashSet", "(\n                EntityId,\n                FieldNames.GetSetAggregatedValuesHash(),\n                CodeReference,\n                Methods.GetSetAggregatedValuesHash()\n            ).GetHashCode", "FieldNames.GetSetAggregatedValuesHash", "Methods.GetSetAggregatedValuesHash"], false, false, false, false, [], false, 4, 4, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, false], ["DataModelTrackingDiffer", "Lim.Common.DotNET.DataModelTrackingDiffer", ["???.EntityTrackingDiffer<DataModel>"], [], "src/Lim.Common.DotNET/Entities/DataModelTrackingDiffer.cs", 6, 0, {}, ["CreateMaterialChangeForDiffResults"], ["CreateMaterialChangeForDiffResults", "CollectNonMaterialChangeInsights", "GenerateMaterialChanges", "DiffBothExist", "GetModifications"], ["System.Collections.Generic", "System.Linq"], false, false, [], false, false, [], {}, [], 1, false, false, false, 4, 0.8, [], 416.6, 239, 20.0, 0.0, 0, 0, false, false, false, false, "public", false, [], ["commitInsights.BadgeRelatedInsights.Add", "GetModifications(currentEntity, previousEntity)\n                        .ToList", "GetModifications(\n                    currentEntity,\n                    previousEntity\n                )\n                .Any", "currentEntity.FieldNames.Count", "previousEntity.FieldNames.Contains", "previousEntity.FieldNames.Count", "currentEntity.FieldNames.Contains", "currentEntity.Methods.Count", "previousEntity.Methods.Contains", "previousEntity.Methods.Count", "currentEntity.Methods.Contains"], false, false, false, false, [], false, 1, 0, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, false], ["DataOfInterest", "Lim.Common.DotNET.DataOfInterest", ["???.DiffableEntity<DataOfInterest>"], [], "src/Lim.Common.DotNET/Entities/DataOfInterest.cs", 8, 0, {}, ["EntityId", "DataModelFieldNames", "FieldNames", "CodeReference", "GovernanceWhenType", "ExposingMethods", "InvolvingMethods"], ["DataOfInterest", "EntityId", "DataModelFieldNames", "FieldNames", "CodeReference", "GovernanceWhenType", "ExposingMethods", "InvolvingMethods", "GetHashCode", "GetSnippetDataModelId"], ["System", "System.Collections.Generic", "System.Linq", "Infrastructure.Dotnet.Common"], false, false, [], false, false, [], {}, [], 7, false, false, true, 2, 0.2, [], 71.3, 0, 20.0, 90.0, 1, 0, false, false, false, false, "public", false, ["Lim.Common.DotNET.CodeFeatures.GetFeature", "Lim.Common.DotNET.DataModelSnippetFeatureNames.GetDataModelName"], ["hashCode.Add", "FieldNames.GetAggregatedValuesHash", "ExposingMethods.GetAggregatedValuesHash", "InvolvingMethods.GetAggregatedValuesHash", "hashCode.ToHashCode", "DataOfInterestType.DataOfInterestTypes.ToDictionary"], false, false, false, false, [], false, 7, 7, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, false], ["DataOfInterestDiffer", "Lim.Common.DotNET.DataOfInterestDiffer", ["???.EntityTrackingDiffer<DataOfInterest>"], [], "src/Lim.Common.DotNET/Entities/DataOfInterestDiffer.cs", 6, 0, {}, ["CreateMaterialChangeForDiffResults"], ["CreateMaterialChangeForDiffResults", "IsEntityRelevant", "IsRuleRelevant", "DiffBothExist", "GenerateMaterialChanges"], ["System.Collections.Generic", "System.Linq"], false, false, [], false, false, [], {}, [], 1, false, false, false, 4, 0.8, [], 553.6, 232, 0.0, 20.0, 0, 0, false, false, false, false, "public", false, ["Lim.Common.DotNET.GovernanceRule.RelevantLabelsBySubType"], ["governanceRule.When.Any", "DataToApiRelation.Exposed.ToString", "DataToApiRelation.Involved.ToString", "currentEntity.FieldNames.Except", "previousEntity.FieldNames.Except", "addedDataFields.Any", "removedDataFields.Any", ".FieldNames.Except(previousEntity?.DataModelFieldNames ?? Enumerable.Empty<string>())\n                .ToList", ".FieldNames.Except", "Enumerable.Empty<string>", ".FieldNames.Except(currentEntity?.DataModelFieldNames ?? Enumerable.Empty<string>())\n                .ToList", "GovernanceRule.RelevantLabelsBySubType(new[] {governanceRule}, GovernanceThenSubType.Added)\n                    .ToList", "addedThenIndexesList.Any", "addedThenIndexesList.First", "GovernanceRule.RelevantLabelsBySubType(new[] {governanceRule}, GovernanceThenSubType.Removed)\n                    .ToList", "removedThenIndexesList.Any", "removedThenIndexesList.First"], false, false, false, false, [], false, 1, 0, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, false], ["DataOfInterestType", "Lim.Common.DotNET.DataOfInterestType", [], [], "src/Lim.Common.DotNET/Entities/DataOfInterestType.cs", 6, 0, {}, ["PiiLevel", "GovernanceWhenType", "RelationToCodeLinkType", "BadgeRelatedInsight", "DisplayName", "DataOfInterestTypes", "ByPiiLevel"], ["DataOfInterestType", "PiiLevel", "GovernanceWhenType", "RelationToCodeLinkType", "BadgeRelatedInsight", "DisplayName", "DataOfInterestTypes", "ByPiiLevel"], ["System.Collections.Generic", "System.Linq"], false, false, [], false, false, [], {}, [], 7, false, false, false, 1, 0.125, [], 32.625, 0, 25.0, 87.5, 1, 0, false, false, false, false, "public", false, [], ["DataOfInterestTypes.ToDictionary"], false, false, false, false, ["Pii"], false, 7, 0, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, false], ["DataOfInterestTypesPiiLevelExtensions", "Lim.Common.DotNET.DataOfInterestTypesPiiLevelExtensions", [], [], "src/Lim.Common.DotNET/Entities/DataOfInterestTypes.cs", 14, 0, {}, [], ["IsOfInterest"], ["System"], false, false, [], false, false, [], {}, [], 0, false, false, false, 1, 1.0, [], 76.0, 76, 100.0, 100.0, 0, 0, false, false, true, false, "public", false, [], ["piiLevel.HasFlag"], false, false, false, false, [], false, 0, 0, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, false], ["DataStorageRevision", "Lim.Common.DotNET.DataStorageRevision", [], [], "src/Lim.Common.DotNET/Entities/DataStorageRevision.cs", 5, 0, {}, ["Id", "Current"], ["Id", "Current"], ["MongoDB.Bson.Serialization.Attributes"], false, false, ["MongoCollection"], false, false, [], {}, ["BsonId"], 2, false, false, false, 0, 0.0, [], 0.0, 0, 0.0, 100.0, 0, 0, false, false, false, false, "public", false, [], [], false, false, false, false, ["revision"], false, 2, 2, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, 0, 0, true], ["DateCount", "Lim.Common.DotNET.DateCount", [], [], "src/Lim.Common.DotNET/Entities/DateCount.cs", 5, 0, {}, ["Date", "Count"], ["DateCount", "Date", "Count"], ["System"], false, false, [], false, false, [], {}, [], 2, false, false, false, 1, 0.3333333333333333, [], 24.0, 0, 0.0, 100.0, 1, 0, false, false, false, false, "public", false, [], [], false, false, false, false, [], false, 2, 0, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, false], ["Dependency", "Lim.Common.DotNET.Dependency", ["???.DiffableEntity<Dependency>"], [], "src/Lim.Common.DotNET/Entities/Dependency.cs", 10, 0, {}, ["Name", "Versions", "Licenses", "LicensesNames", "HomePage", "DependencyType", "CodeReference", "EntityId"], ["Dependency", "Name", "Versions", "Licenses", "LicensesNames", "HomePage", "DependencyType", "IsExternal", "CodeReference", "EntityId", "GetHashCode", "ToString"], ["System.Collections.Generic", "System.Linq", "Infrastructure.Dotnet.Common", "MongoDB.Bson", "MongoDB.Bson.Serialization.Attributes", "Newtonsoft.Json"], false, false, [], false, false, [], {}, ["JsonIgnore", "BsonIgnore", "BsonRepresentation"], 9, false, true, true, 1, 0.08333333333333333, [], 32.5, 0, 8.333333333333334, 91.66666666666667, 1, 0, false, false, false, false, "public", false, [], ["Licenses.Select(license => license.DisplayName)\n            .Distinct()\n            .ToList", "Licenses.Select(license => license.DisplayName)\n            .Distinct", "Licenses.Select", "(\n                Name,\n                Versions.GetSetAggregatedValuesHash()\n            ).GetHashCode", "Versions.GetSetAggregatedValuesHash", "Versions.JoinToString"], false, false, false, false, [], false, 9, 8, [], false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, true, 0, 0, true], ["Developer", "Lim.Common.DotNET.Developer", [], [], "src/Lim.Common.DotNET/Entities/Developer.cs", 9, 0, {}, ["Key", "AdditionalInformation"], ["Developer", "Key", "AdditionalInformation", "ToString", "GetAdditionalInformationForSuffix", "AddAdditionalInformation", "Equals", "GetHashCode"], ["System", "System.Collections.Generic", "System.Linq", "Infrastructure.Dotnet.Common", "MongoDB.Bson.Serialization.Attributes"], false, false, ["MongoCollection"], false, false, [], {}, ["BsonId"], 2, true, true, true, 3, 0.375, [], 121.75, 56, 0.0, 100.0, 1, 0, false, false, false, false, "public", false, ["Lim.Common.DotNET.Developer.AddAdditionalInformation"], ["Guid.NewGuid()\n            .ToString", "Guid.NewGuid", ".Keys.FirstOrDefault", "key.EndsWith", "AdditionalInformation.PutIfNotExists", "string.Equals", "Key.GetHashCode"], false, false, false, false, ["developers"], false, 2, 2, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, 0, 0, true], ["DeveloperConsumableProfile", "Lim.Common.DotNET.DeveloperConsumableProfile", [], [], "src/Lim.Common.DotNET/Entities/DeveloperConsumableProfile.cs", 8, 0, {"DeveloperIsNewToConsumableThreshold": "System.TimeSpan"}, ["Key", "DeveloperKey", "ActiveSince", "LastActivity"], ["Key", "DeveloperKey", "ActiveSince", "IsNew", "LastActivity"], ["System", "JetBrains.Annotations", "MongoDB.Bson.Serialization.Attributes", "Newtonsoft.Json"], false, false, [], false, false, [], {"DeveloperIsNewToConsumableThreshold": []}, ["BsonId", "UsedImplicitly", "JsonIgnore", "MongoIndex", "FilterableByJoin", "BsonDateTimeOptions", "BsonSkipSetterCheckAttribute"], 5, false, false, false, 0, 0.0, [], 0.0, 0, 0.0, 100.0, 0, 0, false, true, false, false, "public", false, [], ["TimeSpan.FromDays"], false, false, false, false, [], false, 5, 3, [], false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, true, 0, 0, true], ["DeveloperIdentity", "Lim.Common.DotNET.DeveloperIdentity", [], [], "src/Lim.Common.DotNET/Entities/DeveloperIdentity.cs", 7, 0, {}, ["Key", "Identity", "ServerUrl", "Type", "DeveloperKey"], ["DeveloperIdentity", "Key", "Identity", "ServerUrl", "Type", "DeveloperKey", "ToString", "Equals", "GetHashCode"], ["System", "MongoDB.Bson.Serialization.Attributes", "Newtonsoft.Json"], false, false, ["MongoCollection"], false, false, [], {}, ["BsonId", "MongoIndex", "JsonIgnore", "BsonSerializer"], 5, true, true, true, 1, 0.1111111111111111, [], 97.44444444444444, 0, 0.0, 100.0, 1, 0, false, false, false, false, "public", false, ["Lim.Common.DotNET.CompositeKey.Create"], ["string.Equals", "Key.GetHashCode", "string.IsNullOrEmpty"], false, false, false, false, ["developerIdentities"], false, 5, 4, [], false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, true, 0, 0, true], ["DeveloperIdentityExtensions", "Lim.Common.DotNET.DeveloperIdentityExtensions", [], [], "src/Lim.Common.DotNET/Entities/DeveloperIdentityExtensions.cs", 6, 0, {}, [], ["SelectDevelopersKeys"], ["System.Collections.Generic", "System.Linq"], false, false, [], false, false, [], {}, [], 0, false, false, false, 1, 1.0, [], 108.0, 108, 100.0, 100.0, 0, 0, false, false, true, false, "public", false, [], ["developerIdentities\n                .Select(_ => _.DeveloperKey)\n                .ToHashSet", "developerIdentities\n                .Select"], false, false, false, false, [], false, 0, 0, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, false], ["DeveloperProfile", "Lim.Common.DotNET.DeveloperProfile", ["Lim.Common.DotNET.Profile"], [], "src/Lim.Common.DotNET/Entities/DeveloperProfile.cs", 11, 0, {"SearchFields": "System.Collections.Generic.HashSet<TableFilter>", "DeveloperIsNewThreshold": "System.TimeSpan", "DeveloperIsActiveThreshold": "System.TimeSpan"}, ["Developer", "CommitCount", "AuthoredPullRequestCount", "ReviewedPullRequestCount", "ActiveSince", "LastActivity", "RepositoryCount", "Languages", "LanguagePercentages", "CodeFrameworkTypes", "CodeFrameworkPercentages", "SecurityExpertise", "ApisAggregatedAdditions", "PiisAggregatedAdditions", "DataModelAggregatedModifications", "MaterialChangeLabels", "Badges", "BadgesCount", "DisplayName", "DisplayNameLower", "DeveloperIdentitiesDisplayNames", "DeveloperIdentities", "AvatarUrl", "Key"], ["DeveloperProfile", "Developer", "CommitCount", "AuthoredPullRequestCount", "ReviewedPullRequestCount", "ActiveSince", "IsNew", "IsActive", "LastActivity", "RepositoryCount", "Languages", "LanguagePercentages", "CodeFrameworkTypes", "CodeFrameworkPercentages", "IsSecurityChampion", "SecurityExpertise", "ApisAggregatedAdditions", "PiisAggregatedAdditions", "DataModelAggregatedModifications", "MaterialChangeLabels", "Badges", "ContributedApis", "ContributedPii", "ContributedSecurity", "BadgesCount", "DisplayName", "DisplayNameLower", "DeveloperIdentitiesDisplayNames", "DeveloperIdentities", "AvatarUrl", "EmptyProfileFor", "GetHashCode", "Profile", "Key", "ToString"], ["System", "System.Collections.Generic", "System.Linq", "Infrastructure.Dotnet.Common", "JetBrains.Annotations", "MongoDB.Bson.Serialization.Attributes", "Newtonsoft.Json"], false, false, ["MongoCollection"], false, false, [], {"SearchFields": [], "DeveloperIsNewThreshold": [], "DeveloperIsActiveThreshold": []}, ["BsonSerializer", "UsedImplicitly", "MongoIndex", "Filterable", "BsonSkipSetterCheckAttribute", "JsonIgnore", "BsonSkipSetterCheck", "BsonIgnore", "BsonId"], 30, false, true, true, 3, 0.08571428571428572, [], 139.25714285714287, 0, 2.857142857142857, 97.14285714285714, 2, 0, false, false, false, false, "public", false, ["Lim.Common.DotNET.Profile.GetHashCode", "Lim.Common.DotNET.Developer.GetAdditionalInformationForSuffix"], ["LanguagePercentages.Select(pair => pair.Key)\n            .ToHashSet", "LanguagePercentages.Select", "CodeFrameworkPercentages.Select(pair => pair.Key.Name)\n            .ToHashSet", "CodeFrameworkPercentages.Select", "badges.Add", "Badges.Contains", "DisplayName.ToLower", "Array.Empty<DeveloperRepositoryProfile>", "hashCode.Add", "LanguagePercentages.GetAggregatedValuesHash", "DeveloperIdentitiesDisplayNames.GetAggregatedValuesHash", "SecurityExpertise.GetSetAggregatedValuesHash", "hashCode.ToHashCode", "TimeSpan.FromDays", "developerRepositoryProfiles.ToDictionary", "profileByRepositoryKey.SelectMany(_ => _.Value.CommitShasToCommitTraits.Keys)\n                .Distinct()\n                .Count", "profileByRepositoryKey.SelectMany(_ => _.Value.CommitShasToCommitTraits.Keys)\n                .Distinct", "profileByRepositoryKey.SelectMany", "profileByRepositoryKey.Sum", "profileByRepositoryKey.Any", "profileByRepositoryKey.Min", "profileByRepositoryKey.SelectMany(_ => _.Value.SecurityExpertise)\n                .ToHashSet", "profileByRepositoryKey.Select(_ => _.Value.ApisAddedCommitsSha)\n                .CountDistinctMany", "profileByRepositoryKey.Select", "profileByRepositoryKey.Select(_ => _.Value.PiisAddedCommitsSha)\n                .CountDistinctMany", "profileByRepositoryKey.Select(_ => _.Value.DataModelsAddedCommitsSha)\n                .CountDistinctMany", "developerRepositoryProfiles.SelectMany(_ => _.CommitShasToCommitTraits.Values)\n                .SelectMany(_ => _.Languages)\n                .ToOrderedPercentages", "developerRepositoryProfiles.SelectMany(_ => _.CommitShasToCommitTraits.Values)\n                .SelectMany", "developerRepositoryProfiles.SelectMany", "developerRepositoryProfiles.SelectMany(_ => _.CommitShasToCommitTraits.Values)\n                .SelectMany(_ => _.CodeFrameworks)\n                .ToOrderedPercentages", "developerIdentities\n                .Select(developerIdentity => developerIdentity.Identity)\n                .Distinct()\n                .Where(identity => !Guid.TryParse(identity, out _) && !int.TryParse(identity, out _))\n                .OrderBy(identity => identity.Length)\n                .ThenBy(identity => identity)\n                .ToList", "developerIdentities\n                .Select(developerIdentity => developerIdentity.Identity)\n                .Distinct()\n                .Where(identity => !Guid.TryParse(identity, out _) && !int.TryParse(identity, out _))\n                .OrderBy(identity => identity.Length)\n                .ThenBy", "developerIdentities\n                .Select(developerIdentity => developerIdentity.Identity)\n                .Distinct()\n                .Where(identity => !Guid.TryParse(identity, out _) && !int.TryParse(identity, out _))\n                .OrderBy", "developerIdentities\n                .Select(developerIdentity => developerIdentity.Identity)\n                .Distinct()\n                .Where", "developerIdentities\n                .Select(developerIdentity => developerIdentity.Identity)\n                .Distinct", "developerIdentities\n                .Select", "Guid.TryParse", "int.TryParse", "developer.GetAdditionalInformationForSuffix(\"DisplayName\")\n                .OrIfEmpty", "developerIdentitiesDisplayNames.FirstOrDefault()\n                        .OrIfEmpty(\n                            developerIdentities.FirstOrDefault()\n                                ?.Identity\n                        )\n                        .CamelCaseWithSpaces", "developerIdentitiesDisplayNames.FirstOrDefault()\n                        .OrIfEmpty", "developerIdentitiesDisplayNames.FirstOrDefault", "developerIdentities.FirstOrDefault", "developerIdentitiesDisplayNames.Remove"], false, false, false, false, ["developerProfiles", "DisplayName", "AvatarUrl"], false, 30, 20, [], false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, true, 0, 0, true], ["DeveloperProjectProfile", "Lim.Common.DotNET.DeveloperProjectProfile", ["Lim.Common.DotNET.DeveloperConsumableProfile"], [], "src/Lim.Common.DotNET/Entities/DeveloperProjectProfile.cs", 10, 0, {"DeveloperIsNewToConsumableThreshold": "System.TimeSpan"}, ["Key", "ProjectKey", "AuthoredIssueCount", "AuthoredIssueKeys", "ParticipatedIssueCount", "ParticipatedIssueKeys", "DeveloperKey", "ActiveSince", "LastActivity"], ["DeveloperProjectProfile", "Key", "ProjectKey", "AuthoredIssueCount", "AuthoredIssueKeys", "ParticipatedIssueCount", "ParticipatedIssueKeys", "BuildKey", "ToString", "DeveloperKey", "ActiveSince", "IsNew", "LastActivity"], ["System", "System.Collections.Generic", "Infrastructure.Dotnet.Common", "JetBrains.Annotations", "MongoDB.Bson.Serialization.Attributes", "Newtonsoft.Json"], false, false, ["MongoCollection"], false, false, [], {"DeveloperIsNewToConsumableThreshold": []}, ["MongoIndex", "FilterableByJoin", "BsonSerializer", "UsedImplicitly", "JsonIgnore", "BsonDateTimeOptions", "BsonSkipSetterCheckAttribute"], 10, false, true, false, 3, 0.21428571428571427, [], 41.0, 0, 7.142857142857143, 100.0, 2, 0, false, false, false, false, "public", false, ["Lim.Common.DotNET.CompositeKey.Create"], ["AuthoredIssueKeys.Add", "developerKey.Hash32", "ParticipatedIssueKeys.Add"], false, false, false, false, ["developerProjectProfiles"], false, 10, 8, [], false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, true, 0, 0, true], ["DeveloperRepositoryProfile", "Lim.Common.DotNET.DeveloperRepositoryProfile", ["Lim.Common.DotNET.DeveloperConsumableProfile"], [], "src/Lim.Common.DotNET/Entities/DeveloperRepositoryProfile.cs", 11, 0, {"DeveloperIsNewToConsumableThreshold": "System.TimeSpan"}, ["Key", "RepositoryKey", "CommitShasToCommitTraits", "CommitCount", "AuthoredPullRequestIds", "AuthoredPullRequestCount", "ReviewedPullRequestIds", "ReviewedPullRequestCount", "SecurityCommits", "SecurityExpertise", "ApisAddedCommitsSha", "PiisAddedCommitsSha", "DataModelsAddedCommitsSha", "DeveloperKey", "ActiveSince", "LastActivity"], ["DeveloperRepositoryProfile", "Key", "RepositoryKey", "CommitShasToCommitTraits", "CommitCount", "AuthoredPullRequestIds", "AuthoredPullRequestCount", "ReviewedPullRequestIds", "ReviewedPullRequestCount", "IsSecurityChampion", "SecurityCommits", "SecurityExpertise", "ApisAddedCommitsSha", "PiisAddedCommitsSha", "DataModelsAddedCommitsSha", "BuildKey", "DeveloperKey", "ActiveSince", "IsNew", "LastActivity"], ["System", "System.Collections.Generic", "System.Linq", "Infrastructure.Dotnet.Common", "JetBrains.Annotations", "MongoDB.Bson.Serialization.Attributes", "Newtonsoft.Json"], false, false, ["MongoCollection"], false, false, [], {"DeveloperIsNewToConsumableThreshold": []}, ["MongoIndex", "FilterableByJoin", "JsonIgnore", "BsonSerializer", "BsonIgnore", "Filterable", "BsonSkipSetterCheck", "UsedImplicitly", "BsonDateTimeOptions", "BsonSkipSetterCheckAttribute"], 18, false, false, false, 4, 0.18181818181818182, [], 30.727272727272727, 0, 4.545454545454546, 100.0, 3, 0, false, false, false, false, "public", false, ["Lim.Common.DotNET.CompositeKey.Create"], ["SecurityCommits.Count.SafeDivision", "CommitShasToCommitTraits.Where(_ => _.Value.BadgeRelatedInsights.Contains(BadgeRelatedInsight.ApiModified))\n            .Select(_ => _.Key)\n            .ToList", "CommitShasToCommitTraits.Where(_ => _.Value.BadgeRelatedInsights.Contains(BadgeRelatedInsight.ApiModified))\n            .Select", "CommitShasToCommitTraits.Where", "_.Value.BadgeRelatedInsights.Contains", "CommitShasToCommitTraits.Where(_ => _.Value.BadgeRelatedInsights.Contains(BadgeRelatedInsight.PiiModified))\n            .Select(_ => _.Key)\n            .ToList", "CommitShasToCommitTraits.Where(_ => _.Value.BadgeRelatedInsights.Contains(BadgeRelatedInsight.PiiModified))\n            .Select", "CommitShasToCommitTraits.Where(_ => _.Value.BadgeRelatedInsights.Contains(BadgeRelatedInsight.DataModelModified))\n            .Select(_ => _.Key)\n            .ToList", "CommitShasToCommitTraits.Where(_ => _.Value.BadgeRelatedInsights.Contains(BadgeRelatedInsight.DataModelModified))\n            .Select", "AuthoredPullRequestIds.Add", "pullRequest.Key.Hash32", "ReviewedPullRequestIds.Add"], false, false, false, false, ["developerRepositoryProfiles"], false, 18, 10, [], false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, true, 0, 0, true], ["DiffableEntity", "Lim.Common.DotNET.DiffableEntity<TValue>", [], ["Lim.Common.DotNET.IDiffable"], "src/Lim.Common.DotNET/Entities/DiffableEntity.cs", 9, 0, {"Differs": "System.Collections.Generic.Dictionary<GovernanceWhenType, IEntityDiffer<DiffableEntity<TValue>>>"}, ["EntityId", "RepositoryKeys", "InstanceCount"], ["SupportsSimilarEntities", "EntityId", "RepositoryKeys", "CollectInsightsForDiffable", "CanDiffRule", "IsEntityRelevantToRule", "FindSimilarEntities", "AggregateMaterialChanges", "CollectNonGovernanceInsightsForDiffable", "EnrichFromApplicableGovernanceRule", "InstanceCount", "Diff", "CollectNonGovernanceInsights"], ["System.Collections", "System.Collections.Generic", "System.Linq", "Infrastructure.Dotnet.Common", "MongoDB.Bson.Serialization.Attributes"], false, false, [], false, false, [], {"Differs": []}, ["BsonIgnore"], 4, false, false, false, 10, 0.7142857142857143, [], 140.5, 40, 0.0, 78.57142857142857, 0, 0, false, true, false, false, "public", true, ["Lim.Common.DotNET.IEntityDiffer<Lim.Common.DotNET.DiffableEntity<TValue>>.CollectInsights", "Lim.Common.DotNET.IEntityDiffer<Lim.Common.DotNET.DiffableEntity<TValue>>.IsRuleRelevant", "Lim.Common.DotNET.IEntityDiffer<Lim.Common.DotNET.DiffableEntity<TValue>>.IsEntityRelevantToRule", "Lim.Common.DotNET.IEntityDiffer<Lim.Common.DotNET.DiffableEntity<TValue>>.Diff"], ["Differs.ContainsKey", "FindSimilarEntities(\n                        ((IDictionary) current).CastDictionary<string, TValue>(),\n                        ((IDictionary) previous).CastDictionary<string, TValue>()\n                    )\n                    .Select", "FindSimilarEntities", "((IDictionary) current).CastDictionary<string, TValue>", "((IDictionary) previous).CastDictionary<string, TValue>", "Enumerable.Empty<(IDiffable, IDiffable)>", "Enumerable.Empty<(TValue, TValue)>"], false, false, false, false, [], false, 4, 2, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, 0, 0, true], ["ApiAuthorizationDiffer", "Lim.Common.DotNET.ApiAuthorizationDiffer", ["???.BaseEntityDiffer<ApiMethod>"], [], "src/Lim.Common.DotNET/Entities/Differs/ApiAuthorizationDiffer.cs", 6, 0, {}, ["CreateMaterialChangeForDiffResults"], ["CreateMaterialChangeForDiffResults", "HasAuthorization", "DiffEntity", "GenerateMaterialChanges"], ["System.Collections.Generic", "System.Linq"], false, false, [], false, false, [], {}, [], 1, false, false, false, 3, 0.75, [], 478.75, 318, 25.0, 0.0, 0, 0, false, false, false, false, "public", false, [], ["allowedFrameworks.Contains", "allowedFrameworks.Any", "currentApiMethod.MissingAuthorizationFrameworks.Contains", "governanceRule.When\n                .Where(portion => portion.Type == GovernanceWhenType.Authorization)\n                .Select(portion => portion.Value)\n                .ToHashSet", "governanceRule.When\n                .Where(portion => portion.Type == GovernanceWhenType.Authorization)\n                .Select", "governanceRule.When\n                .Where"], false, false, false, false, [], false, 1, 0, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, false], ["ApiMethodTrackingDiffer", "Lim.Common.DotNET.ApiMethodTrackingDiffer", ["???.EntityTrackingDiffer<ApiMethod>"], [], "src/Lim.Common.DotNET/Entities/Differs/ApiMethodTrackingDiffer.cs", 8, 0, {}, ["CreateMaterialChangeForDiffResults"], ["CreateMaterialChangeForDiffResults", "IsEntityRelevant", "CollectNonMaterialChangeInsights", "GenerateMaterialChanges", "DiffBothExist", "GetModifications", "NotEmptyAndNotEquals"], ["System", "System.Collections.Generic", "System.Linq", "Infrastructure.Dotnet.Common"], false, false, [], false, false, [], {}, [], 1, false, false, false, 6, 0.8571428571428571, [], 520.5714285714286, 181, 28.571428571428573, 0.0, 0, 0, false, false, false, false, "public", false, ["Lim.Common.DotNET.JavaParsingUtils.GetNameFromQualifiedName"], ["CreateMaterialChangeForDiffResults.Contains", "commitInsights.BadgeRelatedInsights.Add", "commitInsights.AddedOrModifiedApisByClassId.AddOrUpdate", "set.Add", "GetModifications(currentEntity, previousEntity)\n                        .ToList", "GetModifications(currentEntity, previousEntity)\n                .Any", "previous.Annotations\n                .SetEquals", "current.ParameterNameToAnnotations\n                .Values.Flatten()\n                .ToHashSet", "current.ParameterNameToAnnotations\n                .Values.Flatten", "previous.ParameterNameToAnnotations\n                .Values.Flatten()\n                .ToHashSet", "previous.ParameterNameToAnnotations\n                .Values.Flatten", "allCurrentParameterAnnotations.SetEquals", "previousReturnType.EqualsIgnoreCase", "Math.Abs", "string.IsNullOrEmpty", "previous.EqualsIgnoreCase"], false, false, false, false, ["Annotations were modified", "Parameter annotations were modified", "Suspected logic change or refactoring"], false, 1, 0, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, false], ["ApiSnippetAuthenticationDiffer", "Lim.Common.DotNET.ApiSnippetAuthenticationDiffer", ["???.BaseEntityDiffer<ApiSnippet>"], [], "src/Lim.Common.DotNET/Entities/Differs/ApiSnippetAuthenticationDiffer.cs", 5, 0, {}, ["CreateMaterialChangeForDiffResults"], ["CreateMaterialChangeForDiffResults", "DiffEntity", "CollectNonMaterialChangeInsights", "GenerateMaterialChanges"], ["System.Collections.Generic"], false, false, [], false, false, [], {}, [], 1, false, false, false, 3, 0.75, [], 339.0, 422, 0.0, 0.0, 0, 0, false, false, false, false, "public", false, [], ["commitInsights.BadgeRelatedInsights.Add", "commitInsights.SecurityExpertise.Add"], false, false, false, false, [], false, 1, 0, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, false], ["ApiSnippetTrackingDiffer", "Lim.Common.DotNET.ApiSnippetTrackingDiffer", ["???.EntityTrackingDiffer<ApiSnippet>"], [], "src/Lim.Common.DotNET/Entities/Differs/ApiSnippetTrackingDiffer.cs", 9, 0, {}, ["CreateMaterialChangeForDiffResults"], ["CreateMaterialChangeForDiffResults", "CollectNonMaterialChangeInsights", "IsEntityRelevant", "GenerateMaterialChanges", "DiffBothExist", "GetModifications", "ValuesDiffer"], ["System", "System.Collections.Generic", "System.Linq", "Infrastructure.Dotnet.Common", "JetBrains.Annotations"], false, false, [], false, false, [], {}, [], 1, false, false, false, 6, 0.8571428571428571, [], 500.2857142857143, 237, 28.571428571428573, 0.0, 0, 0, false, false, false, false, "public", false, ["Lim.Common.DotNET.ApiSnippet.RouteHasIdParam"], ["CreateMaterialChangeForDiffResults.Contains", "commitInsights.BadgeRelatedInsights.Add", "governanceRule.When.Any", "GetModifications(currentEntity, previousEntity)\n                        .ToList", "GetModifications(currentEntity, previousEntity)\n                .Any", "currentRequiredFields.Any", "previousRequiredFields.Contains", "previousRequiredFields.None", "currentRequiredFields.JoinToString", "currentRequiredFields.None", "previousRequiredFields.JoinToString", "string.IsNullOrEmpty", "string.Equals"], false, false, false, false, ["withId", "field", "fields", ", "], false, 1, 0, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, false], ["DataOfInterestInApiDiffer", "Lim.Common.DotNET.DataOfInterestInApiDiffer", ["???.BaseEntityDiffer<ApiMethod>"], [], "src/Lim.Common.DotNET/Entities/Differs/DataOfInterestInApiDiffer.cs", 8, 0, {}, ["WhenType", "CreateMaterialChangeForDiffResults"], ["DataOfInterestInApiDiffer", "WhenType", "CreateMaterialChangeForDiffResults", "IsRuleRelevant", "DiffEntity", "GetCodeLinksForCurrentType", "GenerateMaterialChanges"], ["System", "System.Collections.Generic", "System.Linq", "Infrastructure.Dotnet.Common"], false, false, [], false, false, [], {}, [], 2, false, false, false, 5, 0.7142857142857143, [], 405.14285714285717, 126, 0.0, 28.571428571428573, 1, 0, false, false, false, false, "public", false, [], ["governanceRule.When.First", "currentTypeCodeLinks.Any", "previousTypeCodeLinks.Any", "Enumerable.Empty<CodeLink>", "EnumUtils.FromString<DataToApiRelation>", "DataOfInterestType.DataOfInterestTypes\n                .First", "entity.CodeLinks.Where(link => link.Type == currentLinkType)\n                .Distinct", "entity.CodeLinks.Where", "currentCodeLinks.Where", "previousCodeLinks.None", "currentInventory.Piis.TryGetValue"], false, false, false, false, [], false, 2, 0, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, false], ["DependencyTrackingDiffer", "Lim.Common.DotNET.DependencyTrackingDiffer", ["???.EntityTrackingDiffer<Dependency>"], [], "src/Lim.Common.DotNET/Entities/Differs/DependencyTrackingDiffer.cs", 8, 0, {"VersionChangeSubTypes": "System.Collections.Generic.HashSet<GovernanceThenSubType>"}, ["CreateMaterialChangeForDiffResults"], ["CreateMaterialChangeForDiffResults", "IsEntityRelevant", "DiffBothExist", "GenerateMaterialChanges", "GetVersions"], ["System", "System.Collections.Generic", "System.Linq", "Infrastructure.Dotnet.Common"], false, false, [], false, false, [], {"VersionChangeSubTypes": []}, [], 1, false, false, false, 4, 0.8, [], 338.0, 269, 20.0, 0.0, 0, 0, false, false, false, false, "public", false, [], ["previousVersions.None", "currentVersions.None", "currentVersions.Max", "previousVersions.Min", "currentVersions.Min", "previousVersions.Max", "VersionChangeSubTypes.Contains", "GetVersions(previousEntity)\n                        .Min", ".ToString", "GetVersions(currentEntity)\n                        .Min", "dependency.Versions.Select(\n                    versionString => Version.TryParse(versionString, out var version)\n                        ? version\n                        : null\n                )\n                .WhereNotNull()\n                .ToList", "dependency.Versions.Select(\n                    versionString => Version.TryParse(versionString, out var version)\n                        ? version\n                        : null\n                )\n                .WhereNotNull", "dependency.Versions.Select", "Version.TryParse"], false, false, false, false, [], false, 1, 0, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, false], ["ExposedSecretsDiffer", "Lim.Common.DotNET.ExposedSecretsDiffer", ["???.EntityTrackingDiffer<ExposedSecret>"], [], "src/Lim.Common.DotNET/Entities/Differs/ExposedSecretsDiffer.cs", 6, 0, {}, ["CreateMaterialChangeForDiffResults"], ["CreateMaterialChangeForDiffResults", "IsEntityRelevant", "GenerateMaterialChanges", "DiffBothExist"], ["System.Collections.Generic", "System.Linq"], false, false, [], false, false, [], {}, [], 1, false, false, false, 3, 0.75, [], 213.25, 138, 0.0, 0.0, 0, 0, false, false, false, false, "public", false, [], ["governanceRule.When\n                .Where(portion => portion.Type == GovernanceWhenType.ExposedSecrets)\n                .Select(portion => portion.Value)\n                .ToHashSet", "governanceRule.When\n                .Where(portion => portion.Type == GovernanceWhenType.ExposedSecrets)\n                .Select", "governanceRule.When\n                .Where", "relevantClassifications.Contains", "currentEntity.FileClassification.ToString", "previousEntity.FileClassification.ToString"], false, false, false, false, [], false, 1, 0, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, false], ["FrameworkDiffer", "Lim.Common.DotNET.FrameworkDiffer", ["???.BaseEntityDiffer<CodeFrameworksGroup>"], [], "src/Lim.Common.DotNET/Entities/Differs/FrameworkDiffer.cs", 7, 0, {}, ["CreateMaterialChangeForDiffResults"], ["CreateMaterialChangeForDiffResults", "CodeFrameworkType", "IsEntityRelevant", "DiffEntity", "GenerateMaterialChanges", "GetModifications"], ["System.Collections.Generic", "System.Linq", "Infrastructure.Dotnet.Common"], false, false, [], false, false, [], {}, [], 1, false, false, false, 5, 0.8333333333333334, [], 528.1666666666666, 293, 33.333333333333336, 0.0, 0, 0, false, false, false, false, "public", false, ["Lim.Common.DotNET.CodeFrameworkTypeExtensions.ToWhenType"], ["governanceRule.WhenTypes.Contains", "affectedDirectories.Any", "CodeFrameworkType(currentEntity, previousEntity)\n                        .ToString", ".CodeFrameworksToDirectoryPaths.Keys.ToHashSet", "governanceRule.When.None", "governanceRule.When.Where(portion => portion.Type == whenType)\n                    .Select(whenPortion => whenPortion.Value)\n                    .ToHashSet", "governanceRule.When.Where(portion => portion.Type == whenType)\n                    .Select", "governanceRule.When.Where", "currentFrameworks\n                .Except(previousFrameworks)\n                .Where(framework => relevantFrameworks == null || relevantFrameworks.Contains(framework))\n                .ToHashSet", "currentFrameworks\n                .Except(previousFrameworks)\n                .Where", "currentFrameworks\n                .Except", "relevantFrameworks.Contains", "addedFrameworks.Any", "affectedDirectories.AddRange", "addedFrameworks.SelectMany", "previousFrameworks\n                .Except(currentFrameworks)\n                .Where(framework => relevantFrameworks == null || relevantFrameworks.Contains(framework))\n                .ToHashSet", "previousFrameworks\n                .Except(currentFrameworks)\n                .Where", "previousFrameworks\n                .Except", "removedFrameworks.Any", "removedFrameworks.SelectMany"], false, false, false, false, [], false, 1, 0, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, false], ["InputValidationDiffer", "Lim.Common.DotNET.InputValidationDiffer", ["???.BaseEntityDiffer<ApiMethod>"], [], "src/Lim.Common.DotNET/Entities/Differs/InputValidationDiffer.cs", 7, 0, {}, ["CreateMaterialChangeForDiffResults"], ["CreateMaterialChangeForDiffResults", "DiffEntity", "HaveFullValidation", "GetInputParameterValidationStatuses", "GetModificationsDescriptions", "GenerateMaterialChanges", "IsParameterValidated", "AllowedFrameworks"], ["System.Collections.Generic", "System.Linq", "Infrastructure.Dotnet.Common"], false, false, [], false, false, [], {}, [], 1, false, false, false, 7, 0.875, [], 765.25, 709, 62.5, 0.0, 0, 0, false, false, false, false, "public", false, ["Lim.Common.DotNET.MethodInputValidationUtil.GetApplicableUnvalidatedParameters"], ["GetModificationsDescriptions(currentInputParametersValidationsStatuses, previousInputParametersValidationsStatuses)\n                .Any", "inputParameterValidationStatuses.All", "parameterNames.Select(\n                    parameterName => new InputParameterValidationStatus\n                    {\n                        ParameterName = parameterName,\n                        HasInputValidation = IsParameterValidated(\n                            parameterName,\n                            unvalidatedParametersByFramework,\n                            allowedFrameworks\n                        )\n                    }\n                )\n                .ToList", "parameterNames.Select", "previousStatuses.ToDictionary", "parameterNameToPreviousInputValidationStatus.TryGetValue", "entity.ParametersNameToType\n                        .Keys.ToList", "GetModificationsDescriptions(currentInputParametersValidationsStatuses, previousInputParametersValidationsStatuses)\n                        .ToList", "unvalidatedParametersByFramework.TryGetValue", "currentFrameworkUnvalidatedParameters.Any", "currentFrameworkUnvalidatedParameters.None", "governanceRule.When\n                .Where(portion => portion.Type == GovernanceWhenType.InputValidation)\n                .Select(portion => portion.Value)\n                .ToHashSet", "governanceRule.When\n                .Where(portion => portion.Type == GovernanceWhenType.InputValidation)\n                .Select", "governanceRule.When\n                .Where", "allowedFrameworks.Contains", "EnumUtils.GetValues<JavaInputValidationFramework>()\n                    .Select(framework => framework.ToString())\n                    .ToHashSet", "EnumUtils.GetValues<JavaInputValidationFramework>()\n                    .Select", "EnumUtils.GetValues<JavaInputValidationFramework>", "framework.ToString"], false, false, false, false, [], false, 1, 0, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, false], ["InputParameterValidationStatus", "Lim.Common.DotNET.InputValidationDiffer.InputParameterValidationStatus", [], [], "src/Lim.Common.DotNET/Entities/Differs/InputValidationDiffer.cs", 165, 0, {}, ["ParameterName"], ["ParameterName", "HasInputValidation"], ["System.Collections.Generic", "System.Linq", "Infrastructure.Dotnet.Common"], false, false, [], false, false, [], {}, [], 2, false, false, false, 0, 0.0, ["Lim.Common.DotNET.InputValidationDiffer"], 0.0, 0, 0.0, 100.0, 0, 0, true, false, false, false, "private", false, [], [], false, false, false, false, [], false, 2, 2, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, false], ["JavaSecurityAnnotationDiffer", "Lim.Common.DotNET.JavaSecurityAnnotationDiffer", ["???.BaseEntityDiffer<JavaAnnotations>"], [], "src/Lim.Common.DotNET/Entities/Differs/JavaSecurityAnnotationDiffer.cs", 8, 0, {"SecurityTypeToAnnotations": "System.Collections.Generic.IReadOnlyDictionary<SecurityChangeTypes, ISet<string>>", "SecurityAnnotationToType": "System.Collections.Generic.IReadOnlyDictionary<string, SecurityChangeTypes>"}, ["CreateMaterialChangeForDiffResults"], ["JavaSecurityAnnotationDiffer", "CreateMaterialChangeForDiffResults", "CollectNonGovernanceInsights", "DiffEntity", "GenerateMaterialChanges", "GetChanges", "GetChangeTypes"], ["System", "System.Collections.Generic", "System.Linq", "Infrastructure.Dotnet.Common"], false, false, [], false, false, [], {"SecurityTypeToAnnotations": [], "SecurityAnnotationToType": []}, [], 1, false, false, false, 6, 0.8571428571428571, [], 244.14285714285714, 277, 14.285714285714286, 0.0, 1, 0, false, false, false, false, "public", false, [], ["commitInsights.SecurityExpertise.AddRange", "addedAnnotations.Any", "removedAnnotations.Any", "currentAnnotation.Except", "previousAnnotation.Except", "addedAnnotations.Union(removedAnnotations)\n                    .Select(SecurityAnnotationToType.GetValueOrDefault)\n                    .WhereNotNull()\n                    .ToHashSet", "addedAnnotations.Union(removedAnnotations)\n                    .Select(SecurityAnnotationToType.GetValueOrDefault)\n                    .WhereNotNull", "addedAnnotations.Union(removedAnnotations)\n                    .Select", "addedAnnotations.Union", "changeTypes.None", "SecurityTypeToAnnotations.SelectMany(\n                    pair => pair.Value.Select(annotation => (Type: pair.Key, Annotation: annotation))\n                )\n                .ToDictionary", "SecurityTypeToAnnotations.SelectMany", "pair.Value.Select"], false, false, false, false, ["DeclareRoles", "DenyAll", "PermitAll", "RolesAllowed", "RunAs", "PreAuthorize", "PreFilter", "PostAuthorize", "PostFilter", "RequiresAuthentication", "RequiresGuest", "RequiresPermissions", "RequiresRoles", "RequiresUser", "RequireAllRoles", "RequireAnyRole", "SubjectPresent", "SubjectNotPresent", "Restrict", "RoleBasedPermissions", "Security.Authenticated", "ServletSecurity", "EnableWebSecurity", "EnableGlobalMethodSecurity", "EnableReactiveMethodSecurity", "EnableWebFluxSecurity", "Secured", "Pac4JSecurity", "Pac4JCallback", "Pac4JLogout", "Secure", "EnableHdivWebSecurity", "Auth", "BasicAuthenticationMechanismDefinition", "FormAuthenticationMechanismDefinition", "CustomFormAuthenticationMechanismDefinition", "AuthenticationPrincipal", "RegisteredOAuth2AuthorizedClient", "EnableOAuth2Client"], false, 1, 0, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, false], ["LicenseDiffer", "Lim.Common.DotNET.LicenseDiffer", ["???.EntityTrackingDiffer<LicenseWithDependencies>"], [], "src/Lim.Common.DotNET/Entities/Differs/LicenseDiffer.cs", 7, 0, {}, ["CreateMaterialChangeForDiffResults"], ["CreateMaterialChangeForDiffResults", "IsEntityRelevant", "GenerateMaterialChanges", "DiffBothExist"], ["System.Collections.Generic", "System.Linq", "Infrastructure.Dotnet.Common"], false, false, [], false, false, [], {}, [], 1, false, false, false, 3, 0.75, [], 520.0, 207, 0.0, 0.0, 0, 0, false, false, false, false, "public", false, [], ["governanceRule.When\n                .Where(portion => portion.Type == GovernanceWhenType.Licenses)\n                .Select(portion => portion.Value)\n                .ToHashSet", "governanceRule.When\n                .Where(portion => portion.Type == GovernanceWhenType.Licenses)\n                .Select", "governanceRule.When\n                .Where", "relevantLicenseNames.Contains", "currentEntity.DependencyNames.Any", "previousInventory.Dependencies.ContainsKey", "currentEntity.DependencyNames.Select(dependencyName => currentInventory.Dependencies.GetValueOrDefault(dependencyName))\n                        .WhereNotNull()\n                        .ToList", "currentEntity.DependencyNames.Select(dependencyName => currentInventory.Dependencies.GetValueOrDefault(dependencyName))\n                        .WhereNotNull", "currentEntity.DependencyNames.Select", "currentInventory.Dependencies.GetValueOrDefault", "previousEntity.DependencyNames.Any", "currentInventory.Dependencies.ContainsKey", "previousEntity.DependencyNames.Select(dependencyName => previousInventory.Dependencies.GetValueOrDefault(dependencyName))\n                        .WhereNotNull()\n                        .ToList", "previousEntity.DependencyNames.Select(dependencyName => previousInventory.Dependencies.GetValueOrDefault(dependencyName))\n                        .WhereNotNull", "previousEntity.DependencyNames.Select", "previousInventory.Dependencies.GetValueOrDefault"], false, false, false, false, [], false, 1, 0, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, false], ["SensitiveFileDiffer", "Lim.Common.DotNET.SensitiveFileDiffer", ["???.EntityTrackingDiffer<SensitiveFile>"], [], "src/Lim.Common.DotNET/Entities/Differs/SensitiveFilesDiffer.cs", 5, 0, {"VersionChangeSubTypes": "System.Collections.Generic.HashSet<GovernanceThenSubType>"}, ["CreateMaterialChangeForDiffResults"], ["CreateMaterialChangeForDiffResults", "DiffBothExist", "GenerateMaterialChanges"], ["System.Collections.Generic"], false, false, [], false, false, [], {"VersionChangeSubTypes": []}, [], 1, false, false, false, 2, 0.6666666666666666, [], 149.66666666666666, 158, 0.0, 0.0, 0, 0, false, false, false, false, "public", false, [], ["currentEntity.Hash.Equals"], false, false, false, false, [], false, 1, 0, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, false], ["TerraformModulesDiffer", "Lim.Common.DotNET.TerraformModulesDiffer", ["???.BaseEntityDiffer<TerraformModule>"], [], "src/Lim.Common.DotNET/Entities/Differs/TerraformModulesDiffer.cs", 8, 0, {}, ["CreateMaterialChangeForDiffResults"], ["CreateMaterialChangeForDiffResults", "DiffEntity", "GenerateMaterialChanges", "ExtractLocalResourcesDiffs", "CollectShallowInsightByType", "ExtractRelevantModuleUsageDiffs", "GetRelevantModuleReferenceDiffMaterialChangeData", "FilterRuleRelevantResources", "FilterRuleRelevantModuleReferences", "GetInvolvedModules", "GetModuleReferenceUniqueKey", "GetResourceUniqueKey", "AggregateCompositeModules"], ["System", "System.Collections.Generic", "System.Linq", "Infrastructure.Dotnet.Common"], false, false, [], false, false, [], {}, [], 1, false, false, false, 12, 0.9230769230769231, [], 1253.076923076923, 521, 76.92307692307692, 0.0, 0, 0, false, false, false, false, "public", false, [], ["GenerateMaterialChanges(\n                    currentEntity,\n                    previousEntity,\n                    governanceRule,\n                    GovernanceThenSubType.Altered,\n                    new HashSet<int>(),\n                    new HashSet<int>(),\n                    new Commit(),\n                    new Inventory(),\n                    new Inventory()\n                )\n                .Any", "Enumerable.Empty<MaterialChange>", "materialChanges.Concat", "fieldSelector(currentTerraformHighlights)\n                .ToDictionaryForce", "fieldSelector", "GetResourceUniqueKey", "fieldSelector(previousTerraformHighlights)\n                .ToDictionaryForce", "currentResourcesByPath.WhereKeys", "previousResourcesByPath.Keys.Contains", "previousResourcesByPath.WhereKeys", "currentResourcesByPath.Keys.Contains", "currentResourcesByPath.Keys.Where(key => previousResourcesByPath.Keys.Contains(key))\n                .ToHashSet", "currentResourcesByPath.Keys.Where", "currentResourcesByPath.GetValueOrDefault", "previousResourcesByPath.GetValueOrDefault", "changedResourcesByPath.Add", "governanceRule.When.None", "CollectionUtils.AnyCollectionNotEmpty", "addedRelevantModulesData.ToList", "removedRelevantModulesData.ToList", "changedRelevantModules.ToList", "removedResourcesByPath.ToList", "changedResourcesByPath.ToList", "whenValue.AdditionalProperties.HasItems", "addedResourcesByPath.Values.Select(resource => (IacResource) resource)\n                            .ToHashSet", "addedResourcesByPath.Values.Select", "removedResourcesByPath.Values.Select(resource => (IacResource) resource)\n                            .ToHashSet", "removedResourcesByPath.Values.Select", "changedResourcesByPath.Values.Select(resource => (IacResource) resource)\n                            .ToHashSet", "changedResourcesByPath.Values.Select", "FilterRuleRelevantResources(\n                        addedResourcesByPath.Values,\n                        affectedResourcesNamesExtractor,\n                        governanceRule\n                    )\n                    .ToList", "FilterRuleRelevantResources(\n                        removedResourcesByPath.Values,\n                        affectedResourcesNamesExtractor,\n                        governanceRule\n                    )\n                    .ToList", "FilterRuleRelevantResources(\n                        changedResourcesByPath.Values,\n                        affectedResourcesNamesExtractor,\n                        governanceRule\n                    )\n                    .ToList", "FilterRuleRelevantModuleReferences(\n                        addedRelevantModulesData,\n                        affectedResourcesNamesExtractor,\n                        governanceRule\n                    )\n                    .ToList", "FilterRuleRelevantModuleReferences(\n                        removedRelevantModulesData,\n                        affectedResourcesNamesExtractor,\n                        governanceRule\n                    )\n                    .ToList", "FilterRuleRelevantModuleReferences(\n                        changedRelevantModules,\n                        affectedResourcesNamesExtractor,\n                        governanceRule\n                    )\n                    .ToList", "addedResourcesByPath.Values.Select(resource => (IacResource) resource)\n                                .ToHashSet", "removedResourcesByPath.Values.Select(resource => (IacResource) resource)\n                                .ToHashSet", "changedResourcesByPath.Values.Select(resource => (IacResource) resource)\n                                .ToHashSet", "currentModulesByUniqueKey.Keys.Where(key => previousModulesByUniqueKey.Keys.Contains(key))\n                .ToHashSet", "currentModulesByUniqueKey.Keys.Where", "previousModulesByUniqueKey.Keys.Contains", "currentModulesByUniqueKey.GetValueOrDefault", "fieldSelector(\n                        currentSubjectModule?.TerraformHighlights\n                    )\n                    .ToDictionaryForce", "fieldSelector(\n                        previousModulesByUniqueKey.GetValueOrDefault(key)\n                            ?.TerraformHighlights\n                    )\n                    .ToDictionaryForce", "previousModulesByUniqueKey.GetValueOrDefault", "currentSubjectModuleRelevantResourcesByMd5.Keys.ToHashSet()\n                    .SetEquals", "currentSubjectModuleRelevantResourcesByMd5.Keys.ToHashSet", "previousSubjectModuleRelevantResourcesByMd5.Keys.ToHashSet", "changedRelevantModules.Add", "currentSubjectModuleRelevantResourcesByMd5\n                                .WhereKeys(md5 => !previousSubjectModuleRelevantResourcesByMd5.ContainsKey(md5))\n                                .Values\n                                .Concat(\n                                    previousSubjectModuleRelevantResourcesByMd5\n                                        .WhereKeys(md5 => !currentSubjectModuleRelevantResourcesByMd5.ContainsKey(md5))\n                                        .Values\n                                )\n                                .GroupBy(resource => GetResourceUniqueKey(resource, terraformDirectory))\n                                .Select(group => group.First())\n                                .ToHashSet", "currentSubjectModuleRelevantResourcesByMd5\n                                .WhereKeys(md5 => !previousSubjectModuleRelevantResourcesByMd5.ContainsKey(md5))\n                                .Values\n                                .Concat(\n                                    previousSubjectModuleRelevantResourcesByMd5\n                                        .WhereKeys(md5 => !currentSubjectModuleRelevantResourcesByMd5.ContainsKey(md5))\n                                        .Values\n                                )\n                                .GroupBy(resource => GetResourceUniqueKey(resource, terraformDirectory))\n                                .Select", "currentSubjectModuleRelevantResourcesByMd5\n                                .WhereKeys(md5 => !previousSubjectModuleRelevantResourcesByMd5.ContainsKey(md5))\n                                .Values\n                                .Concat(\n                                    previousSubjectModuleRelevantResourcesByMd5\n                                        .WhereKeys(md5 => !currentSubjectModuleRelevantResourcesByMd5.ContainsKey(md5))\n                                        .Values\n                                )\n                                .GroupBy", "currentSubjectModuleRelevantResourcesByMd5\n                                .WhereKeys(md5 => !previousSubjectModuleRelevantResourcesByMd5.ContainsKey(md5))\n                                .Values\n                                .Concat", "currentSubjectModuleRelevantResourcesByMd5\n                                .WhereKeys", "previousSubjectModuleRelevantResourcesByMd5.ContainsKey", "previousSubjectModuleRelevantResourcesByMd5\n                                        .WhereKeys", "currentSubjectModuleRelevantResourcesByMd5.ContainsKey", "group.First", "minuendModulesByUniqueKey.WhereKeys(key => !subtrahendModulesByUniqueKey.Keys.Contains(key))\n                .WhereValues(\n                    terraformModule => fieldSelector(terraformModule.TerraformHighlights)\n                        .Any()\n                )\n                .Values.Select(moduleReference => new TerraformModuleReferenceMaterialChangeData(moduleReference, fieldSelector))\n                .ToHashSet", "minuendModulesByUniqueKey.WhereKeys(key => !subtrahendModulesByUniqueKey.Keys.Contains(key))\n                .WhereValues(\n                    terraformModule => fieldSelector(terraformModule.TerraformHighlights)\n                        .Any()\n                )\n                .Values.Select", "minuendModulesByUniqueKey.WhereKeys(key => !subtrahendModulesByUniqueKey.Keys.Contains(key))\n                .WhereValues", "minuendModulesByUniqueKey.WhereKeys", "subtrahendModulesByUniqueKey.Keys.Contains", "fieldSelector(terraformModule.TerraformHighlights)\n                        .Any", "resources.Where", "(affectedResourcesNamesExtractor(resource) ?? new List<string>())\n                    .Intersects", "affectedResourcesNamesExtractor", "rule.When.SelectMany", "whenValue.AdditionalProperties.Select", "modulesData.Select(\n                    moduleData => new TerraformModuleReferenceMaterialChangeData(\n                        moduleData.Key,\n                        moduleData.ReferencePath,\n                        moduleData.ModuleDirectory,\n                        FilterRuleRelevantResources(\n                            moduleData.RelevantResources.Select(\n                                resource => resource as TResource\n                            ),\n                            affectedResourcesNamesExtractor,\n                            rule\n                        )\n                    )\n                )\n                .Where", "modulesData.Select", "moduleData.RelevantResources.Select", "moduleData.RelevantResources.Any", "terraformHighlights.Modules.Select(module => (key: GetModuleReferenceUniqueKey(module), moduleReference: module))\n                .ToList", "terraformHighlights.Modules.Select", "additionalModules.Any", "modulesReferencesByUniqueKey.ContainsKey", "modulesReferencesByUniqueKey.Add", "additionalModules\n                    .SelectMany(\n                        tuple => tuple.moduleReference.TerraformHighlights.Modules.Select(\n                            module =>\n                                AggregateCompositeModules(tuple.key, module)\n                        )\n                    )\n                    .ToList", "additionalModules\n                    .SelectMany", "tuple.moduleReference.TerraformHighlights.Modules.Select"], false, false, false, false, ["Storage policies", "Network policy", "Roles policy", "Network structure"], false, 1, 0, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, false], ["EntityTrackingDiffer", "Lim.Common.DotNET.EntityTrackingDiffer<TEntity>", ["???.BaseEntityDiffer<TEntity>"], [], "src/Lim.Common.DotNET/Entities/EntityTrackingDiffer.cs", 5, 0, {}, [], ["DiffEntity", "DiffBothExist"], ["JetBrains.Annotations"], false, false, [], false, false, [], {}, [], 0, false, false, false, 2, 1.0, [], 277.0, 277, 0.0, 0.0, 0, 0, false, true, false, false, "public", true, [], [], false, false, false, false, [], false, 0, 0, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, false], ["ExposedSecret", "Lim.Common.DotNET.ExposedSecret", ["???.DiffableEntity<ExposedSecret>"], [], "src/Lim.Common.DotNET/Entities/ExposedSecret.cs", 10, 0, {}, ["EntityId", "RelativeFilePath", "LineNumbers", "Secrets", "FileClassification", "FileClassificationDescription", "InstanceCount"], ["ExposedSecret", "EntityId", "RelativeFilePath", "LineNumbers", "Secrets", "FileClassification", "FileClassificationDescription", "InstanceCount", "GetHashCode"], ["System.Collections.Generic", "Infrastructure.Dotnet.Common", "JetBrains.Annotations", "MongoDB.Bson", "MongoDB.Bson.Serialization.Attributes", "Newtonsoft.Json"], false, false, [], false, false, [], {}, ["UsedImplicitly", "BsonRepresentation", "JsonIgnore", "BsonIgnore", "JsonProperty"], 7, false, false, true, 1, 0.1111111111111111, [], 51.55555555555556, 0, 11.11111111111111, 88.88888888888889, 1, 0, false, false, false, false, "public", false, [], ["FileClassification.GetDescription", "(\n            RelativeFilePath,\n            LineNumbers.GetAggregatedValuesHash(),\n            Secrets.GetAggregatedValuesHash()\n        ).GetHashCode", "LineNumbers.GetAggregatedValuesHash", "Secrets.GetAggregatedValuesHash"], false, false, false, false, ["fileClassification"], false, 7, 5, [], false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, true, 0, 0, true], ["CodeEntityExtensions", "Lim.Common.DotNET.CodeEntityExtensions", [], [], "src/Lim.Common.DotNET/Entities/Features/CodeEntity.cs", 25, 0, {}, [], ["SupportsPredictionEnriching"], ["Infrastructure.Dotnet.Common", "JetBrains.Annotations"], false, false, [], false, false, [], {}, [], 0, false, false, false, 1, 1.0, [], 97.0, 97, 100.0, 100.0, 0, 0, false, false, true, false, "public", false, [], ["codeEntity.HasCustomAttribute<CodeEntity, PredictionEnrichingSupportedAttribute>"], false, false, false, false, [], false, 0, 0, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, false], ["CodeFeatures", "Lim.Common.DotNET.CodeFeatures", [], [], "src/Lim.Common.DotNET/Entities/Features/CodeFeatures.cs", 8, 0, {"_codeEntity": "Lim.Common.DotNET.CodeEntity", "_entityIdToRowIndex": "System.Collections.Generic.Dictionary<string, int>", "_featureToColumnIndex": "System.Collections.Generic.Dictionary<string, int>", "_rows": "System.Collections.Generic.List<List<object>>"}, ["_codeEntity", "_entityIdToRowIndex", "_featureToColumnIndex", "_rows", "AsJTable", "IdFeatureName", "EntityIds", "Features"], ["CodeFeatures", "AsJTable", "IdFeatureName", "EntityIds", "Features", "IsEmpty", "GetFeature", "GetJsonFeature", "SetJsonFeature", "SetFeature", "ContainsId"], ["System", "System.Collections.Generic", "System.Linq", "Infrastructure.Dotnet.Common"], false, false, [], false, false, [], {"_codeEntity": [], "_entityIdToRowIndex": [], "_featureToColumnIndex": [], "_rows": []}, [], 5, false, false, false, 9, 0.6428571428571429, [], 158.42857142857142, 99, 0.0, 64.28571428571429, 2, 0, false, false, false, false, "public", false, [], ["_featureToColumnIndex.Keys.ToList", "nameof", "_rows.None", "string.IsNullOrEmpty", "_entityIdToRowIndex.TryGetValue", "TypeExtensions.DefaultNotNull<T>", "GetFeature<string>(entityId, feature)\n                .FromJson<T>", "_featureToColumnIndex.TryGetValue", "_rows[rowIndex][columnIndex]\n                    .AsTypeNotNull<T>", "SetFeature", "value.ToJson", "row.Add", "_entityIdToRowIndex.ContainsKey", "jTable.Header.Enumerate", "_rows.Enumerate", "GetFeature<string>"], false, false, false, false, [], false, 5, 0, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, false], ["CodeFramework", "Lim.Common.DotNET.CodeFramework", [], [], "src/Lim.Common.DotNET/Entities/Features/CodeFramework.cs", 10, 0, {}, ["Type", "TypeDisplayName", "Name", "DisplayName"], ["CodeFramework", "Type", "TypeDisplayName", "Name", "DisplayName", "Equals", "GetHashCode"], ["System", "Infrastructure.Dotnet.Common", "JetBrains.Annotations", "MongoDB.Bson", "MongoDB.Bson.Serialization.Attributes", "Newtonsoft.Json"], false, false, [], false, false, [], {}, ["UsedImplicitly", "BsonRepresentation", "JsonIgnore", "BsonIgnore"], 4, true, false, true, 1, 0.14285714285714285, [], 76.57142857142857, 0, 0.0, 100.0, 1, 0, false, false, false, false, "public", false, [], ["Type.GetDescription", "string.Equals", "(\n                Type,\n                Name\n            ).GetHashCode"], false, false, false, false, [], false, 4, 2, [], false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, true, 0, 0, true], ["CodeFrameworksGroup", "Lim.Common.DotNET.CodeFrameworksGroup", ["???.DiffableEntity<CodeFrameworksGroup>"], [], "src/Lim.Common.DotNET/Entities/Features/CodeFrameworksGroup.cs", 8, 0, {}, ["EntityId", "Type", "CodeFrameworksToDirectoryPaths"], ["CodeFrameworksGroup", "EntityId", "Type", "CodeFrameworksToDirectoryPaths", "IsEmpty", "GetHashCode", "GetModuleSubgroup"], ["System.Collections.Generic", "System.Linq", "Infrastructure.Dotnet.Common", "MongoDB.Bson.Serialization.Attributes"], false, false, [], false, false, [], {}, ["StringKeysDictionarySerializer", "BsonIgnore"], 4, false, false, true, 3, 0.375, [], 134.0, 42, 12.5, 87.5, 2, 0, false, false, false, false, "public", false, ["Lim.Common.DotNET.Module.PathsUnderModuleRoot"], ["CodeFrameworksToDirectoryPaths.None", "(\n                Type,\n                CodeFrameworksToDirectoryPaths.GetAggregatedValuesHash()\n            ).GetHashCode", "CodeFrameworksToDirectoryPaths.GetAggregatedValuesHash", "Module.PathsUnderModuleRoot(moduleRootPath, paths)\n                    .ToHashSet", "subPaths.Any", "subgroup.CodeFrameworksToDirectoryPaths.Add", "type.ToString"], false, false, false, false, [], false, 4, 3, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, 0, 0, true], ["CodeLink", "Lim.Common.DotNET.CodeLink", [], [], "src/Lim.Common.DotNET/Entities/Features/CodeLink.cs", 7, 0, {}, ["Type", "Distance", "NeighborMethodFullName", "NeighborClassFullName"], ["CodeLink", "Type", "Distance", "NeighborMethodFullName", "NeighborClassFullName", "Equals", "GetHashCode"], ["JetBrains.Annotations", "MongoDB.Bson", "MongoDB.Bson.Serialization.Attributes"], false, false, [], false, false, [], {}, ["UsedImplicitly", "BsonRepresentation"], 4, true, false, true, 1, 0.14285714285714285, [], 80.42857142857143, 0, 0.0, 100.0, 1, 0, false, false, false, false, "public", false, [], ["(\n                Type,\n                NeighborMethodFullName\n            ).GetHashCode"], false, false, false, false, [], false, 4, 4, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, 0, 0, true], ["AnnotationFeaturesNames", "Lim.Common.DotNET.AnnotationFeaturesNames", [], [], "src/Lim.Common.DotNET/Entities/Features/FeatureNames/AnnotationFeaturesNames.cs", 3, 0, {"FullyQualifiedName": "string", "Annotations": "string", "Imports": "string", "CustomForAuthorizationFrameworks": "string", "CustomForInputValidationFrameworks": "string"}, [], [], [], false, false, [], false, false, [], {"FullyQualifiedName": [], "Annotations": [], "Imports": [], "CustomForAuthorizationFrameworks": [], "CustomForInputValidationFrameworks": []}, [], 0, false, false, false, 0, 0.0, [], 0.0, 0, 0.0, 0.0, 0, 0, false, false, true, false, "public", false, [], [], false, false, false, false, ["QualifiedName", "Annotations", "Imports", "CustomForAuthorizationFrameworks", "CustomForInputValidationFrameworks"], false, 0, 0, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, false], ["ApiSnippetFeatureNames", "Lim.Common.DotNET.ApiSnippetFeatureNames", [], [], "src/Lim.Common.DotNET/Entities/Features/FeatureNames/ApiSnippetFeatureNames.cs", 6, 0, {"ContainsAuthentication": "string", "HintedApiParameter": "string", "HintedApiResponse": "string", "HintedRequiredRequestFields": "string", "HintedDescription": "string", "SuspectedApiMethod": "string", "SuspectedApiRoute": "string", "SuspectedApiRouteParams": "string", "ApiClassification": "string"}, [], ["PredictedAsApiSnippet", "IsFunctionDeclaration", "GetApiUrl", "GetApiHttpMethod", "GetApiParameter", "GetApiResponse", "GetApiDescription", "GetApiRequiredFields", "GetApiName", "GetApiClassification"], ["System.Collections.Generic", "System.Linq"], false, false, [], false, false, [], {"ContainsAuthentication": [], "HintedApiParameter": [], "HintedApiResponse": [], "HintedRequiredRequestFields": [], "HintedDescription": [], "SuspectedApiMethod": [], "SuspectedApiRoute": [], "SuspectedApiRouteParams": [], "ApiClassification": []}, [], 0, false, false, false, 10, 1.0, [], 133.7, 124, 100.0, 90.0, 0, 0, false, false, true, false, "public", false, ["Lim.Common.DotNET.SnippetFeatureNames.IsSuspectedAsTest", "Lim.Common.DotNET.CodeFeatures.GetFeature"], ["features.Features.Where(name => name.StartsWith(\"!ApiLabel!\"))\n                   .Any", "features.Features.Where", "name.StartsWith", "string.IsNullOrEmpty"], false, false, false, false, ["ContainsAuthentication", "HintedApiParameter", "HintedApiResponse", "HintedRequiredRequestFields", "HintedDescription", "SuspectedApiMethod", "SuspectedApiRoute", "SuspectedApiRouteParams", "ApiClassification", "!ApiLabel!", "functionDeclaration"], false, 0, 0, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, false], ["ClassFeatureNames", "Lim.Common.DotNET.ClassFeatureNames", [], [], "src/Lim.Common.DotNET/Entities/Features/FeatureNames/ClassFeatureNames.cs", 3, 0, {"FullyQualifiedClassName": "string", "PiiFieldNames": "string", "PredictedAsDataModel": "string", "PredictedAsDataModelProbability": "string", "ClassName": "string", "ClassPath": "string", "FileLineNumber": "string", "FieldAnnotationsByName": "string", "MethodNames": "string", "ClassAnnotations": "string", "MethodAnnotations": "string", "FieldAnnotations": "string", "IsTest": "string", "IsTestUtil": "string", "Imports": "string", "PiiLevel": "string", "SecurityConfigurations": "string", "IsDatabaseService": "string", "IsApiParameterOrReturnType": "string", "InheritanceClusterId": "string", "IsUi": "string"}, [], ["IsDataOfInterestApplicable", "ShouldIgnore"], [], false, false, [], false, false, [], {"FullyQualifiedClassName": [], "PiiFieldNames": [], "PredictedAsDataModel": [], "PredictedAsDataModelProbability": [], "ClassName": [], "ClassPath": [], "FileLineNumber": [], "FieldAnnotationsByName": [], "MethodNames": [], "ClassAnnotations": [], "MethodAnnotations": [], "FieldAnnotations": [], "IsTest": [], "IsTestUtil": [], "Imports": [], "PiiLevel": [], "SecurityConfigurations": [], "IsDatabaseService": [], "IsApiParameterOrReturnType": [], "InheritanceClusterId": [], "IsUi": []}, [], 0, false, false, false, 2, 1.0, [], 176.5, 176, 100.0, 100.0, 0, 0, false, false, true, false, "public", false, ["Lim.Common.DotNET.CodeFeatures.GetFeature"], [], false, false, false, false, ["QualifiedName", "PiiFieldNames", "PredictDataModel", "PredictProbaDataModel", "ClassName", "Path", "LineNumber", "FieldAnnotationsByName", "RawMethodNames", "ClassAnnotations", "MethodAnnotations", "FieldAnnotations", "IsTest", "IsTestUtil", "RawImports", "PiiLevel", "SecurityConfigurations", "IsDatabaseService", "IsApiParameterOrReturnType", "InheritanceClusterId", "IsUi"], false, 0, 0, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, false], ["DataModelSnippetFeatureNames", "Lim.Common.DotNET.DataModelSnippetFeatureNames", [], [], "src/Lim.Common.DotNET/Entities/Features/FeatureNames/DataModelSnippetFeatureNames.cs", 7, 0, {"PiiLevel": "string", "PiiFieldNames": "string", "DataModelName": "string", "DataModelProperties": "string"}, [], ["HasDataModelPathName", "PredictedAsDataModel", "PredictedAsFrameworkDataModel", "HasDataModelLabel", "GetDataModelName", "GetFieldNames"], ["System.Collections.Generic", "System.Linq", "Infrastructure.Dotnet.Common"], false, false, [], false, false, [], {"PiiLevel": [], "PiiFieldNames": [], "DataModelName": [], "DataModelProperties": []}, [], 0, false, false, false, 6, 1.0, [], 292.0, 163, 100.0, 50.0, 0, 0, false, false, true, false, "public", false, ["Lim.Common.DotNET.CodeFeatures.GetFeature", "Lim.Common.DotNET.SnippetFeatureNames.IsSuspectedAsTest"], ["path.ContainsAny", "path.Split(\"/\")\n                .Last", "path.Split", "fileName.ContainsAny", "modelName.ContainsAny", "string.IsNullOrEmpty", ".Features.Where(key => key.StartsWith(\"!DataModelLabel!\"))\n                .Any", ".Features.Where", "key.StartsWith", "features.GetFeature<string>(uid, DataModelName)\n                .OrIfEmpty"], false, false, false, false, ["PiiLevel", "PiiFieldNames", "DataModelName", "DataModelProperties", "/ui-", "-ui/", "frontend", "/", "dao", "config", "index", "server", "env", "app", "factory", "ui-lib", "error", "services", "props", "!DataModelLabel!"], false, 0, 0, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, false], ["MethodFeatureNames", "Lim.Common.DotNET.MethodFeatureNames", [], [], "src/Lim.Common.DotNET/Entities/Features/FeatureNames/MethodFeatureNames.cs", 6, 0, {"UniqueMethodName": "string", "ClassFullName": "string", "PredictApi": "string", "MethodName": "string", "ClassPath": "string", "FileLineNumber": "string", "ClassName": "string", "ParametersNameToType": "string", "ParametersNameToEssentialTypes": "string", "ParameterNameToAnnotations": "string", "BodyLength": "string", "Annotations": "string", "ReturnType": "string", "EssentialReturnTypes": "string", "IsGetterOrSetter": "string", "DisplayString": "string", "ExternalClassMethodCalls": "string", "InternalClassMethodCalls": "string", "ExternalCoreMethodCalls": "string", "HttpMethod": "string", "HttpRoute": "string", "SecurityConfigurationReference": "string", "CodeLinks": "string", "ApiGovernanceApplicable": "string", "CodeFrameworks": "string", "MissingAuthorizationFrameworks": "string", "AnyAuthorizationFramework": "string", "UnvalidatedParametersByFramework": "string", "AnyValidationFramework": "string", "IsValidationApplicable": "string", "LastLineInFile": "string", "ApiClassification": "string"}, [], ["CodeLinkNeighborsByType", "MethodCalls"], ["System.Collections.Generic", "System.Linq"], false, false, [], false, false, [], {"UniqueMethodName": [], "ClassFullName": [], "PredictApi": [], "MethodName": [], "ClassPath": [], "FileLineNumber": [], "ClassName": [], "ParametersNameToType": [], "ParametersNameToEssentialTypes": [], "ParameterNameToAnnotations": [], "BodyLength": [], "Annotations": [], "ReturnType": [], "EssentialReturnTypes": [], "IsGetterOrSetter": [], "DisplayString": [], "ExternalClassMethodCalls": [], "InternalClassMethodCalls": [], "ExternalCoreMethodCalls": [], "HttpMethod": [], "HttpRoute": [], "SecurityConfigurationReference": [], "CodeLinks": [], "ApiGovernanceApplicable": [], "CodeFrameworks": [], "MissingAuthorizationFrameworks": [], "AnyAuthorizationFramework": [], "UnvalidatedParametersByFramework": [], "AnyValidationFramework": [], "IsValidationApplicable": [], "LastLineInFile": [], "ApiClassification": []}, [], 0, false, false, false, 2, 1.0, [], 218.0, 218, 100.0, 100.0, 0, 0, false, false, true, false, "public", false, ["Lim.Common.DotNET.CodeFeatures.GetJsonFeature", "Lim.Common.DotNET.CodeFeatures.GetFeature"], [".Where(insight => insight.Type == type)\n                .Select(insight => insight.NeighborClassFullName)\n                .ToHashSet", ".Where(insight => insight.Type == type)\n                .Select", ".Where", "features.GetFeature<HashSet<string>>(methodId, ExternalClassMethodCalls)\n                .Union"], false, false, false, false, ["MethodUniqueName", "ClassQualifiedName", "PredictAPI", "MethodName", "Path", "LineNumber", "ClassName", "ParametersNameToType", "ParametersNameToEssentialTypes", "ParameterAnnotations", "BodyLength", "Annotations", "ReturnType", "EssentialReturnTypes", "IsGetterOrSetter", "DisplayString", "ExternalClassMethodCalls", "InternalClassMethodCalls", "ExternalCoreMethodCalls", "HttpMethod", "HttpRoute", "SecurityConfigurationReference", "CodeLinks", "ApiGovernanceApplicable", "CodeFrameworks", "MissingAuthorizationFrameworks", "AnyAuthorizationFramework", "UnvalidatedParametersByFramework", "AnyValidationFramework", "IsValidationApplicable", "EndsLineInFile", "ApiClassification"], false, 0, 0, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, false], ["SnippetFeatureNames", "Lim.Common.DotNET.SnippetFeatureNames", [], [], "src/Lim.Common.DotNET/Entities/Features/FeatureNames/SnippetFeatureNames.cs", 3, 0, {"Uid": "string", "FilePath": "string", "SnippetType": "string", "InterfaceName": "string"}, [], ["GetFileLineNumber", "GetLastLineInFile", "IsSuspectedAsTest"], [], false, false, [], false, false, [], {"Uid": [], "FilePath": [], "SnippetType": [], "InterfaceName": []}, [], 0, false, false, false, 5, 1.0, [], 110.8, 92, 100.0, 60.0, 0, 0, false, false, true, false, "public", false, ["Lim.Common.DotNET.SourceCodeUtils.IsSuspectedAsTest", "Lim.Common.DotNET.CodeFeatures.GetFeature"], ["uid.Split", "int.Parse"], false, false, false, false, ["UID", "Path", "SnippetType", "InterfaceName", "+"], false, 0, 0, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, false], ["CodeFrameworkTypeExtensions", "Lim.Common.DotNET.CodeFrameworkTypeExtensions", [], [], "src/Lim.Common.DotNET/Entities/Features/FrameworkType.cs", 89, 0, {}, [], ["ToWhenType", "GetDisplayName", "TechnologyToString"], ["System", "System.ComponentModel", "Infrastructure.Dotnet.Common"], false, false, [], false, false, [], {}, [], 0, false, false, false, 3, 1.0, [], 304.3333333333333, 313, 100.0, 66.66666666666667, 0, 0, false, false, true, false, "public", false, [], ["(type switch\n            {\n                CodeFrameworkType.DataStorage => TechnologyToString<DataStoreTechnology>(framework),\n                CodeFrameworkType.Infrastructure => TechnologyToString<IacFramework>(framework),\n                _ => null\n            }).OrIfEmpty", "type.GetDescription", "EnumUtils.TryFromString<TEnum>", ".GetDescription"], false, false, false, false, [], false, 0, 0, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, false], ["PatternMatcher", "Lim.Common.DotNET.PatternMatcher", [], [], "src/Lim.Common.DotNET/Entities/Features/PatternMatcher.cs", 7, 0, {}, ["HttpMethod", "Patterns"], ["HttpMethod", "Patterns", "GetHashCode"], ["System.Collections.Generic", "Infrastructure.Dotnet.Common", "JetBrains.Annotations"], false, false, [], false, false, [], {}, ["UsedImplicitly"], 2, false, false, true, 0, 0.0, [], 35.666666666666664, 0, 0.0, 100.0, 0, 0, false, false, false, false, "public", false, [], ["(\n            HttpMethod,\n            Patterns.GetAggregatedValuesHash()\n        ).GetHashCode", "Patterns.GetAggregatedValuesHash"], false, false, false, false, [], false, 2, 2, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, false], ["SecurityConfiguration", "Lim.Common.DotNET.SecurityConfiguration", ["???.DiffableEntity<SecurityConfiguration>"], [], "src/Lim.Common.DotNET/Entities/Features/SecurityConfiguration.cs", 8, 0, {"DefaultPattern": "string"}, ["EntityId", "MainMatchers", "SubMatchers", "Filters", "SecurityMechanisms", "CodeReference"], ["SecurityConfiguration", "EntityId", "MainMatchers", "SubMatchers", "Filters", "SecurityMechanisms", "CodeReference", "IsEmpty", "GetHashCode"], ["System.Collections.Generic", "Infrastructure.Dotnet.Common", "JetBrains.Annotations", "MongoDB.Bson.Serialization.Attributes"], false, false, [], false, false, [], {"DefaultPattern": []}, ["UsedImplicitly", "BsonIgnore"], 7, false, false, true, 1, 0.1111111111111111, [], 52.666666666666664, 0, 11.11111111111111, 88.88888888888889, 1, 0, false, false, false, false, "public", false, [], ["MainMatchers.None", "SubMatchers.None", "Filters.None", "SecurityMechanisms.None", "(\n            MainMatchers.GetAggregatedValuesHash(),\n            SubMatchers.GetAggregatedValuesHash(),\n            Filters.GetAggregatedValuesHash(),\n            SecurityMechanisms.GetAggregatedValuesHash()\n        ).GetHashCode", "MainMatchers.GetAggregatedValuesHash", "SubMatchers.GetAggregatedValuesHash", "Filters.GetAggregatedValuesHash", "SecurityMechanisms.GetAggregatedValuesHash"], false, false, false, false, ["/**"], false, 7, 6, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, 0, 0, true], ["SecurityConfigurationDiffer", "Lim.Common.DotNET.SecurityConfigurationDiffer", ["???.EntityTrackingDiffer<SecurityConfiguration>"], [], "src/Lim.Common.DotNET/Entities/Features/SecurityConfigurationDiffer.cs", 7, 0, {}, ["CreateMaterialChangeForDiffResults"], ["CreateMaterialChangeForDiffResults", "CollectNonMaterialChangeInsights", "GenerateMaterialChanges", "DiffBothExist", "GetModifiedSecurityConfigurations"], ["System", "System.Collections.Generic", "System.Linq"], false, false, [], false, false, [], {}, [], 1, false, false, false, 4, 0.8, [], 743.4, 237, 20.0, 0.0, 0, 0, false, false, false, false, "public", false, [], ["commitInsights.SecurityExpertise.Add", "GetModifiedSecurityConfigurations(currentEntity, previousEntity)\n                    .ToList", "nameof", "GetModifiedSecurityConfigurations(previousEntity, currentEntity)\n                .Any", "currentSecurityConfiguration.MainMatchers.SelectMany(matcher => matcher.Patterns)\n                .Concat(currentSecurityConfiguration.SubMatchers.SelectMany(matcher => matcher.Patterns))\n                .ToList", "currentSecurityConfiguration.MainMatchers.SelectMany(matcher => matcher.Patterns)\n                .Concat", "currentSecurityConfiguration.MainMatchers.SelectMany", "currentSecurityConfiguration.SubMatchers.SelectMany", "previousSecurityConfiguration.MainMatchers.SelectMany(matcher => matcher.Patterns)\n                .Concat(previousSecurityConfiguration.SubMatchers.SelectMany(matcher => matcher.Patterns))\n                .ToList", "previousSecurityConfiguration.MainMatchers.SelectMany(matcher => matcher.Patterns)\n                .Concat", "previousSecurityConfiguration.MainMatchers.SelectMany", "previousSecurityConfiguration.SubMatchers.SelectMany", "Enumerable.Empty<string>", "result.Concat(\n                    currentPatterns.Where(pattern => !previousPatterns.Contains(pattern))\n                        .Select(pattern => $\"Security pattern {pattern} was added\")\n                )\n                .Concat(\n                    previousPatterns.Where(pattern => !currentPatterns.Contains(pattern))\n                        .Select(pattern => $\"Security pattern {pattern} was removed\")\n                )\n                .Concat(\n                    currentFilters.Where(filter => !previousFilters.Contains(filter))\n                        .Select(filter => $\"Security filter {filter} was added\")\n                )\n                .Concat(\n                    previousFilters.Where(pattern => !currentFilters.Contains(pattern))\n                        .Select(filter => $\"Security filter {filter} was removed\")\n                )\n                .Concat(\n                    currentSecurityMechanisms.Where(securityMechanism => !previousSecurityMechanisms.Contains(securityMechanism))\n                        .Select(securityMechanism => $\"Security control {securityMechanism} was added\")\n                )\n                .Concat", "result.Concat(\n                    currentPatterns.Where(pattern => !previousPatterns.Contains(pattern))\n                        .Select(pattern => $\"Security pattern {pattern} was added\")\n                )\n                .Concat(\n                    previousPatterns.Where(pattern => !currentPatterns.Contains(pattern))\n                        .Select(pattern => $\"Security pattern {pattern} was removed\")\n                )\n                .Concat(\n                    currentFilters.Where(filter => !previousFilters.Contains(filter))\n                        .Select(filter => $\"Security filter {filter} was added\")\n                )\n                .Concat(\n                    previousFilters.Where(pattern => !currentFilters.Contains(pattern))\n                        .Select(filter => $\"Security filter {filter} was removed\")\n                )\n                .Concat", "result.Concat(\n                    currentPatterns.Where(pattern => !previousPatterns.Contains(pattern))\n                        .Select(pattern => $\"Security pattern {pattern} was added\")\n                )\n                .Concat(\n                    previousPatterns.Where(pattern => !currentPatterns.Contains(pattern))\n                        .Select(pattern => $\"Security pattern {pattern} was removed\")\n                )\n                .Concat(\n                    currentFilters.Where(filter => !previousFilters.Contains(filter))\n                        .Select(filter => $\"Security filter {filter} was added\")\n                )\n                .Concat", "result.Concat(\n                    currentPatterns.Where(pattern => !previousPatterns.Contains(pattern))\n                        .Select(pattern => $\"Security pattern {pattern} was added\")\n                )\n                .Concat(\n                    previousPatterns.Where(pattern => !currentPatterns.Contains(pattern))\n                        .Select(pattern => $\"Security pattern {pattern} was removed\")\n                )\n                .Concat", "result.Concat(\n                    currentPatterns.Where(pattern => !previousPatterns.Contains(pattern))\n                        .Select(pattern => $\"Security pattern {pattern} was added\")\n                )\n                .Concat", "result.Concat", "currentPatterns.Where(pattern => !previousPatterns.Contains(pattern))\n                        .Select", "currentPatterns.Where", "previousPatterns.Contains", "previousPatterns.Where(pattern => !currentPatterns.Contains(pattern))\n                        .Select", "previousPatterns.Where", "currentPatterns.Contains", "currentFilters.Where(filter => !previousFilters.Contains(filter))\n                        .Select", "currentFilters.Where", "previousFilters.Contains", "previousFilters.Where(pattern => !currentFilters.Contains(pattern))\n                        .Select", "previousFilters.Where", "currentFilters.Contains", "currentSecurityMechanisms.Where(securityMechanism => !previousSecurityMechanisms.Contains(securityMechanism))\n                        .Select", "currentSecurityMechanisms.Where", "previousSecurityMechanisms.Contains", "previousSecurityMechanisms.Where(securityMechanism => !currentSecurityMechanisms.Contains(securityMechanism))\n                        .Select", "previousSecurityMechanisms.Where", "currentSecurityMechanisms.Contains"], false, false, false, false, ["Security configuration was added", "Security configuration was removed"], false, 1, 0, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, false], ["TerraformModule", "Lim.Common.DotNET.TerraformModule", ["???.DiffableEntity<TerraformModule>"], [], "src/Lim.Common.DotNET/Entities/Features/Terraform/TerraformModule.cs", 9, 0, {}, ["Key", "EntityId", "InfrastructureFramework", "CommitSha", "RepositoryKey", "RelativeDirectoryPath", "TerraformHighlights"], ["TerraformModule", "Key", "EntityId", "InfrastructureFramework", "CommitSha", "RepositoryKey", "RelativeDirectoryPath", "TerraformHighlights", "GetHashCode"], ["System.Collections.Generic", "Infrastructure.Dotnet.Common", "JetBrains.Annotations", "Lim.Common.DotNET.InfrastructureEntities", "MongoDB.Bson.Serialization.Attributes"], false, false, ["MongoCollection"], false, false, [], {}, ["BsonId", "UsedImplicitly", "MongoIndex"], 7, false, false, true, 1, 0.1111111111111111, [], 50.0, 0, 11.11111111111111, 88.88888888888889, 1, 0, false, false, false, false, "public", false, ["Lim.Common.DotNET.CompositeKey.Create"], ["(\n                InfrastructureFramework.GetHashCode(),\n                CommitSha,\n                RepositoryKey,\n                RelativeDirectoryPath,\n                TerraformHighlights\n            ).GetHashCode", "InfrastructureFramework.GetHashCode"], false, false, false, false, ["terraformModules"], false, 7, 6, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, 0, 0, true], ["TerraformHighlights", "Lim.Common.DotNET.TerraformHighlights", [], [], "src/Lim.Common.DotNET/Entities/Features/Terraform/TerraformModule.cs", 49, 0, {}, ["Providers", "Images", "NetworkStructureBlocks", "NetworkPolicies", "RolePolicies", "StorageAccessPolicies", "FilesReferences", "ContainerRegistries", "InternetExposureIndications", "StorageBuckets", "Modules"], ["Providers", "Images", "NetworkStructureBlocks", "NetworkPolicies", "RolePolicies", "StorageAccessPolicies", "FilesReferences", "ContainerRegistries", "InternetExposureIndications", "StorageBuckets", "Modules", "GetHashCode"], ["System.Collections.Generic", "Infrastructure.Dotnet.Common", "JetBrains.Annotations", "Lim.Common.DotNET.InfrastructureEntities", "MongoDB.Bson.Serialization.Attributes"], false, false, [], false, false, [], {}, [], 11, false, false, true, 0, 0.0, [], 54.5, 0, 0.0, 100.0, 0, 0, false, false, false, false, "public", false, [], ["(\n                Providers?.GetAggregatedValuesHash(),\n                NetworkStructureBlocks?.GetAggregatedValuesHash(),\n                NetworkPolicies?.GetAggregatedValuesHash(),\n                RolePolicies?.GetAggregatedValuesHash(),\n                StorageAccessPolicies?.GetAggregatedValuesHash(),\n                FilesReferences?.GetAggregatedValuesHash(),\n                ContainerRegistries?.GetAggregatedValuesHash(),\n                InternetExposureIndications?.GetAggregatedValuesHash(),\n                StorageBuckets?.GetAggregatedValuesHash(),\n                Modules?.GetAggregatedValuesHash()\n            ).GetHashCode", ".GetAggregatedValuesHash"], false, false, false, false, [], false, 11, 11, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, true], ["TerraformModuleReference", "Lim.Common.DotNET.TerraformModuleReference", [], [], "src/Lim.Common.DotNET/Entities/Features/Terraform/TerraformModuleReference.cs", 5, 0, {}, ["ModuleDirectoryPath", "ModuleReferencePath", "Key", "TerraformHighlights"], ["ModuleDirectoryPath", "ModuleReferencePath", "Key", "TerraformHighlights", "GetHashCode", "ToString"], ["Newtonsoft.Json"], false, false, [], false, false, [], {}, ["JsonProperty"], 4, false, true, true, 0, 0.0, [], 42.666666666666664, 0, 0.0, 100.0, 0, 0, false, false, false, false, "public", false, [], ["(\n                ModuleDirectoryPath,\n                ModuleReferencePath,\n                Key,\n                TerraformHighlights,\n                base.GetHashCode()\n            ).GetHashCode", "base.GetHashCode"], false, false, false, false, ["module_directory_path", "module_reference_path", "terraform_highlights"], false, 4, 4, [], false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, 0, 0, false], ["UnvalidatedMethodParameter", "Lim.Common.DotNET.UnvalidatedMethodParameter", [], [], "src/Lim.Common.DotNET/Entities/Features/UnvalidatedMethodParameter.cs", 9, 0, {}, ["ParameterName", "CodeReference", "UnvalidatedTypeFieldsNames"], ["UnvalidatedMethodParameter", "ParameterName", "CodeReference", "SelfValid", "UnvalidatedTypeFieldsNames", "ToString", "GetHashCode"], ["System.Collections.Generic", "System.Linq", "Infrastructure.Dotnet.Common", "JetBrains.Annotations", "Newtonsoft.Json"], false, false, [], false, false, [], {}, ["JsonConstructor", "UsedImplicitly"], 4, false, true, true, 3, 0.3333333333333333, [], 88.44444444444444, 20, 0.0, 100.0, 3, 0, false, false, false, false, "public", false, ["Lim.Common.DotNET.NamedCodeReference.GetHashCode"], ["UnvalidatedTypeFieldsNames.Any", "UnvalidatedTypeFieldsNames.JoinToString", "(\n                CodeReference?.GetHashCode(),\n                SelfValid,\n                UnvalidatedTypeFieldsNames?.GetSetAggregatedValuesHash()\n            ).GetHashCode", ".GetSetAggregatedValuesHash"], false, false, false, false, [""], false, 4, 4, [], false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, 0, 0, false], ["FileClassificationExtensions", "Lim.Common.DotNET.FileClassificationExtensions", [], [], "src/Lim.Common.DotNET/Entities/FileClassification.cs", 83, 0, {"SourceCodeFileExtensions": "System.Collections.Generic.IReadOnlyCollection<string>"}, [], ["FileExtensions"], ["System.Collections.Generic", "System.ComponentModel", "System.Linq", "Infrastructure.Dotnet.Common"], false, false, [], false, false, [], {"SourceCodeFileExtensions": []}, [], 0, false, false, false, 1, 1.0, [], 275.0, 275, 100.0, 100.0, 0, 0, false, false, true, false, "public", false, [], ["fileClassification.GetCustomAttribute<FileClassification, FileExtensionsAttribute>", "Enumerable.Empty<string>", "LanguageUtils.AllFileExtensions.Union(\n                new[]\n                {\n                    \"ejs\",\n                    \"jsx\",\n                    \"tsx\"\n                }\n            )\n            .ToList", "LanguageUtils.AllFileExtensions.Union"], false, false, false, false, ["ejs", "jsx", "tsx"], false, 0, 0, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, false], ["GitBranch", "Lim.Common.DotNET.GitBranch", ["Lim.Common.DotNET.GitReference"], [], "src/Lim.Common.DotNET/Entities/GitBranch.cs", 3, 0, {}, ["Name", "HeadSha"], ["Name", "HeadSha"], [], false, false, [], false, false, [], {}, [], 2, false, false, false, 0, 0.0, [], 0.0, 0, 0.0, 100.0, 0, 0, false, false, false, false, "public", false, [], [], false, false, false, false, [], false, 2, 2, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, false], ["GitReference", "Lim.Common.DotNET.GitReference", [], [], "src/Lim.Common.DotNET/Entities/GitReference.cs", 3, 0, {}, ["Name", "HeadSha"], ["Name", "HeadSha"], [], false, false, [], false, false, [], {}, [], 2, false, false, false, 0, 0.0, [], 0.0, 0, 0.0, 100.0, 0, 0, false, true, false, false, "public", false, [], [], false, false, false, false, [], false, 2, 2, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, false], ["GitTag", "Lim.Common.DotNET.GitTag", ["Lim.Common.DotNET.GitReference"], [], "src/Lim.Common.DotNET/Entities/GitTag.cs", 3, 0, {}, ["Name", "HeadSha"], ["Name", "HeadSha"], [], false, false, [], false, false, [], {}, [], 2, false, false, false, 0, 0.0, [], 0.0, 0, 0.0, 100.0, 0, 0, false, false, false, false, "public", false, [], [], false, false, false, false, [], false, 2, 2, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, false], ["GovernanceRule", "Lim.Common.DotNET.GovernanceRule", ["Lim.Common.DotNET.BaseRule"], [], "src/Lim.Common.DotNET/Entities/GovernanceRule.cs", 106, 0, {"NonContradictingGovernanceWhenTypes": "System.Collections.Generic.ISet<GovernanceWhenType>", "ContradictingGovernanceWhenTypes": "System.Collections.Generic.ISet<GovernanceWhenType>", "RuleNoLongerRelevantTypes": "System.Collections.Generic.ISet<GovernanceThenSubType>", "_then": "System.Collections.Generic.IReadOnlyList<RulePortionWithSubType<GovernanceThenType, GovernanceThenSubType>>"}, ["_then", "Given", "When", "WhenTypes", "Risk", "PartialDisplayName", "FullDisplayName", "Key", "OrdinalId", "Name", "CreatedAt", "RemovedAt", "ReplacedBy"], ["Given", "When", "Then", "WhenTypes", "HasRisk", "Risk", "HasLabels", "GetRelevantRisk", "GetLabels", "GetWhenIndexes", "ToString", "BaseDisplayName", "EffectiveRiskForRepository", "RelevantRulesForRepositories", "ApplyEffectiveRiskForRepositories", "FilterSpecificTypeRulesByRelevance", "FilterRulesByGiven", "RelevantLabelsBySubType", "RelevantLabelsBySubTypes", "KeysSpecificToConsumables", "GetRulesByTypeAndValue", "ModuleKeys", "PartialDisplayName", "FullDisplayName", "Key", "OrdinalId", "Name", "CreatedAt", "RemovedAt", "ReplacedBy", "HasName", "ValidateConfigurationName"], ["System.Collections.Generic", "System.Linq", "Castle.Core.Internal", "Infrastructure.Dotnet.Common", "MongoDB.Bson.Serialization.Attributes"], false, false, ["MongoCollection"], false, false, [], {"NonContradictingGovernanceWhenTypes": [], "ContradictingGovernanceWhenTypes": [], "RuleNoLongerRelevantTypes": [], "_then": []}, ["BsonSerializer", "BsonIgnore", "BsonId", "MongoIndex", "UsedImplicitly", "JsonProperty", "BsonDateTimeOptions", "BsonIgnoreIfNull", "CanBeNull"], 16, false, true, false, 15, 0.46875, [], 254.71875, 74, 28.125, 87.5, 0, 0, false, false, false, false, "public", false, ["Lim.Common.DotNET.RulePortionWithProperties<Lim.Common.DotNET.GovernanceWhenType>.ToString"], ["value.SingleOrDefault", "EnumUtils.FromString<RiskLevel>", "value.Any", "When.Select(_ => _.Type)\n            .ToHashSet", "When.Select", "thenIndexesFilter.Any", "Then\n                .Where(\n                    (label, index) =>\n                        label.Type == GovernanceThenType.Label && (thenIndexesFilter == null || thenIndexesFilter.Contains(index))\n                )\n                .Select", "Then\n                .Where", "thenIndexesFilter.Contains", "When.Enumerate()\n                .Where(portion => portion.Value.Type == type)\n                .Select(tuple => tuple.Index)\n                .ToHashSet", "When.Enumerate()\n                .Where(portion => portion.Value.Type == type)\n                .Select", "When.Enumerate()\n                .Where", "When.Enumerate", "Given.JoinToString", "When.JoinToString", "Then.JoinToString", "whenTypes.Contains", "repositoryProfiles.None", "repositoryProfilesByKey.Keys.ToHashSet", "projectsByKey.Keys.ToHashSet", "rules.Where(\n                    rule =>\n                        rule.Given.Any(\n                            given =>\n                                (given.Type == GovernanceGivenType.Repository &&\n                                 (given.Value == CodeGovernanceKeys.Any || repositoryKeys.Contains(given.Value)))\n                                ||\n                                (given.Type == GovernanceGivenType.Project &&\n                                 (given.Value == CodeGovernanceKeys.Any || projectKeys.Contains(given.Value)))\n                        )\n                )\n                .GroupBy(\n                    rule => rule.When.Select(\n                            when =>\n                                NonContradictingGovernanceWhenTypes.Contains(when.Type)\n                                    ? when.ToString()\n                                    : when.Type.ToString()\n                        )\n                        .JoinToString()\n                )\n                .SelectMany(\n                    group => FilterSpecificTypeRulesByRelevance(\n                        group,\n                        repositoryKeys,\n                        projectKeys\n                    )\n                )\n                .ToList", "rules.Where(\n                    rule =>\n                        rule.Given.Any(\n                            given =>\n                                (given.Type == GovernanceGivenType.Repository &&\n                                 (given.Value == CodeGovernanceKeys.Any || repositoryKeys.Contains(given.Value)))\n                                ||\n                                (given.Type == GovernanceGivenType.Project &&\n                                 (given.Value == CodeGovernanceKeys.Any || projectKeys.Contains(given.Value)))\n                        )\n                )\n                .GroupBy(\n                    rule => rule.When.Select(\n                            when =>\n                                NonContradictingGovernanceWhenTypes.Contains(when.Type)\n                                    ? when.ToString()\n                                    : when.Type.ToString()\n                        )\n                        .JoinToString()\n                )\n                .SelectMany", "rules.Where(\n                    rule =>\n                        rule.Given.Any(\n                            given =>\n                                (given.Type == GovernanceGivenType.Repository &&\n                                 (given.Value == CodeGovernanceKeys.Any || repositoryKeys.Contains(given.Value)))\n                                ||\n                                (given.Type == GovernanceGivenType.Project &&\n                                 (given.Value == CodeGovernanceKeys.Any || projectKeys.Contains(given.Value)))\n                        )\n                )\n                .GroupBy", "rules.Where", "rule.Given.Any", "repositoryKeys.Contains", "projectKeys.Contains", "rule.When.Select(\n                            when =>\n                                NonContradictingGovernanceWhenTypes.Contains(when.Type)\n                                    ? when.ToString()\n                                    : when.Type.ToString()\n                        )\n                        .JoinToString", "rule.When.Select", "NonContradictingGovernanceWhenTypes.Contains", "when.Type.ToString", "FilterSpecificTypeRulesByRelevance", "ApplyEffectiveRiskForRepositories", "repositoryProfilesByKey.Values.ToList", "rules.Select(\n                    rule =>\n                    {\n                        var ruleClone = rule.ToJson()\n                            .FromJson<GovernanceRule>();\n                        ruleClone.Risk = rule.EffectiveRiskForRepository(repositoryProfilesByKey);\n                        return ruleClone;\n                    }\n                )\n                .ToList", "rules.Select", "rule.ToJson()\n                            .FromJson<GovernanceRule>", "rule.ToJson", "repositorySpecificRules.Any", "projectsSpecificRules.Any", "group.ToList", "rules.Where(\n                    rule => rule.Given.Any(\n                        given => given.Type == type && relevantValues.Contains(given.Value)\n                    )\n                )\n                .ToList", "relevantValues.Contains", "RelevantLabelsBySubTypes(rules, subType)\n                .Select", "subTypes.ToHashSet", "rules.Select(\n                    rule =>\n                    (\n                        rule,\n                        indexesBySubType: rule.Then\n                            .Enumerate()\n                            .Where(\n                                tuple =>\n                                    tuple.Value.Type == GovernanceThenType.Label &&\n                                    subTypesSet.Contains(tuple.Value.SubType)\n                            )\n                            .GroupBy(tuple => tuple.Value.SubType)\n                            .ToDictionary(\n                                group => group.Key,\n                                group => group\n                                    .Select(tuple => (tuple.Index))\n                                    .ToHashSet()\n                            )\n                    )\n                )\n                .Where", "rule.Then\n                            .Enumerate()\n                            .Where(\n                                tuple =>\n                                    tuple.Value.Type == GovernanceThenType.Label &&\n                                    subTypesSet.Contains(tuple.Value.SubType)\n                            )\n                            .GroupBy(tuple => tuple.Value.SubType)\n                            .ToDictionary", "rule.Then\n                            .Enumerate()\n                            .Where(\n                                tuple =>\n                                    tuple.Value.Type == GovernanceThenType.Label &&\n                                    subTypesSet.Contains(tuple.Value.SubType)\n                            )\n                            .GroupBy", "rule.Then\n                            .Enumerate()\n                            .Where", "rule.Then\n                            .Enumerate", "subTypesSet.Contains", "group\n                                    .Select(tuple => (tuple.Index))\n                                    .ToHashSet", "group\n                                    .Select", "tuple.indexesBySubType.Any", "rules\n                .Where(\n                    rule =>\n                        (!repositoryKeys.IsNullOrEmpty() &&\n                         rule.Given.Any(\n                             given =>\n                                 given.Type == GovernanceGivenType.Repository &&\n                                 repositoryKeys!.Contains(given.Value)\n                         ))\n                        ||\n                        (!projectKeys.IsNullOrEmpty() &&\n                         rule.Given.Any(\n                             given =>\n                                 given.Type == GovernanceGivenType.Project &&\n                                 projectKeys!.Contains(given.Value)\n                         ))\n                )\n                .Select(rule => rule.Key)\n                .ToHashSet", "rules\n                .Where(\n                    rule =>\n                        (!repositoryKeys.IsNullOrEmpty() &&\n                         rule.Given.Any(\n                             given =>\n                                 given.Type == GovernanceGivenType.Repository &&\n                                 repositoryKeys!.Contains(given.Value)\n                         ))\n                        ||\n                        (!projectKeys.IsNullOrEmpty() &&\n                         rule.Given.Any(\n                             given =>\n                                 given.Type == GovernanceGivenType.Project &&\n                                 projectKeys!.Contains(given.Value)\n                         ))\n                )\n                .Select", "rules\n                .Where", "repositoryKeys.IsNullOrEmpty", "repositoryKeys!.Contains", "projectKeys.IsNullOrEmpty", "projectKeys!.Contains", "rules\n            .Where(\n                rule => rule.When.Any(\n                    portion =>\n                        portion.Type == when &&\n                        (string.IsNullOrEmpty(subOption) || portion.Value == subOption)\n                )\n            )\n            .ToList", "rules\n            .Where", "rule.When.Any", "string.IsNullOrEmpty", "Given\n                .Where(\n                    given =>\n                        given.Type == GovernanceGivenType.Repository &&\n                        repositoryKeys.Contains(given.Value) &&\n                        given.AdditionalProperties != null\n                )\n                .SelectMany", "Given\n                .Where", "given.AdditionalProperties\n                        .Where(property => property.Type == GovernanceGivenAdditionalPropertiesType.Module.ToString())\n                        .Select", "given.AdditionalProperties\n                        .Where", "GovernanceGivenAdditionalPropertiesType.Module.ToString", "BaseDisplayName().ToUpper", "otherConfigurations.Where(\n                    rule => string.Equals(\n                        rule.Name,\n                        configuration.Name,\n                        StringComparison.OrdinalIgnoreCase\n                    ) && rule.Key != configuration.Key\n                )\n                .ToList", "otherConfigurations.Where", "string.Equals", "configurationsWithNames.Any", "configurationsWithNames.First", "EnumUtils.GetValues<GovernanceWhenType>()\n                .Except", "EnumUtils.GetValues<GovernanceWhenType>"], false, false, false, false, ["governanceRules", " ; ", "Rule"], false, 16, 11, [], false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, true, 0, 0, true], ["CodeGovernanceKeys", "Lim.Common.DotNET.CodeGovernanceKeys", [], [], "src/Lim.Common.DotNET/Entities/GovernanceRule.cs", 388, 0, {"Any": "string", "New": "string", "Exposed": "string", "Involved": "string", "NetworkPolicies": "string", "NetworkStructure": "string", "RolesPolicies": "string", "StorageAccessPolicies": "string"}, [], [], ["System.Collections.Generic", "System.Linq", "Castle.Core.Internal", "Infrastructure.Dotnet.Common", "MongoDB.Bson.Serialization.Attributes"], false, false, [], false, false, [], {"Any": [], "New": [], "Exposed": [], "Involved": [], "NetworkPolicies": [], "NetworkStructure": [], "RolesPolicies": [], "StorageAccessPolicies": []}, [], 0, false, false, false, 0, 0.0, [], 0.0, 0, 0.0, 0.0, 0, 0, false, false, true, false, "public", false, [], [], false, false, false, false, ["any", "new", "Exposed", "Involved", "networkPolicies", "networkStructure", "rolesPolicies", "storageAccessPolicies"], false, 0, 0, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, true], ["GovernanceExtensions", "Lim.Common.DotNET.GovernanceExtensions", [], [], "src/Lim.Common.DotNET/Entities/GovernanceRule.cs", 404, 0, {}, [], ["GetRiskScore", "ShouldCollectNonDiffableRisk"], ["System.Collections.Generic", "System.Linq", "Castle.Core.Internal", "Infrastructure.Dotnet.Common", "MongoDB.Bson.Serialization.Attributes"], false, false, [], false, false, [], {}, [], 0, false, false, false, 2, 1.0, [], 105.0, 105, 100.0, 100.0, 0, 0, false, false, true, false, "public", false, [], ["whenType.GetCustomAttribute<GovernanceWhenType, RiskScoreAttribute>", "whenType.HasCustomAttribute<GovernanceWhenType, CollectNonDiffableRiskAttribute>"], false, false, false, false, [], false, 0, 0, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, true], ["IaCContainerRegistry", "Lim.Common.DotNET.InfrastructureEntities.IaCContainerRegistry", ["???.IacResource"], [], "src/Lim.Common.DotNET/Entities/InfrastructureEntities/IacContainerRegistry.cs", 3, 0, {}, [], ["GetHashCode"], [], false, false, [], false, false, [], {}, [], 0, false, false, true, 0, 0.0, [], 33.0, 33, 0.0, 100.0, 0, 0, false, false, false, false, "public", false, ["Lim.Common.DotNET.IacResource.GetHashCode"], [], false, false, false, false, [], false, 0, 0, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, false], ["IacFileReference", "Lim.Common.DotNET.IacFileReference", [], [], "src/Lim.Common.DotNET/Entities/InfrastructureEntities/IacFileReference.cs", 5, 0, {}, ["ReferencedFrom", "Path"], ["ReferencedFrom", "Path", "GetHashCode"], ["Newtonsoft.Json"], false, false, [], false, false, [], {}, ["JsonProperty"], 2, false, false, true, 0, 0.0, [], 44.333333333333336, 0, 0.0, 100.0, 0, 0, false, false, false, false, "public", false, [], ["(\n                ReferencedFrom,\n                Path,\n                base.GetHashCode()\n            ).GetHashCode", "base.GetHashCode"], false, false, false, false, ["referenced_from"], false, 2, 2, [], false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, 0, 0, false], ["IacImage", "Lim.Common.DotNET.IacImage", [], [], "src/Lim.Common.DotNET/Entities/InfrastructureEntities/IacImage.cs", 3, 0, {}, ["Name", "Path", "Family", "Tag"], ["Name", "Path", "Family", "Tag", "GetHashCode"], [], false, false, [], false, false, [], {}, [], 4, false, false, true, 0, 0.0, [], 26.4, 0, 0.0, 100.0, 0, 0, false, false, false, false, "public", false, [], ["(\n                Name,\n                Path,\n                Family,\n                Tag\n            ).GetHashCode"], false, false, false, false, [], false, 4, 4, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, false], ["IacInternetExposureIndication", "Lim.Common.DotNET.IacInternetExposureIndication", ["Lim.Common.DotNET.IacResource"], [], "src/Lim.Common.DotNET/Entities/InfrastructureEntities/IacInternetExposureIndication.cs", 5, 0, {}, ["IndicationArgument", "Path", "Key", "Name", "ResourceMd5", "ResourceType"], ["IndicationArgument", "GetHashCode", "Path", "Key", "Name", "ResourceMd5", "ResourceType", "Equals", "ToString"], ["Newtonsoft.Json"], false, false, [], false, false, [], {}, ["JsonProperty"], 6, true, true, true, 0, 0.0, [], 45.55555555555556, 0, 0.0, 100.0, 0, 0, false, false, false, false, "public", false, ["Lim.Common.DotNET.IacResource.GetHashCode"], ["(\n                IndicationArgument,\n                base.GetHashCode()\n            ).GetHashCode"], false, false, false, false, ["indication_argument"], false, 6, 6, [], false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, 0, 0, false], ["IacNetworkPolicy", "Lim.Common.DotNET.IacNetworkPolicy", ["Lim.Common.DotNET.IacResource"], [], "src/Lim.Common.DotNET/Entities/InfrastructureEntities/IacNetworkPolicy.cs", 6, 0, {}, ["AffectedIps", "Ports", "Access", "Direction", "Protocol", "Path", "Key", "Name", "ResourceMd5", "ResourceType"], ["AffectedIps", "Ports", "Access", "Direction", "Protocol", "GetHashCode", "Path", "Key", "Name", "ResourceMd5", "ResourceType", "Equals", "ToString"], ["System.Collections.Generic", "Infrastructure.Dotnet.Common"], false, false, [], false, false, [], {}, ["JsonProperty"], 10, true, true, true, 0, 0.0, [], 42.84615384615385, 0, 0.0, 100.0, 0, 0, false, false, false, false, "public", false, ["Lim.Common.DotNET.IacResource.GetHashCode"], ["(\n                AffectedIps?.GetAggregatedValuesHash(),\n                Ports?.GetAggregatedValuesHash(),\n                Access,\n                Direction,\n                Protocol,\n                base.GetHashCode()\n            ).GetHashCode", ".GetAggregatedValuesHash"], false, false, false, false, [], false, 10, 10, [], false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, 0, 0, false], ["IacNetworkStructure", "Lim.Common.DotNET.IacNetworkStructure", ["Lim.Common.DotNET.IacResource"], [], "src/Lim.Common.DotNET/Entities/InfrastructureEntities/IacNetworkStructure.cs", 3, 0, {}, ["Path", "Key", "Name", "ResourceMd5", "ResourceType"], ["GetHashCode", "Path", "Key", "Name", "ResourceMd5", "ResourceType", "Equals", "ToString"], [], false, false, [], false, false, [], {}, ["JsonProperty"], 5, true, true, true, 0, 0.0, [], 41.0, 0, 0.0, 100.0, 0, 0, false, false, false, false, "public", false, ["Lim.Common.DotNET.IacResource.GetHashCode"], [], false, false, false, false, [], false, 5, 5, [], false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, 0, 0, false], ["IaCProvider", "Lim.Common.DotNET.IaCProvider", [], [], "src/Lim.Common.DotNET/Entities/InfrastructureEntities/IaCProvider.cs", 5, 0, {}, ["Key", "Version", "Project", "Region"], ["Key", "Version", "Project", "Region", "GetHashCode"], ["JetBrains.Annotations"], false, false, [], false, false, [], {}, ["CanBeNull"], 4, false, false, true, 0, 0.0, [], 27.6, 0, 0.0, 100.0, 0, 0, false, false, false, false, "public", false, [], ["(\n                Key,\n                Version,\n                Project,\n                Region\n            ).GetHashCode"], false, false, false, false, [], false, 4, 4, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, false], ["IacResource", "Lim.Common.DotNET.IacResource", [], [], "src/Lim.Common.DotNET/Entities/InfrastructureEntities/IacResource.cs", 5, 0, {}, ["Path", "Key", "Name", "ResourceMd5", "ResourceType"], ["Path", "Key", "Name", "ResourceMd5", "ResourceType", "Equals", "GetHashCode", "ToString"], ["Newtonsoft.Json"], false, false, [], false, false, [], {}, ["JsonProperty"], 5, true, true, true, 0, 0.0, [], 57.75, 0, 0.0, 100.0, 0, 0, false, true, false, false, "public", false, [], ["(\n                Path,\n                Key,\n                Name,\n                ResourceMd5,\n                ResourceType\n            ).GetHashCode"], false, false, false, false, ["resource_md5", "resource_type"], false, 5, 5, [], false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, 0, 0, false], ["IacRolePolicy", "Lim.Common.DotNET.IacRolePolicy", ["Lim.Common.DotNET.IacResource"], [], "src/Lim.Common.DotNET/Entities/InfrastructureEntities/IacRolePolicy.cs", 3, 0, {}, ["Path", "Key", "Name", "ResourceMd5", "ResourceType"], ["GetHashCode", "Path", "Key", "Name", "ResourceMd5", "ResourceType", "Equals", "ToString"], [], false, false, [], false, false, [], {}, ["JsonProperty"], 5, true, true, true, 0, 0.0, [], 41.0, 0, 0.0, 100.0, 0, 0, false, false, false, false, "public", false, ["Lim.Common.DotNET.IacResource.GetHashCode"], [], false, false, false, false, [], false, 5, 5, [], false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, 0, 0, false], ["IacStorageAccessPolicy", "Lim.Common.DotNET.IacStorageAccessPolicy", ["Lim.Common.DotNET.IacResource"], [], "src/Lim.Common.DotNET/Entities/InfrastructureEntities/IacStorageAccessPolicy.cs", 6, 0, {}, ["Bucket", "Policy", "AffectedBuckets", "Path", "Key", "Name", "ResourceMd5", "ResourceType"], ["Bucket", "Policy", "AffectedBuckets", "GetHashCode", "Path", "Key", "Name", "ResourceMd5", "ResourceType", "Equals", "ToString"], ["System.Collections.Generic", "Newtonsoft.Json"], false, false, [], false, false, [], {}, ["JsonProperty"], 8, true, true, true, 0, 0.0, [], 39.45454545454545, 0, 0.0, 100.0, 0, 0, false, false, false, false, "public", false, ["Lim.Common.DotNET.IacResource.GetHashCode"], ["(\n                base.GetHashCode(),\n                Bucket,\n                Policy\n            ).GetHashCode"], false, false, false, false, ["affected_buckets_name"], false, 8, 8, [], false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, 0, 0, false], ["IacStorageBucket", "Lim.Common.DotNET.IacStorageBucket", ["Lim.Common.DotNET.IacResource"], [], "src/Lim.Common.DotNET/Entities/InfrastructureEntities/IacStorageBucket.cs", 7, 0, {}, ["Bucket", "Policies", "Path", "Key", "Name", "ResourceMd5", "ResourceType"], ["Bucket", "Policies", "GetHashCode", "Path", "Key", "Name", "ResourceMd5", "ResourceType", "Equals", "ToString"], ["System.Collections.Generic", "Infrastructure.Dotnet.Common", "JetBrains.Annotations"], false, false, ["UsedImplicitly"], false, false, [], {}, ["JsonProperty"], 7, true, true, true, 0, 0.0, [], 45.0, 0, 0.0, 100.0, 0, 0, false, false, false, false, "public", false, ["Lim.Common.DotNET.IacResource.GetHashCode"], ["(\n                base.GetHashCode(),\n                Bucket,\n                Policies.GetAggregatedValuesHash()\n            ).GetHashCode", "Policies.GetAggregatedValuesHash"], false, false, false, false, [], false, 7, 7, [], false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, 0, 0, false], ["InputValidationParameterModification", "Lim.Common.DotNET.InputValidationParameterModification", [], [], "src/Lim.Common.DotNET/Entities/InputValidationParameterModification.cs", 5, 0, {}, ["ParameterName", "WasValidated"], ["InputValidationParameterModification", "ParameterName", "IsValidated", "WasValidated", "IsNewParameter", "GetHashCode"], ["JetBrains.Annotations"], false, false, ["UsedImplicitly"], false, false, [], {}, [], 4, false, false, true, 1, 0.16666666666666666, [], 54.833333333333336, 0, 0.0, 100.0, 1, 0, false, false, false, false, "public", false, [], ["(\n            ParameterName,\n            IsValidated,\n            WasValidated,\n            IsNewParameter\n        ).GetHashCode"], false, false, false, false, [], false, 4, 4, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, false], ["Inventory", "Lim.Common.DotNET.Inventory", [], [], "src/Lim.Common.DotNET/Entities/Inventory.cs", 12, 0, {"UsageThreshold": "double"}, ["DiffMetadata", "ApiMethods", "ApiSnippets", "Dependencies", "ExposedSecrets", "SecurityConfigurations", "FrameworkGroups", "JavaSecurityAnnotation", "LicensesWithDependencies", "TerraformModules", "DataModels", "Piis", "SensitiveFiles", "ApiWithAnyAuthorizationCount", "ApiWithAnyValidationCount", "CheckmarxVulnerabilities"], ["DiffMetadata", "ApiMethods", "ApiSnippets", "Dependencies", "ExposedSecrets", "SecurityConfigurations", "FrameworkGroups", "JavaSecurityAnnotation", "LicensesWithDependencies", "TerraformModules", "DataModels", "Piis", "SensitiveFiles", "ApiWithAnyAuthorizationCount", "HasAuthorizationUsage", "ApiWithAnyValidationCount", "HasValidationUsage", "CheckmarxVulnerabilities", "EnumerateDiffableProperties", "AddFrameworkUsage", "GetHashCode"], ["System", "System.Collections", "System.Collections.Generic", "System.Linq", "Infrastructure.Dotnet.Common", "JetBrains.Annotations", "MongoDB.Bson.Serialization.Attributes", "Newtonsoft.Json"], false, false, [], false, false, [], {"UsageThreshold": []}, ["BsonIgnore", "JsonIgnore", "Diffable", "StringKeysDictionarySerializer", "UsedImplicitly"], 18, false, false, true, 2, 0.09523809523809523, [], 66.95238095238095, 0, 0.0, 90.47619047619048, 0, 0, false, false, false, false, "public", false, [], ["ApiMethods.Values\n            .Count", "ApiWithAnyAuthorizationCount.SafeDivision", "ApiWithAnyValidationCount.SafeDivision", "GetType()\n                .GetProperties()\n                .Where(info => info.IsDefined(typeof(DiffableAttribute), false))\n                .OrderBy", "GetType()\n                .GetProperties()\n                .Where", "GetType()\n                .GetProperties", "GetType", "info.IsDefined", "((IDictionary) propertyInfo.GetValue(this, null)).CastDictionary<string, IDiffable>", "propertyInfo.GetValue", "FrameworkGroups.GetOrAdd", "codeFrameworkType.ToString", "codeFrameworksGroups.CodeFrameworksToDirectoryPaths.GetOrAdd(\n                    framework,\n                    () => new HashSet<string>()\n                )\n                .Add", "codeFrameworksGroups.CodeFrameworksToDirectoryPaths.GetOrAdd", "hashCode.Add", "ApiMethods.GetAggregatedValuesHash", "ApiSnippets.GetAggregatedValuesHash", "Dependencies.GetAggregatedValuesHash", "ExposedSecrets.GetAggregatedValuesHash", "Piis.GetAggregatedValuesHash", "DataModels.GetAggregatedValuesHash", ".GetAggregatedValuesHash", "hashCode.ToHashCode"], false, false, false, false, [], false, 18, 14, [], false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, true, 0, 0, true], ["InventoryDiffMetadata", "Lim.Common.DotNET.InventoryDiffMetadata", [], [], "src/Lim.Common.DotNET/Entities/InventoryDiffMetadata.cs", 5, 0, {}, ["CommitAuthorKey", "CommitDate", "RepositoryActiveSince", "AuthorProfile"], ["CommitAuthorKey", "CommitDate", "RepositoryActiveSince", "AuthorProfile"], ["System"], false, false, [], false, false, [], {}, [], 4, false, false, false, 0, 0.0, [], 0.0, 0, 0.0, 100.0, 0, 0, false, false, false, false, "public", false, [], [], false, false, false, false, [], false, 4, 4, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, false], ["InventoryExtensions", "Lim.Common.DotNET.InventoryExtensions", [], [], "src/Lim.Common.DotNET/Entities/InventoryExtensions.cs", 5, 0, {"NewTimeSpan": "System.TimeSpan"}, [], ["IsNewDeveloperCommit"], ["System"], false, false, [], false, false, [], {"NewTimeSpan": []}, [], 0, false, false, false, 1, 1.0, [], 336.0, 336, 100.0, 100.0, 0, 0, false, false, true, false, "public", false, [], ["TimeSpan.FromDays"], false, false, false, false, [], false, 0, 0, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, false], ["Issue", "Lim.Common.DotNET.Issue", [], [], "src/Lim.Common.DotNET/Entities/Issue.cs", 8, 0, {}, ["ProjectKey", "Id", "ParentIssueId", "OrdinalId", "AuthorIdentityKey", "RelatedPullRequestIdWithRepositoryUrlPairs", "Labels", "CreationTime", "Key", "Title", "Description", "ParticipantIdentitiesKeys", "AssigneeIdentitiesKeys", "Comments", "AdditionalDetails"], ["ProjectKey", "Id", "ParentIssueId", "OrdinalId", "AuthorIdentityKey", "RelatedPullRequestIdWithRepositoryUrlPairs", "Labels", "CreationTime", "Key", "Title", "Description", "ParticipantIdentitiesKeys", "AssigneeIdentitiesKeys", "Comments", "IsOpen", "AdditionalDetails", "ToString", "Equals", "GetHashCode"], ["System", "System.Collections.Generic", "JetBrains.Annotations", "MongoDB.Bson.Serialization.Attributes"], false, false, ["MongoCollection"], false, false, [], {}, ["BsonDateTimeOptions", "BsonId", "UsedImplicitly"], 16, true, true, true, 0, 0.0, [], 6.7368421052631575, 0, 0.0, 100.0, 0, 0, false, false, false, false, "public", false, ["Lim.Common.DotNET.CompositeKey.Create"], ["string.Equals", "Key.GetHashCode"], false, false, false, false, ["issues"], false, 16, 15, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, 0, 0, true], ["IssueProperties", "Lim.Common.DotNET.IssueProperties", [], [], "src/Lim.Common.DotNET/Entities/IssueProperties.cs", 13, 0, {}, ["Project", "Title", "Description", "Assignee", "Labels", "Watchers"], ["IssueProperties", "Project", "Title", "Description", "Assignee", "Labels", "Watchers"], ["System.Collections.Generic", "Infrastructure.Dotnet.Common"], false, false, [], false, false, [], {}, [], 6, false, false, false, 1, 0.14285714285714285, [], 144.57142857142858, 0, 0.0, 100.0, 1, 0, false, false, false, false, "public", false, [], ["EnumUtils.FromString<IssuePropertyTypes>", "labels.Add", "watchers.Add"], false, false, false, false, [], false, 6, 0, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, false], ["IssueType", "Lim.Common.DotNET.IssueType", [], [], "src/Lim.Common.DotNET/Entities/IssueType.cs", 8, 0, {}, ["Id", "Name", "Description"], ["IssueType", "Id", "Name", "Description", "IsSubTask", "ToString", "GetHashCode", "GuessDefault"], ["System", "System.Collections.Generic", "System.Linq", "JetBrains.Annotations"], false, false, [], false, false, [], {}, ["UsedImplicitly"], 4, false, true, true, 2, 0.25, [], 59.625, 8, 12.5, 100.0, 1, 0, false, false, false, false, "public", false, [], ["(\n                Id,\n                Name\n            ).GetHashCode", "issueTypes\n                .OrderBy(type => type.IsSubTask)\n                .ThenBy(type => type.Name.Contains(\"bug\", StringComparison.OrdinalIgnoreCase))\n                .ThenByDescending(type => type.Name.Contains(\"task\", StringComparison.OrdinalIgnoreCase))\n                .FirstOrDefault", "issueTypes\n                .OrderBy(type => type.IsSubTask)\n                .ThenBy(type => type.Name.Contains(\"bug\", StringComparison.OrdinalIgnoreCase))\n                .ThenByDescending", "issueTypes\n                .OrderBy(type => type.IsSubTask)\n                .ThenBy", "issueTypes\n                .OrderBy", "type.Name.Contains"], false, false, false, false, ["bug", "task"], false, 4, 4, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, false], ["JavaAnnotations", "Lim.Common.DotNET.JavaAnnotations", ["???.DiffableEntity<JavaAnnotations>"], [], "src/Lim.Common.DotNET/Entities/JavaAnnotations.cs", 7, 0, {"AnnotationsId": "string", "Differ": "???.IEntityDiffer<DiffableEntity<JavaAnnotations>>"}, ["Annotations", "EntityId"], ["JavaAnnotations", "Annotations", "EntityId", "CollectNonGovernanceInsights", "GetHashCode"], ["System", "System.Collections.Generic", "Infrastructure.Dotnet.Common"], false, false, [], false, false, [], {"AnnotationsId": [], "Differ": []}, [], 2, false, false, true, 2, 0.4, [], 104.6, 97, 20.0, 60.0, 1, 0, false, false, false, false, "public", false, ["Lim.Common.DotNET.IEntityDiffer<Lim.Common.DotNET.DiffableEntity<Lim.Common.DotNET.JavaAnnotations>>.CollectNonGovernanceInsights"], ["hashCode.Add", "Annotations.GetAggregatedValuesHash", "hashCode.ToHashCode"], false, false, false, false, ["JavaAnnotations"], false, 2, 2, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, false], ["LanguageExtensions", "Lim.Common.DotNET.LanguageExtensions", [], [], "src/Lim.Common.DotNET/Entities/Language.cs", 140, 0, {}, [], ["FileExtensions", "SupportsPropertiesExtraction", "SupportsCodeParsing"], ["System.Collections.Generic", "Infrastructure.Dotnet.Common"], false, false, [], false, false, [], {}, [], 0, false, false, false, 3, 1.0, [], 95.33333333333333, 94, 100.0, 100.0, 0, 0, false, false, true, false, "public", false, [], ["language.GetCustomAttribute<Language, FileExtensionsAttribute>", "language.HasCustomAttribute<Language, PropertiesExtractionSupportedAttribute>", "language.HasCustomAttribute<Language, CodeParsingSupportedAttribute>"], false, false, false, false, [], false, 0, 0, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, false], ["License", "Lim.Common.DotNET.License", [], [], "src/Lim.Common.DotNET/Entities/License.cs", 7, 0, {}, ["ResolvedName", "OriginalName", "Url", "DisplayName"], ["ResolvedName", "OriginalName", "Url", "IsEmpty", "DisplayName", "ToString", "Clone", "Equals", "GetHashCode"], ["System", "Infrastructure.Dotnet.Common", "MongoDB.Bson.Serialization.Attributes"], false, false, [], false, false, [], {}, ["BsonIgnore"], 5, true, true, true, 1, 0.1111111111111111, [], 61.111111111111114, 0, 0.0, 100.0, 0, 0, false, false, false, false, "public", false, [], ["string.IsNullOrEmpty", "ResolvedName.OrIfEmpty", "OriginalName.OrIfEmpty", "string.Equals", "DisplayName.ToLowerInvariant()\n                .GetHashCode", "DisplayName.ToLowerInvariant"], false, false, false, false, [], true, 5, 3, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, 0, 0, true], ["LicenseWithDependencies", "Lim.Common.DotNET.LicenseWithDependencies", ["???.DiffableEntity<LicenseWithDependencies>"], [], "src/Lim.Common.DotNET/Entities/LicenseWithDependencies.cs", 6, 0, {}, ["EntityId", "License", "DependencyNames"], ["LicenseWithDependencies", "EntityId", "License", "DependencyNames", "GetHashCode"], ["System.Collections.Generic", "Infrastructure.Dotnet.Common"], false, false, [], false, false, [], {}, [], 3, false, false, true, 2, 0.3333333333333333, [], 79.16666666666667, 65, 16.666666666666668, 83.33333333333333, 2, 0, false, false, false, false, "public", false, [], ["(\n                License,\n                DependencyNames.GetSetAggregatedValuesHash()\n            ).GetHashCode", "DependencyNames.GetSetAggregatedValuesHash"], false, false, false, false, [], false, 3, 3, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, false], ["ApiMethodClassificationMaterialChange", "Lim.Common.DotNET.ApiMethodClassificationMaterialChange", ["???.CodeMaterialChange<ApiMethodsCodeReference>"], [], "src/Lim.Common.DotNET/Entities/MaterialChanges/ApiMethodClassificationMaterialChange.cs", 5, 0, {}, ["Classification", "OrderByValue"], ["ApiMethodClassificationMaterialChange", "Classification", "OrderByValue"], ["System.Collections.Generic"], false, false, [], false, false, [], {}, [], 2, false, false, false, 1, 0.3333333333333333, [], 15.333333333333334, 0, 0.0, 100.0, 1, 0, false, false, false, false, "public", false, [], [], false, false, false, false, [], false, 2, 1, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, false], ["ApiSnippetMaterialChange", "Lim.Common.DotNET.ApiSnippetMaterialChange", ["???.CodeMaterialChange<ApiSnippetCodeReference>"], [], "src/Lim.Common.DotNET/Entities/MaterialChanges/ApiSnippetMaterialChange.cs", 7, 0, {}, ["Uid", "OrderByValue"], ["ApiSnippetMaterialChange", "Uid", "OrderByValue"], ["System.Collections.Generic", "JetBrains.Annotations", "Newtonsoft.Json"], false, false, [], false, false, [], {}, ["UsedImplicitly", "JsonIgnore"], 2, false, false, false, 1, 0.3333333333333333, [], 8.0, 0, 0.0, 100.0, 1, 0, false, false, false, false, "public", false, [], [], false, false, false, false, [], false, 2, 1, [], false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, 0, 0, false], ["ClassMaterialChange", "Lim.Common.DotNET.ClassMaterialChange", ["???.CodeMaterialChange<FieldsCodeReference>"], [], "src/Lim.Common.DotNET/Entities/MaterialChanges/ClassMaterialChange.cs", 5, 0, {}, ["OrderByValue"], ["ClassMaterialChange", "OrderByValue"], ["System.Collections.Generic"], false, false, [], false, false, [], {}, [], 1, false, false, false, 1, 0.5, [], 10.0, 10, 0.0, 100.0, 1, 0, false, false, false, false, "public", false, [], [], false, false, false, false, [], false, 1, 0, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, false], ["CodeMaterialChange", "Lim.Common.DotNET.CodeMaterialChange<TCodeReference>", ["Lim.Common.DotNET.MaterialChange"], [], "src/Lim.Common.DotNET/Entities/MaterialChanges/CodeMaterialChange.cs", 7, 0, {}, ["CodeReference", "Descriptions", "Paths", "EntityId", "Key", "SourceCommitSha", "TargetCommitSha", "GovernanceRuleKey", "RuleThenIndexes", "RuleWhenIndexes", "RepositoryKeys", "ModuleKeys", "OrderByValue", "RiskLevel"], ["CodeMaterialChange", "CodeReference", "Descriptions", "Paths", "GetHashCode", "ToString", "MaterialChange", "EntityId", "Key", "SourceCommitSha", "TargetCommitSha", "GovernanceRuleKey", "RuleThenIndexes", "RuleWhenIndexes", "RepositoryKeys", "ModuleKeys", "Dismissed", "OrderByValue", "IsPartial", "RiskLevel", "GetMatchingModules"], ["System.Collections.Generic", "Infrastructure.Dotnet.Common", "JetBrains.Annotations"], false, false, [], false, false, [], {}, ["UsedImplicitly", "JsonIgnore", "BsonId", "MongoIndex", "BsonIgnore", "BsonRepresentation"], 16, false, true, true, 3, 0.14285714285714285, [], 46.19047619047619, 0, 0.0, 85.71428571428571, 2, 0, false, true, false, false, "public", true, ["Lim.Common.DotNET.MaterialChange.GetHashCode", "Lim.Common.DotNET.CodeReference.GetHashCode", "Lim.Common.DotNET.MaterialChange.ToString", "Lim.Common.DotNET.Module.AnyPathUnderModuleRoot"], ["(\n            base.GetHashCode(),\n            CodeReference.GetHashCode(),\n            Descriptions.GetAggregatedValuesHash()\n        ).GetHashCode", "Descriptions.GetAggregatedValuesHash", "Descriptions.JoinToString", "Guid.NewGuid()\n            .ToString", "Guid.NewGuid", "moduleKeys.Where(moduleKey => Module.AnyPathUnderModuleRoot(moduleKey, Paths))\n                .ToHashSet", "moduleKeys.Where"], false, false, false, false, [], false, 16, 14, [], false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, true, 0, 0, false], ["CompoundMaterialChange", "Lim.Common.DotNET.CompoundMaterialChange", ["Lim.Common.DotNET.MaterialChange"], [], "src/Lim.Common.DotNET/Entities/MaterialChanges/CompoundMaterialChange.cs", 8, 0, {}, ["PartialMaterialChangeKeys", "PartialMaterialChanges", "OrderByValue", "EntityId", "Key", "SourceCommitSha", "TargetCommitSha", "GovernanceRuleKey", "RuleThenIndexes", "RuleWhenIndexes", "RepositoryKeys", "ModuleKeys", "Paths", "RiskLevel"], ["CompoundMaterialChange", "PartialMaterialChangeKeys", "PartialMaterialChanges", "OrderByValue", "MaterialChange", "EntityId", "Key", "SourceCommitSha", "TargetCommitSha", "GovernanceRuleKey", "RuleThenIndexes", "RuleWhenIndexes", "RepositoryKeys", "ModuleKeys", "Dismissed", "Paths", "IsPartial", "RiskLevel", "GetMatchingModules", "GetHashCode", "ToString"], ["System.Collections.Generic", "System.Linq", "JetBrains.Annotations", "MongoDB.Bson.Serialization.Attributes"], false, false, [], false, false, [], {}, ["UsedImplicitly", "BsonIgnore", "JsonIgnore", "BsonId", "MongoIndex", "BsonRepresentation"], 16, false, true, true, 3, 0.14285714285714285, [], 51.523809523809526, 0, 0.0, 90.47619047619048, 2, 0, false, false, false, false, "public", false, ["Lim.Common.DotNET.Module.AnyPathUnderModuleRoot"], ["Guid.NewGuid()\n            .ToString", "Guid.NewGuid", "moduleKeys.Where(moduleKey => Module.AnyPathUnderModuleRoot(moduleKey, Paths))\n                .ToHashSet", "moduleKeys.Where", "(\n            SourceCommitSha,\n            TargetCommitSha,\n            GovernanceRuleKey,\n            RuleThenIndexes.GetSetAggregatedValuesHash()\n        ).GetHashCode", "RuleThenIndexes.GetSetAggregatedValuesHash", "GetType().GetDisplayName", "GetType", "RuleThenIndexes.JoinToString", "materialChanges.Select(materialChange => materialChange.Key)\n                .ToList", "materialChanges.Select"], false, false, false, false, [""], false, 16, 14, [], false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, true, 0, 0, true], ["DependencyMaterialChange", "Lim.Common.DotNET.DependencyMaterialChange", ["Lim.Common.DotNET.MaterialChange"], [], "src/Lim.Common.DotNET/Entities/MaterialChanges/DependencyMaterialChange.cs", 6, 0, {}, ["Dependency", "PreviousVersion", "NewVersion", "Paths", "OrderByValue", "EntityId", "Key", "SourceCommitSha", "TargetCommitSha", "GovernanceRuleKey", "RuleThenIndexes", "RuleWhenIndexes", "RepositoryKeys", "ModuleKeys", "RiskLevel"], ["DependencyMaterialChange", "Dependency", "PreviousVersion", "NewVersion", "Paths", "OrderByValue", "GetHashCode", "ToString", "MaterialChange", "EntityId", "Key", "SourceCommitSha", "TargetCommitSha", "GovernanceRuleKey", "RuleThenIndexes", "RuleWhenIndexes", "RepositoryKeys", "ModuleKeys", "Dismissed", "IsPartial", "RiskLevel", "GetMatchingModules"], ["System.Collections.Generic", "JetBrains.Annotations"], false, false, [], false, false, [], {}, ["UsedImplicitly", "JsonIgnore", "BsonId", "MongoIndex", "BsonRepresentation"], 17, false, true, true, 3, 0.13636363636363635, [], 39.90909090909091, 0, 0.0, 90.9090909090909, 2, 0, false, false, false, false, "public", false, ["Lim.Common.DotNET.MaterialChange.GetHashCode", "Lim.Common.DotNET.MaterialChange.ToString", "Lim.Common.DotNET.Module.AnyPathUnderModuleRoot"], ["(\n            base.GetHashCode(),\n            Dependency,\n            PreviousVersion,\n            NewVersion\n        ).GetHashCode", "Guid.NewGuid()\n            .ToString", "Guid.NewGuid", "moduleKeys.Where(moduleKey => Module.AnyPathUnderModuleRoot(moduleKey, Paths))\n                .ToHashSet", "moduleKeys.Where"], false, false, false, false, [], false, 17, 15, [], false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, true, 0, 0, false], ["ExposedSecretMaterialChange", "Lim.Common.DotNET.ExposedSecretMaterialChange", ["Lim.Common.DotNET.MaterialChange"], [], "src/Lim.Common.DotNET/Entities/MaterialChanges/ExposedSecretMaterialChange.cs", 6, 0, {}, ["ExposedSecret", "Paths", "OrderByValue", "EntityId", "Key", "SourceCommitSha", "TargetCommitSha", "GovernanceRuleKey", "RuleThenIndexes", "RuleWhenIndexes", "RepositoryKeys", "ModuleKeys", "RiskLevel"], ["ExposedSecretMaterialChange", "ExposedSecret", "Paths", "OrderByValue", "GetHashCode", "ToString", "MaterialChange", "EntityId", "Key", "SourceCommitSha", "TargetCommitSha", "GovernanceRuleKey", "RuleThenIndexes", "RuleWhenIndexes", "RepositoryKeys", "ModuleKeys", "Dismissed", "IsPartial", "RiskLevel", "GetMatchingModules"], ["System.Collections.Generic", "JetBrains.Annotations"], false, false, [], false, false, [], {}, ["UsedImplicitly", "JsonIgnore", "BsonId", "MongoIndex", "BsonRepresentation"], 15, false, true, true, 3, 0.15, [], 38.1, 0, 0.0, 90.0, 2, 0, false, false, false, false, "public", false, ["Lim.Common.DotNET.MaterialChange.GetHashCode", "Lim.Common.DotNET.MaterialChange.ToString", "Lim.Common.DotNET.Module.AnyPathUnderModuleRoot"], ["(\n            base.GetHashCode(),\n            ExposedSecret\n        ).GetHashCode", "Guid.NewGuid()\n            .ToString", "Guid.NewGuid", "moduleKeys.Where(moduleKey => Module.AnyPathUnderModuleRoot(moduleKey, Paths))\n                .ToHashSet", "moduleKeys.Where"], false, false, false, false, [], false, 15, 13, [], false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, true, 0, 0, false], ["FrameworkUsageMaterialChange", "Lim.Common.DotNET.FrameworkUsageMaterialChange", ["Lim.Common.DotNET.MaterialChange"], [], "src/Lim.Common.DotNET/Entities/MaterialChanges/FrameworkUsageMaterialChange.cs", 7, 0, {}, ["FrameworkType", "AddedFrameworks", "RemovedFrameworks", "AffectedDirectories", "Paths", "OrderByValue", "EntityId", "Key", "SourceCommitSha", "TargetCommitSha", "GovernanceRuleKey", "RuleThenIndexes", "RuleWhenIndexes", "RepositoryKeys", "ModuleKeys", "RiskLevel"], ["FrameworkUsageMaterialChange", "FrameworkType", "AddedFrameworks", "RemovedFrameworks", "AffectedDirectories", "Paths", "OrderByValue", "GetHashCode", "ToString", "MaterialChange", "EntityId", "Key", "SourceCommitSha", "TargetCommitSha", "GovernanceRuleKey", "RuleThenIndexes", "RuleWhenIndexes", "RepositoryKeys", "ModuleKeys", "Dismissed", "IsPartial", "RiskLevel", "GetMatchingModules"], ["System.Collections.Generic", "Infrastructure.Dotnet.Common", "JetBrains.Annotations"], false, false, [], false, false, [], {}, ["UsedImplicitly", "JsonIgnore", "BsonId", "MongoIndex", "BsonRepresentation"], 18, false, true, true, 3, 0.13043478260869565, [], 53.91304347826087, 0, 0.0, 91.30434782608695, 2, 0, false, false, false, false, "public", false, ["Lim.Common.DotNET.MaterialChange.GetHashCode", "Lim.Common.DotNET.Module.AnyPathUnderModuleRoot"], ["(\n            base.GetHashCode(),\n            FrameworkType,\n            AddedFrameworks.GetSetAggregatedValuesHash(),\n            RemovedFrameworks.GetSetAggregatedValuesHash(),\n            AffectedDirectories.GetSetAggregatedValuesHash()\n        ).GetHashCode", "AddedFrameworks.GetSetAggregatedValuesHash", "RemovedFrameworks.GetSetAggregatedValuesHash", "AffectedDirectories.GetSetAggregatedValuesHash", "AddedFrameworks.JoinToString", "RemovedFrameworks.JoinToString", "Guid.NewGuid()\n            .ToString", "Guid.NewGuid", "moduleKeys.Where(moduleKey => Module.AnyPathUnderModuleRoot(moduleKey, Paths))\n                .ToHashSet", "moduleKeys.Where"], false, false, false, false, [], false, 18, 16, [], false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, true, 0, 0, false], ["LicenseMaterialChange", "Lim.Common.DotNET.LicenseMaterialChange", ["Lim.Common.DotNET.MaterialChange"], [], "src/Lim.Common.DotNET/Entities/MaterialChanges/LicenseMaterialChange.cs", 8, 0, {}, ["LicenseName", "Dependencies", "Paths", "OrderByValue", "EntityId", "Key", "SourceCommitSha", "TargetCommitSha", "GovernanceRuleKey", "RuleThenIndexes", "RuleWhenIndexes", "RepositoryKeys", "ModuleKeys", "RiskLevel"], ["LicenseMaterialChange", "LicenseName", "Dependencies", "Paths", "OrderByValue", "GetHashCode", "ToString", "MaterialChange", "EntityId", "Key", "SourceCommitSha", "TargetCommitSha", "GovernanceRuleKey", "RuleThenIndexes", "RuleWhenIndexes", "RepositoryKeys", "ModuleKeys", "Dismissed", "IsPartial", "RiskLevel", "GetMatchingModules"], ["System.Collections.Generic", "System.Linq", "Infrastructure.Dotnet.Common", "JetBrains.Annotations"], false, false, [], false, false, [], {}, ["UsedImplicitly", "JsonIgnore", "BsonId", "MongoIndex", "BsonRepresentation"], 16, false, true, true, 3, 0.14285714285714285, [], 41.95238095238095, 0, 0.0, 90.47619047619048, 2, 0, false, false, false, false, "public", false, ["Lim.Common.DotNET.MaterialChange.GetHashCode", "Lim.Common.DotNET.Module.AnyPathUnderModuleRoot"], ["Dependencies.Select(dependency => dependency.CodeReference.RelativeFilePath)\n            .ToHashSet", "Dependencies.Select", "(\n            base.GetHashCode(),\n            LicenseName,\n            Dependencies.GetAggregatedValuesHash()\n        ).GetHashCode", "Dependencies.GetAggregatedValuesHash", "Guid.NewGuid()\n            .ToString", "Guid.NewGuid", "moduleKeys.Where(moduleKey => Module.AnyPathUnderModuleRoot(moduleKey, Paths))\n                .ToHashSet", "moduleKeys.Where"], false, false, false, false, [], false, 16, 14, [], false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, true, 0, 0, false], ["MaterialChange", "Lim.Common.DotNET.MaterialChange", [], [], "src/Lim.Common.DotNET/Entities/MaterialChanges/MaterialChange.cs", 12, 0, {}, ["EntityId", "Key", "SourceCommitSha", "TargetCommitSha", "GovernanceRuleKey", "RuleThenIndexes", "RuleWhenIndexes", "RepositoryKeys", "ModuleKeys", "Paths", "OrderByValue", "RiskLevel"], ["MaterialChange", "EntityId", "Key", "SourceCommitSha", "TargetCommitSha", "GovernanceRuleKey", "RuleThenIndexes", "RuleWhenIndexes", "RepositoryKeys", "ModuleKeys", "Dismissed", "Paths", "OrderByValue", "IsPartial", "RiskLevel", "GetMatchingModules", "GetHashCode", "ToString"], ["System", "System.Collections.Generic", "System.Linq", "Infrastructure.Dotnet.Common", "JetBrains.Annotations", "MongoDB.Bson", "MongoDB.Bson.Serialization.Attributes", "Newtonsoft.Json"], false, false, ["MongoCollection"], false, false, [], {}, ["UsedImplicitly", "JsonIgnore", "BsonId", "MongoIndex", "BsonIgnore", "BsonRepresentation"], 14, false, true, true, 2, 0.1111111111111111, [], 48.333333333333336, 0, 0.0, 88.88888888888889, 1, 0, false, true, false, false, "public", false, ["Lim.Common.DotNET.Module.AnyPathUnderModuleRoot", "Lim.Common.DotNET.GovernanceRule.GetRelevantRisk"], ["Guid.NewGuid()\n            .ToString", "Guid.NewGuid", "moduleKeys.Where(moduleKey => Module.AnyPathUnderModuleRoot(moduleKey, Paths))\n                .ToHashSet", "moduleKeys.Where", "(\n            SourceCommitSha,\n            TargetCommitSha,\n            GovernanceRuleKey,\n            RuleThenIndexes.GetSetAggregatedValuesHash()\n        ).GetHashCode", "RuleThenIndexes.GetSetAggregatedValuesHash", "GetType().GetDisplayName", "GetType", "RuleThenIndexes.JoinToString"], false, false, false, false, ["materialChanges"], false, 14, 12, [], false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, true, 0, 0, true], ["MethodInputValidationMaterialChange", "Lim.Common.DotNET.MethodInputValidationMaterialChange", ["???.CodeMaterialChange<ApiMethodCodeReference>"], [], "src/Lim.Common.DotNET/Entities/MaterialChanges/MethodInputValidationMaterialChange.cs", 6, 0, {}, ["Violation", "Modifications", "OrderByValue"], ["MethodInputValidationMaterialChange", "Violation", "Modifications", "OrderByValue"], ["System.Collections.Generic", "JetBrains.Annotations"], false, false, [], false, false, [], {}, ["UsedImplicitly"], 3, false, false, false, 1, 0.25, [], 24.5, 0, 0.0, 100.0, 1, 0, false, false, false, false, "public", false, [], [], false, false, false, false, [], false, 3, 2, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, false], ["MethodsAndClassMaterialChange", "Lim.Common.DotNET.MethodsAndClassMaterialChange", ["???.CodeMaterialChange<ApiMethodCodeReference>"], [], "src/Lim.Common.DotNET/Entities/MaterialChanges/MethodsAndClassMaterialChange.cs", 7, 0, {}, ["ClassId", "ReferencedFieldsCodeReference", "Paths", "OrderByValue"], ["MethodsAndClassMaterialChange", "ClassId", "ReferencedFieldsCodeReference", "Paths", "OrderByValue", "GetHashCode", "ToString"], ["System.Collections.Generic", "System.Linq", "JetBrains.Annotations"], false, false, [], false, false, [], {}, ["UsedImplicitly"], 4, false, true, true, 1, 0.14285714285714285, [], 46.285714285714285, 0, 0.0, 85.71428571428571, 1, 0, false, false, false, false, "public", false, ["Lim.Common.DotNET.CodeMaterialChange<Lim.Common.DotNET.ApiMethodCodeReference>.GetHashCode", "Lim.Common.DotNET.CodeMaterialChange<Lim.Common.DotNET.ApiMethodCodeReference>.ToString"], ["base.Paths.Append(ReferencedFieldsCodeReference.RelativeFilePath)\n            .ToHashSet", "base.Paths.Append", "(\n            base.GetHashCode(),\n            ReferencedFieldsCodeReference\n        ).GetHashCode"], false, false, false, false, [], false, 4, 2, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, false], ["MethodsMaterialChange", "Lim.Common.DotNET.MethodsMaterialChange", ["???.CodeMaterialChange<ApiMethodsCodeReference>"], [], "src/Lim.Common.DotNET/Entities/MaterialChanges/MethodsMaterialChange.cs", 5, 0, {}, ["OrderByValue"], ["MethodsMaterialChange", "OrderByValue"], ["System.Collections.Generic"], false, false, [], false, false, [], {}, [], 1, false, false, false, 1, 0.5, [], 10.0, 10, 0.0, 100.0, 1, 0, false, false, false, false, "public", false, [], [], false, false, false, false, [], false, 1, 0, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, false], ["NewDeveloperCommitMaterialChange", "Lim.Common.DotNET.NewDeveloperCommitMaterialChange", ["Lim.Common.DotNET.MaterialChange"], [], "src/Lim.Common.DotNET/Entities/MaterialChanges/NewDeveloperCommitMaterialChange.cs", 7, 0, {}, ["AuthorIdentityKey", "AuthorFirstActivityDate", "CommitDate", "OrderByValue", "EntityId", "Key", "SourceCommitSha", "TargetCommitSha", "GovernanceRuleKey", "RuleThenIndexes", "RuleWhenIndexes", "RepositoryKeys", "ModuleKeys", "Paths", "RiskLevel"], ["NewDeveloperCommitMaterialChange", "AuthorIdentityKey", "AuthorFirstActivityDate", "CommitDate", "OrderByValue", "MaterialChange", "EntityId", "Key", "SourceCommitSha", "TargetCommitSha", "GovernanceRuleKey", "RuleThenIndexes", "RuleWhenIndexes", "RepositoryKeys", "ModuleKeys", "Dismissed", "Paths", "IsPartial", "RiskLevel", "GetMatchingModules", "GetHashCode", "ToString"], ["System", "System.Collections.Generic", "JetBrains.Annotations"], false, false, [], false, false, [], {}, ["UsedImplicitly", "JsonIgnore", "BsonId", "MongoIndex", "BsonIgnore", "BsonRepresentation"], 17, false, true, true, 3, 0.13636363636363635, [], 47.31818181818182, 0, 0.0, 90.9090909090909, 2, 0, false, false, false, false, "public", false, ["Lim.Common.DotNET.Module.AnyPathUnderModuleRoot"], ["Guid.NewGuid()\n            .ToString", "Guid.NewGuid", "moduleKeys.Where(moduleKey => Module.AnyPathUnderModuleRoot(moduleKey, Paths))\n                .ToHashSet", "moduleKeys.Where", "(\n            SourceCommitSha,\n            TargetCommitSha,\n            GovernanceRuleKey,\n            RuleThenIndexes.GetSetAggregatedValuesHash()\n        ).GetHashCode", "RuleThenIndexes.GetSetAggregatedValuesHash", "GetType().GetDisplayName", "GetType", "RuleThenIndexes.JoinToString"], false, false, false, false, [], false, 17, 15, [], false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, true, 0, 0, false], ["TerraformMaterialChange", "Lim.Common.DotNET.TerraformMaterialChange", ["Lim.Common.DotNET.MaterialChange"], [], "src/Lim.Common.DotNET/Entities/MaterialChanges/TerraformMaterialChange.cs", 6, 0, {}, ["InfrastructureChangeTitle", "TerraformDirectoryPath", "AddedResources", "RemovedResources", "ChangedResources", "AddedModules", "RemovedModules", "ChangedModules", "Paths", "OrderByValue", "EntityId", "Key", "SourceCommitSha", "TargetCommitSha", "GovernanceRuleKey", "RuleThenIndexes", "RuleWhenIndexes", "RepositoryKeys", "ModuleKeys", "RiskLevel"], ["TerraformMaterialChange", "InfrastructureChangeTitle", "TerraformDirectoryPath", "AddedResources", "RemovedResources", "ChangedResources", "AddedModules", "RemovedModules", "ChangedModules", "Paths", "OrderByValue", "ToString", "MaterialChange", "EntityId", "Key", "SourceCommitSha", "TargetCommitSha", "GovernanceRuleKey", "RuleThenIndexes", "RuleWhenIndexes", "RepositoryKeys", "ModuleKeys", "Dismissed", "IsPartial", "RiskLevel", "GetMatchingModules", "GetHashCode"], ["System.Collections.Generic", "JetBrains.Annotations"], false, false, [], false, false, [], {}, ["UsedImplicitly", "JsonIgnore", "BsonId", "MongoIndex", "BsonRepresentation"], 22, false, true, true, 3, 0.1111111111111111, [], 45.81481481481482, 0, 0.0, 92.5925925925926, 2, 0, false, false, false, false, "public", false, ["Lim.Common.DotNET.MaterialChange.ToString", "Lim.Common.DotNET.Module.AnyPathUnderModuleRoot"], ["Guid.NewGuid()\n            .ToString", "Guid.NewGuid", "moduleKeys.Where(moduleKey => Module.AnyPathUnderModuleRoot(moduleKey, Paths))\n                .ToHashSet", "moduleKeys.Where", "(\n            SourceCommitSha,\n            TargetCommitSha,\n            GovernanceRuleKey,\n            RuleThenIndexes.GetSetAggregatedValuesHash()\n        ).GetHashCode", "RuleThenIndexes.GetSetAggregatedValuesHash"], false, false, false, false, [], false, 22, 20, [], false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, true, 0, 0, false], ["TerraformModuleReferenceMaterialChangeData", "Lim.Common.DotNET.TerraformModuleReferenceMaterialChangeData", [], [], "src/Lim.Common.DotNET/Entities/MaterialChanges/TerraformModuleReferenceMaterialChangeData.cs", 8, 0, {}, ["Key", "ReferencePath", "ModuleDirectory", "RelevantResources"], ["TerraformModuleReferenceMaterialChangeData", "Key", "ReferencePath", "ModuleDirectory", "RelevantResources"], ["System", "System.Collections.Generic", "System.Linq", "JetBrains.Annotations"], false, false, [], false, false, [], {}, ["UsedImplicitly"], 4, false, false, false, 2, 0.3333333333333333, [], 89.33333333333333, 0, 0.0, 100.0, 2, 0, false, false, false, false, "public", false, [], ["fieldSelector(terraformModuleReference.TerraformHighlights)\n                .ToHashSet", "fieldSelector", "relevantResources.ToHashSet"], false, false, false, false, [], false, 4, 4, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, false], ["MessagingChannel", "Lim.Common.DotNET.MessagingChannel", [], [], "src/Lim.Common.DotNET/Entities/MessagingChannel.cs", 6, 0, {}, ["Key", "ChannelId", "ChannelName", "ChannelUrl", "ServerId"], ["Key", "ChannelId", "ChannelName", "ChannelUrl", "ServerId", "Joined"], ["JetBrains.Annotations", "MongoDB.Bson.Serialization.Attributes"], false, false, ["MongoCollection"], false, false, [], {}, ["BsonId", "UsedImplicitly", "BsonIgnoreIfNull"], 5, false, false, false, 1, 0.16666666666666666, [], 5.333333333333333, 0, 0.0, 100.0, 0, 0, false, false, false, false, "public", false, ["Lim.Common.DotNET.CompositeKey.Create"], [], false, false, false, false, ["messagingChannels"], false, 5, 4, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, 0, 0, true], ["MethodInputValidationViolation", "Lim.Common.DotNET.MethodInputValidationViolation", [], [], "src/Lim.Common.DotNET/Entities/MethodInputValidationViolation.cs", 7, 0, {}, ["ParameterNames", "UnvalidatedParameters"], ["MethodInputValidationViolation", "ParameterNames", "UnvalidatedParameters", "GetHashCode"], ["System.Collections.Generic", "Infrastructure.Dotnet.Common", "JetBrains.Annotations"], false, false, ["UsedImplicitly"], false, false, [], {}, ["UsedImplicitly"], 2, false, false, true, 1, 0.25, [], 62.25, 62, 0.0, 100.0, 1, 0, false, false, false, false, "public", false, [], ["(\n            ParameterNames,\n            UnvalidatedParameters?.GetAggregatedValuesHash()\n        ).GetHashCode", ".GetAggregatedValuesHash"], false, false, false, false, [], false, 2, 2, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, false], ["Module", "Lim.Common.DotNET.Module", [], [], "src/Lim.Common.DotNET/Entities/Module.cs", 8, 0, {}, ["Name", "Root", "RepositoryKey", "Type"], ["Name", "Root", "RepositoryKey", "Type", "GetHashCode", "Equals", "ToString", "PathUnderModuleRoot", "AnyPathUnderModuleRoot", "PathsUnderModuleRoot"], ["System.Collections.Generic", "System.Linq", "MongoDB.Bson", "MongoDB.Bson.Serialization.Attributes"], false, false, [], false, false, [], {}, ["BsonRepresentation"], 4, true, true, true, 3, 0.2727272727272727, [], 99.54545454545455, 77, 27.272727272727273, 90.9090909090909, 0, 0, false, false, false, false, "public", false, [], ["(\n            Name,\n            Root,\n            Type\n        ).GetHashCode", "ReferenceEquals", "other.GetType", "GetType", "nameof", "PathsUnderModuleRoot(moduleRoot, paths)\n                .Any", "string.IsNullOrEmpty", "path.TrimStart('/')\n                    .StartsWith", "path.TrimStart"], false, false, false, false, [], false, 4, 4, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, 0, 0, true], ["OrganizationProfile", "Lim.Common.DotNET.OrganizationProfile", [], [], "src/Lim.Common.DotNET/Entities/OrganizationProfile.cs", 7, 0, {"SingletonKey": "string"}, ["Key", "Languages", "Licenses", "Technologies", "RiskStatistics"], ["Key", "Languages", "Licenses", "Technologies", "HasApiClassification", "ConnectedToVulnerabilitiesScanner", "RiskStatistics"], ["System.Collections.Generic", "JetBrains.Annotations", "MongoDB.Bson.Serialization.Attributes"], false, false, ["MongoCollection"], false, false, [], {"SingletonKey": []}, ["BsonId", "UsedImplicitly", "BsonSerializer"], 7, false, false, false, 0, 0.0, [], 0.0, 0, 0.0, 100.0, 0, 0, false, false, false, false, "public", false, [], [], false, false, false, false, ["organizationProfile", "1"], false, 7, 6, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, 0, 0, true], ["PeriodicRiskStatistics", "Lim.Common.DotNET.PeriodicRiskStatistics", [], [], "src/Lim.Common.DotNET/Entities/PeriodicRiskStatistics.cs", 5, 0, {}, ["Date", "CommitSha", "StatisticsByRiskLevel"], ["Date", "CommitSha", "StatisticsByRiskLevel"], ["System.Collections.Generic"], false, false, [], false, false, [], {}, [], 3, false, false, false, 0, 0.0, [], 0.0, 0, 0.0, 100.0, 0, 0, false, false, false, false, "public", false, [], [], false, false, false, false, [], false, 3, 3, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, false], ["Profile", "Lim.Common.DotNET.Profile", [], [], "src/Lim.Common.DotNET/Entities/Profile.cs", 6, 0, {}, ["Key"], ["Profile", "Key", "ToString", "GetHashCode"], ["JetBrains.Annotations", "MongoDB.Bson.Serialization.Attributes"], false, false, [], false, false, [], {}, ["BsonId", "UsedImplicitly"], 1, false, true, true, 1, 0.25, [], 18.5, 21, 0.0, 75.0, 1, 0, false, true, false, false, "public", false, [], ["Key.GetHashCode"], false, false, false, false, [], false, 1, 1, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, 0, 0, true], ["Project", "Lim.Common.DotNET.Project", ["Lim.Common.DotNET.BaseConsumableEntity"], [], "src/Lim.Common.DotNET/Entities/Project.cs", 8, 0, {}, ["Key", "Name", "IssueTypes", "DefaultIssueTypeId", "LastIssueOrdinalId", "LastScannedIssueRevision", "Id", "NameLower", "Type", "ServerUrl", "Server", "Url", "EstimatedInterestScore", "InterestScore"], ["Key", "Name", "IssueTypes", "DefaultIssueTypeId", "LastIssueOrdinalId", "LastScannedIssueRevision", "ToString", "GetHashCode", "AssociatedProjectsForRepositories", "Id", "NameLower", "Type", "ServerUrl", "Server", "Url", "IsMonitored", "IsRelevant", "IsDeleted", "EstimatedInterestScore", "InterestScore", "Equals"], ["System", "System.Collections.Generic", "System.Linq", "Infrastructure.Dotnet.Common"], false, false, ["MongoCollection", "ConsumableType"], false, false, [], {}, ["Filterable", "MongoIndex", "BsonSkipSetterCheckAttribute", "UsedImplicitly", "BsonIgnore", "BsonSerializer", "JsonIgnore"], 17, true, true, true, 1, 0.047619047619047616, [], 64.23809523809524, 0, 4.761904761904762, 100.0, 0, 0, false, false, false, false, "public", false, ["Lim.Common.DotNET.CompositeKey.Create", "Lim.Common.DotNET.BaseConsumableEntity.GetHashCode", "Lim.Common.DotNET.ProviderExtensions.Provides"], ["hashCode.Add", "IssueTypes.GetSetAggregatedValuesHash", "hashCode.ToHashCode", "repositories\n                .GroupBy(repository => repository.ServerUrl)\n                .ToDictionary", "repositories\n                .GroupBy", "group.SelectMany(repository => repository.AssociatedProjectIds)\n                        .ToHashSet", "group.SelectMany", "projects.Where(\n                    project => project.Server.Provider.Provides(Consumable.Repositories)\n                        ? associatedProjectIdsByServer.TryGetValue(project.ServerUrl, out var associatedProjectIds) &&\n                          associatedProjectIds.Contains(project.Id)\n                        : associatedProjectIdsByServer.Values.Any(associatedProjectIds => associatedProjectIds.Contains(project.Id))\n                )\n                .ToList", "projects.Where", "associatedProjectIdsByServer.TryGetValue", "associatedProjectIds.Contains", "associatedProjectIdsByServer.Values.Any", "Name.ToLower", "GetType", "other.GetType", "string.Equals"], false, false, false, false, ["projects"], false, 17, 13, [], false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, true, 0, 0, false], ["ProjectProfile", "Lim.Common.DotNET.ProjectProfile", ["???.ConsumableProfile<Project>"], [], "src/Lim.Common.DotNET/Entities/ProjectProfile.cs", 11, 0, {"SearchFields": "System.Collections.Generic.HashSet<TableFilter>"}, ["Project", "IssuesCount", "OpenIssuesCount", "RepositoryCount", "RepositoryKeys", "InventoryBadges", "CweBadges", "Name"], ["ProjectProfile", "Project", "IssuesCount", "OpenIssuesCount", "RepositoryCount", "RepositoryKeys", "InventoryBadges", "CweBadges", "Name", "EmptyProfileFor", "GetInventoryBadges", "GetHashCode"], ["System", "System.Collections.Generic", "System.Linq", "Infrastructure.Dotnet.Common", "JetBrains.Annotations", "MongoDB.Bson.Serialization.Attributes", "Newtonsoft.Json"], false, false, ["MongoCollection"], false, false, [], {"SearchFields": []}, ["BsonSerializer", "UsedImplicitly", "BsonIgnore", "JsonIgnore", "Filterable"], 8, false, false, true, 3, 0.25, [], 151.83333333333334, 0, 8.333333333333334, 100.0, 1, 0, false, false, false, false, "public", false, ["Lim.Common.DotNET.ConsumableProfile<Lim.Common.DotNET.Project>.GetHashCode", "Lim.Common.DotNET.ConsumableRisk.CombineWith", "Lim.Common.DotNET.RepositoryProfile.GetInventoryBadges"], ["Array.Empty<DeveloperRepositoryProfile>", "Array.Empty<DeveloperProjectProfile>", "Array.Empty<RepositoryProfile>", "hashCode.Add", "RepositoryKeys.GetSetAggregatedValuesHash", "InventoryBadges.GetSetAggregatedValuesHash", "CweBadges.GetSetAggregatedValuesHash", "hashCode.ToHashCode", "developerRepositoryProfiles.Select(_ => _.DeveloperKey)\n                    .Union(developerProjectProfiles.Select(_ => _.DeveloperKey))\n                    .ToHashSet", "developerRepositoryProfiles.Select(_ => _.DeveloperKey)\n                    .Union", "developerRepositoryProfiles.Select", "developerProjectProfiles.Select", "repositoryProfiles.SelectMany(profile => profile.Repository.Languages ?? new HashSet<Language>())\n                    .ToHashSet", "repositoryProfiles.SelectMany", "developerProjectProfiles.Any", "developerProjectProfiles.Where(profile => profile.ActiveSince != default)\n                        .Min", "developerProjectProfiles.Where", "developerProjectProfiles\n                    .Count", "repositoryProfiles.Select(profile => profile.Key)\n                .ToHashSet", "repositoryProfiles.Select", "repositoryProfiles.Aggregate", "repositoryProfiles.SelectMany(profile => profile.GetInventoryBadges())\n                .ToHashSet", "repositoryProfiles.SelectMany(profile => profile.CweBadges)\n                .ToHashSet", "developerProjectProfiles.Where(profile => profile.LastActivity != default)\n                    .Max"], false, false, false, false, ["projectProfiles"], false, 8, 7, [], false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, true, 0, 0, true], ["ProvidersMapping", "Lim.Common.DotNET.ProvidersMapping", [], [], "src/Lim.Common.DotNET/Entities/Provider.cs", 62, 0, {"ProviderGroupToProviders": "System.Collections.Generic.IReadOnlyDictionary<ProviderGroup, (Provider cloud, Provider? onPrem)>"}, [], [], ["System.Collections.Generic", "Infrastructure.Dotnet.Common"], false, false, [], false, false, [], {"ProviderGroupToProviders": []}, [], 0, false, false, false, 0, 0.0, [], 0.0, 0, 0.0, 0.0, 0, 0, false, false, true, false, "public", false, [], [], false, false, false, false, [], false, 0, 0, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, false], ["ProviderExtensions", "Lim.Common.DotNET.ProviderExtensions", [], [], "src/Lim.Common.DotNET/Entities/Provider.cs", 78, 0, {}, [], ["Provides"], ["System.Collections.Generic", "Infrastructure.Dotnet.Common"], false, false, [], false, false, [], {}, [], 0, false, false, false, 1, 1.0, [], 189.0, 189, 100.0, 100.0, 0, 0, false, false, true, false, "public", false, [], ["provider.GetCustomAttribute<Provider, ProvidesAttribute>", "attribute.Provided.Contains"], false, false, false, false, [], false, 0, 0, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, false], ["PullRequest", "Lim.Common.DotNET.PullRequest", [], ["Lim.Common.DotNET.IPullRequestMutableDetails"], "src/Lim.Common.DotNET/Entities/PullRequest.cs", 8, 0, {}, ["Key", "Id", "OrdinalId", "RepositoryKey", "CreationTime", "AuthorIdentityKey", "FromBranch", "ToBranch", "ContainedCommitsSha", "Title", "ReviewersIdentitiesKeys", "Comments", "IssuesKeysByProjectId"], ["Key", "Id", "OrdinalId", "RepositoryKey", "CreationTime", "AuthorIdentityKey", "FromBranch", "ToBranch", "ContainedCommitsSha", "Title", "ReviewersIdentitiesKeys", "IsOpen", "Comments", "IssuesKeysByProjectId", "GetPullRequestKey"], ["System", "System.Collections.Generic", "JetBrains.Annotations", "MongoDB.Bson.Serialization.Attributes"], false, false, ["MongoCollection"], false, false, [], {}, ["UsedImplicitly", "BsonId", "BsonDateTimeOptions", "MongoIndex"], 14, false, false, false, 2, 0.125, [], 8.0, 0, 12.5, 93.75, 0, 0, false, false, false, false, "public", false, ["Lim.Common.DotNET.CompositeKey.Create"], [], false, false, false, false, ["pullRequests"], false, 14, 13, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, 0, 0, true], ["Release", "Lim.Common.DotNET.Release", [], [], "src/Lim.Common.DotNET/Entities/Release.cs", 9, 0, {}, ["Key", "Name", "OwnerName", "Baseline", "Candidate", "CandidateBranchCommitShas", "RepositoryKey", "Status", "CreatedAt", "GeneratedAt", "MaterialChangeLabels", "DeveloperIdentitiesKeys"], ["Key", "Name", "OwnerName", "Baseline", "Candidate", "CandidateBranchCommitShas", "RepositoryKey", "Status", "IsCloned", "CreatedAt", "GeneratedAt", "MaterialChangeLabels", "DeveloperIdentitiesKeys", "ToString"], ["System", "System.Collections.Generic", "JetBrains.Annotations", "MongoDB.Bson.Serialization.Attributes", "Newtonsoft.Json"], false, false, ["MongoCollection"], false, false, [], {}, ["BsonId", "UsedImplicitly", "MongoIndex", "BsonSerializer", "JsonIgnore", "JsonProperty", "BsonDateTimeOptions"], 13, false, true, false, 0, 0.0, [], 6.285714285714286, 0, 0.0, 100.0, 0, 0, false, false, false, false, "public", false, [], ["Guid.NewGuid()\n            .ToString", "Guid.NewGuid"], false, false, false, false, ["releases", "createdAt"], true, 13, 13, [], false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, true, 0, 0, true], ["ReleaseSide", "Lim.Common.DotNET.ReleaseSide", [], [], "src/Lim.Common.DotNET/Entities/ReleaseSide.cs", 7, 0, {}, ["Identifier", "CommitSha", "RefType", "Risk", "Badges"], ["Identifier", "CommitSha", "RefType", "Risk", "Badges", "ToString"], ["System.Collections.Generic", "System.ComponentModel.DataAnnotations", "MongoDB.Bson.Serialization.Attributes"], false, false, [], false, false, [], {}, ["RegularExpression", "BsonSerializer"], 5, false, true, false, 0, 0.0, [], 8.833333333333334, 0, 0.0, 100.0, 0, 0, false, false, false, false, "public", false, [], [], false, false, false, false, ["^[0-9a-f]{40}$"], false, 5, 5, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, 0, 0, true], ["Repository", "Lim.Common.DotNET.Repository", ["Lim.Common.DotNET.BaseConsumableEntity"], [], "src/Lim.Common.DotNET/Entities/Repository.cs", 11, 0, {}, ["ProjectId", "ProjectUrl", "Name", "Key", "HttpCloneUrl", "DefaultBranch", "AssociatedProjectIds", "Languages", "LastPullRequestOrdinalId", "Id", "NameLower", "Type", "ServerUrl", "Server", "Url", "EstimatedInterestScore", "InterestScore"], ["ProjectId", "ProjectUrl", "Name", "Key", "HttpCloneUrl", "IsPreScanned", "IsCloned", "DefaultBranch", "AssociatedProjectIds", "Languages", "LastPullRequestOrdinalId", "FirstCycleCompleted", "DeveloperScanCompleted", "IsAssociatedWithProject", "IsAssociatedWithProjectExpression", "GetHashCode", "Id", "NameLower", "Type", "ServerUrl", "Server", "Url", "IsMonitored", "IsRelevant", "IsDeleted", "EstimatedInterestScore", "InterestScore", "ToString", "Equals"], ["System", "System.Collections.Generic", "System.Linq.Expressions", "Infrastructure.Dotnet.Common", "JetBrains.Annotations", "MongoDB.Bson.Serialization.Attributes", "Newtonsoft.Json"], false, false, ["MongoCollection", "ConsumableType"], false, false, [], {}, ["Filterable", "UsedImplicitly", "JsonIgnore", "BsonSerializer", "MongoIndex", "BsonSkipSetterCheckAttribute", "BsonIgnore"], 24, true, true, true, 2, 0.06896551724137931, [], 32.10344827586207, 0, 3.4482758620689653, 100.0, 0, 0, false, false, false, false, "public", false, ["Lim.Common.DotNET.CompositeKey.Create", "Lim.Common.DotNET.ProviderExtensions.Provides", "Lim.Common.DotNET.BaseConsumableEntity.GetHashCode"], ["IsAssociatedWithProjectExpression(project)\n                .Compile()", "IsAssociatedWithProjectExpression(project)\n                .Compile", "_.AssociatedProjectIds.Contains", "hashCode.Add", "AssociatedProjectIds.GetSetAggregatedValuesHash", "hashCode.ToHashCode", "Name.ToLower", "GetType", "other.GetType", "string.Equals"], false, false, false, false, ["repositories"], true, 24, 20, [], false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, true, 0, 0, true], ["RepositoryProfile", "Lim.Common.DotNET.RepositoryProfile", ["???.ConsumableProfile<Repository>"], [], "src/Lim.Common.DotNET/Entities/RepositoryProfile.cs", 12, 0, {"SearchFields": "System.Collections.Generic.HashSet<TableFilter>"}, ["Repository", "ParentProjectKey", "ParentProjectName", "ProjectsCount", "CweBadges", "Name", "Key", "CalculatedWithCommitSha", "SecurityChampion", "VulnerabilitiesCountByRisk"], ["RepositoryProfile", "Repository", "ParentProjectKey", "ParentProjectName", "ProjectsCount", "CweBadges", "Name", "Key", "CalculatedWithCommitSha", "SecurityChampion", "VulnerabilitiesCountByRisk", "EmptyProfileFor", "GetInventoryBadges", "GetHashCode"], ["System", "System.Collections.Generic", "System.Linq", "Infrastructure.Dotnet.Common", "JetBrains.Annotations", "MongoDB.Bson.Serialization.Attributes", "MongoDB.Bson.Serialization.Serializers", "Newtonsoft.Json"], false, false, ["MongoCollection"], false, false, [], {"SearchFields": []}, ["BsonSerializer", "UsedImplicitly", "Filterable", "BsonIgnore", "JsonIgnore", "FilterableByJoin"], 10, false, false, true, 3, 0.21428571428571427, [], 136.35714285714286, 0, 7.142857142857143, 100.0, 1, 0, false, false, false, false, "public", false, ["Lim.Common.DotNET.ConsumableProfile<Lim.Common.DotNET.Repository>.GetHashCode", "Lim.Common.DotNET.DeveloperProfile.GetHashCode"], ["badges.Add", "Array.Empty<DeveloperRepositoryProfile>", "hashCode.Add", "CalculatedWithCommitSha.GetAggregatedValuesHash", ".GetAggregatedValuesHash", "hashCode.ToHashCode", "developerRepositoryProfiles.Select(developerRepositoryProfile => developerRepositoryProfile.DeveloperKey)\n                    .ToHashSet", "developerRepositoryProfiles.Select", "developerRepositoryProfiles.Any", "developerRepositoryProfiles.Where(profile => profile.ActiveSince != default)\n                        .Min", "developerRepositoryProfiles.Where", "developerRepositoryProfiles\n                    .Count"], false, false, false, false, ["repositoryProfiles"], false, 10, 9, [], false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, true, 0, 0, true], ["RepositoryProjectProfile", "Lim.Common.DotNET.RepositoryProjectProfile", [], [], "src/Lim.Common.DotNET/Entities/RepositoryProjectProfile.cs", 10, 0, {}, ["RepositoryKey", "ProjectKey", "Key", "IssueCount", "IssueKeys", "PullRequestCount", "PullRequestKeys"], ["RepositoryProjectProfile", "RepositoryKey", "ProjectKey", "Key", "IssueCount", "IssueKeys", "PullRequestCount", "PullRequestKeys", "BuildKey", "ToString"], ["System.Collections.Generic", "System.Linq", "Infrastructure.Dotnet.Common", "JetBrains.Annotations", "MongoDB.Bson.Serialization.Attributes", "Newtonsoft.Json"], false, false, ["MongoCollection"], false, false, [], {}, ["UsedImplicitly", "FilterableByJoin", "BsonId", "JsonIgnore", "BsonSerializer"], 7, false, true, false, 4, 0.3333333333333333, [], 28.416666666666668, 0, 8.333333333333334, 100.0, 3, 0, false, false, false, false, "public", false, ["Lim.Common.DotNET.CompositeKey.Create"], ["issueKeys.GetHashes()\n                .ToHashSet", "issueKeys.GetHashes", "PullRequestKeys.Add", "pullRequestKey.Hash32"], false, false, false, false, ["repositoryProjectProfiles"], false, 7, 6, [], false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, true, 0, 0, true], ["RepositoryRiskStatistics", "Lim.Common.DotNET.RepositoryRiskStatistics", [], [], "src/Lim.Common.DotNET/Entities/RepositoryRiskStatistics.cs", 7, 0, {}, ["RepositoryKey", "CreatedAt", "RiskStatistics"], ["RepositoryKey", "CreatedAt", "RiskStatistics"], ["System", "System.Collections.Generic", "MongoDB.Bson.Serialization.Attributes"], false, false, ["MongoCollection"], false, false, [], {}, ["BsonId"], 3, false, false, false, 0, 0.0, [], 0.0, 0, 0.0, 100.0, 0, 0, false, false, false, false, "public", false, [], [], false, false, false, false, ["repositoryRiskStatistics"], false, 3, 3, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, 0, 0, true], ["ResolvedApiClassification", "Lim.Common.DotNET.ResolvedApiClassification", [], [], "src/Lim.Common.DotNET/Entities/ResolvedApiClassification.cs", 8, 0, {}, ["Key", "FilePath", "Classification", "Urls", "ResolvedCommitSha", "ResolvedAtTime", "RepositoryKey"], ["Key", "FilePath", "Classification", "Urls", "ResolvedCommitSha", "ResolvedAtTime", "RepositoryKey"], ["System", "System.Collections.Generic", "JetBrains.Annotations", "MongoDB.Bson.Serialization.Attributes"], false, false, ["MongoCollection"], false, false, [], {}, ["BsonId", "UsedImplicitly"], 7, false, false, false, 0, 0.0, [], 0.0, 0, 0.0, 100.0, 0, 0, false, false, false, false, "public", false, ["Lim.Common.DotNET.CompositeKey.Create"], [], false, false, false, false, ["resolvedApiClassification"], false, 7, 6, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, 0, 0, true], ["Revisions", "Lim.Common.DotNET.Revisions", [], [], "src/Lim.Common.DotNET/Entities/Revisions.cs", 5, 0, {"DataStorageRevision": "int", "DatabaseSeederRevision": "int", "CommitWorkflowRevision": "int", "WorkflowProcessRevision": "int", "CommitSyncRevision": "int", "CommitDiffRevision": "int", "CommitPropertiesExtractionRevision": "int", "CommitJavaFeaturesExtractionRevision": "int", "CommitNodeFeaturesExtractionRevision": "int", "CommitTerraformExtractionRevision": "int"}, [], ["TargetFeaturesRevision"], ["System"], false, false, [], false, false, [], {"DataStorageRevision": [], "DatabaseSeederRevision": [], "CommitWorkflowRevision": [], "WorkflowProcessRevision": [], "CommitSyncRevision": [], "CommitDiffRevision": [], "CommitPropertiesExtractionRevision": [], "CommitJavaFeaturesExtractionRevision": [], "CommitNodeFeaturesExtractionRevision": [], "CommitTerraformExtractionRevision": []}, [], 0, false, false, false, 1, 1.0, [], 582.0, 582, 100.0, 100.0, 0, 0, false, false, true, false, "public", false, [], ["nameof"], false, false, false, false, [], false, 0, 0, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, false], ["RiskFactor", "Lim.Common.DotNET.RiskFactor", [], [], "src/Lim.Common.DotNET/Entities/RiskFactor.cs", 8, 0, {}, ["RiskLevel", "Instances", "RiskScore", "RuleName", "ConstraintTypes"], ["RiskFactor", "RiskLevel", "Instances", "RiskScore", "RuleName", "ConstraintTypes", "GetHashCode", "CombineWith"], ["System.Collections.Generic", "Infrastructure.Dotnet.Common", "MongoDB.Bson", "MongoDB.Bson.Serialization.Attributes"], false, false, [], false, false, [], {}, ["BsonRepresentation", "BsonSerializer"], 5, false, false, true, 2, 0.25, [], 72.0, 0, 0.0, 100.0, 1, 0, false, false, false, false, "public", false, ["Lim.Common.DotNET.RiskLevelExtensions.CombineWith"], ["(\n            RiskLevel,\n            Instances,\n            RiskScore,\n            RuleName,\n            ConstraintTypes.GetAggregatedValuesHash()\n        ).GetHashCode", "ConstraintTypes.GetAggregatedValuesHash"], false, false, false, false, [], false, 5, 5, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, 0, 0, true], ["RiskLevelExtensions", "Lim.Common.DotNET.RiskLevelExtensions", [], [], "src/Lim.Common.DotNET/Entities/RiskLevel.cs", 12, 0, {}, [], ["CombineWith"], [], false, false, [], false, false, [], {}, [], 0, false, false, false, 1, 1.0, [], 100.0, 100, 100.0, 100.0, 0, 0, false, false, true, false, "public", false, [], [], false, false, false, false, [], false, 0, 0, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, false], ["RiskStatistics", "Lim.Common.DotNET.RiskStatistics", [], [], "src/Lim.Common.DotNET/Entities/RiskStatistics.cs", 3, 0, {}, ["MaterialChangeCount", "RiskScore"], ["MaterialChangeCount", "RiskScore"], [], false, false, [], false, false, [], {}, [], 2, false, false, false, 0, 0.0, [], 0.0, 0, 0.0, 100.0, 0, 0, false, false, false, false, "public", false, [], [], false, false, false, false, [], false, 2, 2, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, false], ["SecurityConfigurationReference", "Lim.Common.DotNET.SecurityConfigurationReference", [], [], "src/Lim.Common.DotNET/Entities/SecurityConfigurationReference.cs", 7, 0, {}, ["Patterns", "ClassId"], ["Patterns", "ClassId", "GetHashCode"], ["System.Collections.Generic", "Infrastructure.Dotnet.Common", "JetBrains.Annotations"], false, false, [], false, false, [], {}, ["UsedImplicitly"], 2, false, false, true, 0, 0.0, [], 40.333333333333336, 0, 0.0, 100.0, 0, 0, false, false, false, false, "public", false, [], ["(\n                Patterns?.GetAggregatedValuesHash(),\n                ClassId\n            ).GetHashCode", ".GetAggregatedValuesHash"], false, false, false, false, [], false, 2, 2, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, false], ["SecurityScan", "Lim.Common.DotNET.SecurityScan", [], [], "src/Lim.Common.DotNET/Entities/SecurityScan.cs", 9, 0, {}, ["Id", "Provider", "SecurityScansProjectKey", "Vulnerabilities", "ScanTime", "Key"], ["Id", "Provider", "SecurityScansProjectKey", "Vulnerabilities", "ScanTime", "Key", "GetVulnerabilitiesForApi"], ["System", "System.Collections.Generic", "System.Linq", "JetBrains.Annotations", "MongoDB.Bson.Serialization.Attributes"], false, false, ["MongoCollection"], false, false, [], {}, ["MongoIndex", "BsonId", "UsedImplicitly"], 6, false, false, false, 1, 0.14285714285714285, [], 35.285714285714285, 0, 0.0, 100.0, 0, 0, false, false, false, false, "public", false, ["Lim.Common.DotNET.CompositeKey.Create", "Lim.Common.DotNET.CodeReference.Overlaps"], ["Vulnerabilities.Where", "vulnerability.CodeReferences.Any"], false, false, false, false, ["securityScans"], false, 6, 5, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, 0, 0, true], ["SecurityScansProject", "Lim.Common.DotNET.SecurityScansProject", ["Lim.Common.DotNET.BaseConsumableEntity"], [], "src/Lim.Common.DotNET/Entities/SecurityScanProject.cs", 5, 0, {}, ["Key", "Name", "RelatedRepositoryKey", "OptionalRepositoryLink", "LatestScanId", "OptionalRepositoryBranch", "Provider", "ProjectUrl", "Id", "NameLower", "Type", "ServerUrl", "Server", "Url", "EstimatedInterestScore", "InterestScore"], ["Key", "Name", "RelatedRepositoryKey", "OptionalRepositoryLink", "LatestScanId", "OptionalRepositoryBranch", "Provider", "ProjectUrl", "ToString", "Id", "NameLower", "Type", "ServerUrl", "Server", "Url", "IsMonitored", "IsRelevant", "IsDeleted", "EstimatedInterestScore", "InterestScore", "Equals", "GetHashCode"], ["MongoDB.Bson.Serialization.Attributes"], false, false, ["ConsumableType", "MongoCollection"], false, false, [], {}, ["BsonIgnore", "MongoIndex", "BsonSkipSetterCheckAttribute", "UsedImplicitly", "Filterable", "BsonSerializer", "JsonIgnore"], 19, true, true, true, 0, 0.0, [], 21.363636363636363, 0, 0.0, 100.0, 0, 0, false, false, false, false, "public", false, ["Lim.Common.DotNET.CompositeKey.Create"], ["Name.ToLower", "GetType", "other.GetType", "string.Equals", "hashCode.Add", "hashCode.ToHashCode"], false, false, false, false, ["securityScansProjects", ""], false, 19, 14, [], false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, true, 0, 0, true], ["SecurityScanReference", "Lim.Common.DotNET.SecurityScanReference", [], [], "src/Lim.Common.DotNET/Entities/SecurityScanReference.cs", 7, 0, {}, ["Url", "VulnerabilitiesCountByType", "VulnerabilitiesCount", "SecurityScansProvider"], ["Url", "VulnerabilitiesCountByType", "VulnerabilitiesCount", "SecurityScansProvider", "GetHashCode"], ["System", "System.Collections.Generic", "Infrastructure.Dotnet.Common"], false, false, [], false, false, [], {}, [], 4, false, false, true, 0, 0.0, [], 53.0, 0, 0.0, 100.0, 0, 0, false, false, false, false, "public", false, [], ["hashCode.Add", "VulnerabilitiesCountByType.GetAggregatedValuesHash", "hashCode.ToHashCode"], false, false, false, false, [], false, 4, 4, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, false], ["SensitiveFile", "Lim.Common.DotNET.SensitiveFile", ["???.DiffableEntity<SensitiveFile>"], [], "src/Lim.Common.DotNET/Entities/SensitiveFile.cs", 6, 0, {}, ["EntityId", "RelativePath", "Hash", "ZippedContent"], ["SensitiveFile", "EntityId", "RelativePath", "Hash", "ZippedContent", "ToString", "GetHashCode"], ["System", "System.Collections.Generic"], false, false, [], false, false, [], {}, [], 4, false, true, true, 1, 0.14285714285714285, [], 70.14285714285714, 0, 14.285714285714286, 85.71428571428571, 1, 0, false, false, false, false, "public", false, [], ["base.ToString", "nameof", "hashCode.Add", "RelativePath.GetHashCode", "Hash.GetHashCode", "hashCode.ToHashCode"], false, false, false, false, [], false, 4, 4, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, false], ["SensitiveFileMaterialChange", "Lim.Common.DotNET.SensitiveFileMaterialChange", ["Lim.Common.DotNET.MaterialChange"], [], "src/Lim.Common.DotNET/Entities/SensitiveFileMaterialChange.cs", 6, 0, {}, ["OrderByValue", "FilePath", "ChangeType", "EntityId", "Key", "SourceCommitSha", "TargetCommitSha", "GovernanceRuleKey", "RuleThenIndexes", "RuleWhenIndexes", "RepositoryKeys", "ModuleKeys", "Paths", "RiskLevel"], ["SensitiveFileMaterialChange", "OrderByValue", "FilePath", "ChangeType", "ToString", "MaterialChange", "EntityId", "Key", "SourceCommitSha", "TargetCommitSha", "GovernanceRuleKey", "RuleThenIndexes", "RuleWhenIndexes", "RepositoryKeys", "ModuleKeys", "Dismissed", "Paths", "IsPartial", "RiskLevel", "GetMatchingModules", "GetHashCode"], ["System.Collections.Generic", "JetBrains.Annotations"], false, false, [], false, false, [], {}, ["UsedImplicitly", "JsonIgnore", "BsonId", "MongoIndex", "BsonIgnore", "BsonRepresentation"], 16, false, true, true, 3, 0.14285714285714285, [], 44.333333333333336, 0, 0.0, 90.47619047619048, 2, 0, false, false, false, false, "public", false, ["Lim.Common.DotNET.MaterialChange.ToString", "Lim.Common.DotNET.Module.AnyPathUnderModuleRoot"], ["nameof", "Guid.NewGuid()\n            .ToString", "Guid.NewGuid", "moduleKeys.Where(moduleKey => Module.AnyPathUnderModuleRoot(moduleKey, Paths))\n                .ToHashSet", "moduleKeys.Where", "(\n            SourceCommitSha,\n            TargetCommitSha,\n            GovernanceRuleKey,\n            RuleThenIndexes.GetSetAggregatedValuesHash()\n        ).GetHashCode", "RuleThenIndexes.GetSetAggregatedValuesHash"], false, false, false, false, [], false, 16, 14, [], false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, true, 0, 0, false], ["Server", "Lim.Common.DotNET.Server", [], [], "src/Lim.Common.DotNET/Entities/Server.cs", 8, 0, {}, ["Url", "Username", "PasswordSetter", "Password", "RsaPrivateKeyBase64", "Provider"], ["Url", "Username", "PasswordSetter", "HasPassword", "Password", "RsaPrivateKeyBase64", "HasPrivateKey", "Provider", "Removed", "ProvidesRepositories", "ProvidesIssueProjects", "ProvidesSecurityScans", "IsReachable", "Equals", "GetHashCode", "CredentialsHashCode", "ToString"], ["JetBrains.Annotations", "MongoDB.Bson", "MongoDB.Bson.Serialization.Attributes", "Newtonsoft.Json"], false, false, ["MongoCollection"], false, false, [], {}, ["BsonId", "JsonProperty", "BsonIgnore", "UsedImplicitly", "JsonIgnore", "BsonRepresentation"], 13, true, true, true, 1, 0.058823529411764705, [], 25.0, 0, 0.0, 100.0, 0, 0, false, false, false, false, "public", false, ["Lim.Common.DotNET.ProviderExtensions.Provides"], ["string.IsNullOrEmpty", "string.Equals", "Url.GetHashCode", "(\n                Url,\n                Username,\n                Password,\n                RsaPrivateKeyBase64\n            ).GetHashCode"], false, false, false, false, ["servers", "password"], false, 12, 8, [], false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, true, 0, 0, true], ["SlackMessage", "Lim.Common.DotNET.SlackMessage", [], [], "src/Lim.Common.DotNET/Entities/SlackMessage.cs", 3, 0, {}, ["Channel", "Message"], ["Channel", "Message"], [], false, false, [], false, false, [], {}, [], 2, false, false, false, 0, 0.0, [], 0.0, 0, 0.0, 100.0, 0, 0, false, false, false, false, "public", false, [], [], false, false, false, false, [], false, 2, 2, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, false], ["SnapshotDescriptor", "Lim.Common.DotNET.SnapshotDescriptor", [], [], "src/Lim.Common.DotNET/Entities/SnapshotDescriptor.cs", 5, 0, {"CurrentRevision": "int", "AbortMarker": "string", "FileName": "string"}, ["Revision", "ArchiveFileName", "CommitSha", "RepositoryLanguages"], ["Revision", "ArchiveFileName", "CommitSha", "RepositoryLanguages", "IsUpToDate", "IsReleaseBranchTip", "ToString"], ["System.Collections.Generic"], false, false, [], false, false, [], {"CurrentRevision": [], "AbortMarker": [], "FileName": []}, [], 6, false, true, false, 0, 0.0, [], 3.4285714285714284, 0, 0.0, 100.0, 0, 0, false, false, false, false, "public", false, [], ["nameof"], false, false, false, false, ["abort.marker"], false, 6, 5, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, false], ["TableFilterExtensions", "Lim.Common.DotNET.TableFilterExtensions", [], [], "src/Lim.Common.DotNET/Entities/TableFilter.cs", 123, 0, {}, [], ["GetTableFilterGroup", "GetTableSupportedConsumables"], ["System.Collections.Generic", "System.ComponentModel", "Infrastructure.Dotnet.Common"], false, false, [], false, false, [], {}, [], 0, false, false, false, 2, 1.0, [], 143.0, 143, 100.0, 100.0, 0, 0, false, false, true, false, "public", false, [], ["tableFilter.GetCustomAttribute<TableFilter, FilterGroupAttribute>", "tableFilter.GetCustomAttribute<TableFilter, TableSupportedConsumablesAttribute>"], false, false, false, false, [], false, 0, 0, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, false], ["TableSortExtensions", "Lim.Common.DotNET.TableSortExtensions", [], [], "src/Lim.Common.DotNET/Entities/TableSortOption.cs", 71, 0, {}, [], ["GetTableFieldDefaultSort", "GetTableSupportedConsumables"], ["System.Collections.Generic", "System.ComponentModel", "Infrastructure.Dotnet.Common", "MongoDB.Driver"], false, false, [], false, false, [], {}, [], 0, false, false, false, 2, 1.0, [], 171.0, 171, 100.0, 100.0, 0, 0, false, false, true, false, "public", false, [], ["tableSortOption.GetCustomAttribute<TableSortOption, DefaultSortDirectionAttribute>", "tableSortOption.GetCustomAttribute<TableSortOption, TableSupportedConsumablesAttribute>"], false, false, false, false, [], false, 0, 0, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, true], ["RouteParsing", "Lim.Common.DotNET.Utils.RouteParsing", [], [], "src/Lim.Common.DotNET/Entities/Utils/RouteParsing.cs", 7, 0, {"CamelCaseRegex": "System.Text.RegularExpressions.Regex"}, [], ["SplitOnCapitals", "HasIdParams"], ["System.Collections.Generic", "System.Linq", "System.Text.RegularExpressions"], false, false, [], false, false, [], {"CamelCaseRegex": []}, [], 0, false, false, false, 2, 1.0, [], 222.5, 222, 100.0, 50.0, 0, 0, false, false, true, false, "public", false, ["Lim.Common.DotNET.RegexUtils.GetCompiledRegex"], ["CamelCaseRegex.Matches(param)\n                .Select", "CamelCaseRegex.Matches", "routeParams\n                .SelectMany(param => param.Split(\"_\"), (param, paramPart) => new {param, paramPart})\n                .Where(arg => !string.IsNullOrEmpty(arg.paramPart))\n                .SelectMany(t => SplitOnCapitals(char.ToUpper(t.paramPart[0]) + t.paramPart.Substring(1)))\n                .Any", "routeParams\n                .SelectMany(param => param.Split(\"_\"), (param, paramPart) => new {param, paramPart})\n                .Where(arg => !string.IsNullOrEmpty(arg.paramPart))\n                .SelectMany", "routeParams\n                .SelectMany(param => param.Split(\"_\"), (param, paramPart) => new {param, paramPart})\n                .Where", "routeParams\n                .SelectMany", "param.Split", "string.IsNullOrEmpty", "char.ToUpper", "t.paramPart.Substring", "word.ToLower"], false, false, false, false, ["\\p{Lu}\\p{Ll}*", "_", "id"], false, 0, 0, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, false], ["ValueCount", "Lim.Common.DotNET.ValueCount<TEntity>", [], [], "src/Lim.Common.DotNET/Entities/ValueCount.cs", 3, 0, {}, ["Value", "Count"], ["ValueCount", "Value", "Count"], [], false, false, [], false, false, [], {}, [], 2, false, false, false, 1, 0.3333333333333333, [], 24.666666666666668, 0, 0.0, 100.0, 1, 0, false, false, false, false, "public", true, [], [], false, false, false, false, [], false, 2, 0, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, false], ["Vulnerability", "Lim.Common.DotNET.Vulnerability", [], [], "src/Lim.Common.DotNET/Entities/Vulnerability.cs", 8, 0, {}, ["Type", "CodeReferences"], ["Type", "CodeReferences", "GetHashCode"], ["System", "System.Collections.Generic", "System.ComponentModel", "Infrastructure.Dotnet.Common"], false, false, [], false, false, [], {}, [], 2, false, false, true, 0, 0.0, [], 73.0, 0, 0.0, 100.0, 0, 0, false, false, false, false, "public", false, [], ["hashCode.Add", "Type.GetHashCode", "CodeReferences.GetAggregatedValuesHash", "hashCode.ToHashCode"], false, false, false, false, [], false, 2, 2, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, false], ["WorkflowKeys", "Lim.Common.DotNET.WorkflowKeys", [], [], "src/Lim.Common.DotNET/Entities/Workflow.cs", 32, 0, {"MessagingWebhooks": "string"}, [], [], ["System.Collections.Generic", "System.Linq", "Infrastructure.Dotnet.Common", "MongoDB.Bson.Serialization.Attributes"], false, false, [], false, false, [], {"MessagingWebhooks": []}, [], 0, false, false, false, 0, 0.0, [], 0.0, 0, 0.0, 0.0, 0, 0, false, false, true, false, "public", false, [], [], false, false, false, false, ["Webhooks"], false, 0, 0, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, true], ["Workflow", "Lim.Common.DotNET.Workflow", ["Lim.Common.DotNET.BaseRule"], [], "src/Lim.Common.DotNET/Entities/Workflow.cs", 37, 0, {"Error": "Lim.Common.DotNET.WorkflowError"}, ["Error", "Given", "When", "Then", "PartialDisplayName", "FullDisplayName", "Key", "OrdinalId", "Name", "CreatedAt", "RemovedAt", "ReplacedBy"], ["Given", "When", "Then", "BaseDisplayName", "ToString", "WorkflowKeysSpecificToProjects", "KeysSpecificToServer", "PartialDisplayName", "FullDisplayName", "Key", "OrdinalId", "Name", "CreatedAt", "RemovedAt", "ReplacedBy", "HasName", "ValidateConfigurationName"], ["System.Collections.Generic", "System.Linq", "Infrastructure.Dotnet.Common", "MongoDB.Bson.Serialization.Attributes"], false, false, ["MongoCollection"], false, false, [], {"Error": []}, ["BsonSerializer", "BsonIgnore", "BsonId", "MongoIndex", "UsedImplicitly", "JsonProperty", "BsonDateTimeOptions", "BsonIgnoreIfNull", "CanBeNull"], 12, false, true, false, 4, 0.23529411764705882, [], 114.11764705882354, 0, 17.647058823529413, 94.11764705882354, 0, 0, false, false, false, false, "public", false, [], ["Given.JoinToString", "When.JoinToString", "Then.JoinToString", "workflows\n                .Where(\n                    workflow =>\n                        workflow.Then.Any(\n                            then =>\n                                then.Type == WorkflowThenType.Issue &&\n                                projectKeys.Contains(then.Value)\n                        )\n                )\n                .Select(workflow => workflow.Key)\n                .ToHashSet", "workflows\n                .Where(\n                    workflow =>\n                        workflow.Then.Any(\n                            then =>\n                                then.Type == WorkflowThenType.Issue &&\n                                projectKeys.Contains(then.Value)\n                        )\n                )\n                .Select", "workflows\n                .Where", "workflow.Then.Any", "projectKeys.Contains", "workflows\n                .Where(\n                    workflow =>\n                        workflow.Then.Any(\n                            then =>\n                                then.Type == WorkflowThenType.Issue &&\n                                affectedProjectKeys.Contains(then.Value) ||\n                                then.Type == WorkflowThenType.Slack &&\n                                server.Provider == Provider.Slack ||\n                                then.Type == WorkflowThenType.Teams &&\n                                server.Provider == Provider.Teams\n                        )\n                )\n                .Select(workflow => workflow.Key)\n                .ToHashSet", "workflows\n                .Where(\n                    workflow =>\n                        workflow.Then.Any(\n                            then =>\n                                then.Type == WorkflowThenType.Issue &&\n                                affectedProjectKeys.Contains(then.Value) ||\n                                then.Type == WorkflowThenType.Slack &&\n                                server.Provider == Provider.Slack ||\n                                then.Type == WorkflowThenType.Teams &&\n                                server.Provider == Provider.Teams\n                        )\n                )\n                .Select", "affectedProjectKeys.Contains", "BaseDisplayName().ToUpper", "string.IsNullOrEmpty", "otherConfigurations.Where(\n                    rule => string.Equals(\n                        rule.Name,\n                        configuration.Name,\n                        StringComparison.OrdinalIgnoreCase\n                    ) && rule.Key != configuration.Key\n                )\n                .ToList", "otherConfigurations.Where", "string.Equals", "configurationsWithNames.Any", "configurationsWithNames.First"], false, false, false, false, ["workflows", "Workflow", " ; "], false, 12, 9, [], false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, true, 0, 0, true], ["ConsumableNotFoundException", "Lim.Common.DotNET.ConsumableNotFoundException", ["System.Exception"], [], "src/Lim.Common.DotNET/Exceptions/ConsumableNotFoundException.cs", 5, 0, {"Consumable": "Lim.Common.DotNET.BaseConsumableEntity"}, ["Consumable"], ["ConsumableNotFoundException"], ["System"], false, false, [], false, false, [], {"Consumable": []}, [], 0, false, false, false, 1, 1.0, [], 38.0, 38, 0.0, 100.0, 1, 0, false, false, false, false, "public", false, [], [], false, true, false, false, [], false, 0, 0, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, false], ["DeleteFailedException", "Lim.Common.DotNET.DeleteFailedException", ["System.AggregateException"], [], "src/Lim.Common.DotNET/Exceptions/DeleteFailedException.cs", 5, 0, {}, [], ["DeleteFailedException"], ["System"], false, false, [], false, false, [], {}, [], 0, false, false, false, 1, 1.0, [], 20.0, 20, 0.0, 100.0, 1, 0, false, false, false, false, "public", false, [], [], false, false, false, false, [], false, 0, 0, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, false], ["EmptyKeyException", "Lim.Common.DotNET.EmptyKeyException", ["System.Exception"], [], "src/Lim.Common.DotNET/Exceptions/EmptyKeyException.cs", 5, 0, {}, [], [], ["System"], false, false, [], false, false, [], {}, [], 0, false, false, false, 0, 0.0, [], 0.0, 0, 0.0, 0.0, 0, 0, false, false, false, false, "public", false, [], [], false, true, false, false, [], false, 0, 0, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, false], ["EntityNotPersistedException", "Lim.Common.DotNET.EntityNotPersistedException", ["System.Exception"], [], "src/Lim.Common.DotNET/Exceptions/EntityNotPersistedException.cs", 6, 0, {"_entityType": "System.Type", "_key": "string"}, ["_entityType", "_key", "Message"], ["EntityNotPersistedException", "Message"], ["System", "Infrastructure.Dotnet.Common"], false, false, [], true, false, [], {"_entityType": [], "_key": []}, [], 1, false, false, false, 1, 0.5, [], 41.0, 41, 0.0, 100.0, 1, 0, false, false, false, false, "public", false, [], ["_entityType.GetDisplayName"], false, true, false, false, [], false, 1, 0, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, false], ["FilterNotSupportedException", "Lim.Common.DotNET.FilterNotSupportedException", ["System.Exception"], [], "src/Lim.Common.DotNET/Exceptions/FilterNotSupportedException.cs", 7, 0, {}, [], ["FilterNotSupportedException"], ["System", "System.Collections.Generic", "Infrastructure.Dotnet.Common"], false, false, [], false, false, [], {}, [], 0, false, false, false, 1, 1.0, [], 20.0, 20, 0.0, 100.0, 1, 0, false, false, false, false, "public", false, [], ["entityType.GetDisplayName", "supportedFilters.JoinToString"], false, true, false, false, [", "], false, 0, 0, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, false], ["IdNotFoundException", "Lim.Common.DotNET.IdNotFoundException", ["System.Exception"], [], "src/Lim.Common.DotNET/Exceptions/IdNotFoundException.cs", 5, 0, {}, [], ["IdNotFoundException"], ["System"], false, false, [], false, false, [], {}, [], 0, false, false, false, 1, 1.0, [], 20.0, 20, 0.0, 100.0, 1, 0, false, false, false, false, "public", false, [], [], false, true, false, false, [], false, 0, 0, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, false], ["InvalidInputValueException", "Lim.Common.DotNET.InvalidInputValueException", ["System.Exception"], [], "src/Lim.Common.DotNET/Exceptions/InvalidInputValueException.cs", 6, 0, {"_providedValue": "string", "_valueType": "System.Type"}, ["_providedValue", "_valueType", "Message"], ["InvalidInputValueException", "Message"], ["System", "Infrastructure.Dotnet.Common"], false, false, [], false, false, [], {"_providedValue": [], "_valueType": []}, [], 1, false, false, false, 1, 0.5, [], 43.5, 43, 0.0, 100.0, 1, 0, false, false, false, false, "public", false, [], ["_valueType.GetDisplayName"], false, true, false, false, [], false, 1, 0, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, false], ["MongoDocumentTooLargeException", "Lim.Common.DotNET.MongoDocumentTooLargeException", ["System.Exception"], [], "src/Lim.Common.DotNET/Exceptions/MongoDocumentTooLargeException.cs", 7, 0, {}, [], ["MongoDocumentTooLargeException"], ["System", "Infrastructure.Dotnet.Common", "MongoDB.Driver"], false, false, [], false, false, [], {}, [], 0, false, false, false, 3, 1.0, [], 20.0, 20, 0.0, 100.0, 3, 0, false, false, false, false, "public", false, [], ["entity.GetType().GetDisplayName", "entity.GetType", "entityType.GetDisplayName"], false, true, false, false, [], false, 0, 0, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, true], ["ProviderConnectionException", "Lim.Common.DotNET.ProviderConnectionException", ["System.Exception"], [], "src/Lim.Common.DotNET/Exceptions/ProviderConnectionException.cs", 14, 0, {}, ["ErrorType"], ["ProviderConnectionException", "ErrorType", "GetImplicitExceptionType"], ["System", "Infrastructure.Dotnet.Common"], false, false, [], false, false, [], {}, [], 1, false, false, false, 3, 0.75, [], 98.5, 81, 25.0, 75.0, 2, 0, false, false, false, false, "public", false, ["Lim.Common.DotNET.ProviderConnectionException.GetImplicitExceptionType"], ["errorMessage.ContainsAny"], false, true, false, false, ["not found", "404"], false, 1, 0, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, false], ["ExceptionExtensions", "Lim.Common.DotNET.ExceptionExtensions", [], [], "src/Lim.Common.DotNET/Extensions/ExceptionExtensions.cs", 8, 0, {}, [], ["AsOrUnwrap", "IsOrWrapping", "IsCanceledException", "ToStringShort"], ["System", "System.Linq", "System.Threading.Tasks", "Infrastructure.Dotnet.Common"], false, false, [], false, false, [], {}, [], 0, false, false, false, 4, 1.0, [], 217.25, 133, 100.0, 100.0, 0, 0, false, false, true, false, "public", false, [], ["aggregateException.InnerExceptions.Select(\n                        innerException => innerException == exception\n                            ? null\n                            : innerException.AsOrUnwrap<TException>()\n                    )\n                    .WhereNotNull()\n                    .FirstOrDefault", "aggregateException.InnerExceptions.Select(\n                        innerException => innerException == exception\n                            ? null\n                            : innerException.AsOrUnwrap<TException>()\n                    )\n                    .WhereNotNull", "aggregateException.InnerExceptions.Select", "exception.GetType().GetDisplayName", "exception.GetType"], false, false, false, false, [], false, 0, 0, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, false], ["LoggerExtensions", "Lim.Common.DotNET.LoggerExtensions", [], [], "src/Lim.Common.DotNET/Extensions/LoggerExtensions.cs", 7, 0, {}, [], ["LogInformationOnProviderConnectionException"], ["System", "Infrastructure.Dotnet.Common", "Microsoft.Extensions.Logging"], false, false, [], false, false, [], {}, [], 0, false, false, false, 1, 1.0, [], 270.0, 270, 100.0, 100.0, 0, 0, false, false, true, false, "public", false, ["Lim.Common.DotNET.ExceptionExtensions.AsOrUnwrap"], ["logger.LogInformation"], false, false, false, false, [], false, 0, 0, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, false], ["TableFilterParsingExtensions", "Lim.Common.DotNET.TableFilterParsingExtensions", [], [], "src/Lim.Common.DotNET/Extensions/TableFilterParsingExtensions.cs", 9, 0, {}, [], ["ToTableFilterDictionary"], ["System.Collections.Generic", "System.Linq", "Infrastructure.Dotnet.Common", "JetBrains.Annotations", "RestSharp.Extensions"], false, false, [], false, false, [], {}, [], 0, false, false, false, 2, 1.0, [], 273.0, 273, 100.0, 100.0, 0, 0, false, false, true, false, "public", false, [], ["filterFields.ToDictionary", "tableFilterToValue.ToDictionary", "EnumUtils.TryFromString<TableFilter>", "pair.Value.Select(v => v.UrlDecode())\n                    .ToList", "pair.Value.Select", "v.UrlDecode"], false, false, false, false, [""], false, 0, 0, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, false], ["TableSortParsingExtensions", "Lim.Common.DotNET.TableSortParsingExtensions", [], [], "src/Lim.Common.DotNET/Extensions/TableSortParsingExtensions.cs", 6, 0, {}, [], ["ToTableSortOption"], ["Infrastructure.Dotnet.Common", "JetBrains.Annotations"], false, false, [], false, false, [], {}, [], 0, false, false, false, 1, 1.0, [], 241.0, 241, 100.0, 100.0, 0, 0, false, false, true, false, "public", false, [], ["EnumUtils.TryFromString<TableSortOption>"], false, false, false, false, [], false, 0, 0, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, false], ["CodeFeaturesStorage", "Lim.Common.DotNET.CodeFeaturesStorage", [], ["Lim.Common.DotNET.ICodeFeaturesStorage"], "src/Lim.Common.DotNET/FileStore/CodeFeaturesStorage.cs", 9, 0, {"_commitsStorage": "Lim.Common.DotNET.ICommitsStorage", "_featureCache": "???.IAsyncCache<(string, CodeParsingTarget, CodeEntity), CodeFeatures>", "_fileSystem": "???.IFileSystem", "_rootDirectory": "string"}, ["_commitsStorage", "_featureCache", "_fileSystem", "_rootDirectory"], ["CodeFeaturesStorage", "FilePath", "StoreFromExisting", "StoreAsync", "LoadAsync", "GetFeaturesUncachedAsync"], ["System", "System.IO", "System.Threading.Tasks", "Infrastructure.Dotnet.Common", "JetBrains.Annotations"], false, false, ["UsedImplicitly"], false, false, [], {"_commitsStorage": [], "_featureCache": [], "_fileSystem": [], "_rootDirectory": []}, [], 0, false, false, false, 7, 1.0, [], 333.14285714285717, 334, 0.0, 85.71428571428571, 1, 0, false, false, false, true, "public", false, ["Lim.Common.DotNET.ICommitsStorage.GetFirstCommitWithFeatures"], ["Path.Combine", "_fileSystem.MoveFile", "_fileSystem.WriteCompressedJsonAsync", "_fileSystem.FileExists", "_fileSystem.ReadCompressedJsonAsync<JTable>", "_featureCache.GetOrAddAsync", "string.IsNullOrEmpty", "_fileSystem.CreateDirectoryIfNotExists", "cacheBuilder"], false, false, false, false, [], false, 0, 0, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, false], ["JavaFrameworks", "Lim.Common.DotNET.JavaFrameworks", [], [], "src/Lim.Common.DotNET/Frameworks/JavaFrameworks.cs", 6, 0, {"DependencyNameToFrameworkTypeAndName": "System.Collections.Generic.IReadOnlyDictionary<string, (CodeFrameworkType, string)>", "DependencyNamePrefixToFrameworkTypeAndName": "System.Collections.Generic.IReadOnlyDictionary<string, (CodeFrameworkType, string)>"}, [], [], ["System", "System.Collections.Generic"], false, false, [], false, false, [], {"DependencyNameToFrameworkTypeAndName": [], "DependencyNamePrefixToFrameworkTypeAndName": []}, [], 0, false, false, false, 0, 0.0, [], 0.0, 0, 0.0, 0.0, 0, 0, false, false, true, false, "public", false, [], [], false, false, false, false, ["com.amazonaws:aws-java-sdk-kms", "AWS Key Management Service", "com.google.cloud:google-cloud-kms", "GCP Key Management Service", "com.microsoft.azure:azure-keyvault", "Azure Key Vault", "com.bettercloud:vault-java-driver", "HashiCorp Vault", "com.aerospike:spring-data-aerospike", "Aerospike", "org.springframework.data:spring-data-mongodb", "MongoDB", "org.springframework.data:spring-data-jpa", "Java Persistence API (JPA)", "org.springframework.data:spring-data-redis", "Redis", "org.springframework.data:spring-data-cassandra", "Cassandra", "org.springframework.data:spring-data-jdbc", "Java Database Connectivity (JDBC)", "org.springframework.data:spring-data-elasticsearch", "Elasticsearch", "io.minio:minio", "S3", "com.esotericsoftware:kryo", "Kryo", "org.yaml:snakeyaml", "SnakeYAML", "com.thoughtworks.xstream:xstream", "XStream", "org.apache.thrift:libthrift", "Thrift", "org.springframework:spring-", "Spring", "org.apache.struts", "Struts", "org.springframework.cloud", "Spring Cloud OpenFeign", "org.springframework.kafka", "Kafka", "org.springframework.data:spring-data-", "Spring Data", "org.elasticsearch", "ElasticSearch", "com.amazonaws:aws-java-sdk", "AWS Java SDK", "com.google.protobuf", "Protobuf"], false, 0, 0, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, false], ["NodeFrameworks", "Lim.Common.DotNET.NodeFrameworks", [], [], "src/Lim.Common.DotNET/Frameworks/NodeFrameworks.cs", 6, 0, {"DependencyNameToFrameworkTypeAndName": "System.Collections.Generic.IReadOnlyDictionary<string, (CodeFrameworkType, string)>"}, [], [], ["System", "System.Collections.Generic"], false, false, [], false, false, [], {"DependencyNameToFrameworkTypeAndName": []}, [], 0, false, false, false, 0, 0.0, [], 0.0, 0, 0.0, 0.0, 0, 0, false, false, true, false, "public", false, [], [], false, false, false, false, ["react", "React", "react-native", "React Native", "wix-react-native-ui-lib", "@angular/common", "Angular", "@angular/core", "vue", "Vue", "express", "Express", "koa", "Koa", "@hapi/hapi", "Hapi", "winston", "Winston", "@sentry/browser", "Sentry", "logstash", "Logstash", "kibana", "Kibana", "splunk-sdk", "Splunk", "mongodb", "MongoDB", "mongoose", "mysql", "MySQL", "sql", "SQL", "knex", "sqlite", "SQLite", "sqlite3", "mssql", "MSSql", "oracledb", "OracleDB", "cassandra", "Cassandra", "cassandra-driver", "elasticsearch", "Elasticsearch", "@elastic/elasticsearch", "redis", "Redis", "ioredis", "dynamodb", "DynamoDB", "neo4j", "Neo4j", "neo4j-driver", "pg", "PostgreSQL", "postgres", "sequelize", "Sequelize", "@aws-cdk/aws-kms", "AWS Key Management Service", "@google-cloud/kms", "GCP Key Management Service", "@azure/keyvault-secrets", "Azure Key Vault", "azure-keyvault", "node-vault-client", "HashiCorp Vault", "node-vault", "electron", "Electron", "node", "Node", "jquery", "JQuery", "lodash", "Lodash", "ramda", "Ramda", "underscore", "Underscore", "axios", "Axios", "request", "Request", "socket.io", "Socket.io", "superagent", "Superagent"], false, 0, 0, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, false], ["InventoryEnricher", "Lim.Common.DotNET.InventoryEnricher", [], ["Lim.Common.DotNET.IInventoryEnricher"], "src/Lim.Common.DotNET/Inventory/InventoryEnricher.cs", 11, 0, {"_codeFeaturesStorage": "Lim.Common.DotNET.ICodeFeaturesStorage", "_commitsStorage": "Lim.Common.DotNET.ICommitsStorage", "_developerIdentityStorage": "Lim.Common.DotNET.IDeveloperIdentityStorage", "_developerProfileStorage": "Lim.Common.DotNET.IDeveloperProfilesStorage", "_repositoryIsActiveThreshold": "System.TimeSpan", "_securityScansProjectsStorage": "Lim.Common.DotNET.ISecurityScansProjectsStorage", "_securityScansStorage": "Lim.Common.DotNET.ISecurityScansStorage", "_terraformModulesStorage": "Lim.Common.DotNET.ITerraformModulesStorage"}, ["_codeFeaturesStorage", "_commitsStorage", "_developerIdentityStorage", "_developerProfileStorage", "_repositoryIsActiveThreshold", "_securityScansProjectsStorage", "_securityScansStorage", "_terraformModulesStorage"], ["InventoryEnricher", "EnrichInventoryAsync", "RepositoryHasCodeParsingTarget", "EnrichInventoryMetadataAsync", "EnrichApisWithSecurityScanVulnerabilitiesAsync", "EnrichFromSecurityScansAsync", "EnrichFromTerraformModulesAsync", "EnrichFromPropertiesAsync", "CreateModuleHierarchy", "EnrichFromNodeFeaturesAsync", "EnrichFromNodeDataModelsAsync", "EnrichFromNodeApisAsync", "EnrichFromJavaFeaturesAsync", "EnrichFromJavaMethods", "GetCodeReferences", "EnrichFromJavaClasses", "CollectMethodsReferencingClass", "CollectApiMethodsReferencingClass"], ["System", "System.Collections.Generic", "System.Collections.Immutable", "System.IO", "System.Linq", "System.Threading.Tasks", "Infrastructure.Dotnet.Common"], false, false, [], false, false, [], {"_codeFeaturesStorage": [], "_commitsStorage": [], "_developerIdentityStorage": [], "_developerProfileStorage": [], "_repositoryIsActiveThreshold": [], "_securityScansProjectsStorage": [], "_securityScansStorage": [], "_terraformModulesStorage": []}, [], 0, false, false, false, 18, 1.0, [], 1337.2777777777778, 1032, 33.333333333333336, 11.11111111111111, 1, 0, false, false, false, true, "public", false, ["Lim.Common.DotNET.ICommitsStorage.GetLatestFeaturesExtractedCommitShaAsync", "Lim.Common.DotNET.CodeParsingTargetExtensions.GetSupportedLanguages", "Lim.Common.DotNET.ICommitsStorage.GetLatestRepositoryCommitAsync", "Lim.Common.DotNET.ICommitsStorage.GetCommitContextAsync", "Lim.Common.DotNET.IDeveloperIdentityStorage.GetDeveloperIdentityByKeyAsync", "Lim.Common.DotNET.IDeveloperProfilesStorage.GetDeveloperProfileByKeyAsync", "Lim.Common.DotNET.SecurityScan.GetVulnerabilitiesForApi", "Lim.Common.DotNET.ISecurityScansProjectsStorage.GetRepositoryMatchingProjectsAsync", "Lim.Common.DotNET.ISecurityScansStorage.GetProjectSecurityScansAsync", "Lim.Common.DotNET.ITerraformModulesStorage.GetTerraformModulesAsync", "Lim.Common.DotNET.ICommitsStorage.GetCommitFieldAsync", "Lim.Common.DotNET.ICommitsStorage.GetPropertiesAsync", "Lim.Common.DotNET.Inventory.AddFrameworkUsage", "Lim.Common.DotNET.ICodeFeaturesStorage.LoadAsync", "Lim.Common.DotNET.DataModelSnippetFeatureNames.PredictedAsDataModel", "Lim.Common.DotNET.DataModelSnippetFeatureNames.GetDataModelName", "Lim.Common.DotNET.DataModel.FromDataModelSnippetFeatures", "Lim.Common.DotNET.CodeFeatures.GetFeature", "Lim.Common.DotNET.DataOfInterestTypesPiiLevelExtensions.IsOfInterest", "Lim.Common.DotNET.FieldsWithMethodRelationCodeReference.FromDataModelSnippetFeatures", "Lim.Common.DotNET.DataOfInterest.GetSnippetDataModelId", "Lim.Common.DotNET.DataModelSnippetFeatureNames.GetFieldNames", "Lim.Common.DotNET.ApiSnippetFeatureNames.PredictedAsApiSnippet", "Lim.Common.DotNET.CodeFeatures.GetJsonFeature", "Lim.Common.DotNET.MethodFeatureNames.CodeLinkNeighborsByType", "Lim.Common.DotNET.ApiMethod.FromFeatures", "Lim.Common.DotNET.FieldsCodeReference.FromClassFeatures", "Lim.Common.DotNET.ClassFeatureNames.ShouldIgnore", "Lim.Common.DotNET.DataModel.FromJavaClassFeatures", "Lim.Common.DotNET.ClassFeatureNames.IsDataOfInterestApplicable", "Lim.Common.DotNET.FieldsWithMethodRelationCodeReference.FromClassFeatures", "Lim.Common.DotNET.NamedCodeReference.FromClassFeatures", "Lim.Common.DotNET.ApiMethodCodeReference.FromMethodFeatures"], ["string.IsNullOrEmpty", "TaskUtils.WhenAll", "EnrichFromPropertiesAsync", "EnrichFromJavaFeaturesAsync", "EnrichFromNodeFeaturesAsync", "EnrichFromTerraformModulesAsync", "EnrichFromSecurityScansAsync", "repositoryProfile.Languages.Intersect(codeParsingTarget.GetSupportedLanguages())\n                .Any", "repositoryProfile.Languages.Intersect", "allProjectsScans.Max", "allProjectsScans.Where(scan => scan.ScanTime > commit.Timestamp)\n                    .OrderBy(scan => scan.ScanTime)\n                    .FirstOrDefault", "allProjectsScans.Where(scan => scan.ScanTime > commit.Timestamp)\n                    .OrderBy", "allProjectsScans.Where", "allProjectsScans.Where(scan => scan.ScanTime > commit.Timestamp)\n                    .OrderBy(scan => scan.ScanTime)\n                    .LastOrDefault", "relevantScan.GetVulnerabilitiesForApi(api)\n                    .ToList", "vulnerabilities.Any", "api.SecurityScansReferences.Add", "vulnerabilities.ToHistogram", "vulnerability.Type.GetDescription", "allProjectsScans.None", "repositoryProfile.Inventory.ApiMethods.Select", "repositoryProfile.Inventory.ApiSnippets.Select", "(await _terraformModulesStorage.GetTerraformModulesAsync(terraformCommitSha))\n                .ToDictionary", "properties.Dependencies.OrderBy(dependency => dependency.Name)\n                .ToList", "properties.Dependencies.OrderBy", "dependencies.ToDictionary", "dependencies\n                .SelectMany(dependency => dependency.Licenses.Select(license => (License: license, Dependency: dependency)))\n                .GroupBy(pair => pair.License)\n                .Select(\n                    grouping => new LicenseWithDependencies(\n                        grouping.Key.DisplayName,\n                        grouping.Select(pair => pair.Dependency.Name)\n                            .ToHashSet()\n                    )\n                )\n                .ToDictionary", "dependencies\n                .SelectMany(dependency => dependency.Licenses.Select(license => (License: license, Dependency: dependency)))\n                .GroupBy(pair => pair.License)\n                .Select", "dependencies\n                .SelectMany(dependency => dependency.Licenses.Select(license => (License: license, Dependency: dependency)))\n                .GroupBy", "dependencies\n                .SelectMany", "dependency.Licenses.Select", "grouping.Select(pair => pair.Dependency.Name)\n                            .ToHashSet", "grouping.Select", "(properties.ExposedSecrets ?? new List<ExposedSecret>())\n                .ToDictionary", ".Where(module => module.Root != string.Empty)\n                .ToHashSet", ".Where", "repositoryModules.Where", ".ToHashSet", "repositoryProfile.Inventory.AddFrameworkUsage", "component.IacFrameworks.GetDescription", "NodeFrameworks.DependencyNameToFrameworkTypeAndName.TryGetValue", "JavaFrameworks.DependencyNameToFrameworkTypeAndName.TryGetValue", "dependency.Name.StartsWith", ".ToDictionary", "modules.OrderBy(module => module.Root, StringComparer.OrdinalIgnoreCase)\n                .ToList", "modules.OrderBy", "currentModule.Root.StartsWith", "potentialRootModule.Root.EnsureEndsWith", "Path.Join", "orderedModules.ToHashSet", "Task.WhenAll", "dataModelFeatures.GetFieldNames(dataModelId)\n                            .ToHashSet", "DataOfInterestType.DataOfInterestTypes.FirstOrDefault", "piiLevel.HasFlag", "apiFeatures.EntityIds\n                .Where(apiId => apiFeatures.PredictedAsApiSnippet(apiId))\n                .ToDictionaryForce", "apiFeatures.EntityIds\n                .Where", "ApiSnippet.EntityIdFromFeatures", "ApiSnippet.FromFeatures", "methodFeatures.EntityIds.ToDictionaryGrouped", "methodFeatures.GetFeature<string>", "EnrichFromJavaMethods", "EnrichFromJavaClasses", "EnumUtils.GetValues<CodeLinkType>", "classFeatures.GetFeature<HashSet<string>>(classId, ClassFeatureNames.ClassAnnotations)\n                    .Union(classFeatures.GetFeature<HashSet<string>>(classId, ClassFeatureNames.MethodAnnotations))\n                    .Union(classFeatures.GetFeature<HashSet<string>>(classId, ClassFeatureNames.FieldAnnotations))\n                    .ToHashSet", "classFeatures.GetFeature<HashSet<string>>(classId, ClassFeatureNames.ClassAnnotations)\n                    .Union(classFeatures.GetFeature<HashSet<string>>(classId, ClassFeatureNames.MethodAnnotations))\n                    .Union", "classFeatures.GetFeature<HashSet<string>>(classId, ClassFeatureNames.ClassAnnotations)\n                    .Union", "repositoryProfile.Inventory.JavaSecurityAnnotation[JavaAnnotations.AnnotationsId]\n                    .Annotations.AddRange", "Path.GetDirectoryName", "methodFeatures.CodeLinkNeighborsByType", "codeLinkExposures[codeLinkType]\n                                .AddOrUpdate", "set.Add", "repositoryProfile.Inventory.ApiMethods.Add", "apis.Add", "classIds\n                .Where(classFeatures.ContainsId)\n                .Select(\n                    classId => FieldsCodeReference.FromClassFeatures(\n                        classFeatures,\n                        classId,\n                        classFeatures.GetFeature<HashSet<string>>(classId, ClassFeatureNames.PiiFieldNames)\n                    )\n                )\n                .ToList", "classIds\n                .Where(classFeatures.ContainsId)\n                .Select", "classIds\n                .Where", "repositoryProfile.Inventory.Piis.Add", "classFeatures.GetFeature<Dictionary<string, HashSet<string>>>(classId, ClassFeatureNames.FieldAnnotationsByName)\n                                    .Keys.ToHashSet", "repositoryProfile.Inventory.SecurityConfigurations.Add", "(classIdToMethodIds.GetValueOrDefault(classId) ?? new HashSet<string>())\n                .Select(methodId => ApiMethodCodeReference.FromMethodFeatures(methodFeatures, methodId))\n                .ToList", "(classIdToMethodIds.GetValueOrDefault(classId) ?? new HashSet<string>())\n                .Select", "classIdToMethodIds.GetValueOrDefault", "(classIdToMethodIds.GetValueOrDefault(classId) ?? new HashSet<string>())\n                .ToImmutableList", "TimeSpan.FromDays"], false, false, false, false, ["/"], false, 0, 0, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, false], ["InventoryUtils", "Lim.Common.DotNET.InventoryUtils", [], [], "src/Lim.Common.DotNET/Inventory/InventoryUtils.cs", 6, 0, {}, [], ["MergeInventories", "InventoryPropertyConcat", "InventoryPropertyAggregate"], ["System.Collections.Generic", "System.Linq"], false, false, [], false, false, [], {}, [], 0, false, false, false, 3, 1.0, [], 1151.6666666666667, 807, 100.0, 33.333333333333336, 0, 0, false, false, true, false, "public", false, [], ["inventories.Select", "propertyValue.RepositoryKeys.Add", "concatenatedProperties.Add", "aggregatedProperties.ContainsKey", "aggregatedProperties[propertyKey]\n                            .RepositoryKeys.Add", "aggregatedProperties.Add"], false, false, false, false, [], false, 0, 0, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, false], ["BaseConsumableListenerService", "Lim.Common.DotNET.BaseConsumableListenerService<TConsumable>", ["???.HostedIntervalWorkingService"], [], "src/Lim.Common.DotNET/Utils/BaseConsumableListenerService.cs", 12, 0, {"_boundAsyncExecutor": "???.IBoundAsyncExecutor", "_continuousItemsScanInterval": "System.TimeSpan", "_lastContinuousItemsScan": "System.DateTime?"}, ["_boundAsyncExecutor", "_continuousItemsScanInterval", "_lastContinuousItemsScan"], ["BaseConsumableListenerService", "Work", "ProcessItems", "FetchAsync", "IsNew", "HandleAsync"], ["System", "System.Collections.Generic", "System.Linq", "System.Threading", "System.Threading.Tasks", "System.Threading.Tasks.Dataflow", "Infrastructure.Dotnet.Common", "Microsoft.Extensions.Logging"], false, false, [], false, false, [], {"_boundAsyncExecutor": [], "_continuousItemsScanInterval": [], "_lastContinuousItemsScan": []}, [], 0, false, false, false, 7, 1.0, [], 301.57142857142856, 0, 0.0, 0.0, 1, 0, false, true, false, true, "public", true, [], ["(await FetchAsync())\n                .Where(consumable => !processNewOnly || IsNew(consumable))\n                .ToList", "(await FetchAsync())\n                .Where", "consumables.Select(_ => _.Key)\n                .ToList", "consumables.Select", "keysInProcessing.Any", "Logger.LogDebug", "typeof(TConsumable).GetDisplayName", "_boundAsyncExecutor.ProcessAsync", "HandleAsync", "processedKeys.WhereNotNull()\n                    .ToList", "processedKeys.WhereNotNull", "boundAsyncExecutorBuilder"], false, false, false, false, ["Processing {mode} {count} consumables of type {type}", "new", "continuous"], false, 0, 0, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, false], ["BaseRepositoryListenerService", "Lim.Common.DotNET.BaseRepositoryListenerService", ["???.BaseConsumableListenerService<Repository>"], [], "src/Lim.Common.DotNET/Utils/BaseRepositoryListenerService.cs", 11, 0, {"RepositoriesStorage": "Lim.Common.DotNET.IRepositoriesStorage"}, ["RepositoriesStorage"], ["BaseRepositoryListenerService", "FetchAsync", "HandleAsync", "HandleRepositoryAsync"], ["System", "System.Collections.Generic", "System.Threading", "System.Threading.Tasks", "System.Threading.Tasks.Dataflow", "Infrastructure.Dotnet.Common", "Microsoft.Extensions.Logging"], false, false, [], false, false, [], {"RepositoriesStorage": []}, [], 0, false, false, false, 5, 1.0, [], 70.0, 67, 0.0, 20.0, 1, 0, false, true, false, true, "public", false, ["Lim.Common.DotNET.IRepositoriesStorage.GetMonitoredRepositoriesAsync", "Lim.Common.DotNET.IRepositoriesStorage.GetRepositoriesAsync"], [], false, false, false, false, [], false, 0, 0, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, false], ["CompositeKey", "Lim.Common.DotNET.CompositeKey", [], [], "src/Lim.Common.DotNET/Utils/CompositeKey.cs", 6, 0, {"Separator": "string"}, [], ["Create"], ["System.Linq", "Infrastructure.Dotnet.Common"], false, false, [], false, false, [], {"Separator": []}, [], 0, false, false, false, 1, 1.0, [], 160.0, 160, 100.0, 100.0, 0, 0, false, false, true, false, "public", false, [], ["values.Select(\n                    _ => _.ToString()\n                        .Escape()\n                )\n                .JoinToString", "values.Select", "_.ToString()\n                        .Escape", "_.ToString"], false, false, false, false, ["__"], false, 0, 0, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, false], ["JavaParsingUtils", "Lim.Common.DotNET.JavaParsingUtils", [], [], "src/Lim.Common.DotNET/Utils/JavaParsingUtils.cs", 7, 0, {}, [], ["GetPackageFromQualifiedName", "GetNameFromQualifiedName"], ["System", "System.Linq", "Infrastructure.Dotnet.Common"], false, false, [], false, false, [], {}, [], 0, false, false, false, 2, 1.0, [], 177.5, 177, 100.0, 100.0, 0, 0, false, false, true, false, "public", false, [], ["qualifiedName.Split", "parts.Slice(0, parts.Length - 1)\n                .ToArray()\n                .JoinToString", "parts.Slice(0, parts.Length - 1)\n                .ToArray", "parts.Slice", "string.IsNullOrEmpty", "qualifiedName.Split(\".\")\n                    .Last"], false, false, false, false, ["."], false, 0, 0, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, false], ["LanguageUtils", "Lim.Common.DotNET.LanguageUtils", [], [], "src/Lim.Common.DotNET/Utils/LanguageUtils.cs", 10, 0, {"LanguagePortionThreshold": "double", "AllLanguages": "System.Collections.Generic.IReadOnlyList<Language>", "AllFileExtensions": "System.Collections.Generic.IReadOnlyCollection<string>", "ExtensionToLanguage": "System.Collections.Generic.IReadOnlyDictionary<string, Language>"}, [], ["GetExtensionIfExists", "GetRepositoryLanguages", "ExtractLanguages", "MatchingLanguage"], ["System", "System.Collections.Generic", "System.IO", "System.Linq", "Infrastructure.Dotnet.Common", "Microsoft.Extensions.Logging"], false, false, [], false, false, [], {"LanguagePortionThreshold": [], "AllLanguages": [], "AllFileExtensions": [], "ExtensionToLanguage": []}, [], 0, false, false, false, 4, 1.0, [], 537.5, 231, 100.0, 50.0, 0, 0, false, false, true, false, "public", false, ["Lim.Common.DotNET.LanguageExtensions.FileExtensions"], ["fileName.Contains", "Path.GetExtension", "filePaths\n                .Select(Path.GetFileName)\n                .Where(fileName => !fileName.StartsWith(\".\"))\n                .ToList", "filePaths\n                .Select(Path.GetFileName)\n                .Where", "filePaths\n                .Select", "fileName.StartsWith", "fileNames\n                    .Select(fileName => fileName?.ToLowerInvariant())\n                    .Where(fileName => !string.IsNullOrEmpty(fileName))\n                    .ToHistogram", "fileNames\n                    .Select(fileName => fileName?.ToLowerInvariant())\n                    .Where", "fileNames\n                    .Select", ".ToLowerInvariant", "string.IsNullOrEmpty", "logger.LogInformation", "extensionsHistogram.OrderBy(pair => pair.Key, StringComparer.OrdinalIgnoreCase)\n                    .Select(pair => $\"['{pair.Key}':{pair.Value}]\")\n                    .JoinToString", "extensionsHistogram.OrderBy(pair => pair.Key, StringComparer.OrdinalIgnoreCase)\n                    .Select", "extensionsHistogram.OrderBy", "extensionsHistogram.ToHistogram", "MatchingLanguage", "languagesHistogram.Sum", "(languageRecognizedFilesCount * LanguagePortionThreshold).RoundDown", "repositoryLanguages.Add", "paths.Select(Path.GetExtension)\n                .Where(extension => !string.IsNullOrEmpty(extension))\n                .Select(MatchingLanguage)\n                .WhereHasValue()\n                .ToHashSet", "paths.Select(Path.GetExtension)\n                .Where(extension => !string.IsNullOrEmpty(extension))\n                .Select(MatchingLanguage)\n                .WhereHasValue", "paths.Select(Path.GetExtension)\n                .Where(extension => !string.IsNullOrEmpty(extension))\n                .Select", "paths.Select(Path.GetExtension)\n                .Where", "paths.Select", "ExtensionToLanguage.TryGetValue", "fileExtension.RemoveAll(\".\")\n                    .ToLowerInvariant", "fileExtension.RemoveAll", "EnumUtils.GetValues<Language>()\n            .ToList", "EnumUtils.GetValues<Language>", "AllLanguages.SelectMany(language => language.FileExtensions())\n            .ToList", "AllLanguages.SelectMany", "AllLanguages\n                .SelectManyToPairs(language => language.FileExtensions())\n                .ToDictionary", "AllLanguages\n                .SelectManyToPairs", "language.FileExtensions"], false, false, false, false, [".", "Repository {repository} extensions histogram:\n{histogram}"], false, 0, 0, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, false], ["LimMicroService", "Lim.Common.DotNET.LimMicroService", [], [], "src/Lim.Common.DotNET/Utils/LimMicroService.cs", 13, 0, {"_logMetrics": "bool"}, [], ["RunAsync", "ConfigureLogging", "ConfigureServices", "DecorateWithMetricsLogging", "RegisterCommonServices"], ["System.Collections.Generic", "System.Reflection", "System.Threading.Tasks", "System.Threading.Tasks.Dataflow", "Infrastructure.Dotnet.Common", "Microsoft.Extensions.Configuration", "Microsoft.Extensions.DependencyInjection", "Microsoft.Extensions.Hosting", "Microsoft.Extensions.Logging"], false, false, [], false, false, [], {"_logMetrics": []}, [], 0, false, false, false, 5, 1.0, [], 613.4, 435, 40.0, 40.0, 0, 0, false, true, false, true, "public", false, ["Lim.Common.DotNET.MongoCredentials.FromConfiguration"], ["new HostBuilder()\n                .ConfigureHostConfiguration(configHost => configHost.AddEnvironmentVariables())\n                .ConfigureAppConfiguration(\n                    (hostContext, configApp) =>\n                        hostContext.HostingEnvironment.ApplicationName = name\n                )\n                .ConfigureAppConfiguration(\n                    (hostContext, configApp) =>\n                        configApp\n                            .AddAppSettings()\n                            .AddCommandLine(args)\n                )\n                .ConfigureServices(\n                    (hostContext, services) =>\n                    {\n                        var configuration = hostContext.Configuration;\n                        _logMetrics = configuration.GetValue<bool>(\"App:LogPerformanceCounters\");\n                        ConfigureServices(configuration, services);\n                    }\n                )\n                .ConfigureLogging(ConfigureLogging)\n                .Build()\n                .RunAsyncSafe", "new HostBuilder()\n                .ConfigureHostConfiguration(configHost => configHost.AddEnvironmentVariables())\n                .ConfigureAppConfiguration(\n                    (hostContext, configApp) =>\n                        hostContext.HostingEnvironment.ApplicationName = name\n                )\n                .ConfigureAppConfiguration(\n                    (hostContext, configApp) =>\n                        configApp\n                            .AddAppSettings()\n                            .AddCommandLine(args)\n                )\n                .ConfigureServices(\n                    (hostContext, services) =>\n                    {\n                        var configuration = hostContext.Configuration;\n                        _logMetrics = configuration.GetValue<bool>(\"App:LogPerformanceCounters\");\n                        ConfigureServices(configuration, services);\n                    }\n                )\n                .ConfigureLogging(ConfigureLogging)\n                .Build", "new HostBuilder()\n                .ConfigureHostConfiguration(configHost => configHost.AddEnvironmentVariables())\n                .ConfigureAppConfiguration(\n                    (hostContext, configApp) =>\n                        hostContext.HostingEnvironment.ApplicationName = name\n                )\n                .ConfigureAppConfiguration(\n                    (hostContext, configApp) =>\n                        configApp\n                            .AddAppSettings()\n                            .AddCommandLine(args)\n                )\n                .ConfigureServices(\n                    (hostContext, services) =>\n                    {\n                        var configuration = hostContext.Configuration;\n                        _logMetrics = configuration.GetValue<bool>(\"App:LogPerformanceCounters\");\n                        ConfigureServices(configuration, services);\n                    }\n                )\n                .ConfigureLogging", "new HostBuilder()\n                .ConfigureHostConfiguration(configHost => configHost.AddEnvironmentVariables())\n                .ConfigureAppConfiguration(\n                    (hostContext, configApp) =>\n                        hostContext.HostingEnvironment.ApplicationName = name\n                )\n                .ConfigureAppConfiguration(\n                    (hostContext, configApp) =>\n                        configApp\n                            .AddAppSettings()\n                            .AddCommandLine(args)\n                )\n                .ConfigureServices", "new HostBuilder()\n                .ConfigureHostConfiguration(configHost => configHost.AddEnvironmentVariables())\n                .ConfigureAppConfiguration(\n                    (hostContext, configApp) =>\n                        hostContext.HostingEnvironment.ApplicationName = name\n                )\n                .ConfigureAppConfiguration", "new HostBuilder()\n                .ConfigureHostConfiguration(configHost => configHost.AddEnvironmentVariables())\n                .ConfigureAppConfiguration", "new HostBuilder()\n                .ConfigureHostConfiguration", "configHost.AddEnvironmentVariables", "configApp\n                            .AddAppSettings()\n                            .AddCommandLine", "configApp\n                            .AddAppSettings", "configuration.GetValue<bool>", "configLogging.ClearProviders", "configLogging.AddConfiguration", "hostContext.Configuration.GetSection", "configLogging.AddFile", "hostContext.Configuration.GetSection(\"FileLoggingOptions\")\n                        .Bind", "configLogging.AddConsoleLogger", "services.DecorateWithMetricsLogging<T>", "services.RegisterServicesFromAssembly", "Assembly.Load", "services.AddSingleton", "services.AddSingletonWithConstructorParams<ICommitsStorage, CommitsStorage>", "configuration.GetValueWithEnv", "services.AddSingleton<IConfigureUntrustedCertificatePolicy, AllowUntrustedCertificatePolicy>", "services.AddSingleton<IConfigureUntrustedCertificatePolicy, DefaultUntrustedCertificatePolicy>", "services.RegisterCacheBuilder<string, Developer>", "services.RegisterCacheBuilder<string, DeveloperIdentity>", "services.RegisterCacheBuilder<string, IReadOnlyCollection<Repository>>", "services.RegisterCacheBuilder<(Consumable, string), int>", "services.RegisterCacheBuilder<(string, CodeParsingTarget), string>", "services.AddBuilder<IBoundAsyncExecutor, BoundAsyncExecutor, ExecutionDataflowBlockOptions>"], false, false, false, false, ["App:LogPerformanceCounters", "Logging", "FileLoggingOptions", "Lim.Common.DotNET", "Infrastructure.Dotnet.Common", "App:RecentlyDefinitionInDays", "App:AllowUntrustedCertificates"], false, 0, 0, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, false], ["MethodInputValidationUtil", "Lim.Common.DotNET.MethodInputValidationUtil", [], [], "src/Lim.Common.DotNET/Utils/MethodInputValidationUtil.cs", 6, 0, {}, [], ["GetApplicableUnvalidatedParameters"], ["System.Collections.Generic", "System.Linq"], false, false, [], false, false, [], {}, [], 0, false, false, false, 1, 1.0, [], 1595.0, 1595, 100.0, 100.0, 0, 0, false, false, true, false, "public", false, [], ["checkedFrameworks.Contains", "unvalidatedParametersByFramework.Values.FirstOrDefault", "frameworkUnvalidatedParameters.Any", "unvalidatedParametersByFramework.GetValueOrDefault"], false, false, false, false, [], false, 0, 0, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, false], ["MethodSimilarity", "Lim.Common.DotNET.MethodSimilarity", [], [], "src/Lim.Common.DotNET/Utils/MethodSimilarity.cs", 6, 0, {"MinimumAcceptableSimilarityScore": "int"}, [], ["GetScore", "IsSimilar"], ["System.Linq", "Infrastructure.Dotnet.Common"], false, false, [], false, false, [], {"MinimumAcceptableSimilarityScore": []}, [], 0, false, false, false, 2, 1.0, [], 581.0, 581, 100.0, 100.0, 0, 0, false, false, true, false, "public", false, [], ["first.MethodName\n                .EqualsIgnoreCase", "firstParametersToType.Values.Ordered()\n                .SequenceEqual", "firstParametersToType.Values.Ordered", "secondParametersToType.Values.Ordered", "firstAnnotations\n                .Ordered()\n                .SequenceEqual", "firstAnnotations\n                .Ordered", "secondAnnotations\n                        .Ordered"], false, false, false, false, [], false, 0, 0, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, false], ["RegexUtils", "Lim.Common.DotNET.RegexUtils", [], [], "src/Lim.Common.DotNET/Utils/RegexUtils.cs", 5, 0, {"DefaultRegexOptions": "System.Text.RegularExpressions.RegexOptions"}, [], ["GetCompiledRegex"], ["System.Text.RegularExpressions"], false, false, [], false, false, [], {"DefaultRegexOptions": []}, [], 0, false, false, false, 1, 1.0, [], 54.0, 54, 100.0, 100.0, 0, 0, false, false, true, false, "public", false, [], [], false, false, false, false, [], false, 0, 0, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, false], ["SourceCodeUtils", "Lim.Common.DotNET.SourceCodeUtils", [], [], "src/Lim.Common.DotNET/Utils/SourceCodeUtils.cs", 5, 0, {}, [], ["IsSuspectedAsTest"], ["Infrastructure.Dotnet.Common"], false, false, [], false, false, [], {}, [], 0, false, false, false, 1, 1.0, [], 188.0, 188, 100.0, 100.0, 0, 0, false, false, true, false, "public", false, [], ["path.ContainsAny"], false, false, false, false, ["test", "mock", "spec", ".it.", "e2e", "demo"], false, 0, 0, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, false], ["AuthenticationController", "Lim.API.AuthenticationController", ["???.OktaAuthenticationController"], [], "src/Lim.API/Controllers/AuthenticationController.cs", 12, 0, {"_auditActionsService": "Lim.API.IAuditActionsService", "_configurationStorage": "Lim.Common.DotNET.IConfigurationStorage", "_defaultUserCredentials": "Lim.API.ConsoleUserCredentials", "_oktaMvcOptions": "???.OktaMvcOptions", "_replicatedAuthenticationService": "Lim.API.IReplicatedAuthenticationService"}, ["_auditActionsService", "_configurationStorage", "_defaultUserCredentials", "_oktaMvcOptions", "_replicatedAuthenticationService"], ["AuthenticationController", "GetAuthenticationTypeAsync", "IsSignedIn", "SignInAsync", "SignOutAsync", "AuthenticateAsync"], ["System.Security.Claims", "System.Threading.Tasks", "Infrastructure.Dotnet.SPA", "Lim.Common.DotNET", "Microsoft.AspNetCore.Authentication", "Microsoft.AspNetCore.Authorization", "Microsoft.AspNetCore.Mvc", "Okta.AspNetCore"], false, false, ["Route"], false, false, [], {"_auditActionsService": [], "_configurationStorage": [], "_defaultUserCredentials": [], "_oktaMvcOptions": [], "_replicatedAuthenticationService": []}, ["AllowAnonymous", "Route", "HttpGet", "HttpPost"], 0, false, false, false, 6, 1.0, [], 392.8333333333333, 410, 0.0, 83.33333333333333, 1, 0, false, false, false, true, "public", false, ["Lim.API.IReplicatedAuthenticationService.GetAuthenticationTypeAsync", "Lim.API.IAuditActionsService.AuditUserLoggedInAsync", "Lim.API.IReplicatedAuthenticationService.AuthenticateAsync"], ["_oktaMvcOptions.IsApplicable", "authenticationType.ToString", "base.SignIn", "BadRequest", "HttpContext.SignInAsync", "Ok", "base.SignOutAsync", "HttpContext.SignOutAsync", "string.IsNullOrEmpty", "string.Equals", "_configurationStorage.GetConfigurationAsync"], false, false, false, false, ["api/authentication", "type", "verify", "signin", "Password is incorrect", "signout"], false, 0, 0, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, false], ["ControllerWithDemoMode", "Lim.API.ControllerWithDemoMode", ["???.Controller"], [], "src/Lim.API/Controllers/ControllerWithDemoMode.cs", 15, 0, {"PropertiesToExclude": "string[]", "ObjectSerializer": "Newtonsoft.Json.JsonSerializer", "_configurationStorage": "Lim.Common.DotNET.IConfigurationStorage", "_fileSystem": "???.IFileSystem", "_repositoryProfilesStorage": "Lim.Common.DotNET.IRepositoryProfilesStorage", "ProjectsStorage": "Lim.Common.DotNET.IProjectsStorage", "_customAssetCollectionConfigurationStorage": "Lim.Common.DotNET.ICustomAssetCollectionConfigurationStorage"}, ["_configurationStorage", "_fileSystem", "_repositoryProfilesStorage", "ProjectsStorage", "_customAssetCollectionConfigurationStorage"], ["ControllerWithDemoMode", "IsEnvironmentInDemoModeAsync", "ReadJsonFromFile", "ReadJsonArrayFromFile", "RemoveDemoOptions", "GetMonitoredConsumablesAsync", "BuildOption", "BuildConsumableOptions", "IsDemoOption"], ["System", "System.Collections.Generic", "System.Linq", "System.Threading.Tasks", "Infrastructure.Dotnet.Common", "Lim.Common.DotNET", "Microsoft.AspNetCore.Mvc", "MongoDB.Driver", "Newtonsoft.Json", "Newtonsoft.Json.Linq", "Newtonsoft.Json.Serialization"], false, false, [], false, false, [], {"PropertiesToExclude": [], "ObjectSerializer": [], "_configurationStorage": [], "_fileSystem": [], "_repositoryProfilesStorage": [], "ProjectsStorage": [], "_customAssetCollectionConfigurationStorage": []}, [], 0, false, false, false, 9, 1.0, [], 500.77777777777777, 305, 44.44444444444444, 0.0, 1, 0, false, true, false, true, "public", false, [], ["_configurationStorage.GetConfigurationAsync", "_fileSystem.ReadJson", "_fileSystem.ReadJsonArray", "options.Values", "portion.Replace", "portion.Where(type => !IsDemoOption(((JProperty) type).Value))\n                            .Select", "portion.Where", "IsDemoOption", "JArray.FromObject", "typeOptions.Where(option => !IsDemoOption(option))\n                                                    .ToList", "typeOptions.Where", "(await _repositoryProfilesStorage.GetProfilesAsync(\n                    projection:\n                    Builders<RepositoryProfile>.Projection.Include(profile => profile.Modules)\n                        .Include(profile => profile.Repository)\n                ))\n                .OrderBy(profile => profile.Repository.Name, StringComparer.OrdinalIgnoreCase)\n                .Select", "(await _repositoryProfilesStorage.GetProfilesAsync(\n                    projection:\n                    Builders<RepositoryProfile>.Projection.Include(profile => profile.Modules)\n                        .Include(profile => profile.Repository)\n                ))\n                .OrderBy", "_repositoryProfilesStorage.GetProfilesAsync", "Builders<RepositoryProfile>.Projection.Include(profile => profile.Modules)\n                        .Include", "Builders<RepositoryProfile>.Projection.Include", "profile.Repository.Server.Provider.ToString", "(await ProjectsStorage.GetMonitoredProjectsAsync())\n                .OrderBy(project => project.Name, StringComparer.OrdinalIgnoreCase)\n                .Select", "(await ProjectsStorage.GetMonitoredProjectsAsync())\n                .OrderBy", "ProjectsStorage.GetMonitoredProjectsAsync", "project.Server.Provider.ToString", "(await _customAssetCollectionConfigurationStorage.GetAllCustomAssetCollectionConfigurationsAsync())\n                    .OrderBy(configuration => configuration.Name, StringComparer.OrdinalIgnoreCase)\n                    .Select", "(await _customAssetCollectionConfigurationStorage.GetAllCustomAssetCollectionConfigurationsAsync())\n                    .OrderBy", "_customAssetCollectionConfigurationStorage.GetAllCustomAssetCollectionConfigurationsAsync", "consumables\n                .Select", "BuildOption(consumable.Key, consumable.DisplayName)\n                            .AddIfValueNotNull", "option.Add", "JToken.FromObject", "bool.TryParse", "token[\"demoOnly\"]\n                    .ToObject<string>", "JsonSerializer.Create"], false, false, false, false, ["options", "additionalProperties", "key", "displayName", "provider", "modules", "demoOnly"], false, 0, 0, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, true], ["ConsumableData", "Lim.API.ControllerWithDemoMode.ConsumableData", [], [], "src/Lim.API/Controllers/ControllerWithDemoMode.cs", 157, 0, {}, ["Key", "DisplayName", "Provider", "Modules"], ["ConsumableData", "Key", "DisplayName", "Provider", "Modules"], ["System", "System.Collections.Generic", "System.Linq", "System.Threading.Tasks", "Infrastructure.Dotnet.Common", "Lim.Common.DotNET", "Microsoft.AspNetCore.Mvc", "MongoDB.Driver", "Newtonsoft.Json", "Newtonsoft.Json.Linq", "Newtonsoft.Json.Serialization"], false, false, [], false, false, [], {}, [], 4, false, false, false, 1, 0.2, ["Lim.API.ControllerWithDemoMode"], 39.0, 0, 0.0, 100.0, 1, 0, false, false, false, false, "protected", false, [], [], false, false, false, false, [], false, 4, 0, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, true], ["CustomAssetCollectionController", "Lim.API.CustomAssetCollectionController", ["Lim.API.EntityControllerBase"], [], "src/Lim.API/Controllers/CustomAssetCollectionController.cs", 10, 0, {"_auditActionsService": "Lim.API.IAuditActionsService", "_commitsStorage": "Lim.Common.DotNET.ICommitsStorage", "_customAssetCollectionConfigurationStorage": "Lim.Common.DotNET.ICustomAssetCollectionConfigurationStorage", "_customAssetCollectionProfilesStorage": "Lim.Common.DotNET.ICustomAssetCollectionProfilesStorage", "_developerIdentityStorage": "Lim.Common.DotNET.IDeveloperIdentityStorage", "_developerProfilesStorage": "Lim.Common.DotNET.IDeveloperProfilesStorage", "_governanceRulesStorage": "Lim.Common.DotNET.IGovernanceRulesStorage", "_organizationProfileStorage": "Lim.Common.DotNET.IOrganizationProfileStorage", "_repositoryProfilesStorage": "Lim.Common.DotNET.IRepositoryProfilesStorage", "_configurationStorage": "Lim.Common.DotNET.IConfigurationStorage", "_customFiltersStorage": "Lim.Common.DotNET.ICustomFiltersStorage", "_httpContextAccessor": "???.IHttpContextAccessor"}, ["_auditActionsService", "_commitsStorage", "_customAssetCollectionConfigurationStorage", "_customAssetCollectionProfilesStorage", "_developerIdentityStorage", "_developerProfilesStorage", "_governanceRulesStorage", "_organizationProfileStorage", "_repositoryProfilesStorage", "_configurationStorage", "_customFiltersStorage", "_httpContextAccessor"], ["CustomAssetCollectionController", "GetCustomAssetCollectionFilterOptions", "GetCustomAssetCollectionsCustomFilterOptionsAsync", "CreateCustomAssetCollectionsCustomFilterOptionAsync", "DeleteCustomAssetCollectionsCustomFilterAsync", "GetCustomAssetCollectionSortOptions", "GetCustomAssetCollectionProfilesAsync", "GetRepositoryProfileAsync", "GetMaterialChangesFilterOptionsAsync", "GetMaterialChangesAsync", "DeleteCustomAssetCollectionConfigurationAsync", "ApplyCustomAssetCollectionConfigurationAsync", "ValidateCustomAssetCollectionConfiguration", "EntityControllerBase", "CreateCustomFilterOptionAsync", "DeleteCustomFilterAsync"], ["System.Collections.Generic", "System.Threading.Tasks", "JetBrains.Annotations", "Lim.Common.DotNET", "Microsoft.AspNetCore.Http", "Microsoft.AspNetCore.Mvc"], false, false, ["Route"], false, false, [], {"_auditActionsService": [], "_commitsStorage": [], "_customAssetCollectionConfigurationStorage": [], "_customAssetCollectionProfilesStorage": [], "_developerIdentityStorage": [], "_developerProfilesStorage": [], "_governanceRulesStorage": [], "_organizationProfileStorage": [], "_repositoryProfilesStorage": [], "_configurationStorage": [], "_customFiltersStorage": [], "_httpContextAccessor": []}, ["HttpGet", "HttpPost", "HttpDelete", "HttpPut"], 0, false, false, false, 16, 1.0, [], 312.75, 215, 0.0, 75.0, 2, 0, false, false, false, true, "public", false, ["Lim.API.EntityControllerBase.CreateCustomFilterOptionAsync", "Lim.API.EntityControllerBase.DeleteCustomFilterAsync", "Lim.API.EnrichedMaterialChanges.EnrichAndFilterAsync", "Lim.API.IAuditActionsService.AuditCustomAssetCollectionConfigurationRemovedAsync", "Lim.API.ActionResultExtensions.IsNotOk", "Lim.API.IAuditActionsService.AuditCustomAssetCollectionConfigurationAppliedAsync", "Lim.API.IAuditActionsService.AuditCustomFilterCreatedAsync"], ["_customFiltersStorage.GetCustomFiltersAsync", "_customAssetCollectionProfilesStorage.GetProfilesAndCountAsync", "CustomAssetCollectionProfile.SearchFields.ToTableFilterDictionary", ".ToTableFilterDictionary", "TableSortParsingExtensions.ToTableSortOption", "_customAssetCollectionProfilesStorage.GetProfileAsync", "_commitsStorage.GetCustomAssetCollectionMaterialChangesFilterOptionsAsync", "_customAssetCollectionConfigurationStorage.GetCustomAssetCollectionConfigurationAsync", "_commitsStorage.GetCustomAssetCollectionMaterialChangesAsync", "tableFilterToQuery.ToTableFilterDictionary", "Task.WhenAll", "_customAssetCollectionConfigurationStorage.DeleteCustomAssetCollectionAsync", "_customAssetCollectionConfigurationStorage.SyncCustomAssetCollectionConfigurationAsync", "Accepted", "_customAssetCollectionConfigurationStorage.GetAllCustomAssetCollectionConfigurationsAsync", "BaseConfiguration.ValidateConfigurationName", "string.IsNullOrEmpty", "BadRequest", "Ok", "_httpContextAccessor.UserName", ".ToTableFilterDictionary()\n                    .ToDictionary", "pair.Value.ToHashSet", "_customFiltersStorage.CreateCustomFilterAsync", "_customFiltersStorage.DeleteCustomFilterAsync"], false, false, false, false, ["api/customAssetCollections", "profiles/filterOptions", "profiles/customFilters", "profiles/customFilters/{key}", "profiles/sortOptions", "profiles/search", "{key}/profile", "{key}/materialChanges/filterOptions", "{key}/materialChanges", "configuration/{key}", "Must select at least 2 repositories"], false, 0, 0, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, false], ["DefinitionsController", "Lim.API.DefinitionsController", ["Lim.API.RulesControllerBase"], [], "src/Lim.API/Controllers/DefinitionsController.cs", 9, 0, {"_apiClassificationStorage": "Lim.Common.DotNET.IApiClassificationStorage", "_auditActionsService": "Lim.API.IAuditActionsService", "_organizationProfileStorage": "Lim.Common.DotNET.IOrganizationProfileStorage", "_resolvedApiClassificationStorage": "Lim.Common.DotNET.IResolvedApiClassificationStorage", "PropertiesToExclude": "string[]", "ObjectSerializer": "Newtonsoft.Json.JsonSerializer", "_configurationStorage": "Lim.Common.DotNET.IConfigurationStorage", "_fileSystem": "???.IFileSystem", "_repositoryProfilesStorage": "Lim.Common.DotNET.IRepositoryProfilesStorage", "ProjectsStorage": "Lim.Common.DotNET.IProjectsStorage", "_customAssetCollectionConfigurationStorage": "Lim.Common.DotNET.ICustomAssetCollectionConfigurationStorage"}, ["_apiClassificationStorage", "_auditActionsService", "_organizationProfileStorage", "_resolvedApiClassificationStorage", "_configurationStorage", "_fileSystem", "_repositoryProfilesStorage", "ProjectsStorage", "_customAssetCollectionConfigurationStorage"], ["DefinitionsController", "GetAllAsync", "DeleteDefinitionAsync", "ApplyDefinitionAsync", "ValidateApiClassificationDefinition", "RulesControllerBase", "ValidateRuleName", "ControllerWithDemoMode", "IsEnvironmentInDemoModeAsync", "ReadJsonFromFile", "ReadJsonArrayFromFile", "RemoveDemoOptions", "GetMonitoredConsumablesAsync", "BuildOption", "BuildConsumableOptions", "IsDemoOption"], ["System.Collections.Generic", "System.Linq", "System.Threading.Tasks", "Lim.Common.DotNET", "Microsoft.AspNetCore.Mvc"], false, false, ["Route"], false, false, [], {"_apiClassificationStorage": [], "_auditActionsService": [], "_organizationProfileStorage": [], "_resolvedApiClassificationStorage": [], "PropertiesToExclude": [], "ObjectSerializer": [], "_configurationStorage": [], "_fileSystem": [], "_repositoryProfilesStorage": [], "ProjectsStorage": [], "_customAssetCollectionConfigurationStorage": []}, ["HttpGet", "HttpDelete", "HttpPut"], 0, false, false, false, 16, 1.0, [], 465.0625, 318, 25.0, 31.25, 3, 0, false, false, false, true, "public", false, ["Lim.API.IAuditActionsService.AuditApiClassificationDefinitionRemovedAsync", "Lim.API.RulesControllerBase.ValidateRuleName", "Lim.API.ActionResultExtensions.IsNotOk", "Lim.API.IAuditActionsService.AuditApiClassificationDefinitionAppliedAsync"], ["(await _apiClassificationStorage.GetAllAsync())\n                .OrderBy(definition => definition.OrdinalId)\n                .ToList", "(await _apiClassificationStorage.GetAllAsync())\n                .OrderBy", "_apiClassificationStorage.GetAllAsync", "_apiClassificationStorage.GetApiClassificationDefinitionAsync", "Task.WhenAll", "_apiClassificationStorage.DeleteApiClassificationDefinitionAsync", "_resolvedApiClassificationStorage.DeleteResolvedApiClassificationAsync", "_apiClassificationStorage.CountAllAsync", "_organizationProfileStorage.UpdateOrganizationHasApiClassificationAsync", "_apiClassificationStorage.SyncApiClassificationDefinitionAsync", "Accepted", "string.IsNullOrEmpty", "BadRequest", "Ok", ".Trim", "BaseConfiguration.ValidateConfigurationName", "_configurationStorage.GetConfigurationAsync", "_fileSystem.ReadJson", "_fileSystem.ReadJsonArray", "options.Values", "portion.Replace", "portion.Where(type => !IsDemoOption(((JProperty) type).Value))\n                            .Select", "portion.Where", "IsDemoOption", "JArray.FromObject", "typeOptions.Where(option => !IsDemoOption(option))\n                                                    .ToList", "typeOptions.Where", "(await _repositoryProfilesStorage.GetProfilesAsync(\n                    projection:\n                    Builders<RepositoryProfile>.Projection.Include(profile => profile.Modules)\n                        .Include(profile => profile.Repository)\n                ))\n                .OrderBy(profile => profile.Repository.Name, StringComparer.OrdinalIgnoreCase)\n                .Select", "(await _repositoryProfilesStorage.GetProfilesAsync(\n                    projection:\n                    Builders<RepositoryProfile>.Projection.Include(profile => profile.Modules)\n                        .Include(profile => profile.Repository)\n                ))\n                .OrderBy", "_repositoryProfilesStorage.GetProfilesAsync", "Builders<RepositoryProfile>.Projection.Include(profile => profile.Modules)\n                        .Include", "Builders<RepositoryProfile>.Projection.Include", "profile.Repository.Server.Provider.ToString", "(await ProjectsStorage.GetMonitoredProjectsAsync())\n                .OrderBy(project => project.Name, StringComparer.OrdinalIgnoreCase)\n                .Select", "(await ProjectsStorage.GetMonitoredProjectsAsync())\n                .OrderBy", "ProjectsStorage.GetMonitoredProjectsAsync", "project.Server.Provider.ToString", "(await _customAssetCollectionConfigurationStorage.GetAllCustomAssetCollectionConfigurationsAsync())\n                    .OrderBy(configuration => configuration.Name, StringComparer.OrdinalIgnoreCase)\n                    .Select", "(await _customAssetCollectionConfigurationStorage.GetAllCustomAssetCollectionConfigurationsAsync())\n                    .OrderBy", "_customAssetCollectionConfigurationStorage.GetAllCustomAssetCollectionConfigurationsAsync", "consumables\n                .Select", "BuildOption(consumable.Key, consumable.DisplayName)\n                            .AddIfValueNotNull", "option.Add", "JToken.FromObject", "bool.TryParse", "token[\"demoOnly\"]\n                    .ToObject<string>"], false, false, false, false, ["api/definitions", "apiClassifications", "apiClassification/{key}", "Must select file repository", "Must enter file path", "Must select an API classification"], false, 0, 0, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, false], ["DevelopersController", "Lim.API.DevelopersController", ["Lim.API.EntityControllerBase"], [], "src/Lim.API/Controllers/DevelopersController.cs", 12, 0, {"_commitsStorage": "Lim.Common.DotNET.ICommitsStorage", "_developerIdentityStorage": "Lim.Common.DotNET.IDeveloperIdentityStorage", "_developerProfilesStorage": "Lim.Common.DotNET.IDeveloperProfilesStorage", "_developerProjectProfilesStorage": "Lim.Common.DotNET.IDeveloperProjectProfilesStorage", "_developerRepositoryProfilesStorage": "Lim.Common.DotNET.IDeveloperRepositoryProfilesStorage", "_governanceRulesStorage": "Lim.Common.DotNET.IGovernanceRulesStorage", "_organizationProfileStorage": "Lim.Common.DotNET.IOrganizationProfileStorage", "_projectProfilesStorage": "Lim.Common.DotNET.IProjectProfilesStorage", "_repositoryProfilesStorage": "Lim.Common.DotNET.IRepositoryProfilesStorage", "_configurationStorage": "Lim.Common.DotNET.IConfigurationStorage", "_auditActionsService": "Lim.API.IAuditActionsService", "_customFiltersStorage": "Lim.Common.DotNET.ICustomFiltersStorage", "_httpContextAccessor": "???.IHttpContextAccessor"}, ["_commitsStorage", "_developerIdentityStorage", "_developerProfilesStorage", "_developerProjectProfilesStorage", "_developerRepositoryProfilesStorage", "_governanceRulesStorage", "_organizationProfileStorage", "_projectProfilesStorage", "_repositoryProfilesStorage", "_configurationStorage", "_auditActionsService", "_customFiltersStorage", "_httpContextAccessor"], ["DevelopersController", "GetDeveloperProfilesAsync", "GetDevelopersCustomFilterOptionsAsync", "CreateDevelopersCustomFilterOptionAsync", "DeleteDeveloperCustomFilterAsync", "GetDevelopersFilterOptions", "GetDevelopersSortOptions", "GetDeveloperProfileAsync", "GetDeveloperProfileByIdentityKeyAsync", "GetTopSecurityBadgedDeveloperKeysAsync", "GetMaterialChangesAsync", "GetRepositoriesAsync", "GetProjectsAsync", "GetProfilesFilterOptionsAsync", "GetProjectsFilterOptionsAsync", "GetRepositoriesFilterOptionsAsync", "GetMaterialChangesFilterOptionsAsync", "EntityControllerBase", "CreateCustomFilterOptionAsync", "DeleteCustomFilterAsync"], ["System.Collections.Generic", "System.Linq", "System.Threading.Tasks", "Infrastructure.Dotnet.Common", "JetBrains.Annotations", "Lim.Common.DotNET", "Microsoft.AspNetCore.Http", "Microsoft.AspNetCore.Mvc"], false, false, ["Route"], false, false, [], {"_commitsStorage": [], "_developerIdentityStorage": [], "_developerProfilesStorage": [], "_developerProjectProfilesStorage": [], "_developerRepositoryProfilesStorage": [], "_governanceRulesStorage": [], "_organizationProfileStorage": [], "_projectProfilesStorage": [], "_repositoryProfilesStorage": [], "_configurationStorage": [], "_auditActionsService": [], "_customFiltersStorage": [], "_httpContextAccessor": []}, ["HttpGet", "HttpPost", "HttpDelete", "OnExceptionFallbackToEmptyArrayFilter"], 0, false, false, false, 21, 1.0, [], 306.7142857142857, 209, 0.0, 85.71428571428571, 2, 0, false, false, false, true, "public", false, ["Lim.API.EntityControllerBase.CreateCustomFilterOptionAsync", "Lim.API.EntityControllerBase.DeleteCustomFilterAsync", "Lim.API.EnrichedMaterialChanges.EnrichAndFilterAsync", "Lim.API.RelatedEntityProfile<Lim.Common.DotNET.RepositoryProfile, Lim.Common.DotNET.DeveloperRepositoryProfile>.EnrichAsync", "Lim.API.RelatedEntityProfile<Lim.Common.DotNET.ProjectProfile, Lim.Common.DotNET.DeveloperProjectProfile>.EnrichAsync", "Lim.API.IAuditActionsService.AuditCustomFilterCreatedAsync"], ["_developerProfilesStorage.GetDeveloperProfilesAsync", "tableFilterToQuery.ToTableFilterDictionary", "_customFiltersStorage.GetCustomFiltersAsync", "_developerProfilesStorage.GetDeveloperProfilesAndCountAsync", "DeveloperProfile.SearchFields.ToTableFilterDictionary", ".ToTableFilterDictionary", "TableSortParsingExtensions.ToTableSortOption", "_developerProfilesStorage.GetDeveloperProfileByKeyAsync", "_developerIdentityStorage.GetDeveloperIdentityByKeyAsync", "NotFound", "Ok", "_developerProfilesStorage.GetTopSecurityBadgedDeveloperKeysAsync", "_commitsStorage.GetDeveloperMaterialChangesAsync", "_developerRepositoryProfilesStorage.GetProfilesForDeveloperAsync", "(\n                    await _repositoryProfilesStorage.GetProfilesAsync(repositoryKeys)\n                ).ToDictionary", "_repositoryProfilesStorage.GetProfilesAsync", "_developerProjectProfilesStorage.GetProfilesForDeveloperAsync", "(\n                    await _projectProfilesStorage.GetProfilesAsync(projectKeys)\n                ).ToDictionary", "_projectProfilesStorage.GetProfilesAsync", "_developerProfilesStorage.GetFilterOptionsAsync", "EnumUtils.FromString<TableFilter>", "_developerProjectProfilesStorage.GetFilterOptionsForDeveloperAsync", "_developerRepositoryProfilesStorage.GetFilterOptionsForDeveloperAsync", "_commitsStorage.GetDeveloperMaterialChangesFilterOptionsAsync", "_httpContextAccessor.UserName", ".ToTableFilterDictionary()\n                    .ToDictionary", "pair.Value.ToHashSet", "_customFiltersStorage.CreateCustomFilterAsync", "BadRequest", "_customFiltersStorage.DeleteCustomFilterAsync"], false, false, false, false, ["api/developers", "profiles/filter", "profiles/customFilters", "profiles/customFilters/{key}", "profiles/filterOptions", "profiles/sortOptions", "profiles/search", "{developerKey}", "byIdentity/{developerIdentityKey}", "topSecurityBadged", "{developerKey}/materialChanges", "{key}/repositories/filter", "{key}/projects/filter", "profiles/filterOptions/{filterColumn}", "{key}/projects/filterOptions/{filterColumn}", "{key}/repositories/filterOptions/{filterColumn}", "{key}/materialChanges/filterOptions"], false, 0, 0, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, false], ["EntityControllerBase", "Lim.API.EntityControllerBase", ["???.Controller"], [], "src/Lim.API/Controllers/EntityControllerBase.cs", 10, 0, {"_auditActionsService": "Lim.API.IAuditActionsService", "_customFiltersStorage": "Lim.Common.DotNET.ICustomFiltersStorage", "_httpContextAccessor": "???.IHttpContextAccessor"}, ["_auditActionsService", "_customFiltersStorage", "_httpContextAccessor"], ["EntityControllerBase", "CreateCustomFilterOptionAsync", "DeleteCustomFilterAsync"], ["System.Linq", "System.Threading.Tasks", "Lim.Common.DotNET", "Microsoft.AspNetCore.Http", "Microsoft.AspNetCore.Mvc", "Reporter.Contracts"], false, false, [], false, false, [], {"_auditActionsService": [], "_customFiltersStorage": [], "_httpContextAccessor": []}, [], 0, false, false, false, 3, 1.0, [], 373.6666666666667, 190, 0.0, 0.0, 1, 0, false, true, false, true, "public", false, ["Lim.API.IAuditActionsService.AuditCustomFilterCreatedAsync"], ["_httpContextAccessor.UserName", ".ToTableFilterDictionary()\n                    .ToDictionary", ".ToTableFilterDictionary", "pair.Value.ToHashSet", "_customFiltersStorage.CreateCustomFilterAsync", "BadRequest", "Ok", "_customFiltersStorage.DeleteCustomFilterAsync"], false, false, false, false, [], false, 0, 0, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, false], ["EnvironmentController", "Lim.API.EnvironmentController", ["???.Controller"], [], "src/Lim.API/Controllers/EnvironmentController.cs", 10, 0, {"_connectivityCheckClient": "???.IRestClient", "_connectivityCheckRetryScheme": "System.TimeSpan[]", "_logger": "???.ILogger<EnvironmentController>"}, ["_connectivityCheckClient", "_connectivityCheckRetryScheme", "_logger"], ["EnvironmentController", "TestExternalConnectivity"], ["System", "System.Threading.Tasks", "Infrastructure.Dotnet.Common", "Microsoft.AspNetCore.Mvc", "Microsoft.Extensions.Logging", "RestSharp"], false, false, ["Route"], false, false, [], {"_connectivityCheckClient": [], "_connectivityCheckRetryScheme": [], "_logger": []}, ["HttpGet"], 0, false, false, false, 2, 1.0, [], 459.0, 459, 0.0, 100.0, 1, 0, false, false, false, true, "public", false, [], ["_connectivityCheckClient.ExecuteAsyncWithTimeoutRetry", "_logger.LogInformation", "TimeSpan.FromSeconds", "_connectivityCheckClient.ApplyProxyIfNeeded"], false, false, false, false, ["api/environment", "http://google.com", "external-connectivity", "generate_204", "Test connection failed"], false, 0, 0, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, false], ["ExportController", "Lim.API.ExportController", ["???.Controller"], [], "src/Lim.API/Controllers/ExportController.cs", 14, 0, {"FeatureTuples": "System.Collections.Generic.List<(CodeParsingTarget, CodeEntity)>", "_codeFeaturesStorage": "Lim.Common.DotNET.ICodeFeaturesStorage", "_commitsStorage": "Lim.Common.DotNET.ICommitsStorage", "_developerIdentityStorage": "Lim.Common.DotNET.IDeveloperIdentityStorage", "_developerProfilesStorage": "Lim.Common.DotNET.IDeveloperProfilesStorage", "_developersStorage": "Lim.Common.DotNET.IDevelopersStorage", "_fileSystem": "???.IFileSystem", "_governanceRulesStorage": "Lim.Common.DotNET.IGovernanceRulesStorage", "_issuesStorage": "Lim.Common.DotNET.IIssuesStorage", "_logger": "???.ILogger<ExportController>", "_materialChangesStorage": "Lim.Common.DotNET.IMaterialChangesStorage", "_projectsStorage": "Lim.Common.DotNET.IProjectsStorage", "_pullRequestsStorage": "Lim.Common.DotNET.IPullRequestsStorage", "_repositoriesProvider": "Lim.GitRestApi.IRepositoriesProvider", "_repositoriesStorage": "Lim.Common.DotNET.IRepositoriesStorage", "_repositoryProfilesStorage": "Lim.Common.DotNET.IRepositoryProfilesStorage", "_resolvedApiClassificationStorage": "Lim.Common.DotNET.IResolvedApiClassificationStorage"}, ["_codeFeaturesStorage", "_commitsStorage", "_developerIdentityStorage", "_developerProfilesStorage", "_developersStorage", "_fileSystem", "_governanceRulesStorage", "_issuesStorage", "_logger", "_materialChangesStorage", "_projectsStorage", "_pullRequestsStorage", "_repositoriesProvider", "_repositoriesStorage", "_repositoryProfilesStorage", "_resolvedApiClassificationStorage"], ["ExportController", "AsActionResult", "CompressAsActionResult", "ExportPiisAsync", "ExportFeaturesAsync", "GetAllFeaturesRawAsync", "ExportDevelopersAsync", "ExportPullRequestsAsync", "ExportIssuesAsync", "ExportCommitsAsync", "ExportRepositoriesAsync", "ExportModulesAsync", "ExportResolvedApiClassificationAsync", "ExportApisAsync", "ExportChangedApiMaterialChangesAsync", "GetDevelopersCollectedDataRawAsync", "ExportRepositoryDependencies", "ExportRepositoryLicenses", "ExportRepositorySecrets", "GetPullRequestsConnectionsAsync", "DeveloperIdentityKeysToDeveloperGroupedString"], ["System", "System.Collections.Concurrent", "System.Collections.Generic", "System.Linq", "System.Threading.Tasks", "Infrastructure.Dotnet.Common", "Lim.Common.DotNET", "Lim.GitRestApi", "Microsoft.AspNetCore.Mvc", "Microsoft.Extensions.Logging"], false, false, ["Route"], false, false, [], {"FeatureTuples": [], "_codeFeaturesStorage": [], "_commitsStorage": [], "_developerIdentityStorage": [], "_developerProfilesStorage": [], "_developersStorage": [], "_fileSystem": [], "_governanceRulesStorage": [], "_issuesStorage": [], "_logger": [], "_materialChangesStorage": [], "_projectsStorage": [], "_pullRequestsStorage": [], "_repositoriesProvider": [], "_repositoriesStorage": [], "_repositoryProfilesStorage": [], "_resolvedApiClassificationStorage": []}, ["HttpGet"], 0, false, false, false, 21, 1.0, [], 1998.3809523809523, 1367, 4.761904761904762, 71.42857142857143, 1, 0, false, false, false, true, "public", false, ["Lim.API.Exporter.WriteLine"], ["File", "_fileSystem.Archive", "_repositoriesStorage.GetMonitoredRepositoriesAsync", "_commitsStorage.GetLatestFeaturesExtractedCommitShaAsync", "string.IsNullOrEmpty", "_codeFeaturesStorage.LoadAsync", "classFeatures.EntityIds.Where", "classFeatures.GetFeature<int>", "_repositoriesProvider.BuildUrl", "classFeatures.GetFeature<string>", "exporter.WriteLine", "classFeatures.GetFeature<HashSet<string>>(classId, ClassFeatureNames.PiiFieldNames)\n                                .JoinToString", "classFeatures.GetFeature<HashSet<string>>", "classFeatures.GetFeature<DataOfInterestTypes>(classId, ClassFeatureNames.PiiLevel)\n                                .HasFlag(DataOfInterestTypes.IdentifiableInformation)\n                                .ToString", "classFeatures.GetFeature<DataOfInterestTypes>(classId, ClassFeatureNames.PiiLevel)\n                                .HasFlag", "classFeatures.GetFeature<DataOfInterestTypes>", "classFeatures.GetFeature<DataOfInterestTypes>(classId, ClassFeatureNames.PiiLevel)\n                                .HasFlag(DataOfInterestTypes.HintingHumanAffiliation)\n                                .ToString", "classFeatures.GetFeature<DataOfInterestTypes>(classId, ClassFeatureNames.PiiLevel)\n                                .HasFlag(DataOfInterestTypes.HumanAffiliation)\n                                .ToString", "classFeatures.GetFeature<bool>(classId, ClassFeatureNames.PredictedAsDataModel)\n                                .ToString", "classFeatures.GetFeature<bool>", "classFeatures.GetFeature<bool>(classId, ClassFeatureNames.IsApiParameterOrReturnType)\n                                .ToString", "snippetFeatures.EntityIds.Where", "snippetFeatures.GetFeature<int>", "snippetFeatures.GetFeature<string>", "snippetFeatures.GetFileLineNumber", "snippetFeatures.GetLastLineInFile", "snippetFeatures.GetDataModelName", "snippetFeatures.GetFeature<HashSet<string>>(snippetId, DataModelSnippetFeatureNames.PiiFieldNames)\n                            .JoinToString", "snippetFeatures.GetFeature<HashSet<string>>", "snippetFeatures.GetFeature<DataOfInterestTypes>(snippetId, DataModelSnippetFeatureNames.PiiLevel)\n                            .HasFlag(DataOfInterestTypes.IdentifiableInformation)\n                            .ToString", "snippetFeatures.GetFeature<DataOfInterestTypes>(snippetId, DataModelSnippetFeatureNames.PiiLevel)\n                            .HasFlag", "snippetFeatures.GetFeature<DataOfInterestTypes>", "snippetFeatures.GetFeature<DataOfInterestTypes>(snippetId, DataModelSnippetFeatureNames.PiiLevel)\n                            .HasFlag(DataOfInterestTypes.HintingHumanAffiliation)\n                            .ToString", "snippetFeatures.GetFeature<DataOfInterestTypes>(snippetId, DataModelSnippetFeatureNames.PiiLevel)\n                            .HasFlag(DataOfInterestTypes.HumanAffiliation)\n                            .ToString", "snippetFeatures.PredictedAsDataModel(snippetId)\n                            .ToString", "snippetFeatures.PredictedAsDataModel", "results.Select", "AsActionResult", "TaskUtils.WhenAll", "_codeFeaturesStorage.FilePath", "_fileSystem.FileExists", "System.IO.File.ReadAllBytesAsync", "Task.WhenAll", "resultFetchingTasks.ToDictionary", "_projectsStorage.GetAllAsync", "_repositoriesStorage.GetRepositoryKeysAssociatedWithProjectAsync", "(await _pullRequestsStorage.GetOpenPullRequestsAsync(repositoryKey))\n                        .Where", "_pullRequestsStorage.GetOpenPullRequestsAsync", "request.IssuesKeysByProjectId.NullOrNone", "pullRequestDeveloperIdentitiesKeys.Add", "pullRequest.IssuesKeysByProjectId.GetValueOrDefault", "issueIdToPullRequestKey.AddOrUpdate", "list.Add", "_issuesStorage.GetAllIssuesAsync", "issues.Select(issue => issue.AuthorIdentityKey)\n                    .Union(issues.SelectMany(issue => issue.ParticipantIdentitiesKeys))\n                    .Union(pullRequestDeveloperIdentitiesKeys)\n                    .Distinct()\n                    .Where(key => !string.IsNullOrEmpty(key))\n                    .ToList", "issues.Select(issue => issue.AuthorIdentityKey)\n                    .Union(issues.SelectMany(issue => issue.ParticipantIdentitiesKeys))\n                    .Union(pullRequestDeveloperIdentitiesKeys)\n                    .Distinct()\n                    .Where", "issues.Select(issue => issue.AuthorIdentityKey)\n                    .Union(issues.SelectMany(issue => issue.ParticipantIdentitiesKeys))\n                    .Union(pullRequestDeveloperIdentitiesKeys)\n                    .Distinct", "issues.Select(issue => issue.AuthorIdentityKey)\n                    .Union(issues.SelectMany(issue => issue.ParticipantIdentitiesKeys))\n                    .Union", "issues.Select(issue => issue.AuthorIdentityKey)\n                    .Union", "issues.Select", "issues.SelectMany", "_developerIdentityStorage.GetDeveloperIdentitiesAsync", "developerIdentities\n                    .ToDictionary", "developerIdentities\n                    .ToDictionaryGrouped", "developersIdentitiesByKey.GetValueOrDefault", "issueIdToPullRequestKey.GetValueOrDefault", "developerIdentitiesByDeveloperKey.GetValueOrDefault", ".Select(_ => _.Identity)\n                                .Distinct()\n                                .JoinToString", ".Select(_ => _.Identity)\n                                .Distinct", ".Select", "issue.Labels.JoinToString", "issue.CreationTime.ToString", "DeveloperIdentityKeysToDeveloperGroupedString", "issue.Comments.Select(comment => comment.CommentFormatter(developersIdentitiesByKey))\n                                .JoinToString", "issue.Comments.Select", "comment.CommentFormatter", "issue.AdditionalDetails.Select(pair => $\"{pair.Key}:{pair.Value}\")\n                                .JoinToString", "issue.AdditionalDetails.Select", "pullRequests.Count.ToString", "pullRequests.Select(request => request.Id)\n                                .JoinToString", "pullRequests.Select", "pullRequests.Select(request => request.AuthorIdentityKey)\n                                    .Distinct", "pullRequests.Select(request => request.Title.Replace(\";\", \".\"))\n                                .Where(title => !string.IsNullOrEmpty(title))\n                                .JoinToString", "pullRequests.Select(request => request.Title.Replace(\";\", \".\"))\n                                .Where", "request.Title.Replace", "_logger.LogInformation", "_commitsStorage.GetCommitsToExportAsync", "_developerIdentityStorage.GetDeveloperIdentityByKeyAsync", "commitExportedFields.Timestamp.ToString", "commitExportedFields.RepositoryKeys.JoinToString", "commitExportedFields.MaterialChangesLabelsToCount.JoinToString", "_repositoriesStorage.GetAllAsync", "repository.AssociatedProjectIds.JoinToString", "_repositoryProfilesStorage.GetProfilesAsync", "repository.Modules.JoinToString", "_resolvedApiClassificationStorage.GetAllResolvedApiClassificationsSettingsAsync", "apiClassification.Classification.ToString", "(await _repositoriesStorage.GetAllAsync()).ToDictionary", "repositoriesByKey.GetValueOrDefault", "repositoryProfile.Risk.CombinedRiskLevel.ToString", ".Select(exposedPii => exposedPii.Name)\n                        .JoinToString", ".Select(potentiallyExposedPii => potentiallyExposedPii.Name)\n                        .JoinToString", ".Select(\n                                                            parameter => parameter.ParameterName\n                                                        )\n                                                        .Select(violationParts => violationParts.JoinToString(\" \"))\n                                                        .JoinToString", ".Select(\n                                                            parameter => parameter.ParameterName\n                                                        )\n                                                        .Select", "violationParts.JoinToString", "apiCodeReference.LineNumber.ToString", "apiCodeReference.LastLineInFile.ToString", "api.ApiClassification.ToString", "_governanceRulesStorage.GetGovernanceRulesAsync", "governanceRules\n                .Where(\n                    rule => rule.When.Any(portion => portion.Type == GovernanceWhenType.Api) &&\n                            rule.Then.Any(portion => portion.SubType == GovernanceThenSubType.Altered)\n                )\n                .ToList", "governanceRules\n                .Where", "rule.When.Any", "rule.Then.Any", "significantlyChangeApiRules.Select(rule => rule.Key)\n                .ToList", "significantlyChangeApiRules.Select", "significantlyChangeApiRules\n                .ToDictionary", "rule.Then\n                        .Enumerate()\n                        .Select((thenPortion, index) => new {thenPortion, index})\n                        .First", "rule.Then\n                        .Enumerate()\n                        .Select", "rule.Then\n                        .Enumerate", "_materialChangesStorage.GetMaterialChangesAsync", "(await _commitsStorage.GetCommitsToExportAsync(\n                    materialChanges.Select(materialChange => materialChange.TargetCommitSha)\n                        .ToHashSet()\n                )).ToDictionary", "materialChanges.Select(materialChange => materialChange.TargetCommitSha)\n                        .ToHashSet", "materialChanges.Select", "materialChange.RuleThenIndexes.Contains", "thenIndexByRule.GetValueOrDefault", "commitBySha.GetValueOrDefault", ".Timestamp.ToString", "methodsMaterialChange.Descriptions.JoinToString", "_developersStorage.GetDevelopersAsync", "(await _developerProfilesStorage.GetDeveloperProfilesAsync())\n                .ToDictionary", "_developerProfilesStorage.GetDeveloperProfilesAsync", "developerProfilesByKeys.GetValueOrDefault", "_developerIdentityStorage.GetDeveloperIdentitiesByDeveloperKeyAsync", "developerIdentities.Select(_ => _.Identity)\n                        .Distinct()\n                        .JoinToString", "developerIdentities.Select(_ => _.Identity)\n                        .Distinct", "developerIdentities.Select", "developerIdentities.Select(_ => _.ServerUrl)\n                        .Distinct()\n                        .JoinToString", "developerIdentities.Select(_ => _.ServerUrl)\n                        .Distinct", "developer.AdditionalInformation.GetValueOrDefault", "developerProfile.ActiveSince.GetValueOrDefault(DateTime.MinValue)\n                        .ToString", "developerProfile.ActiveSince.GetValueOrDefault", "developerProfile.LastActivity.GetValueOrDefault(DateTime.MinValue)\n                        .ToString", "developerProfile.LastActivity.GetValueOrDefault", "developerProfile.RepositoryCount.ToString", "developerProfile.CommitCount.ToString", "developerProfile.AuthoredPullRequestCount.ToString", "developerProfile.ReviewedPullRequestCount.ToString", "developerProfile.PiisAggregatedAdditions.ToString", "developerProfile.ApisAggregatedAdditions.ToString", "developerProfile.DataModelAggregatedModifications.ToString", "developerProfile.SecurityExpertise.JoinToString", "_repositoriesStorage.GetRepositoryAsync", "NotFound", "_commitsStorage.GetLatestPropertiesAsync", "dependencies.OrderBy", "dependency.Versions.Ordered()\n                        .JoinToString", "dependency.Versions.Ordered", "dependency.LicensesNames.Ordered()\n                        .JoinToString", "dependency.LicensesNames.Ordered", "dependency.Licenses.Select(license => license.Url)\n                        .Compact()\n                        .JoinToString", "dependency.Licenses.Select(license => license.Url)\n                        .Compact", "dependency.Licenses.Select", "dependency.IsExternal.ToString", "dependencies\n                .SelectMany(dependency => dependency.LicensesNames)\n                .ToHistogram", "dependencies\n                .SelectMany", "licensesWithCount.OrderBy", "count.ToString", "exposedSecrets.OrderBy", "exposedSecret.LineNumbers.Zip(exposedSecret.Secrets)\n                    .OrderBy", "exposedSecret.LineNumbers.Zip", "lineNumber.ToString", "_pullRequestsStorage.GetAllPullRequestsAsync", "pullRequests.Select(pr => pr.AuthorIdentityKey)\n                .Union(pullRequests.SelectMany(pr => pr.ReviewersIdentitiesKeys))\n                .Distinct()\n                .Where(key => !string.IsNullOrEmpty(key))\n                .ToList", "pullRequests.Select(pr => pr.AuthorIdentityKey)\n                .Union(pullRequests.SelectMany(pr => pr.ReviewersIdentitiesKeys))\n                .Distinct()\n                .Where", "pullRequests.Select(pr => pr.AuthorIdentityKey)\n                .Union(pullRequests.SelectMany(pr => pr.ReviewersIdentitiesKeys))\n                .Distinct", "pullRequests.Select(pr => pr.AuthorIdentityKey)\n                .Union", "pullRequests.SelectMany", "developerIdentities.ToDictionary", "developerIdentities.ToDictionaryGrouped", "pullRequest.Id.ToString", "pullRequest.CreationTime.ToString", "developerIdentitiesByKeys.GetValueOrDefault", "pullRequest.Comments.Select(comment => comment.CommentFormatter(developerIdentitiesByKeys))\n                        .JoinToString", "pullRequest.Comments.Select", "pullRequest.ContainedCommitsSha.JoinToString", ".Select(\n                    key => developersIdentitiesByKey.GetValueOrDefault(key)\n                        ?.DeveloperKey\n                )\n                .WhereNotNull()\n                .Select(\n                    developerKey => (developerKey, identities: developerIdentitiesByDeveloperKey.GetValueOrDefault(developerKey)\n                        ?.Select(_ => _.Identity)\n                        .Distinct())\n                )\n                .Where(_ => _.identities != null)\n                .DistinctBy(_ => _.developerKey)\n                .Select(_ => $\"{_.developerKey}:{_.identities.JoinToString(\";\")}\")\n                .JoinToString", ".Select(\n                    key => developersIdentitiesByKey.GetValueOrDefault(key)\n                        ?.DeveloperKey\n                )\n                .WhereNotNull()\n                .Select(\n                    developerKey => (developerKey, identities: developerIdentitiesByDeveloperKey.GetValueOrDefault(developerKey)\n                        ?.Select(_ => _.Identity)\n                        .Distinct())\n                )\n                .Where(_ => _.identities != null)\n                .DistinctBy(_ => _.developerKey)\n                .Select", ".Select(\n                    key => developersIdentitiesByKey.GetValueOrDefault(key)\n                        ?.DeveloperKey\n                )\n                .WhereNotNull()\n                .Select(\n                    developerKey => (developerKey, identities: developerIdentitiesByDeveloperKey.GetValueOrDefault(developerKey)\n                        ?.Select(_ => _.Identity)\n                        .Distinct())\n                )\n                .Where(_ => _.identities != null)\n                .DistinctBy", ".Select(\n                    key => developersIdentitiesByKey.GetValueOrDefault(key)\n                        ?.DeveloperKey\n                )\n                .WhereNotNull()\n                .Select(\n                    developerKey => (developerKey, identities: developerIdentitiesByDeveloperKey.GetValueOrDefault(developerKey)\n                        ?.Select(_ => _.Identity)\n                        .Distinct())\n                )\n                .Where", ".Select(\n                    key => developersIdentitiesByKey.GetValueOrDefault(key)\n                        ?.DeveloperKey\n                )\n                .WhereNotNull()\n                .Select", ".Select(\n                    key => developersIdentitiesByKey.GetValueOrDefault(key)\n                        ?.DeveloperKey\n                )\n                .WhereNotNull", ".Select(_ => _.Identity)\n                        .Distinct", "_.identities.JoinToString"], false, false, false, false, ["api/export", "application/zip", "piis", "RepositoryName", "RepositoryGroupName", "RepositoryUrl", "FileUrl", "RelativeFilePath", "className", "PiiFieldNames", "IdentifiableInformation", "HintingHumanAffiliation", "HumanAffiliation", "PredictedAsDataModel", "IsApiParameterOrReturnType", "", "collect-logs", "collected-logs", "developers", "pull-requests", "issues", "ServerUrl", "ProjectName", "ProjectId", "IssueId", "AuthorIdentities", "Labels", "CreationTime", "Title", "Description", "ParticipantIdentities", "AssigneeIdentities", "Comments", "AdditionalDetails", "PullRequestsCount", "PullRequestsIds", "PullRequestAuthorsIdentities", "PullRequestsTitles", ";", "s", "#;#", ".", "Failed exporting issue {issue} in project {project}", "commits", "Sha", "TimeStamp", "Message", "CommitterKey", "AuthorKey", "ParentSha", "RepositoryKeys", "MaterialChangesLabels", "repositories", "RepositoryKey", "RepositoryAssociatedProjectIds", "modules", "Modules", "resolvedApiClassifications", "Repository", "FilePath", "Classification", "Url", "apis", "RepositoryRiskLevel", "FirstLineNumberInFile", "LastLineNumberInFile", "ApiMethodName", "HttpMethod", "HttpRoute", "ApiClassification", "MethodSignature", "ExposedPii", "PotentiallyExposedPii", "ParamsMissingInputValidation", ", ", " ", "; ", "significantlyChangedApis", "CommitSha", "CommitTimestamps", "CommitMessage", "ChangeDescription", "DeveloperKey", "developerIdentities", "developersServers", "AzureDevopsUniqueName", "AzureDevopsDisplayName", "AzureDevopsDescriptor", "JiraDisplayName", "JiraUserName", "JiraDescription", "JiraAccountId", "GithubCompany", "GithubName", "GithubDescription", "GithubLoginName", "ActiveSince", "LastActivity", "ParticipatedRepositoryCount", "CommitsCount", "AuthoredPullRequestCount", "ReviewedPullRequestCount", "PiisAggregatedAdditions", "ApisAggregatedAdditions", "DataModelAggregatedModifications", "SecurityExpertise", "dependencies/{repositoryKey}", "Project", "Dependency", "Versions", "Licenses", "LicensesLinks", "HomePage", "IsExternal", " ; ", "application/csv", "licenses/{repositoryKey}", "License", "DependenciesCount", "N0", "secrets/{repositoryKey}", "LineNumber", "CensoredSecret", "PullRequestId", "Reviewers", "ContainedCommitsSha"], false, 0, 0, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, false], ["GovernanceController", "Lim.API.GovernanceController", ["Lim.API.RulesControllerBase"], [], "src/Lim.API/Controllers/GovernanceController.cs", 13, 0, {"_auditActionsService": "Lim.API.IAuditActionsService", "_governanceRulesResolver": "Lim.API.IGovernanceRulesResolver", "_governanceRulesStorage": "Lim.Common.DotNET.IGovernanceRulesStorage", "_organizationProfileStorage": "Lim.Common.DotNET.IOrganizationProfileStorage", "_repositoryProfilesStorage": "Lim.Common.DotNET.IRepositoryProfilesStorage", "PropertiesToExclude": "string[]", "ObjectSerializer": "Newtonsoft.Json.JsonSerializer", "_configurationStorage": "Lim.Common.DotNET.IConfigurationStorage", "_fileSystem": "???.IFileSystem", "ProjectsStorage": "Lim.Common.DotNET.IProjectsStorage", "_customAssetCollectionConfigurationStorage": "Lim.Common.DotNET.ICustomAssetCollectionConfigurationStorage"}, ["_auditActionsService", "_governanceRulesResolver", "_governanceRulesStorage", "_organizationProfileStorage", "_repositoryProfilesStorage", "_configurationStorage", "_fileSystem", "ProjectsStorage", "_customAssetCollectionConfigurationStorage"], ["GovernanceController", "GetRulesAsync", "ApplyRuleAsync", "ValidateSensitiveFile", "CheckForConflictsAsync", "ValidateGovernanceRule", "BuildMessageForConflictingRules", "RemoveRuleAsync", "GetAllStorageBucketFromProfilesAsync", "EnrichInfrastructureOptionsAsync", "GetOptionsAsync", "RulesControllerBase", "ValidateRuleName", "ControllerWithDemoMode", "IsEnvironmentInDemoModeAsync", "ReadJsonFromFile", "ReadJsonArrayFromFile", "RemoveDemoOptions", "GetMonitoredConsumablesAsync", "BuildOption", "BuildConsumableOptions", "IsDemoOption"], ["System", "System.Collections.Generic", "System.Linq", "System.Text", "System.Threading.Tasks", "Infrastructure.Dotnet.Common", "Lim.Common.DotNET", "Microsoft.AspNetCore.Mvc", "Newtonsoft.Json.Linq"], false, false, ["Route"], false, false, [], {"_auditActionsService": [], "_governanceRulesResolver": [], "_governanceRulesStorage": [], "_organizationProfileStorage": [], "_repositoryProfilesStorage": [], "PropertiesToExclude": [], "ObjectSerializer": [], "_configurationStorage": [], "_fileSystem": [], "ProjectsStorage": [], "_customAssetCollectionConfigurationStorage": []}, ["HttpGet", "HttpPut", "HttpDelete"], 0, false, false, false, 22, 1.0, [], 690.0909090909091, 346, 22.727272727272727, 27.272727272727273, 3, 0, false, false, false, true, "public", false, ["Lim.API.ControllerWithDemoMode.IsEnvironmentInDemoModeAsync", "Lim.API.ControllerWithDemoMode.ReadJsonArrayFromFile", "Lim.API.ActionResultExtensions.IsNotOk", "Lim.API.RulesControllerBase.ValidateRuleName", "Lim.API.IGovernanceRulesResolver.IsLogicChange", "Lim.API.IAuditActionsService.AuditRuleAppliedAsync", "Lim.API.IGovernanceRulesResolver.FindConflicts", "Lim.API.IAuditActionsService.AuditGovernanceRulesConflictFoundAsync", "Lim.API.IAuditActionsService.AuditRuleRemovedAsync", "Lim.API.ControllerWithDemoMode.BuildOption", "Lim.API.ControllerWithDemoMode.ReadJsonFromFile", "Lim.API.ControllerWithDemoMode.RemoveDemoOptions", "Lim.API.ControllerWithDemoMode.BuildConsumableOptions", "Lim.API.ControllerWithDemoMode.GetMonitoredConsumablesAsync"], ["Accepted", "(await _governanceRulesStorage.GetGovernanceRulesAsync())\n                    .OrderBy(rule => rule.OrdinalId)\n                    .ToList", "(await _governanceRulesStorage.GetGovernanceRulesAsync())\n                    .OrderBy", "_governanceRulesStorage.GetGovernanceRulesAsync", "Task.WhenAll", "_governanceRulesStorage.SyncGovernanceRuleAsync", "_governanceRulesStorage.UpdateGovernanceRuleNameAsync", "Ok", "rule.When.Any", "rule.Given.Any", "BadRequest", "conflictingRules.NullOrNone", "givenRule.AdditionalProperties.Any", "GovernanceGivenAdditionalPropertiesType.Module.ToString", "string.IsNullOrEmpty", "givenRule\n                        .AdditionalProperties.GroupBy(property => (property.Type, property.Value))\n                        .Any", "givenRule\n                        .AdditionalProperties.GroupBy", "_.Count", "rule.Then.Where(then => then.Type == GovernanceThenType.Label)\n                .Any", "rule.Then.Where", "rule.Then.Select(then => (then.SubType, then.Value).GetHashCode())\n                    .Distinct()\n                    .Count", "rule.Then.Select(then => (then.SubType, then.Value).GetHashCode())\n                    .Distinct", "rule.Then.Select", "(then.SubType, then.Value).GetHashCode", "ruleConflicts.Select(\n                    ruleConflict =>\n                        ruleConflict.Reason == GovernanceRuleConflictReason.Conflicting\n                            ? $\"Conflicts with {ruleConflict.Rule.FullDisplayName}\"\n                            : $\"Contradicts {ruleConflict.Rule.FullDisplayName}\"\n                )\n                .ToArray", "ruleConflicts.Select", "result.AppendJoin", "result.ToString", "_governanceRulesStorage.DeleteGovernanceRuleAsync", "_repositoryProfilesStorage.GetProfilesAsync", ".SelectMany(\n                    profile => profile.StorageBucketsByModule.Values.Flatten()\n                        .Select(bucket => bucket.Bucket)\n                )\n                .ToHashSet", ".SelectMany", "profile.StorageBucketsByModule.Values.Flatten()\n                        .Select", "profile.StorageBucketsByModule.Values.Flatten", ".ToString", "bucketsNames.NullOrNone", ".AddAfterSelf", "bucketsNames.Select", "_organizationProfileStorage.GetOrganizationProfileAsync", "options[\"when\"]![GovernanceWhenType.ExposedSecrets.ToString()]![\"options\"]!.Last!.AddAfterSelf", "GovernanceWhenType.ExposedSecrets.ToString", "EnumUtils.GetValues<FileClassification>()\n                        .Where(classification => classification != FileClassification.Default)\n                        .Select(\n                            classification =>\n                            (\n                                Key: classification.ToString(),\n                                Description: $\"{classification.GetDescription().ToLower()} files\"\n                            )\n                        )\n                        .OrderBy(tuple => tuple.Key)\n                        .Select", "EnumUtils.GetValues<FileClassification>()\n                        .Where(classification => classification != FileClassification.Default)\n                        .Select(\n                            classification =>\n                            (\n                                Key: classification.ToString(),\n                                Description: $\"{classification.GetDescription().ToLower()} files\"\n                            )\n                        )\n                        .OrderBy", "EnumUtils.GetValues<FileClassification>()\n                        .Where(classification => classification != FileClassification.Default)\n                        .Select", "EnumUtils.GetValues<FileClassification>()\n                        .Where", "EnumUtils.GetValues<FileClassification>", "classification.ToString", "classification.GetDescription().ToLower", "classification.GetDescription", "BuildOption", "options[\"given\"]![GovernanceGivenType.Repository.ToString()]![\"options\"]!.Last!.AddAfterSelf", "GovernanceGivenType.Repository.ToString", "options[\"given\"]![GovernanceGivenType.Project.ToString()]![\"options\"]!.Last!.AddAfterSelf", "GovernanceGivenType.Project.ToString", "GovernanceWhenType.ApiClassification.ToString", "options[\"given\"]![GovernanceGivenType.CustomAssetCollection.ToString()]![\"options\"]!.Last!.AddAfterSelf", "GovernanceGivenType.CustomAssetCollection.ToString", "EnrichInfrastructureOptionsAsync", "GovernanceWhenType.Infrastructure.ToString", "options.Values", "section.ValuesOfType<JObject>", "group.ValueOfType", "group.ValueOfType<JArray>", ".Replace", "optionsArray\n                                .OrderByDescending(\n                                    token => token[\"key\"]\n                                                 .StringValue() == CodeGovernanceKeys.Any ||\n                                             token[\"key\"]\n                                                 .StringValue() == CodeGovernanceKeys.New\n                                )\n                                .ThenBy", "optionsArray\n                                .OrderByDescending", "token[\"key\"]\n                                                 .StringValue", "token[\"displayName\"]\n                                        .StringValue", ".Trim", "BaseConfiguration.ValidateConfigurationName", "_configurationStorage.GetConfigurationAsync", "_fileSystem.ReadJson", "_fileSystem.ReadJsonArray", "portion.Replace", "portion.Where(type => !IsDemoOption(((JProperty) type).Value))\n                            .Select", "portion.Where", "IsDemoOption", "JArray.FromObject", "typeOptions.Where(option => !IsDemoOption(option))\n                                                    .ToList", "typeOptions.Where", "(await _repositoryProfilesStorage.GetProfilesAsync(\n                    projection:\n                    Builders<RepositoryProfile>.Projection.Include(profile => profile.Modules)\n                        .Include(profile => profile.Repository)\n                ))\n                .OrderBy(profile => profile.Repository.Name, StringComparer.OrdinalIgnoreCase)\n                .Select", "(await _repositoryProfilesStorage.GetProfilesAsync(\n                    projection:\n                    Builders<RepositoryProfile>.Projection.Include(profile => profile.Modules)\n                        .Include(profile => profile.Repository)\n                ))\n                .OrderBy", "Builders<RepositoryProfile>.Projection.Include(profile => profile.Modules)\n                        .Include", "Builders<RepositoryProfile>.Projection.Include", "profile.Repository.Server.Provider.ToString", "(await ProjectsStorage.GetMonitoredProjectsAsync())\n                .OrderBy(project => project.Name, StringComparer.OrdinalIgnoreCase)\n                .Select", "(await ProjectsStorage.GetMonitoredProjectsAsync())\n                .OrderBy", "ProjectsStorage.GetMonitoredProjectsAsync", "project.Server.Provider.ToString", "(await _customAssetCollectionConfigurationStorage.GetAllCustomAssetCollectionConfigurationsAsync())\n                    .OrderBy(configuration => configuration.Name, StringComparer.OrdinalIgnoreCase)\n                    .Select", "(await _customAssetCollectionConfigurationStorage.GetAllCustomAssetCollectionConfigurationsAsync())\n                    .OrderBy", "_customAssetCollectionConfigurationStorage.GetAllCustomAssetCollectionConfigurationsAsync", "consumables\n                .Select", "BuildOption(consumable.Key, consumable.DisplayName)\n                            .AddIfValueNotNull", "option.Add", "JToken.FromObject", "bool.TryParse", "token[\"demoOnly\"]\n                    .ToObject<string>"], false, false, false, false, ["api/governance", "rules", "demoGovernanceRules.json", "rules/{key}", "any", "Specific repository is required when using \"Sensitive file\"", "Conflicting rules found", "Must have risk or at least one label", "Blank additional property", "Duplicate additional property values", "Blank label", "Duplicate labels", "key", "storageAccessPolicies", "buckets", "options", "governanceOptions.json", "when", "given", "disabled", "sort", "displayName"], false, 0, 0, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, false], ["ActionResultExtensions", "Lim.API.ActionResultExtensions", [], [], "src/Lim.API/Controllers/Integrations/extension/ActionResultExtensions.cs", 5, 0, {}, [], ["IsNotOk"], ["Microsoft.AspNetCore.Mvc"], false, false, [], false, false, [], {}, [], 0, false, false, false, 1, 1.0, [], 36.0, 36, 100.0, 100.0, 0, 0, false, false, true, false, "public", false, [], [], false, false, false, false, [], false, 0, 0, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, false], ["ChannelResponseMethods", "Lim.API.ChannelResponseMethods", [], [], "src/Lim.API/Controllers/Integrations/extension/ChannelResponseMethods.cs", 5, 0, {"NameTakenError": "string"}, [], ["ChannelAlreadyExistsError"], ["Slack.NetStandard.WebApi.Conversations"], false, false, [], false, false, [], {"NameTakenError": []}, [], 0, false, false, false, 1, 1.0, [], 59.0, 59, 100.0, 100.0, 0, 0, false, false, true, false, "public", false, [], ["channelResponse.Error.Equals"], false, false, false, false, ["name_taken"], false, 0, 0, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, false], ["IntegrationsController", "Lim.API.IntegrationsController", ["???.Controller"], [], "src/Lim.API/Controllers/IntegrationsController.cs", 7, 0, {"_integrationsService": "Lim.API.IIntegrationsService"}, ["_integrationsService"], ["IntegrationsController", "AuthenticateWithSlack", "AuthenticateWithTeams"], ["System.Threading.Tasks", "Lim.Common.DotNET", "Microsoft.AspNetCore.Mvc"], false, false, ["Route"], false, false, [], {"_integrationsService": []}, ["HttpPost"], 0, false, false, false, 3, 1.0, [], 140.33333333333334, 182, 0.0, 100.0, 1, 0, false, false, false, true, "public", false, ["Lim.API.IIntegrationsService.ConnectAndNotifyAuthAsync", "Lim.API.IIntegrationsService.BuildAuthenticationUrl"], [], false, false, false, false, ["api/integrations", "slack/authenticate", "teams/authenticate"], false, 0, 0, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, false], ["MaterialChangesController", "Lim.API.MaterialChangesController", ["???.Controller"], [], "src/Lim.API/Controllers/MaterialChangesController.cs", 8, 0, {"_auditActionsService": "Lim.API.IAuditActionsService", "_commitsStorage": "Lim.Common.DotNET.ICommitsStorage", "_materialChangesService": "Lim.API.IMaterialChangesService"}, ["_auditActionsService", "_commitsStorage", "_materialChangesService"], ["MaterialChangesController", "GetCommitMaterialChangesAsync", "DismissMaterialChangeAsync"], ["System.Threading.Tasks", "Lim.Common.DotNET", "Microsoft.AspNetCore.Mvc", "RestSharp.Extensions"], false, false, ["Route"], false, false, [], {"_auditActionsService": [], "_commitsStorage": [], "_materialChangesService": []}, ["HttpGet", "HttpDelete"], 0, false, false, false, 3, 1.0, [], 289.3333333333333, 219, 0.0, 100.0, 1, 0, false, false, false, true, "public", false, ["Lim.API.IMaterialChangesService.DismissMaterialChangeAsync", "Lim.API.IAuditActionsService.AuditMaterialChangeDismissedAsync"], ["_commitsStorage.GetCommitContextAsync", "NotFound", "Ok", "_materialChangesService.GetMaterialChangesAsync", ".UrlDecode", "Task.WhenAll"], false, false, false, false, ["api/materialChanges", "commit/{commitSha}", "dismiss/{materialChangeKey}"], false, 0, 0, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, false], ["OrganizationController", "Lim.API.OrganizationController", ["???.Controller"], [], "src/Lim.API/Controllers/OrganizationController.cs", 11, 0, {"_commitsStorage": "Lim.Common.DotNET.ICommitsStorage", "_developersProfileStorage": "Lim.Common.DotNET.IDeveloperProfilesStorage", "_projectProfilesStorage": "Lim.Common.DotNET.IProjectProfilesStorage", "_projectsStorage": "Lim.Common.DotNET.IProjectsStorage", "_repositoriesStorage": "Lim.Common.DotNET.IRepositoriesStorage", "_repositoryProfilesStorage": "Lim.Common.DotNET.IRepositoryProfilesStorage", "_customAssetCollectionProfilesStorage": "Lim.Common.DotNET.ICustomAssetCollectionProfilesStorage"}, ["_commitsStorage", "_developersProfileStorage", "_projectProfilesStorage", "_projectsStorage", "_repositoriesStorage", "_repositoryProfilesStorage", "_customAssetCollectionProfilesStorage"], ["OrganizationController", "GetOrganizationStatisticsAsync", "GetRiskyRepositoryKeysByProjectKeysAsync", "GetGraphsAsync"], ["System", "System.Collections.Generic", "System.Linq", "System.Threading.Tasks", "Infrastructure.Dotnet.Common", "Lim.Common.DotNET", "Microsoft.AspNetCore.Mvc"], false, false, ["Route"], false, false, [], {"_commitsStorage": [], "_developersProfileStorage": [], "_projectProfilesStorage": [], "_projectsStorage": [], "_repositoriesStorage": [], "_repositoryProfilesStorage": [], "_customAssetCollectionProfilesStorage": []}, ["HttpGet"], 0, false, false, false, 4, 1.0, [], 1623.5, 1494, 0.0, 75.0, 1, 0, false, false, false, true, "public", false, [], ["_repositoriesStorage.GetMonitoredRepositoriesAsync", "monitoredRepositories.Select(repository => repository.Key)\n                .ToHashSet", "monitoredRepositories.Select", "monitoredRepositories.SelectParallelAsync(\n                    async monitoredRepository => (\n                        RepositoryKey: monitoredRepository.Key,\n                        RepositoryDependencies: (await _commitsStorage.GetLatestPropertiesAsync(monitoredRepository.Key))?.Dependencies ?? new List<Dependency>()\n                    )\n                )\n                .ToListAsync", "monitoredRepositories.SelectParallelAsync", "_commitsStorage.GetLatestPropertiesAsync", "_projectProfilesStorage.CountRiskyProfilesByLevelAsync", "_repositoryProfilesStorage.CountRiskyProfilesByLevelAsync", "repositoryKeyToRepositoryDependenciesList.SelectMany(repositoryKeyToRepositoryDependencies => repositoryKeyToRepositoryDependencies.RepositoryDependencies.Select(dependency => (repositoryKeyToRepositoryDependencies.RepositoryKey, dependency.Name)))\n                    .GroupBy(pair => pair.Name)\n                    .ToDictionary", "repositoryKeyToRepositoryDependenciesList.SelectMany(repositoryKeyToRepositoryDependencies => repositoryKeyToRepositoryDependencies.RepositoryDependencies.Select(dependency => (repositoryKeyToRepositoryDependencies.RepositoryKey, dependency.Name)))\n                    .GroupBy", "repositoryKeyToRepositoryDependenciesList.SelectMany", "repositoryKeyToRepositoryDependencies.RepositoryDependencies.Select", "_.Count", "repositoryKeyToRepositoryDependenciesList.SelectMany(pair => pair.RepositoryDependencies)\n                    .Distinct()\n                    .SelectMany(dependency => dependency.LicensesNames.Select(licenseName => (DependencyName: dependency.Name, LicenseName: licenseName)))\n                    .GroupBy(_ => _.LicenseName)\n                    .ToDictionary", "repositoryKeyToRepositoryDependenciesList.SelectMany(pair => pair.RepositoryDependencies)\n                    .Distinct()\n                    .SelectMany(dependency => dependency.LicensesNames.Select(licenseName => (DependencyName: dependency.Name, LicenseName: licenseName)))\n                    .GroupBy", "repositoryKeyToRepositoryDependenciesList.SelectMany(pair => pair.RepositoryDependencies)\n                    .Distinct()\n                    .SelectMany", "repositoryKeyToRepositoryDependenciesList.SelectMany(pair => pair.RepositoryDependencies)\n                    .Distinct", "dependency.LicensesNames.Select", "pair.Count", "_repositoryProfilesStorage.CountActiveConsumableProfilesAsync", "_projectsStorage.CountMonitoredProjectsAsync", "_projectProfilesStorage.CountActiveConsumableProfilesAsync", "_customAssetCollectionProfilesStorage.CountCustomAssetCollectionProfilesAsync", "_customAssetCollectionProfilesStorage.CountActiveCustomAssetCollectionProfilesAsync", "_developersProfileStorage.CountDeveloperProfilesAsync", "_developersProfileStorage.CountActiveDeveloperProfilesAsync", "_repositoryProfilesStorage.GetRiskyProfilesAsync", "topRepositoryProfiles.Any", "topRepositoryProfiles.Select(profile => profile.Key)\n                    .ToHashSet", "topRepositoryProfiles.Select", "_projectProfilesStorage.GetRiskyProfilesAsync", "topProjectProfiles.None", "Array.Empty<ProjectProfile>", "_repositoriesStorage.GetRepositoryKeysAssociatedWithProjectAsync", "relevantRepositoryKeys.Any", "repositoryProfiles\n                        .Select(profile => profile.Key)\n                        .ToHashSet", "repositoryProfiles\n                        .Select", "topRepositoryProfilesByKey.MergeWithOverwrite", "topRepositoryProfilesByKey.Values.Union(topRepositoryProfiles)\n                    .ToList", "topRepositoryProfilesByKey.Values.Union", "DateTime.UtcNow.Date.Subtract", "TimeSpan.FromDays", "TaskUtils.WhenAll", "_commitsStorage.GetCommitGraph", "_commitsStorage.GetMaterialChangeGraph", "ActivityGraphUtils.FillEmptyActivity", "commitGraph.Any", "commitGraph.First", "commitGraph.Last"], false, false, false, false, ["api/organization", "statistics", "risky", ""], false, 0, 0, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, false], ["ProjectsController", "Lim.API.ProjectsController", ["Lim.API.EntityControllerBase"], [], "src/Lim.API/Controllers/ProjectsController.cs", 12, 0, {"_auditActionsService": "Lim.API.IAuditActionsService", "_commitsStorage": "Lim.Common.DotNET.ICommitsStorage", "_consumablesRemovalCleanupQueue": "Lim.API.IConsumablesRemovalCleanupQueue", "_developerIdentityStorage": "Lim.Common.DotNET.IDeveloperIdentityStorage", "_developerProfilesStorage": "Lim.Common.DotNET.IDeveloperProfilesStorage", "_developerProjectProfilesStorage": "Lim.Common.DotNET.IDeveloperProjectProfilesStorage", "_governanceRulesStorage": "Lim.Common.DotNET.IGovernanceRulesStorage", "_organizationProfileStorage": "Lim.Common.DotNET.IOrganizationProfileStorage", "_projectProfilesStorage": "Lim.Common.DotNET.IProjectProfilesStorage", "_projectsStorage": "Lim.Common.DotNET.IProjectsStorage", "_projectsSyncQueue": "???.IConsumablesSyncQueue<Project>", "_repositoryProfilesStorage": "Lim.Common.DotNET.IRepositoryProfilesStorage", "_repositoryProjectProfileStorage": "Lim.Common.DotNET.IRepositoryProjectProfileStorage", "_configurationStorage": "Lim.Common.DotNET.IConfigurationStorage", "_customFiltersStorage": "Lim.Common.DotNET.ICustomFiltersStorage", "_httpContextAccessor": "???.IHttpContextAccessor"}, ["_auditActionsService", "_commitsStorage", "_consumablesRemovalCleanupQueue", "_developerIdentityStorage", "_developerProfilesStorage", "_developerProjectProfilesStorage", "_governanceRulesStorage", "_organizationProfileStorage", "_projectProfilesStorage", "_projectsStorage", "_projectsSyncQueue", "_repositoryProfilesStorage", "_repositoryProjectProfileStorage", "_configurationStorage", "_customFiltersStorage", "_httpContextAccessor"], ["ProjectsController", "GetProjectAsync", "UpdateProjectAsync", "GetProjectsAsync", "GetRepositoriesFilterOptions", "GetProjectsCustomFilterOptionsAsync", "CreateProjectsCustomFilterOptionAsync", "DeleteProjectsCustomFiltersync", "GetProjectsSortOptions", "GetProjectProfilesAsync", "GetProjectProfileAsync", "GetMaterialChangesAsync", "GetRepositoriesAsync", "GetDevelopersAsync", "GetFilterOptionsAsync", "GetProfilesFilterOptionsAsync", "GetDevelopersFilterOptions", "GetMaterialChangesFilterOptionsAsync", "EntityControllerBase", "CreateCustomFilterOptionAsync", "DeleteCustomFilterAsync"], ["System.Collections.Generic", "System.Linq", "System.Threading.Tasks", "Infrastructure.Dotnet.Common", "JetBrains.Annotations", "Lim.Common.DotNET", "Microsoft.AspNetCore.Http", "Microsoft.AspNetCore.Mvc"], false, false, ["Route"], false, false, [], {"_auditActionsService": [], "_commitsStorage": [], "_consumablesRemovalCleanupQueue": [], "_developerIdentityStorage": [], "_developerProfilesStorage": [], "_developerProjectProfilesStorage": [], "_governanceRulesStorage": [], "_organizationProfileStorage": [], "_projectProfilesStorage": [], "_projectsStorage": [], "_projectsSyncQueue": [], "_repositoryProfilesStorage": [], "_repositoryProjectProfileStorage": [], "_configurationStorage": [], "_customFiltersStorage": [], "_httpContextAccessor": []}, ["HttpGet", "HttpPut", "HttpPost", "HttpDelete", "OnExceptionFallbackToEmptyArrayFilter"], 0, false, false, false, 23, 1.0, [], 323.30434782608694, 207, 0.0, 86.95652173913044, 2, 0, false, false, false, true, "public", false, ["Lim.API.IConsumablesRemovalCleanupQueue.EnqueueRemovedProjectAsync", "Lim.API.IAuditActionsService.AuditMonitorProjectAsync", "Lim.API.IConsumablesSyncQueue<Lim.Common.DotNET.Project>.EnqueueAsync", "Lim.API.EntityControllerBase.CreateCustomFilterOptionAsync", "Lim.API.EntityControllerBase.DeleteCustomFilterAsync", "Lim.API.EnrichedMaterialChanges.EnrichAndFilterAsync", "Lim.API.RelatedEntityProfile<Lim.Common.DotNET.RepositoryProfile, Lim.Common.DotNET.RepositoryProjectProfile>.EnrichAsync", "Lim.API.RelatedEntityProfile<Lim.Common.DotNET.DeveloperProfile, Lim.Common.DotNET.DeveloperProjectProfile>.EnrichAsync", "Lim.API.IAuditActionsService.AuditCustomFilterCreatedAsync"], ["_projectsStorage.GetProjectAsync", "_projectsStorage.SetFieldAsync", "_projectProfilesStorage.SyncProfilesAsync", "ProjectProfile.EmptyProfileFor", "NotFound", "Accepted", "_projectsStorage.GetProjectsPageWithCountAsync", "tableFilterToQuery.ToTableFilterDictionary", "_customFiltersStorage.GetCustomFiltersAsync", "_projectProfilesStorage.GetProfilesAndCountAsync", "ProjectProfile.SearchFields.ToTableFilterDictionary", ".ToTableFilterDictionary", "TableSortParsingExtensions.ToTableSortOption", "_projectProfilesStorage.GetProfilesAsync", "_projectProfilesStorage.GetProfileByKeyAsync", "_commitsStorage.GetProjectMaterialChangesAsync", "_repositoryProjectProfileStorage.GetProfilesForProjectAsync", "(\n                    await _repositoryProfilesStorage.GetProfilesAsync(repositoryKeys)\n                ).ToDictionary", "_repositoryProfilesStorage.GetProfilesAsync", "_developerProjectProfilesStorage.GetProfilesForProjectAsync", "(\n                    await _developerProfilesStorage.GetDeveloperProfilesAsync(developerKeys)\n                ).ToDictionary", "_developerProfilesStorage.GetDeveloperProfilesAsync", "_projectsStorage.GetFilterOptionsAsync", "EnumUtils.FromString<TableFilter>", "_projectProfilesStorage.GetFilterOptionsAsync", "_repositoryProjectProfileStorage.GetFilterOptionsForProjectAsync", "_developerProjectProfilesStorage.GetFilterOptionsForProjectAsync", "_commitsStorage.GetProjectMaterialChangesFilterOptionsAsync", "_httpContextAccessor.UserName", ".ToTableFilterDictionary()\n                    .ToDictionary", "pair.Value.ToHashSet", "_customFiltersStorage.CreateCustomFilterAsync", "BadRequest", "Ok", "_customFiltersStorage.DeleteCustomFilterAsync"], false, false, false, false, ["api/projects", "{key}", "filter", "profiles/filterOptions", "profiles/customFilters", "profiles/customFilters/{key}", "profiles/sortOptions", "profiles/search", "profiles/filter", "{key}/profile", "{key}/materialChanges", "{key}/repositories/filter", "{key}/developers/filter", "filterOptions/{filterColumn}", "profiles/filterOptions/{filterColumn}", "{key}/repositories/filterOptions/{filterColumn}", "{key}/developers/filterOptions/{filterColumn}", "{key}/materialChanges/filterOptions"], false, 0, 0, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, false], ["ReleasesController", "Lim.API.ReleasesController", ["???.Controller"], [], "src/Lim.API/Controllers/ReleasesController.cs", 10, 0, {"_auditActionsService": "Lim.API.IAuditActionsService", "_httpContextAccessor": "???.IHttpContextAccessor", "_materialChangesService": "Lim.API.IMaterialChangesService", "_releasesStorage": "Lim.Common.DotNET.IReleasesStorage"}, ["_auditActionsService", "_httpContextAccessor", "_materialChangesService", "_releasesStorage"], ["ReleasesController", "CreateReleaseAsync", "UpdateAndResetReleaseAsync", "GetAllReleasesAsync", "GetReleaseAsync"], ["System.Collections.Generic", "System.Threading.Tasks", "Lim.Common.DotNET", "Microsoft.AspNetCore.Http", "Microsoft.AspNetCore.Mvc", "Reporter.Contracts"], false, false, ["Route"], false, false, [], {"_auditActionsService": [], "_httpContextAccessor": [], "_materialChangesService": [], "_releasesStorage": []}, ["HttpPost", "HttpPut", "HttpGet"], 0, false, false, false, 5, 1.0, [], 255.4, 242, 0.0, 100.0, 1, 0, false, false, false, true, "public", false, ["Lim.API.IAuditActionsService.AuditReleaseTriggeredAsync", "Lim.API.IMaterialChangesService.GetMaterialChangesAsync"], ["_httpContextAccessor.UserName", "_releasesStorage.SyncReleaseAsync", "_releasesStorage.UpdateAndResetReleaseAsync", "_releasesStorage.GetPageAsync", "_releasesStorage.GetReleaseAsync"], false, false, false, false, ["api/releases", "filter", "{key}"], false, 0, 0, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, false], ["RepositoriesController", "Lim.API.RepositoriesController", ["Lim.API.EntityControllerBase"], [], "src/Lim.API/Controllers/RepositoriesController.cs", 14, 0, {"_auditActionsService": "Lim.API.IAuditActionsService", "_commitsStorage": "Lim.Common.DotNET.ICommitsStorage", "_consumablesRemovalCleanupQueue": "Lim.API.IConsumablesRemovalCleanupQueue", "_consumablesSyncQueue": "???.IConsumablesSyncQueue<Repository>", "_developerIdentityStorage": "Lim.Common.DotNET.IDeveloperIdentityStorage", "_developerProfilesStorage": "Lim.Common.DotNET.IDeveloperProfilesStorage", "_developerRepositoryProfilesStorage": "Lim.Common.DotNET.IDeveloperRepositoryProfilesStorage", "_governanceRulesStorage": "Lim.Common.DotNET.IGovernanceRulesStorage", "_moduleProfileService": "Lim.API.IModuleProfilesService", "_organizationProfileStorage": "Lim.Common.DotNET.IOrganizationProfileStorage", "_projectProfilesStorage": "Lim.Common.DotNET.IProjectProfilesStorage", "_repositoriesProvider": "Lim.GitRestApi.IRepositoriesProvider", "_repositoriesStorage": "Lim.Common.DotNET.IRepositoriesStorage", "_repositoryProfilesStorage": "Lim.Common.DotNET.IRepositoryProfilesStorage", "_repositoryProjectProfileStorage": "Lim.Common.DotNET.IRepositoryProjectProfileStorage", "_configurationStorage": "Lim.Common.DotNET.IConfigurationStorage", "_customFiltersStorage": "Lim.Common.DotNET.ICustomFiltersStorage", "_httpContextAccessor": "???.IHttpContextAccessor"}, ["_auditActionsService", "_commitsStorage", "_consumablesRemovalCleanupQueue", "_consumablesSyncQueue", "_developerIdentityStorage", "_developerProfilesStorage", "_developerRepositoryProfilesStorage", "_governanceRulesStorage", "_moduleProfileService", "_organizationProfileStorage", "_projectProfilesStorage", "_repositoriesProvider", "_repositoriesStorage", "_repositoryProfilesStorage", "_repositoryProjectProfileStorage", "_configurationStorage", "_customFiltersStorage", "_httpContextAccessor"], ["RepositoriesController", "GetRepositoryAsync", "GetRepositoriesAsync", "GetRepositoriesFilterOptions", "GetRepositoriesCustomFilterOptionsAsync", "CreateRepositoriesCustomFilterOptionAsync", "DeleteRepositoriesCustomFilterAsync", "GetRepositoriesSortOptions", "GetRepositoryProfilesAsync", "GetRepositoryProfileAsync", "GetModuleProfile", "GetMaterialChangesFilterOptionsAsync", "GetModuleMaterialChangesFilterOptionsAsync", "GetMaterialChangesAsync", "GetModuleMaterialChangesAsync", "GetProjectsAsync", "GetDevelopersAsync", "SetRepositoryAsync", "GetFilterOptionsAsync", "GetProfilesFilterOptionsAsync", "GetRepositoryProjectsFilters", "GetRepositoryDevelopersFilters", "GetRepositoryBranchesAsync", "GetRepositoryTagsAsync", "EntityControllerBase", "CreateCustomFilterOptionAsync", "DeleteCustomFilterAsync"], ["System.Collections.Generic", "System.Linq", "System.Threading.Tasks", "Infrastructure.Dotnet.Common", "JetBrains.Annotations", "Lim.Common.DotNET", "Lim.GitRestApi", "Microsoft.AspNetCore.Http", "Microsoft.AspNetCore.Mvc", "RestSharp.Extensions"], false, false, ["Route"], false, false, [], {"_auditActionsService": [], "_commitsStorage": [], "_consumablesRemovalCleanupQueue": [], "_consumablesSyncQueue": [], "_developerIdentityStorage": [], "_developerProfilesStorage": [], "_developerRepositoryProfilesStorage": [], "_governanceRulesStorage": [], "_moduleProfileService": [], "_organizationProfileStorage": [], "_projectProfilesStorage": [], "_repositoriesProvider": [], "_repositoriesStorage": [], "_repositoryProfilesStorage": [], "_repositoryProjectProfileStorage": [], "_configurationStorage": [], "_customFiltersStorage": [], "_httpContextAccessor": []}, ["HttpGet", "HttpPost", "HttpDelete", "OnExceptionFallbackToEmptyArrayFilter", "HttpPut"], 0, false, false, false, 28, 1.0, [], 316.25, 211, 0.0, 89.28571428571429, 2, 0, false, false, false, true, "public", false, ["Lim.API.IConsumablesSyncQueue<Lim.Common.DotNET.Repository>.EnqueueAsync", "Lim.API.EntityControllerBase.CreateCustomFilterOptionAsync", "Lim.API.EntityControllerBase.DeleteCustomFilterAsync", "Lim.API.EnrichedMaterialChanges.EnrichAndFilterAsync", "Lim.API.RelatedEntityProfile<Lim.Common.DotNET.ProjectProfile, Lim.Common.DotNET.RepositoryProjectProfile>.EnrichAsync", "Lim.API.RelatedEntityProfile<Lim.Common.DotNET.DeveloperProfile, Lim.Common.DotNET.DeveloperRepositoryProfile>.EnrichAsync", "Lim.API.IConsumablesRemovalCleanupQueue.EnqueueRemovedRepositoryAsync", "Lim.API.IAuditActionsService.AuditMonitorRepositoryAsync", "Lim.API.IAuditActionsService.AuditCustomFilterCreatedAsync"], ["_repositoriesStorage.GetRepositoryAsync", "_repositoriesStorage.GetRepositoriesPageWithCountAsync", "tableFilterToQuery.ToTableFilterDictionary", "_customFiltersStorage.GetCustomFiltersAsync", "_repositoryProfilesStorage.GetProfilesAndCountAsync", "RepositoryProfile.SearchFields.ToTableFilterDictionary", ".ToTableFilterDictionary", "TableSortParsingExtensions.ToTableSortOption", "_repositoryProfilesStorage.GetProfilesAsync", "_repositoryProfilesStorage.GetProfileByKeyAsync", "_moduleProfileService.GetModuleProfileAsync", "moduleKey.UrlDecode", "_commitsStorage.GetRepositoryMaterialChangesFilterOptionsAsync", "_commitsStorage.GetModuleMaterialChangesFilterOptionsAsync", "_commitsStorage.GetRepositoryMaterialChangesAsync", "_commitsStorage.GetModuleMaterialChangesAsync", "_repositoryProjectProfileStorage.GetProfilesForRepositoryAsync", "(\n                    await _projectProfilesStorage.GetProfilesAsync(projectKeys)\n                ).ToDictionary", "_projectProfilesStorage.GetProfilesAsync", "_developerRepositoryProfilesStorage.GetProfilesForRepositoryAsync", "(\n                    await _developerProfilesStorage.GetDeveloperProfilesAsync(developerKeys)\n                ).ToDictionary", "_developerProfilesStorage.GetDeveloperProfilesAsync", "_repositoriesStorage.SetFieldAsync", "_repositoryProfilesStorage.SyncProfilesAsync", "RepositoryProfile.EmptyProfileFor", "NotFound", "Accepted", "_repositoriesStorage.GetFilterOptionsAsync", "EnumUtils.FromString<TableFilter>", "_repositoryProfilesStorage.GetFilterOptionsAsync", "_repositoryProjectProfileStorage.GetFilterOptionsForRepositoryAsync", "_developerRepositoryProfilesStorage.GetFilterOptionsForRepositoryAsync", "_repositoriesProvider.GetRepositoryBranchesAsync", "_repositoriesProvider.GetRepositoryTagsAsync", "_httpContextAccessor.UserName", ".ToTableFilterDictionary()\n                    .ToDictionary", "pair.Value.ToHashSet", "_customFiltersStorage.CreateCustomFilterAsync", "BadRequest", "Ok", "_customFiltersStorage.DeleteCustomFilterAsync"], false, false, false, false, ["api/repositories", "{key}", "filter", "profiles/filterOptions", "profiles/customFilters", "profiles/customFilters/{key}", "profiles/sortOptions", "profiles/search", "profiles/filter", "{key}/profile", "{key}/profile/module/{moduleKey}", "{key}/materialChanges/filterOptions", "{key}/materialChanges/filterOptions/{moduleKey}", "{key}/materialChanges", "{key}/materialChanges/{moduleKey}", "{key}/projects/filter", "{key}/developers/filter", "filterOptions/{filterColumn}", "profiles/filterOptions/{filterColumn}", "{key}/projects/filterOptions/{filterColumn}", "{key}/developers/filterOptions/{filterColumn}", "{key}/branches", "", "{key}/tags"], false, 0, 0, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, false], ["RulesControllerBase", "Lim.API.RulesControllerBase", ["Lim.API.ControllerWithDemoMode"], [], "src/Lim.API/Controllers/RulesControllerBase.cs", 8, 0, {"PropertiesToExclude": "string[]", "ObjectSerializer": "Newtonsoft.Json.JsonSerializer", "_configurationStorage": "Lim.Common.DotNET.IConfigurationStorage", "_fileSystem": "???.IFileSystem", "_repositoryProfilesStorage": "Lim.Common.DotNET.IRepositoryProfilesStorage", "ProjectsStorage": "Lim.Common.DotNET.IProjectsStorage", "_customAssetCollectionConfigurationStorage": "Lim.Common.DotNET.ICustomAssetCollectionConfigurationStorage"}, ["_configurationStorage", "_fileSystem", "_repositoryProfilesStorage", "ProjectsStorage", "_customAssetCollectionConfigurationStorage"], ["RulesControllerBase", "ValidateRuleName", "ControllerWithDemoMode", "IsEnvironmentInDemoModeAsync", "ReadJsonFromFile", "ReadJsonArrayFromFile", "RemoveDemoOptions", "GetMonitoredConsumablesAsync", "BuildOption", "BuildConsumableOptions", "IsDemoOption"], ["System.Collections.Generic", "Infrastructure.Dotnet.Common", "Lim.Common.DotNET", "Microsoft.AspNetCore.Mvc"], false, false, [], false, false, [], {"PropertiesToExclude": [], "ObjectSerializer": [], "_configurationStorage": [], "_fileSystem": [], "_repositoryProfilesStorage": [], "ProjectsStorage": [], "_customAssetCollectionConfigurationStorage": []}, [], 0, false, false, false, 11, 1.0, [], 442.8181818181818, 305, 36.36363636363637, 9.090909090909092, 2, 0, false, false, false, true, "public", false, [], [".Trim", "BaseConfiguration.ValidateConfigurationName", "string.IsNullOrEmpty", "BadRequest", "Ok", "_configurationStorage.GetConfigurationAsync", "_fileSystem.ReadJson", "_fileSystem.ReadJsonArray", "options.Values", "portion.Replace", "portion.Where(type => !IsDemoOption(((JProperty) type).Value))\n                            .Select", "portion.Where", "IsDemoOption", "JArray.FromObject", "typeOptions.Where(option => !IsDemoOption(option))\n                                                    .ToList", "typeOptions.Where", "(await _repositoryProfilesStorage.GetProfilesAsync(\n                    projection:\n                    Builders<RepositoryProfile>.Projection.Include(profile => profile.Modules)\n                        .Include(profile => profile.Repository)\n                ))\n                .OrderBy(profile => profile.Repository.Name, StringComparer.OrdinalIgnoreCase)\n                .Select", "(await _repositoryProfilesStorage.GetProfilesAsync(\n                    projection:\n                    Builders<RepositoryProfile>.Projection.Include(profile => profile.Modules)\n                        .Include(profile => profile.Repository)\n                ))\n                .OrderBy", "_repositoryProfilesStorage.GetProfilesAsync", "Builders<RepositoryProfile>.Projection.Include(profile => profile.Modules)\n                        .Include", "Builders<RepositoryProfile>.Projection.Include", "profile.Repository.Server.Provider.ToString", "(await ProjectsStorage.GetMonitoredProjectsAsync())\n                .OrderBy(project => project.Name, StringComparer.OrdinalIgnoreCase)\n                .Select", "(await ProjectsStorage.GetMonitoredProjectsAsync())\n                .OrderBy", "ProjectsStorage.GetMonitoredProjectsAsync", "project.Server.Provider.ToString", "(await _customAssetCollectionConfigurationStorage.GetAllCustomAssetCollectionConfigurationsAsync())\n                    .OrderBy(configuration => configuration.Name, StringComparer.OrdinalIgnoreCase)\n                    .Select", "(await _customAssetCollectionConfigurationStorage.GetAllCustomAssetCollectionConfigurationsAsync())\n                    .OrderBy", "_customAssetCollectionConfigurationStorage.GetAllCustomAssetCollectionConfigurationsAsync", "consumables\n                .Select", "BuildOption(consumable.Key, consumable.DisplayName)\n                            .AddIfValueNotNull", "option.Add", "JToken.FromObject", "bool.TryParse", "token[\"demoOnly\"]\n                    .ToObject<string>"], false, false, false, false, [""], false, 0, 0, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, false], ["ServersController", "Lim.API.ServersController", ["???.Controller"], [], "src/Lim.API/Controllers/ServersController.cs", 15, 0, {"_auditActionsService": "Lim.API.IAuditActionsService", "_consumableRemovalSimulator": "Lim.API.IConsumableRemovalSimulator", "_consumablesRemovalCleanupQueue": "Lim.API.IConsumablesRemovalCleanupQueue", "_messagingChannelStorage": "Lim.Common.DotNET.IMessagingChannelStorage", "_projectProfilesStorage": "Lim.Common.DotNET.IProjectProfilesStorage", "_projectsStorage": "Lim.Common.DotNET.IProjectsStorage", "_repositoriesProvider": "Lim.GitRestApi.IRepositoriesProvider", "_repositoriesStorage": "Lim.Common.DotNET.IRepositoriesStorage", "_repositoryProfilesStorage": "Lim.Common.DotNET.IRepositoryProfilesStorage", "_securityScansProjectsStorage": "Lim.Common.DotNET.ISecurityScansProjectsStorage", "_serversStorage": "Lim.Common.DotNET.IServersStorage"}, ["_auditActionsService", "_consumableRemovalSimulator", "_consumablesRemovalCleanupQueue", "_messagingChannelStorage", "_projectProfilesStorage", "_projectsStorage", "_repositoriesProvider", "_repositoriesStorage", "_repositoryProfilesStorage", "_securityScansProjectsStorage", "_serversStorage"], ["ServersController", "GetProvider", "ParseUrl", "VerifyConnectionAsync", "CreateServerAsync", "UpdateServerAsync", "GetServersAsync", "LookupServerAffectedResources", "MonitorAllAsync", "RemoveServerAsync", "SetPrivateKeyAsync"], ["System", "System.Collections.Generic", "System.IO", "System.Linq", "System.Threading.Tasks", "System.Web", "Infrastructure.Dotnet.Common", "Lim.Common.DotNET", "Lim.GitRestApi", "Microsoft.AspNetCore.Mvc", "Microsoft.VisualStudio.Services.Common"], false, false, ["Route"], false, false, [], {"_auditActionsService": [], "_consumableRemovalSimulator": [], "_consumablesRemovalCleanupQueue": [], "_messagingChannelStorage": [], "_projectProfilesStorage": [], "_projectsStorage": [], "_repositoriesProvider": [], "_repositoriesStorage": [], "_repositoryProfilesStorage": [], "_securityScansProjectsStorage": [], "_serversStorage": []}, ["HttpPost", "HttpPut", "HttpGet", "HttpDelete"], 0, false, false, false, 11, 1.0, [], 849.3636363636364, 700, 18.181818181818183, 72.72727272727273, 1, 0, false, false, false, true, "public", false, ["Lim.API.IAuditActionsService.AuditMessagingWebhookAddedAsync", "Lim.API.IAuditActionsService.AuditServerAddedAsync", "Lim.API.IAuditActionsService.AuditFailedToAddServerAsync", "Lim.API.IAuditActionsService.AuditServerUpdatedAsync", "Lim.API.IConsumableRemovalSimulator.LookupServerAffectedResources", "Lim.API.IConsumablesRemovalCleanupQueue.EnqueueRemovedServerAsync", "Lim.API.IAuditActionsService.AuditServerRemovedAsync"], ["UrlUtils.GetHost", "host.Split(\".\")\n                    .Skip(1)\n                    .JoinToString", "host.Split(\".\")\n                    .Skip", "host.Split", "UrlUtils.IsValidUrl", "_repositoriesProvider.VerifyConnectionAsync", "url.ToString", "provider.ToString", "_serversStorage.SyncServerAsync", "_messagingChannelStorage.UpsertChannelAsync", "_repositoriesProvider.NormalizedUrl", "Task.WhenAll", "Created", "BadRequest", "HttpUtility.UrlDecode", "_serversStorage.GetServerAsync", "NotFound", "Ok", "_serversStorage.GetServersAsync", "TaskUtils.WhenAll", "_repositoriesStorage.SetAllIsMonitoredAsync", "_projectsStorage.SetAllIsMonitoredAsync", "_securityScansProjectsStorage.SetAllIsMonitoredAsync", "_repositoriesStorage.GetAllForServerAsync", "repositories.Select(RepositoryProfile.EmptyProfileFor)\n                    .ToList", "repositories.Select", "_repositoryProfilesStorage.SyncProfilesAsync", "_projectsStorage.GetAllForServerAsync", "projects.Select(ProjectProfile.EmptyProfileFor)\n                    .ToList", "projects.Select", "_projectProfilesStorage.SyncProfilesAsync", "_auditActionsService.AuditMonitorAllForServerAsync", "Accepted", "_serversStorage.SetServerFieldAsync", "Request.Form.Files.Single", "file.CopyToAsync", "stream.ToArray()\n                    .ToBase64StringNoPadding", "stream.ToArray"], false, false, false, false, ["api/servers", "dev.azure.com", "github.com", "gitlab.com", "bitbucket.org", "outlook.office.com", "hooks.slack.com", ".", "visualstudio.com", "atlassian.net", "checkmarx.net", "null provider", "{serverUrl}", "{serverUrl}/affected", "{serverUrl}/monitor", "{serverUrl}/privateKey"], false, 0, 0, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, false], ["SessionController", "Lim.API.SessionController", ["???.Controller"], [], "src/Lim.API/Controllers/SessionController.cs", 10, 0, {"_configuration": "???.IConfiguration", "_configurationStorage": "Lim.Common.DotNET.IConfigurationStorage", "_organizationProfileStorage": "Lim.Common.DotNET.IOrganizationProfileStorage"}, ["_configuration", "_configurationStorage", "_organizationProfileStorage"], ["SessionController", "GetSessionConfiguration", "SetDemo"], ["System.Threading.Tasks", "Infrastructure.Dotnet.Common", "JetBrains.Annotations", "Lim.Common.DotNET", "Microsoft.AspNetCore.Mvc", "Microsoft.Extensions.Configuration"], false, false, ["Route"], false, false, [], {"_configuration": [], "_configurationStorage": [], "_organizationProfileStorage": []}, ["HttpGet", "HttpPut"], 0, false, false, false, 3, 1.0, [], 335.6666666666667, 206, 0.0, 100.0, 1, 0, false, false, false, true, "public", false, [], ["_organizationProfileStorage.GetOrganizationProfileAsync", "_configuration.GetValueWithEnv", "_configurationStorage.GetConfigurationAsync", "_configurationStorage.SyncConfigurationFieldAsync"], false, false, false, false, ["api/session", "App:IsGoogleAnalyticsEnabled", "demo"], false, 0, 0, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, false], ["SessionConfiguration", "Lim.API.SessionController.SessionConfiguration", [], [], "src/Lim.API/Controllers/SessionController.cs", 51, 0, {}, ["ConsoleUser", "OrganizationConfiguration"], ["SessionConfiguration", "IsGoogleAnalyticsEnabled", "IsDemo", "ConsoleUser", "OrganizationConfiguration"], ["System.Threading.Tasks", "Infrastructure.Dotnet.Common", "JetBrains.Annotations", "Lim.Common.DotNET", "Microsoft.AspNetCore.Mvc", "Microsoft.Extensions.Configuration"], false, false, [], false, false, [], {}, ["UsedImplicitly"], 4, false, false, false, 1, 0.2, ["Lim.API.SessionController"], 48.8, 0, 0.0, 100.0, 1, 0, false, false, false, false, "public", false, [], [], false, false, false, false, [], false, 4, 0, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, false], ["OrganizationConfiguration", "Lim.API.OrganizationConfiguration", [], [], "src/Lim.API/Controllers/SessionController.cs", 80, 0, {}, [], ["OrganizationConfiguration", "HasApiClassification", "ConnectedToVulnerabilitiesScanner"], ["System.Threading.Tasks", "Infrastructure.Dotnet.Common", "JetBrains.Annotations", "Lim.Common.DotNET", "Microsoft.AspNetCore.Mvc", "Microsoft.Extensions.Configuration"], false, false, [], false, false, [], {}, ["UsedImplicitly"], 2, false, false, false, 1, 0.3333333333333333, [], 53.333333333333336, 0, 0.0, 100.0, 1, 0, false, false, false, false, "public", false, [], [], false, false, false, false, [], false, 2, 2, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, false], ["WorkflowsController", "Lim.API.WorkflowsController", ["Lim.API.RulesControllerBase"], [], "src/Lim.API/Controllers/WorkflowsController.cs", 13, 0, {"DefaultSlackChannelName": "string", "ConsumableKeysToIgnore": "System.Collections.Generic.ISet<string>", "_auditActionsService": "Lim.API.IAuditActionsService", "_governanceRulesStorage": "Lim.Common.DotNET.IGovernanceRulesStorage", "_messagingChannelJoinQueue": "Lim.API.IMessagingChannelJoinQueue", "_messagingChannelStorage": "Lim.Common.DotNET.IMessagingChannelStorage", "_projectsProvider": "Lim.GitRestApi.IProjectsProvider", "_serverStorage": "Lim.Common.DotNET.IServersStorage", "_slackProvider": "Lim.API.ISlackProvider", "_teamsProvider": "Lim.API.ITeamsProvider", "_workflowsStorage": "Lim.Common.DotNET.IWorkflowsStorage", "PropertiesToExclude": "string[]", "ObjectSerializer": "Newtonsoft.Json.JsonSerializer", "_configurationStorage": "Lim.Common.DotNET.IConfigurationStorage", "_fileSystem": "???.IFileSystem", "_repositoryProfilesStorage": "Lim.Common.DotNET.IRepositoryProfilesStorage", "ProjectsStorage": "Lim.Common.DotNET.IProjectsStorage", "_customAssetCollectionConfigurationStorage": "Lim.Common.DotNET.ICustomAssetCollectionConfigurationStorage"}, ["_auditActionsService", "_governanceRulesStorage", "_messagingChannelJoinQueue", "_messagingChannelStorage", "_projectsProvider", "_serverStorage", "_slackProvider", "_teamsProvider", "_workflowsStorage", "_configurationStorage", "_fileSystem", "_repositoryProfilesStorage", "ProjectsStorage", "_customAssetCollectionConfigurationStorage"], ["WorkflowsController", "GetWorkflowsAsync", "ApplyWorkflowAsync", "RemoveWorkflowAsync", "GetOptionsAsync", "GetSlackMessagingChannelsAsync", "GetTeamsAsync", "GetLabelsAsync", "GetConsumablesAsync", "GetDemoConsumables", "RulesControllerBase", "ValidateRuleName", "ControllerWithDemoMode", "IsEnvironmentInDemoModeAsync", "ReadJsonFromFile", "ReadJsonArrayFromFile", "RemoveDemoOptions", "GetMonitoredConsumablesAsync", "BuildOption", "BuildConsumableOptions", "IsDemoOption"], ["System", "System.Collections.Generic", "System.Linq", "System.Threading.Tasks", "Infrastructure.Dotnet.Common", "Lim.Common.DotNET", "Lim.GitRestApi", "Microsoft.AspNetCore.Mvc", "Newtonsoft.Json.Linq"], false, false, ["Route"], false, false, [], {"DefaultSlackChannelName": [], "ConsumableKeysToIgnore": [], "_auditActionsService": [], "_governanceRulesStorage": [], "_messagingChannelJoinQueue": [], "_messagingChannelStorage": [], "_projectsProvider": [], "_serverStorage": [], "_slackProvider": [], "_teamsProvider": [], "_workflowsStorage": [], "PropertiesToExclude": [], "ObjectSerializer": [], "_configurationStorage": [], "_fileSystem": [], "_repositoryProfilesStorage": [], "ProjectsStorage": [], "_customAssetCollectionConfigurationStorage": []}, ["HttpGet", "HttpPut", "HttpDelete"], 0, false, false, false, 21, 1.0, [], 767.4285714285714, 344, 19.047619047619047, 28.571428571428573, 3, 0, false, false, false, true, "public", false, ["Lim.API.ControllerWithDemoMode.IsEnvironmentInDemoModeAsync", "Lim.API.ControllerWithDemoMode.ReadJsonArrayFromFile", "Lim.API.RulesControllerBase.ValidateRuleName", "Lim.API.ActionResultExtensions.IsNotOk", "Lim.API.ISlackProvider.FindOrCreateChannelAsync", "Lim.API.IMessagingChannelJoinQueue.EnqueueAsync", "Lim.API.IAuditActionsService.AuditWorkflowAppliedAsync", "Lim.API.IAuditActionsService.AuditWorkflowRemovedAsync", "Lim.API.ControllerWithDemoMode.ReadJsonFromFile", "Lim.API.ControllerWithDemoMode.RemoveDemoOptions", "Lim.API.ControllerWithDemoMode.BuildOption", "Lim.API.ITeamsProvider.ListTeamsAsync", "Lim.API.ControllerWithDemoMode.BuildConsumableOptions", "Lim.API.ControllerWithDemoMode.GetMonitoredConsumablesAsync"], ["Accepted", "(await _workflowsStorage.GetWorkflowsAsync())\n                    .OrderBy(workflow => workflow.OrdinalId)\n                    .ToList", "(await _workflowsStorage.GetWorkflowsAsync())\n                    .OrderBy", "_workflowsStorage.GetWorkflowsAsync", "workflow.Then.Any", "string.IsNullOrEmpty", "BadRequest", "workflow.Then.Where", "channelCreationResult.Joined", "EnumUtils.FromString<IssuePropertyTypes>", "ProjectsStorage.GetProjectAsync", "_projectsProvider.IsUserProjectMemberAsync", "e.IsOrWrapping<ProviderConnectionException>", "Task.WhenAll", "_workflowsStorage.SyncWorkflowAsync", "Ok", "_workflowsStorage.DeleteWorkflowAsync", "commitSubTypes!.First", "subType[\"key\"]!.Value<string>", "GovernanceGivenType.Project.ToString", "projects.Any", "commitSubTypes.First", "GovernanceGivenType.Repository.ToString", "repositories.Any", "GovernanceThenType.Label.ToString", "(await GetLabelsAsync(isDemo))\n                .Distinct()\n                .Select", "(await GetLabelsAsync(isDemo))\n                .Distinct", "_serverStorage.GetSlackServerAsync", "_serverStorage.GetTeamsServerAsync", "options.Values", "section.ValuesOfType<JObject>", "group.ValueOfType", "group.ValueOfType<JArray>", ".Replace", "optionsArray\n                                .OrderBy", "token[\"displayName\"]\n                                        .StringValue", "(await _messagingChannelStorage.ChannelsForServerAsync(slackServer.Url))\n                .Select(channel => BuildOption(channel.ChannelName, channel.ChannelName))\n                .ToList", "(await _messagingChannelStorage.ChannelsForServerAsync(slackServer.Url))\n                .Select", "_messagingChannelStorage.ChannelsForServerAsync", "channels.Any", "webhookChannels.Any", "webhookChannels.Select", "teams.Add", "(await _teamsProvider.ListTeamsAsync(teamsServer))\n                        .SelectAsync", "BuildOption", "(await _teamsProvider.ListChannelsAsync(teamsServer, team.Id))\n                                    .Select", "_teamsProvider.ListChannelsAsync", "(await _governanceRulesStorage.GetGovernanceRulesAsync()).SelectMany", "_governanceRulesStorage.GetGovernanceRulesAsync", "rule.GetLabels", "labels.Union", "ReadJsonArrayFromFile(\"demoGovernanceRules.json\")\n                        .SelectMany(rule => rule[\"then\"])\n                        .Where(then => then[\"type\"]!.Value<string>() == GovernanceThenType.Label.ToString())\n                        .Select", "ReadJsonArrayFromFile(\"demoGovernanceRules.json\")\n                        .SelectMany(rule => rule[\"then\"])\n                        .Where", "ReadJsonArrayFromFile(\"demoGovernanceRules.json\")\n                        .SelectMany", "then[\"type\"]!.Value<string>", "then[\"value\"]!.Value<string>", "ReadJsonFromFile(\"governanceOptions.json\")[\"given\"]![consumableType.ToString()]![\"options\"]!.Where(\n                    project => !ConsumableKeysToIgnore.Contains(project[\"key\"]!.Value<string>())\n                )\n                .Select", "ReadJsonFromFile(\"governanceOptions.json\")[\"given\"]![consumableType.ToString()]![\"options\"]!.Where", "consumableType.ToString", "ConsumableKeysToIgnore.Contains", "project[\"key\"]!.Value<string>", "project[\"displayName\"]!.Value<string>", "project[\"provider\"]!.Value<string>", ".Trim", "BaseConfiguration.ValidateConfigurationName", "_configurationStorage.GetConfigurationAsync", "_fileSystem.ReadJson", "_fileSystem.ReadJsonArray", "portion.Replace", "portion.Where(type => !IsDemoOption(((JProperty) type).Value))\n                            .Select", "portion.Where", "IsDemoOption", "JArray.FromObject", "typeOptions.Where(option => !IsDemoOption(option))\n                                                    .ToList", "typeOptions.Where", "(await _repositoryProfilesStorage.GetProfilesAsync(\n                    projection:\n                    Builders<RepositoryProfile>.Projection.Include(profile => profile.Modules)\n                        .Include(profile => profile.Repository)\n                ))\n                .OrderBy(profile => profile.Repository.Name, StringComparer.OrdinalIgnoreCase)\n                .Select", "(await _repositoryProfilesStorage.GetProfilesAsync(\n                    projection:\n                    Builders<RepositoryProfile>.Projection.Include(profile => profile.Modules)\n                        .Include(profile => profile.Repository)\n                ))\n                .OrderBy", "_repositoryProfilesStorage.GetProfilesAsync", "Builders<RepositoryProfile>.Projection.Include(profile => profile.Modules)\n                        .Include", "Builders<RepositoryProfile>.Projection.Include", "profile.Repository.Server.Provider.ToString", "(await ProjectsStorage.GetMonitoredProjectsAsync())\n                .OrderBy(project => project.Name, StringComparer.OrdinalIgnoreCase)\n                .Select", "(await ProjectsStorage.GetMonitoredProjectsAsync())\n                .OrderBy", "ProjectsStorage.GetMonitoredProjectsAsync", "project.Server.Provider.ToString", "(await _customAssetCollectionConfigurationStorage.GetAllCustomAssetCollectionConfigurationsAsync())\n                    .OrderBy(configuration => configuration.Name, StringComparer.OrdinalIgnoreCase)\n                    .Select", "(await _customAssetCollectionConfigurationStorage.GetAllCustomAssetCollectionConfigurationsAsync())\n                    .OrderBy", "_customAssetCollectionConfigurationStorage.GetAllCustomAssetCollectionConfigurationsAsync", "consumables\n                .Select", "BuildOption(consumable.Key, consumable.DisplayName)\n                            .AddIfValueNotNull", "option.Add", "JToken.FromObject", "bool.TryParse", "token[\"demoOnly\"]\n                    .ToObject<string>"], false, false, false, false, ["api/workflows", "apiiro-security", "workflows", "demoWorkflows.json", "workflows/{key}", "Must add a monitored project first", "options", "workflowOptions.json", "given", "Commit", "subTypes", "key", "then", "Issue", "disabled", "when", "Slack", "Teams", "true", "sort", "displayName", "demoGovernanceRules.json", "type", "value", "governanceOptions.json", "provider"], false, 0, 0, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, false], ["BaseGovernanceRulesSeeder", "Lim.API.BaseGovernanceRulesSeeder", [], [], "src/Lim.API/DatabaseSeeds/BaseGovernanceRulesSeeder.cs", 9, 0, {"_governanceRulesStorage": "Lim.Common.DotNET.IGovernanceRulesStorage"}, ["_governanceRulesStorage"], ["BaseGovernanceRulesSeeder", "CreateDefaultGovernanceRules", "GetRulesForSeed", "CreateRuleForAnyRepository", "CreateRiskAction", "CreateLabelAction"], ["System", "System.Collections.Generic", "System.Threading.Tasks", "JetBrains.Annotations", "Lim.Common.DotNET"], false, false, ["UsedImplicitly"], false, false, [], {"_governanceRulesStorage": []}, [], 0, false, false, false, 6, 1.0, [], 213.83333333333334, 216, 50.0, 16.666666666666668, 1, 0, false, true, false, true, "public", false, [], ["_governanceRulesStorage.SyncGovernanceRuleAsync", "Guid.NewGuid()\n                    .ToString", "Guid.NewGuid", "riskLevel.ToString"], false, false, false, false, [], false, 0, 0, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, false], ["Seed001InitialGovernanceRules", "Lim.API.Seed001InitialGovernanceRules", ["Lim.API.BaseGovernanceRulesSeeder"], [], "src/Lim.API/DatabaseSeeds/Seed001InitialGovernanceRules.cs", 7, 0, {"_governanceRulesStorage": "Lim.Common.DotNET.IGovernanceRulesStorage"}, ["_governanceRulesStorage"], ["Seed001InitialGovernanceRules", "GetRulesForSeed", "BaseGovernanceRulesSeeder", "CreateDefaultGovernanceRules", "CreateRuleForAnyRepository", "CreateRiskAction", "CreateLabelAction"], ["System.Collections.Generic", "JetBrains.Annotations", "Lim.Common.DotNET"], false, false, ["UsedImplicitly"], false, false, [], {"_governanceRulesStorage": []}, [], 0, false, false, false, 7, 1.0, [], 352.42857142857144, 225, 42.857142857142854, 28.571428571428573, 2, 0, false, false, false, true, "public", false, ["Lim.API.BaseGovernanceRulesSeeder.CreateRuleForAnyRepository", "Lim.API.BaseGovernanceRulesSeeder.CreateRiskAction", "Lim.API.BaseGovernanceRulesSeeder.CreateLabelAction"], ["GovernanceWhenType.Activity.ToString", "_governanceRulesStorage.SyncGovernanceRuleAsync", "Guid.NewGuid()\n                    .ToString", "Guid.NewGuid", "riskLevel.ToString"], false, false, false, false, ["In Active Development", "API Missing Input Validation", "Missing input validation", "Input validation significantly changed", "Input validation added"], false, 0, 0, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, false], ["Seed002ExposedSecretsRule", "Lim.API.Seed002ExposedSecretsRule", ["Lim.API.BaseGovernanceRulesSeeder"], [], "src/Lim.API/DatabaseSeeds/Seed002ExposedSecretsRule.cs", 7, 0, {"_governanceRulesStorage": "Lim.Common.DotNET.IGovernanceRulesStorage"}, ["_governanceRulesStorage"], ["Seed002ExposedSecretsRule", "GetRulesForSeed", "BaseGovernanceRulesSeeder", "CreateDefaultGovernanceRules", "CreateRuleForAnyRepository", "CreateRiskAction", "CreateLabelAction"], ["System.Collections.Generic", "JetBrains.Annotations", "Lim.Common.DotNET"], false, false, ["UsedImplicitly"], false, false, [], {"_governanceRulesStorage": []}, [], 0, false, false, false, 7, 1.0, [], 261.85714285714283, 225, 42.857142857142854, 28.571428571428573, 2, 0, false, false, false, true, "public", false, ["Lim.API.BaseGovernanceRulesSeeder.CreateRuleForAnyRepository", "Lim.API.BaseGovernanceRulesSeeder.CreateRiskAction", "Lim.API.BaseGovernanceRulesSeeder.CreateLabelAction"], ["_governanceRulesStorage.SyncGovernanceRuleAsync", "Guid.NewGuid()\n                    .ToString", "Guid.NewGuid", "riskLevel.ToString"], false, false, false, false, ["Exposed Secrets", "Exposed secret added"], false, 0, 0, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, false], ["Seed003MaterialChangeOriented", "Lim.API.Seed003MaterialChangeOriented", ["Lim.API.BaseGovernanceRulesSeeder"], [], "src/Lim.API/DatabaseSeeds/Seed003MaterialChangeOriented.cs", 6, 0, {"_governanceRulesStorage": "Lim.Common.DotNET.IGovernanceRulesStorage"}, ["_governanceRulesStorage"], ["Seed003MaterialChangeOriented", "GetRulesForSeed", "BaseGovernanceRulesSeeder", "CreateDefaultGovernanceRules", "CreateRuleForAnyRepository", "CreateRiskAction", "CreateLabelAction"], ["System.Collections.Generic", "Lim.Common.DotNET"], false, false, [], false, false, [], {"_governanceRulesStorage": []}, [], 0, false, false, false, 7, 1.0, [], 689.4285714285714, 225, 42.857142857142854, 28.571428571428573, 2, 0, false, false, false, true, "public", false, ["Lim.API.BaseGovernanceRulesSeeder.CreateRuleForAnyRepository", "Lim.API.BaseGovernanceRulesSeeder.CreateRiskAction", "Lim.API.BaseGovernanceRulesSeeder.CreateLabelAction"], ["DataToApiRelation.Involved.ToString", "DataToApiRelation.Exposed.ToString", "_governanceRulesStorage.SyncGovernanceRuleAsync", "Guid.NewGuid()\n                    .ToString", "Guid.NewGuid", "riskLevel.ToString"], false, false, false, false, ["API Modifications", "API added", "API significantly changed", "API removed", "Holds PII", "PII added", "PII removed", "PII Involved in API", "PII involved in API", "PII Exposed by API", "PII exposed in API", "Data Model Modifications", "Data model added", "Data model significantly changed", "Data model removed", "External Packages Modifications", "External dependency added", "External dependency version upgraded", "External dependency version downgraded"], false, 0, 0, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, false], ["Seed004FrameworkRules", "Lim.API.Seed004FrameworkRules", ["Lim.API.BaseGovernanceRulesSeeder"], [], "src/Lim.API/DatabaseSeeds/Seed004FrameworkRules.cs", 6, 0, {"_governanceRulesStorage": "Lim.Common.DotNET.IGovernanceRulesStorage"}, ["_governanceRulesStorage"], ["Seed004FrameworkRules", "GetRulesForSeed", "BaseGovernanceRulesSeeder", "CreateDefaultGovernanceRules", "CreateRuleForAnyRepository", "CreateRiskAction", "CreateLabelAction"], ["System.Collections.Generic", "Lim.Common.DotNET"], false, false, [], false, false, [], {"_governanceRulesStorage": []}, [], 0, false, false, false, 7, 1.0, [], 340.7142857142857, 225, 42.857142857142854, 28.571428571428573, 2, 0, false, false, false, true, "public", false, ["Lim.API.BaseGovernanceRulesSeeder.CreateRuleForAnyRepository", "Lim.API.BaseGovernanceRulesSeeder.CreateRiskAction", "Lim.API.BaseGovernanceRulesSeeder.CreateLabelAction"], ["_governanceRulesStorage.SyncGovernanceRuleAsync", "Guid.NewGuid()\n                    .ToString", "Guid.NewGuid", "riskLevel.ToString"], false, false, false, false, ["Data Store Frameworks Modifications", "Data store framework usage modified", "Logging Frameworks Modifications", "Logging framework usage modified"], false, 0, 0, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, false], ["Seed006SecurityConfigurationRules", "Lim.API.Seed006SecurityConfigurationRules", ["Lim.API.BaseGovernanceRulesSeeder"], [], "src/Lim.API/DatabaseSeeds/Seed006SecurityConfigurationRules.cs", 6, 0, {"_governanceRulesStorage": "Lim.Common.DotNET.IGovernanceRulesStorage"}, ["_governanceRulesStorage"], ["Seed006SecurityConfigurationRules", "GetRulesForSeed", "BaseGovernanceRulesSeeder", "CreateDefaultGovernanceRules", "CreateRuleForAnyRepository", "CreateRiskAction", "CreateLabelAction"], ["System.Collections.Generic", "Lim.Common.DotNET"], false, false, [], false, false, [], {"_governanceRulesStorage": []}, [], 0, false, false, false, 7, 1.0, [], 295.0, 225, 42.857142857142854, 28.571428571428573, 2, 0, false, false, false, true, "public", false, ["Lim.API.BaseGovernanceRulesSeeder.CreateRuleForAnyRepository", "Lim.API.BaseGovernanceRulesSeeder.CreateRiskAction", "Lim.API.BaseGovernanceRulesSeeder.CreateLabelAction"], ["_governanceRulesStorage.SyncGovernanceRuleAsync", "Guid.NewGuid()\n                    .ToString", "Guid.NewGuid", "riskLevel.ToString"], false, false, false, false, ["Security Control Modifications", "Security controls added", "Security controls significantly changed", "Security controls removed"], false, 0, 0, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, false], ["Seed007InfrastructureMaterialChange", "Lim.API.Seed007InfrastructureMaterialChange", ["Lim.API.BaseGovernanceRulesSeeder"], [], "src/Lim.API/DatabaseSeeds/Seed007InfrastructureMaterialChange.cs", 7, 0, {"_governanceRulesStorage": "Lim.Common.DotNET.IGovernanceRulesStorage"}, ["_governanceRulesStorage"], ["Seed007InfrastructureMaterialChange", "GetRulesForSeed", "BaseGovernanceRulesSeeder", "CreateDefaultGovernanceRules", "CreateRuleForAnyRepository", "CreateRiskAction", "CreateLabelAction"], ["System", "System.Collections.Generic", "Lim.Common.DotNET"], false, false, [], false, false, [], {"_governanceRulesStorage": []}, [], 0, false, false, false, 7, 1.0, [], 192.42857142857142, 208, 42.857142857142854, 28.571428571428573, 2, 0, false, false, false, true, "public", false, [], ["Array.Empty<GovernanceRule>", "_governanceRulesStorage.SyncGovernanceRuleAsync", "Guid.NewGuid()\n                    .ToString", "Guid.NewGuid", "riskLevel.ToString"], false, false, false, false, [], false, 0, 0, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, false], ["Seed008GithubVulnerabilities", "Lim.API.Seed008GithubVulnerabilities", ["Lim.API.BaseGovernanceRulesSeeder"], [], "src/Lim.API/DatabaseSeeds/Seed008GithubVulnerabilities.cs", 8, 0, {"_governanceRulesStorage": "Lim.Common.DotNET.IGovernanceRulesStorage"}, ["_governanceRulesStorage"], ["Seed008GithubVulnerabilities", "GetRulesForSeed", "BaseGovernanceRulesSeeder", "CreateDefaultGovernanceRules", "CreateRuleForAnyRepository", "CreateRiskAction", "CreateLabelAction"], ["System.Collections.Generic", "System.Linq", "Infrastructure.Dotnet.Common", "Lim.Common.DotNET"], false, false, [], false, false, [], {"_governanceRulesStorage": []}, [], 0, false, false, false, 7, 1.0, [], 279.42857142857144, 225, 42.857142857142854, 28.571428571428573, 2, 0, false, false, false, true, "public", false, ["Lim.API.BaseGovernanceRulesSeeder.CreateRuleForAnyRepository"], ["EnumUtils.GetValues<RiskLevel>()\n                .Where(riskLevel => riskLevel != RiskLevel.None)\n                .Select(\n                    riskLevel => CreateRuleForAnyRepository(\n                        $\"GitHub Potential Vulnerabilities - {riskLevel} Severity\",\n                        new RulePortionWithProperties<GovernanceWhenType>\n                        {\n                            Type = GovernanceWhenType.Vulnerability,\n                            Value = riskLevel.ToString()\n                        },\n                        CreateRiskAction(riskLevel)\n                    )\n                )\n                .ToList", "EnumUtils.GetValues<RiskLevel>()\n                .Where(riskLevel => riskLevel != RiskLevel.None)\n                .Select", "EnumUtils.GetValues<RiskLevel>()\n                .Where", "EnumUtils.GetValues<RiskLevel>", "riskLevel.ToString", "CreateRiskAction", "_governanceRulesStorage.SyncGovernanceRuleAsync", "Guid.NewGuid()\n                    .ToString", "Guid.NewGuid"], false, false, false, false, [], false, 0, 0, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, false], ["Seed009InfrastructureSeparatedRules", "Lim.API.Seed009InfrastructureSeparatedRules", ["Lim.API.BaseGovernanceRulesSeeder"], [], "src/Lim.API/DatabaseSeeds/Seed009InfrastructureSeparatedRules.cs", 6, 0, {"_governanceRulesStorage": "Lim.Common.DotNET.IGovernanceRulesStorage"}, ["_governanceRulesStorage"], ["Seed009InfrastructureSeparatedRules", "GetRulesForSeed", "BaseGovernanceRulesSeeder", "CreateDefaultGovernanceRules", "CreateRuleForAnyRepository", "CreateRiskAction", "CreateLabelAction"], ["System.Collections.Generic", "Lim.Common.DotNET"], false, false, [], false, false, [], {"_governanceRulesStorage": []}, [], 0, false, false, false, 7, 1.0, [], 457.2857142857143, 225, 42.857142857142854, 28.571428571428573, 2, 0, false, false, false, true, "public", false, ["Lim.API.BaseGovernanceRulesSeeder.CreateRuleForAnyRepository", "Lim.API.BaseGovernanceRulesSeeder.CreateLabelAction"], ["_governanceRulesStorage.SyncGovernanceRuleAsync", "Guid.NewGuid()\n                    .ToString", "Guid.NewGuid", "riskLevel.ToString"], false, false, false, false, ["Infrastructure Network Policies", "Network policies changed", "Infrastructure Role Policies", "Roles policies changed", "Infrastructure Network Structure", "Network structure changed", "Storage Access Policy", "Storage access policies changed"], false, 0, 0, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, false], ["Seed010ApiAuthorization", "Lim.API.Seed010ApiAuthorization", ["Lim.API.BaseGovernanceRulesSeeder"], [], "src/Lim.API/DatabaseSeeds/Seed010ApiAuthorization.cs", 6, 0, {"_governanceRulesStorage": "Lim.Common.DotNET.IGovernanceRulesStorage"}, ["_governanceRulesStorage"], ["Seed010ApiAuthorization", "GetRulesForSeed", "BaseGovernanceRulesSeeder", "CreateDefaultGovernanceRules", "CreateRuleForAnyRepository", "CreateRiskAction", "CreateLabelAction"], ["System.Collections.Generic", "Lim.Common.DotNET"], false, false, [], false, false, [], {"_governanceRulesStorage": []}, [], 0, false, false, false, 7, 1.0, [], 263.0, 225, 42.857142857142854, 28.571428571428573, 2, 0, false, false, false, true, "public", false, ["Lim.API.BaseGovernanceRulesSeeder.CreateRuleForAnyRepository", "Lim.API.BaseGovernanceRulesSeeder.CreateRiskAction", "Lim.API.BaseGovernanceRulesSeeder.CreateLabelAction"], ["_governanceRulesStorage.SyncGovernanceRuleAsync", "Guid.NewGuid()\n                    .ToString", "Guid.NewGuid", "riskLevel.ToString"], false, false, false, false, ["Missing Authorization", "Missing authorization"], false, 0, 0, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, false], ["Seed011Kms", "Lim.API.Seed011Kms", ["Lim.API.BaseGovernanceRulesSeeder"], [], "src/Lim.API/DatabaseSeeds/Seed010Kms.cs", 6, 0, {"_governanceRulesStorage": "Lim.Common.DotNET.IGovernanceRulesStorage"}, ["_governanceRulesStorage"], ["Seed011Kms", "GetRulesForSeed", "BaseGovernanceRulesSeeder", "CreateDefaultGovernanceRules", "CreateRuleForAnyRepository", "CreateRiskAction", "CreateLabelAction"], ["System.Collections.Generic", "Lim.Common.DotNET"], false, false, [], false, false, [], {"_governanceRulesStorage": []}, [], 0, false, false, false, 7, 1.0, [], 265.0, 225, 42.857142857142854, 28.571428571428573, 2, 0, false, false, false, true, "public", false, ["Lim.API.BaseGovernanceRulesSeeder.CreateRuleForAnyRepository", "Lim.API.BaseGovernanceRulesSeeder.CreateRiskAction", "Lim.API.BaseGovernanceRulesSeeder.CreateLabelAction"], ["_governanceRulesStorage.SyncGovernanceRuleAsync", "Guid.NewGuid()\n                    .ToString", "Guid.NewGuid", "riskLevel.ToString"], false, false, false, false, ["KMS Usage Modified", "Key management store framework usage modified"], false, 0, 0, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, false], ["ConsumablesInterestQueue", "Lim.API.ConsumablesInterestQueue<TConsumable>", [], ["???.IConsumablesInterestQueue<TConsumable>"], "src/Lim.API/DataStore/ConsumablesInterestQueue.cs", 8, 0, {"_queue": "???.AsyncCollection<byte>"}, ["_queue"], ["EnqueueAsync", "DequeueAsync"], ["System.Threading.Tasks", "JetBrains.Annotations", "Lim.Common.DotNET", "Nito.AsyncEx"], false, false, ["UsedImplicitly"], false, false, [], {"_queue": []}, [], 0, false, false, false, 2, 1.0, [], 21.0, 21, 0.0, 100.0, 0, 0, false, false, false, true, "public", true, [], ["_queue.AddAsync", "_queue.TakeAsync"], false, false, false, false, [], false, 0, 0, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, false], ["ConsumablesRemovalCleanupQueue", "Lim.API.ConsumablesRemovalCleanupQueue", [], ["Lim.API.IConsumablesRemovalCleanupQueue"], "src/Lim.API/DataStore/ConsumablesRemovalCleanupQueue.cs", 9, 0, {"_removedEntitiesQueue": "???.AsyncCollection<(Type type, string key)>"}, ["_removedEntitiesQueue"], ["EnqueueRemovedRepositoryAsync", "EnqueueRemovedProjectAsync", "EnqueueRemovedServerAsync", "DequeueRemovedEntityAsync"], ["System", "System.Threading.Tasks", "JetBrains.Annotations", "Lim.Common.DotNET", "Nito.AsyncEx"], false, false, ["UsedImplicitly"], false, false, [], {"_removedEntitiesQueue": []}, [], 0, false, false, false, 4, 1.0, [], 70.0, 75, 0.0, 100.0, 0, 0, false, false, false, true, "public", false, [], ["_removedEntitiesQueue.AddAsync", "_removedEntitiesQueue.TakeAsync"], false, false, false, false, [], false, 0, 0, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, false], ["ConsumablesSyncQueue", "Lim.API.ConsumablesSyncQueue<TType>", [], ["???.IConsumablesSyncQueue<TType>"], "src/Lim.API/DataStore/ConsumablesSyncQueue.cs", 8, 0, {"_queue": "???.AsyncCollection<byte>"}, ["_queue"], ["EnqueueAsync", "DequeueAsync"], ["System.Threading.Tasks", "JetBrains.Annotations", "Lim.Common.DotNET", "Nito.AsyncEx"], false, false, ["UsedImplicitly"], false, false, [], {"_queue": []}, [], 0, false, false, false, 2, 1.0, [], 21.0, 21, 0.0, 100.0, 0, 0, false, false, false, true, "public", true, [], ["_queue.AddAsync", "_queue.TakeAsync"], false, false, false, false, [], false, 0, 0, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, false], ["MessagingChannelJoinQueue", "Lim.API.MessagingChannelJoinQueue", [], ["Lim.API.IMessagingChannelJoinQueue"], "src/Lim.API/DataStore/MessagingChannelJoinQueue.cs", 8, 0, {"_joinChannelRequests": "???.AsyncCollection<(MessagingChannel messagingChannel, Workflow workflow)>"}, ["_joinChannelRequests"], ["EnqueueAsync", "DequeueAsync"], ["System.Threading.Tasks", "JetBrains.Annotations", "Lim.Common.DotNET", "Nito.AsyncEx"], false, false, ["UsedImplicitly"], false, false, [], {"_joinChannelRequests": []}, [], 0, false, false, false, 2, 1.0, [], 50.0, 50, 0.0, 100.0, 0, 0, true, false, false, true, "internal", false, [], ["_joinChannelRequests.AddAsync", "_joinChannelRequests.TakeAsync"], false, false, false, false, [], false, 0, 0, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, false], ["RepositoriesFilesDiscoveryQueue", "Lim.API.RepositoriesFilesDiscoveryQueue", [], ["Lim.API.IRepositoriesFilesDiscoveryQueue"], "src/Lim.API/DataStore/RepositoriesFilesDiscoveryQueue.cs", 9, 0, {"_collectionsQueue": "???.AsyncCollection<IReadOnlyCollection<string>>"}, ["_collectionsQueue"], ["EnqueueAsync", "DequeueAsync"], ["System.Collections.Generic", "System.Linq", "System.Threading.Tasks", "JetBrains.Annotations", "Nito.AsyncEx"], false, false, ["UsedImplicitly"], false, false, [], {"_collectionsQueue": []}, [], 0, false, false, false, 2, 1.0, [], 98.0, 98, 0.0, 100.0, 0, 0, false, false, false, true, "public", false, [], ["repositoryKeys.Any", "_collectionsQueue.AddAsync", "_collectionsQueue.TakeAsync"], false, false, false, false, [], false, 0, 0, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, false], ["GovernanceRulesResolver", "Lim.API.GovernanceRulesResolver", [], ["Lim.API.IGovernanceRulesResolver"], "src/Lim.API/Governance/GovernanceRulesResolver.cs", 9, 0, {}, [], ["IsLogicChange", "AreRulesSimilar", "FindConflicts", "FindContradictingRules", "ContradictingWhenType", "FindConflictingRules", "EqualsGivenCaluse", "IntersectingGivenClause", "EqualsWhenClause", "WhenClauseContained", "EqualsThenCaluse"], ["System", "System.Collections.Generic", "System.Linq", "Infrastructure.Dotnet.Common", "Lim.Common.DotNET"], false, false, [], false, false, [], {}, [], 0, false, false, false, 11, 1.0, [], 316.54545454545456, 213, 72.72727272727273, 81.81818181818181, 0, 0, false, false, false, false, "public", false, [], ["rules.Where(rule => rule.Key == editedRule.Key)\n                .ToList", "rules.Where", "currentRules.NullOrNone", "currentRules.First", "Array.Empty<(GovernanceRule, GovernanceRuleConflictReason)>", "rules.Where(rule => rule.OrdinalId != editedRule.OrdinalId)\n                .Where(rule => rule.HasRisk)\n                .ToList", "rules.Where(rule => rule.OrdinalId != editedRule.OrdinalId)\n                .Where", "currentRules.Where(\n                    existingRule =>\n                        IntersectingGivenClause(existingRule, editedRule) &&\n                        WhenClauseContained(existingRule, editedRule) &&\n                        WhenClauseContained(editedRule, existingRule)\n                )\n                .ToList", "currentRules.Where", "conflictingRuleCandidates.NullOrNone", "conflictingRuleCandidates.Except", "conflictingRules.Select", "result.AddRange", "existingRules.Where(rule => ContradictingWhenType(editedRule, rule))\n                .Select(governanceRule => (governanceRule, GovernanceRuleConflictReason.Contradicting))\n                .ToList", "existingRules.Where(rule => ContradictingWhenType(editedRule, rule))\n                .Select", "existingRules.Where", "existingRule.When.Any", "GovernanceRule.ContradictingGovernanceWhenTypes.Contains", "editedRule.When.Any", "editedRulePortion.Type.Equals", "existingRules.Where(currentRule => EqualsWhenClause(currentRule, editedRule))\n                .Select(governanceRule => (governanceRule, GovernanceRuleConflictReason.Conflicting))\n                .ToList", "existingRules.Where(currentRule => EqualsWhenClause(currentRule, editedRule))\n                .Select", "currentRule.Given.All", "rule.Given.Contains", "rule.Given.All", "currentRule.Given.Contains", "existingRule.Given.Any", "thisRule.When.Intersects", "thisRule.When.Count.Equals", "rule.When.All", "otherRule.When.Any", "currentRule.Then.All", "rule.Then.Any", "rule.Then.All", "currentRule.Then.Any"], false, false, false, false, [], false, 0, 0, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, false], ["ClientHub", "Lim.API.ClientHub", ["???.Hub"], [], "src/Lim.API/Hubs/ClientHub.cs", 6, 0, {}, [], [], ["JetBrains.Annotations", "Microsoft.AspNetCore.SignalR"], false, false, ["UsedImplicitly"], false, false, [], {}, [], 0, false, false, false, 0, 0.0, [], 0.0, 0, 0.0, 0.0, 0, 0, false, false, false, false, "public", false, [], [], false, false, false, false, [], false, 0, 0, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, false], ["HubExtensions", "Lim.API.HubExtensions", [], [], "src/Lim.API/Hubs/HubExtensions.cs", 6, 0, {}, [], ["SendToAllAsync", "InvokeClientMethodAsync"], ["System.Threading.Tasks", "Microsoft.AspNetCore.SignalR"], false, false, [], false, false, [], {}, [], 0, false, false, false, 2, 1.0, [], 107.0, 107, 100.0, 100.0, 0, 0, false, false, true, true, "public", false, [], ["clientHub.Clients.All.SendAsync"], false, false, false, false, [], false, 0, 0, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, false], ["ConsoleUser", "Lim.API.ConsoleUser", [], [], "src/Lim.API/Model/ConsoleUser.cs", 7, 0, {}, ["Name", "Role"], ["ConsoleUser", "Name", "Role"], ["System.Security.Claims", "System.Security.Principal", "Lim.Common.DotNET"], false, false, [], false, false, [], {}, [], 2, false, false, false, 2, 0.5, [], 40.5, 35, 0.0, 100.0, 2, 0, false, false, false, false, "public", false, ["Lim.API.IdentityExtensions.ToRole"], ["consoleUser.Role.ToString"], false, false, false, false, ["signin"], false, 2, 1, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, false], ["ConsoleUserCredentials", "Lim.API.ConsoleUserCredentials", [], [], "src/Lim.API/Model/ConsoleUserCredentials.cs", 5, 0, {}, ["Type", "Username", "Password"], ["ConsoleUserCredentials", "Type", "Username", "Password", "ToString", "GetHashCode"], ["Infrastructure.Dotnet.Common"], false, false, [], false, false, [], {}, [], 3, false, true, true, 1, 0.16666666666666666, [], 50.833333333333336, 27, 0.0, 100.0, 1, 0, false, false, false, false, "public", false, [], ["(\n                Username,\n                Password\n            ).GetHashCode", "EnumUtils.TryFromString<AuthenticationType>"], false, false, false, false, [], false, 3, 0, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, false], ["CustomFilterCreateBin", "Lim.API.CustomFilterCreateBin", [], [], "src/Lim.API/Model/CustomFilterCreateBin.cs", 5, 0, {}, ["Name", "SearchTerm", "TableFilterToQuery"], ["Name", "SearchTerm", "TableFilterToQuery"], ["System.Collections.Generic"], false, false, [], false, false, [], {}, [], 3, false, false, false, 0, 0.0, [], 0.0, 0, 0.0, 100.0, 0, 0, false, false, false, false, "public", false, [], [], false, false, false, false, [], false, 3, 3, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, false], ["EntityChangeMessage", "Lim.API.EntityChangeMessage", [], [], "src/Lim.API/Model/EntityChangeMessage.cs", 3, 0, {}, ["EntityId", "EntityType"], ["EntityId", "EntityType", "ToString"], [], false, false, [], false, false, [], {}, [], 2, false, true, false, 0, 0.0, [], 17.333333333333332, 0, 0.0, 100.0, 0, 0, false, false, false, false, "public", false, [], [], false, false, false, false, [], false, 2, 2, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, false], ["CommitMaterialChanges", "Lim.API.CommitMaterialChanges", [], [], "src/Lim.API/Model/MaterialChanges/CommitMaterialChanges.cs", 8, 0, {}, ["Count", "CommitData", "MaterialChangesByRuleKey", "GovernanceRules", "LabelsToMaterialChangeKeys"], ["CommitMaterialChanges", "Count", "CommitData", "MaterialChangesByRuleKey", "GovernanceRules", "LabelsToMaterialChangeKeys"], ["System.Collections.Generic", "System.Linq", "JetBrains.Annotations", "Lim.Common.DotNET"], false, false, [], false, false, [], {}, ["UsedImplicitly"], 5, false, false, false, 1, 0.16666666666666666, [], 39.666666666666664, 0, 0.0, 100.0, 1, 0, false, false, false, false, "public", false, [], ["MaterialChangesByRuleKey.Values\n            .SelectMany(byRuleKey => byRuleKey.Values.SelectMany(list => list.Select(change => change.Key)))\n            .Distinct()\n            .Count", "MaterialChangesByRuleKey.Values\n            .SelectMany(byRuleKey => byRuleKey.Values.SelectMany(list => list.Select(change => change.Key)))\n            .Distinct", "MaterialChangesByRuleKey.Values\n            .SelectMany", "byRuleKey.Values.SelectMany", "list.Select"], false, false, false, false, [], false, 5, 0, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, false], ["EnrichedMaterialChanges", "Lim.API.EnrichedMaterialChanges", [], [], "src/Lim.API/Model/MaterialChanges/EnrichedMaterialChanges.cs", 12, 0, {}, ["MaterialChanges", "DeveloperProfiles", "RepositoryProfiles"], ["EnrichedMaterialChanges", "MaterialChanges", "DeveloperProfiles", "RepositoryProfiles", "EnrichAndFilterAsync"], ["System", "System.Collections.Generic", "System.Collections.Immutable", "System.Linq", "System.Threading.Tasks", "Infrastructure.Dotnet.Common", "JetBrains.Annotations", "Lim.Common.DotNET"], false, false, [], false, false, [], {}, ["UsedImplicitly"], 3, false, false, false, 2, 0.4, [], 745.8, 0, 20.0, 100.0, 1, 0, false, false, false, true, "public", false, ["Lim.API.IModuleProfilesService.GetModuleProfileAsync"], ["commitMaterialChanges.None", "commitMaterialChanges.Select(changes => changes.AuthorIdentityKey)\n                .Concat(commitMaterialChanges.Select(changes => changes.CommitterIdentityKey))\n                .WhereNotNull()\n                .ToHashSet", "commitMaterialChanges.Select(changes => changes.AuthorIdentityKey)\n                .Concat(commitMaterialChanges.Select(changes => changes.CommitterIdentityKey))\n                .WhereNotNull", "commitMaterialChanges.Select(changes => changes.AuthorIdentityKey)\n                .Concat", "commitMaterialChanges.Select", "(await developerIdentityStorage.GetDeveloperIdentitiesAsync(developerIdentitiesKeys))\n                .SelectDevelopersKeys", "developerIdentityStorage.GetDeveloperIdentitiesAsync", "commitMaterialChanges.SelectMany(changes => changes.RepositoryKeys)\n                .ToHashSet", "commitMaterialChanges.SelectMany", "repositoryProfilesStorage.GetProfilesAsync", "repositoryProfiles.Select(profile => profile.Key)\n                .ToHashSet", "repositoryProfiles.Select", "commitMaterialChange.RepositoryKeys.Where(repositoryKey => repositoryProfileKeys.Contains(repositoryKey))\n                    .ToHashSet", "commitMaterialChange.RepositoryKeys.Where", "repositoryProfileKeys.Contains", "commitMaterialChange.ModuleRootToMaterialChangeLabels.GetValueOrDefault", "commitMaterialChange.MaterialChangesLabelsToCount!.Keys.ToHashSet", "Convert.ToInt32", "commitMaterialChange.MaterialChangesLabelsToCount.Values.Sum", "repositoryProfiles.FirstOrDefault", "repositoryProfile.Modules.Any", "repositoryProfileKeys.JoinToString", "commitMaterialChanges.Where(commitMaterialChange => commitMaterialChange.RepositoryKeys.Count > 0)\n                    .ToImmutableList", "commitMaterialChanges.Where", "developerProfilesStorage.GetDeveloperProfilesAsync"], false, false, false, false, [], false, 3, 0, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, false], ["ReleaseMaterialChanges", "Lim.API.ReleaseMaterialChanges", [], [], "src/Lim.API/Model/MaterialChanges/ReleaseMaterialChanges.cs", 6, 0, {}, ["Release", "MaterialChanges"], ["ReleaseMaterialChanges", "Release", "MaterialChanges"], ["JetBrains.Annotations", "Lim.Common.DotNET"], false, false, [], false, false, [], {}, ["UsedImplicitly"], 2, false, false, false, 1, 0.3333333333333333, [], 32.666666666666664, 0, 0.0, 100.0, 1, 0, false, false, false, false, "public", false, [], [], false, false, false, false, [], false, 2, 0, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, false], ["CodeEntityPathMapping", "Lim.API.CodeEntityPathMapping", [], [], "src/Lim.API/Model/Module/CodeEntityPathMapping.cs", 8, 0, {}, [], ["GetPath", "GetFilteredEnumerable", "GetFilteredDictionary"], ["System", "System.Collections.Generic", "System.Linq", "Lim.Common.DotNET"], false, false, [], false, false, [], {}, [], 0, false, false, false, 3, 1.0, [], 513.0, 419, 100.0, 66.66666666666667, 0, 0, false, false, true, false, "public", false, [], ["nameof", "target.Cast<CodeFrameworksGroup>()\n                    .Select(group => group.GetModuleSubgroup(root))\n                    .Where(group => !group.IsEmpty)\n                    .Cast<TValue>", "target.Cast<CodeFrameworksGroup>()\n                    .Select(group => group.GetModuleSubgroup(root))\n                    .Where", "target.Cast<CodeFrameworksGroup>()\n                    .Select", "target.Cast<CodeFrameworksGroup>", "group.GetModuleSubgroup", "target.Where", "Module.PathUnderModuleRoot", "GetFilteredEnumerable(target.Values, root)\n                .ToDictionary"], false, false, false, false, ["Could not get path from object"], false, 0, 0, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, false], ["ModuleProfile", "Lim.API.ModuleProfile", ["Lim.Common.DotNET.RepositoryProfile"], [], "src/Lim.API/Model/Module/ModuleProfile.cs", 10, 0, {"SearchFields": "System.Collections.Generic.HashSet<TableFilter>"}, ["RepositoryKey", "Module", "RepositoryProfile", "Repository", "ParentProjectKey", "ParentProjectName", "ProjectsCount", "CweBadges", "Name", "Key", "CalculatedWithCommitSha", "SecurityChampion", "VulnerabilitiesCountByRisk"], ["ModuleProfile", "RepositoryKey", "Module", "RepositoryProfile", "FilterRepositoryProperty", "FilterRepositoryDictionaryProperty", "Repository", "ParentProjectKey", "ParentProjectName", "ProjectsCount", "CweBadges", "Name", "Key", "CalculatedWithCommitSha", "SecurityChampion", "VulnerabilitiesCountByRisk", "EmptyProfileFor", "GetInventoryBadges", "GetHashCode"], ["System", "System.Collections.Generic", "System.Linq", "Infrastructure.Dotnet.Common", "JetBrains.Annotations", "Lim.Common.DotNET"], false, false, [], false, false, [], {"SearchFields": []}, ["UsedImplicitly", "BsonSerializer", "Filterable", "BsonIgnore", "JsonIgnore", "FilterableByJoin"], 13, false, false, true, 6, 0.3, [], 191.8, 0, 5.0, 90.0, 2, 0, false, false, false, false, "public", false, ["Lim.API.CodeEntityPathMapping.GetFilteredEnumerable", "Lim.API.CodeEntityPathMapping.GetFilteredDictionary", "Lim.Common.DotNET.ConsumableProfile<Lim.Common.DotNET.Repository>.GetHashCode", "Lim.Common.DotNET.DeveloperProfile.GetHashCode", "Lim.API.ModuleProfile.FilterRepositoryDictionaryProperty"], ["Enumerable.Empty<TValue>", "badges.Add", "Array.Empty<DeveloperRepositoryProfile>", "hashCode.Add", "CalculatedWithCommitSha.GetAggregatedValuesHash", ".GetAggregatedValuesHash", "hashCode.ToHashCode", "repositoryProfile.Modules.FirstOrDefault", "repositoryProfile.Modules.Where(module => Module.PathUnderModuleRoot(Module.Root.EnsureEndsWith('/'), module.Root))\n                .ToHashSet", "repositoryProfile.Modules.Where", "Module.PathUnderModuleRoot", "Module.Root.EnsureEndsWith"], false, false, false, false, [], false, 13, 12, [], false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, true, 0, 0, false], ["OrganizationStatistics", "Lim.API.OrganizationStatistics", [], [], "src/Lim.API/Model/OrganizationStatistics.cs", 6, 0, {}, ["LicenseToDependencyCount", "DependencyNameToRepositoryCount", "RepositoryCount", "ActiveRepositoryCount", "ProjectCount", "ActiveProjectCount", "CustomAssetCollectionCount", "ActiveCustomAssetCollectionCount", "DeveloperCount", "ActiveDeveloperCount", "CommitGraph", "MaterialChangeGraph", "RiskyProjectCountByLevel", "RiskyRepositoryCountByLevel"], ["LicenseToDependencyCount", "DependencyNameToRepositoryCount", "RepositoryCount", "ActiveRepositoryCount", "ProjectCount", "ActiveProjectCount", "CustomAssetCollectionCount", "ActiveCustomAssetCollectionCount", "DeveloperCount", "ActiveDeveloperCount", "CommitGraph", "MaterialChangeGraph", "RiskyProjectCountByLevel", "RiskyRepositoryCountByLevel"], ["System.Collections.Generic", "Lim.Common.DotNET"], false, false, [], false, false, [], {}, [], 14, false, false, false, 0, 0.0, [], 0.0, 0, 0.0, 100.0, 0, 0, false, false, false, false, "public", false, [], [], false, false, false, false, [], false, 14, 14, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, false], ["ProjectUpdateBin", "Lim.API.ProjectUpdateBin", [], [], "src/Lim.API/Model/ProjectUpdateBin.cs", 3, 0, {}, ["ServerUrl"], ["ServerUrl", "IsMonitored"], [], false, false, [], false, false, [], {}, [], 2, false, false, false, 0, 0.0, [], 0.0, 0, 0.0, 100.0, 0, 0, false, false, false, false, "public", false, [], [], false, false, false, false, [], false, 2, 2, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, false], ["RelatedEntityProfile", "Lim.API.RelatedEntityProfile<TProfile, TRelatedProfile>", [], [], "src/Lim.API/Model/RelatedEntityProfilesSearchResponse.cs", 9, 0, {}, ["Profile", "RelatedProfile"], ["RelatedEntityProfile", "Profile", "RelatedProfile", "EnrichAsync"], ["System", "System.Collections.Generic", "System.Linq", "System.Threading.Tasks", "JetBrains.Annotations"], false, false, [], false, false, [], {}, ["UsedImplicitly"], 2, false, false, false, 2, 0.5, [], 184.25, 48, 25.0, 100.0, 1, 0, false, false, false, true, "public", true, [], ["relatedProfiles.Select(relatedEntityKeyProvider)\n                .ToHashSet", "relatedProfiles.Select", "profilesByKeyProviderAsync", "relatedProfiles\n                .Where(relatedProfile => profiles.ContainsKey(relatedEntityKeyProvider(relatedProfile)))\n                .Select(\n                    relatedProfile => new RelatedEntityProfile<TProfile, TRelatedProfile>(\n                        profiles[relatedEntityKeyProvider(relatedProfile)],\n                        relatedProfile\n                    )\n                )\n                .ToList", "relatedProfiles\n                .Where(relatedProfile => profiles.ContainsKey(relatedEntityKeyProvider(relatedProfile)))\n                .Select", "relatedProfiles\n                .Where", "profiles.ContainsKey", "relatedEntityKeyProvider"], false, false, false, false, [], false, 2, 0, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, false], ["ReplicatedLdapAttributes", "Lim.API.ReplicatedLdapAttributes", [], [], "src/Lim.API/Model/ReplicatedLdapUser.cs", 6, 0, {}, ["DisplayName"], ["DisplayName"], ["System.Collections.Generic", "Newtonsoft.Json"], false, false, [], false, false, [], {}, ["JsonProperty"], 1, false, false, false, 0, 0.0, [], 0.0, 0, 0.0, 100.0, 0, 0, false, false, false, false, "public", false, [], [], false, false, false, false, ["displayname"], false, 1, 1, [], false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, 0, 0, false], ["ReplicatedLdapGroup", "Lim.API.ReplicatedLdapGroup", [], [], "src/Lim.API/Model/ReplicatedLdapUser.cs", 12, 0, {}, ["Name"], ["Name"], ["System.Collections.Generic", "Newtonsoft.Json"], false, false, [], false, false, [], {}, [], 1, false, false, false, 0, 0.0, [], 0.0, 0, 0.0, 100.0, 0, 0, false, false, false, false, "public", false, [], [], false, false, false, false, [], false, 1, 1, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, false], ["ReplicatedLdapUser", "Lim.API.ReplicatedLdapUser", [], [], "src/Lim.API/Model/ReplicatedLdapUser.cs", 17, 0, {}, ["Attributes", "Groups", "Username"], ["Attributes", "Groups", "Username"], ["System.Collections.Generic", "Newtonsoft.Json"], false, false, [], false, false, [], {}, [], 3, false, false, false, 0, 0.0, [], 0.0, 0, 0.0, 100.0, 0, 0, false, false, false, false, "public", false, [], [], false, false, false, false, [], false, 3, 3, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, false], ["RepositoryUpdateBin", "Lim.API.RepositoryUpdateBin", [], [], "src/Lim.API/Model/RepositoryUpdateBin.cs", 3, 0, {}, ["ServerUrl"], ["ServerUrl", "IsMonitored"], [], false, false, [], false, false, [], {}, [], 2, false, false, false, 0, 0.0, [], 0.0, 0, 0.0, 100.0, 0, 0, false, false, false, false, "public", false, [], [], false, false, false, false, [], false, 2, 2, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, false], ["ServerAffectedResources", "Lim.API.ServerAffectedResources", [], [], "src/Lim.API/Model/ServerAffectedResources.cs", 6, 0, {}, ["RepositoryKeys", "RepositoriesCount", "MonitoredRepositoryKeys", "MonitoredRepositoriesCount", "ProjectKeys", "ProjectsCount", "MonitoredProjectKeys", "MonitoredProjectsCount", "GovernanceRuleKeys", "GovernanceRulesCount", "DefinitionKeys", "DefinitionsCount", "WorkflowKeys", "WorkflowsCount"], ["RepositoryKeys", "RepositoriesCount", "MonitoredRepositoryKeys", "MonitoredRepositoriesCount", "ProjectKeys", "ProjectsCount", "MonitoredProjectKeys", "MonitoredProjectsCount", "GovernanceRuleKeys", "GovernanceRulesCount", "DefinitionKeys", "DefinitionsCount", "WorkflowKeys", "WorkflowsCount"], ["System.Collections.Generic", "Newtonsoft.Json"], false, false, [], false, false, [], {}, ["JsonIgnore"], 14, false, false, false, 0, 0.0, [], 0.0, 0, 0.0, 100.0, 0, 0, false, false, false, false, "public", false, [], [], false, false, false, false, [], false, 14, 7, [], false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, 0, 0, false], ["ServerCreateBin", "Lim.API.ServerCreateBin", [], [], "src/Lim.API/Model/ServerCreateBin.cs", 5, 0, {}, ["Name", "Url", "Username", "Password", "SelectedProviderGroup"], ["Name", "Url", "Username", "Password", "SelectedProviderGroup", "ToString"], ["Lim.Common.DotNET"], false, false, [], false, false, [], {}, [], 5, false, true, false, 0, 0.0, [], 25.333333333333332, 0, 0.0, 100.0, 0, 0, false, false, false, false, "public", false, [], ["nameof"], false, false, false, false, [], false, 5, 5, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, false], ["ServerMonitorBin", "Lim.API.ServerMonitorBin", [], [], "src/Lim.API/Model/ServerMonitorBin.cs", 3, 0, {}, [], ["IsMonitored"], [], false, false, [], false, false, [], {}, [], 1, false, false, false, 0, 0.0, [], 0.0, 0, 0.0, 100.0, 0, 0, false, false, false, false, "public", false, [], [], false, false, false, false, [], false, 1, 1, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, false], ["ServerUpdateBin", "Lim.API.ServerUpdateBin", [], [], "src/Lim.API/Model/ServerUpdateBin.cs", 3, 0, {}, ["Username", "Password"], ["Username", "Password"], [], false, false, [], false, false, [], {}, [], 2, false, false, false, 0, 0.0, [], 0.0, 0, 0.0, 100.0, 0, 0, false, false, false, false, "public", false, [], [], false, false, false, false, [], false, 2, 2, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, false], ["ServerValidationException", "Lim.API.ServerValidationException", ["System.Exception"], [], "src/Lim.API/Model/ServerValidationException.cs", 5, 0, {}, ["ValidationError"], ["ServerValidationException", "ValidationError"], ["System"], false, false, [], false, false, [], {}, [], 1, false, false, false, 1, 0.5, [], 18.0, 18, 0.0, 100.0, 1, 0, false, false, false, false, "public", false, [], [], false, true, false, false, [], false, 1, 0, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, false], ["TopRiskyRepositoriesByProjects", "Lim.API.TopRiskyRepositoriesByProjects", [], [], "src/Lim.API/Model/TopRiskyRepositoriesByProjects.cs", 7, 0, {}, ["TopRepositoryKeysByProjectKey", "ProjectProfiles", "RepositoryProfiles"], ["TopRiskyRepositoriesByProjects", "TopRepositoryKeysByProjectKey", "ProjectProfiles", "RepositoryProfiles"], ["System.Collections.Generic", "JetBrains.Annotations", "Lim.Common.DotNET"], false, false, [], false, false, [], {}, ["UsedImplicitly"], 3, false, false, false, 1, 0.25, [], 48.75, 0, 0.0, 100.0, 1, 0, false, false, false, false, "public", false, [], [], false, false, false, false, [], false, 3, 0, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, false], ["Program", "Lim.API.Program", [], [], "src/Lim.API/Program.cs", 27, 0, {}, [], ["Main", "ConfigureLogging", "ConfigureServices", "RegisterServices", "RegisterWorkflowCoreSteps"], ["System", "System.Collections.Generic", "System.Linq", "System.Threading.Tasks", "Infrastructure.Dotnet.Common", "Infrastructure.Dotnet.SPA", "JetBrains.Annotations", "Lim.Common.DotNET", "Lim.GitRestApi", "Microsoft.AspNetCore", "Microsoft.AspNetCore.DataProtection.KeyManagement", "Microsoft.AspNetCore.Hosting", "Microsoft.AspNetCore.Http", "Microsoft.Extensions.Configuration", "Microsoft.Extensions.DependencyInjection", "Microsoft.Extensions.Hosting", "Microsoft.Extensions.Logging", "Microsoft.Extensions.Options", "Microsoft.OpenApi.Models", "MongoDB.Bson.Serialization", "Okta.AspNetCore", "Reporter.Contracts", "WorkflowCore.Interface"], false, false, ["UsedImplicitly"], false, false, [], {}, [], 0, false, false, false, 5, 1.0, [], 1878.4, 508, 100.0, 20.0, 0, 0, false, false, false, true, "public", false, [], ["WebHost.CreateDefaultBuilder(args)\n                .ConfigureAppConfiguration(\n                    (hostContext, configApp) =>\n                    {\n                        hostContext.HostingEnvironment.ApplicationName = \"Lim.API\";\n                    }\n                )\n                .ConfigureServices(ConfigureServices)\n                .ConfigureLogging(ConfigureLogging)\n                .UseStartup<Startup>()\n                .Build()\n                .RunAsyncSafe", "WebHost.CreateDefaultBuilder(args)\n                .ConfigureAppConfiguration(\n                    (hostContext, configApp) =>\n                    {\n                        hostContext.HostingEnvironment.ApplicationName = \"Lim.API\";\n                    }\n                )\n                .ConfigureServices(ConfigureServices)\n                .ConfigureLogging(ConfigureLogging)\n                .UseStartup<Startup>()\n                .Build", "WebHost.CreateDefaultBuilder(args)\n                .ConfigureAppConfiguration(\n                    (hostContext, configApp) =>\n                    {\n                        hostContext.HostingEnvironment.ApplicationName = \"Lim.API\";\n                    }\n                )\n                .ConfigureServices(ConfigureServices)\n                .ConfigureLogging(ConfigureLogging)\n                .UseStartup<Startup>", "WebHost.CreateDefaultBuilder(args)\n                .ConfigureAppConfiguration(\n                    (hostContext, configApp) =>\n                    {\n                        hostContext.HostingEnvironment.ApplicationName = \"Lim.API\";\n                    }\n                )\n                .ConfigureServices(ConfigureServices)\n                .ConfigureLogging", "WebHost.CreateDefaultBuilder(args)\n                .ConfigureAppConfiguration(\n                    (hostContext, configApp) =>\n                    {\n                        hostContext.HostingEnvironment.ApplicationName = \"Lim.API\";\n                    }\n                )\n                .ConfigureServices", "WebHost.CreateDefaultBuilder(args)\n                .ConfigureAppConfiguration", "WebHost.CreateDefaultBuilder", "configLogging.ClearProviders", "configLogging.AddConfiguration", "hostContext.Configuration.GetSection", "configLogging.AddFile", "hostContext.Configuration.GetSection(\"FileLoggingOptions\")\n                        .Bind", "configLogging.AddConsoleLogger", "hostContext.Configuration.GetValue<bool>", "hostContext.HostingEnvironment.IsProduction", "config.GetValue<string>", "services.AddDataProtection", "dataProtectionBuilder.Services.AddSingleton<IConfigureOptions<KeyManagementOptions>>", "serviceProvider.GetRequiredService<IMongoClient>", "services.AddSwaggerGen", "serviceProvider.SwaggerDoc", "MongoCredentials.FromConfiguration", "services.AddWorkflow", "options.UseMongoDB", "BsonClassMap.LookupClassMap", "services.AddSingleton", "LimMicroService.RegisterCommonServices", "RegisterGitRestApi.RegisterProviders", "services.AutoRegister", "configuration.GetValue", "serviceProvider.GetService<IAuditActionsService>", "configuration.GetValueWithEnv", "user.Claims.FirstOrDefault", "email.EndsWith", "auditActionsService.AuditUserLoggedInAsync", "serviceProvider.GetService<OktaMvcOptions>()\n                        .IsApplicable", "serviceProvider.GetService<OktaMvcOptions>", "AuthenticationType.Okta.ToString", "AuthenticationType.Password.ToString", "services.AddSingletonWithConstructorParams<IReplicatedAuthenticationService, ReplicatedAuthenticationService>", "services.AddHostedService<DatabaseSeeder>", "configuration.GetValue<bool>", "TimeSpan.FromMinutes", "configuration.GetValue<int>", "services.AddHostedServiceWithConstructorParams<SecurityScanProjectsSyncService>", "services.AddHostedServiceWithConstructorParams<RepositorySyncService>", "services.AddHostedServiceWithConstructorParams<ProjectSyncService>", "services.AddHostedServiceWithConstructorParams<IrrelevantRepositorySyncService>", "services.AddHostedServiceWithConstructorParams<ProfileSyncService>", "services.AddHostedServiceWithConstructorParams<ReleasesProfileBackgroundService>", "services.AddHostedService<RepositoryInterestBackgroundService>", "services.AddHostedService<ProjectInterestBackgroundService>", "services.AddHostedService<RepositoryFilesDiscoveryBackgroundService>", "services.AddHostedService<ConsumablesRemovalCleanupService>", "services.AddHostedServiceWithConstructorParams<WorkflowService>", "services.AddHostedService<ChannelJoiningService>", "services.AddSingletonWithConstructorParams<ICodeFeaturesStorage, CodeFeaturesStorage>", "configuration.GetValue<string>", "services.AddSingleton<IProfileCalculatingService, ProfileCalculatingService>", "services.DecorateWithMetricsLogging<IProfileCalculatingService>", "services.AddSingleton<IRepositoryInventoryService, RepositoryInventoryService>", "services.AddSingleton<IEntityChangeHandler, EntityChangeHandler>", "services.RegisterCacheBuilder<(string, string), CommitMaterialChanges>", "services.RegisterCacheBuilder<(int, string), ModuleProfile>", "services.RegisterCacheBuilder<(string, CodeParsingTarget, CodeEntity), CodeFeatures>", "services.AddSingleton<IHttpContextAccessor, HttpContextAccessor>", "services.AddSingleton<IReporterApiProxy, ReporterApiProxy>", "FileUtils.GetFirstLineOrDefault", "services.AddSingletonWithConstructorParams<IAuditActionsService, AuditActionsService>", "configuration.GetValueWithEnv<string>", "services.AddTransient<WorkflowLogger>", "services.AddTransient<WorkflowStepExecutor>"], false, false, false, false, ["Lim.API", "Logging", "FileLoggingOptions", "Logging:SilenceLivenessChecks", "WebRootDirectoryPath", "v1", "App:Okta:Enable", "App:Okta:Domain", "App:Okta:ClientId", "App:Okta:ClientSecret", "openid", "profile", "email", "groups", "", "@apiiro.com", "Admin", "App:AdminPassword", "App:ReplicatedIntegrationApi", "App:DisableBackgroundIntervalServices", "App:ConsumablesListingIntervalMinutes", "App:IrrelevantRepositoryListingIntervalHours", "App:ProfileSyncIntervalMinutes", "App:ReleasesSyncIntervalMinutes", "App:Workflows:TriggerIntervalMinutes", "App:FeaturesStorage:StoredFeaturesDirectory", "App:FeaturesStorage:CacheSize", "App:FeaturesStorage:CacheTtlInMinutes", "App:Audit:PasscodeFilePath", "App:Audit:Enabled", "IS_AIRGAP", "true", "App:Audit:CustomerName"], false, 0, 0, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, true], ["ActivityGraphUtils", "Lim.API.ActivityGraphUtils", [], [], "src/Lim.API/Services/ActivityGraphUtils.cs", 10, 0, {"IsoWeeksInYear": "int"}, [], ["FillEmptyActivity"], ["System", "System.Collections.Generic", "System.Globalization", "System.Linq", "Infrastructure.Dotnet.Common", "Lim.Common.DotNET"], false, false, [], false, false, [], {"IsoWeeksInYear": []}, [], 0, false, false, false, 1, 1.0, [], 1621.0, 1621, 100.0, 100.0, 0, 0, false, false, true, false, "public", false, [], ["weekCounts.None", "Array.Empty<DateCount>", "weekCounts.Select(tuple => tuple.Date)\n                .ToList", "weekCounts.Select", "timestamps.Min", "timestamps.Max", "ISOWeek.GetWeekOfYear", "weekCounts.ToDictionary", "ISOWeek.GetYear", "ISOWeek.ToDateTime", "results.None", "results.Last", "results.Add", "isoWeekToCount.GetValueOrDefault"], false, false, false, false, [], false, 0, 0, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, false], ["AuditActionsService", "Lim.API.AuditActionsService", [], ["Lim.API.IAuditActionsService"], "src/Lim.API/Services/AuditActionsService.cs", 14, 0, {"SmokeTestCustomerName": "string", "DevCustomer": "string", "DeveloperLicenseKeyIndicator": "string", "AuditIgnoredCustomers": "System.Collections.Generic.HashSet<string>", "_customerName": "string", "_enabled": "bool", "_httpContextAccessor": "???.IHttpContextAccessor", "_logger": "???.ILogger<IAuditActionsService>", "_reporterApiProxy": "???.IReporterApiProxy"}, ["_customerName", "_httpContextAccessor", "_logger", "_reporterApiProxy"], ["AuditActionsService", "AuditRuleAppliedAsync", "AuditRuleRemovedAsync", "AuditWorkflowAppliedAsync", "AuditWorkflowRemovedAsync", "AuditApiClassificationDefinitionAppliedAsync", "AuditApiClassificationDefinitionRemovedAsync", "AuditCustomAssetCollectionConfigurationAppliedAsync", "AuditCustomAssetCollectionConfigurationRemovedAsync", "AuditMessagingWebhookAddedAsync", "AuditWorkflowTriggeredAsync", "AuditUserLoggedInAsync", "AuditMaterialChangeDismissedAsync", "AuditMonitorAllForServerAsync", "AuditMonitorProjectAsync", "AuditMonitorRepositoryAsync", "AuditServerAddedAsync", "AuditFailedToAddServerAsync", "AuditServerUpdatedAsync", "AuditServerRemovedAsync", "AuditReleaseTriggeredAsync", "AuditReleaseCompleteAsync", "AuditCustomFilterCreatedAsync", "AuditGovernanceRulesConflictFoundAsync", "AuditServerActionAsync", "SendSlackMessageAsync", "MonitoredToString"], ["System", "System.Collections.Generic", "System.Linq", "System.Text", "System.Threading.Tasks", "JetBrains.Annotations", "Lim.Common.DotNET", "Microsoft.AspNetCore.Http", "Microsoft.Extensions.Logging", "Reporter.Contracts"], false, false, ["UsedImplicitly"], false, false, [], {"SmokeTestCustomerName": [], "DevCustomer": [], "DeveloperLicenseKeyIndicator": [], "AuditIgnoredCustomers": [], "_customerName": [], "_enabled": [], "_httpContextAccessor": [], "_logger": [], "_reporterApiProxy": []}, [], 0, false, false, false, 27, 1.0, [], 166.77777777777777, 107, 3.7037037037037037, 88.88888888888889, 1, 0, false, false, false, true, "public", false, [], ["ruleConflicts.Select(ruleConflict => $\"Reason: {ruleConflict.Reason}{Environment.NewLine}Rule:{Environment.NewLine}{ruleConflict.Rule}\")\n                .ToArray", "ruleConflicts.Select", "conflictingRulesList.AppendJoin", "conflictingRulesList.ToString", "_logger.LogInformation", "_reporterApiProxy.SendAuditMessageAsync", "_httpContextAccessor.UserName", "_logger.LogError", "string.IsNullOrEmpty", "AuditIgnoredCustomers.Any", "customerName.Contains"], false, false, false, false, ["Smoke-Test", "Test", "-developer", "", "added", "updated", "Failed to send audit log to Slack {}", "Monitored", "Unmonitored"], false, 0, 0, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, false], ["ConsumableInterestBackgroundService", "Lim.API.ConsumableInterestBackgroundService<TConsumable>", ["???.BackgroundService"], [], "src/Lim.API/Services/ConsumableInterestBackgroundService.cs", 13, 0, {"_consumablesInterestQueue": "???.IConsumablesInterestQueue<TConsumable>", "_consumablesStorage": "???.IConsumablesStorage<TConsumable>", "_logger": "???.ILogger<ConsumableInterestBackgroundService<TConsumable>>"}, ["_consumablesInterestQueue", "_consumablesStorage", "_logger"], ["ConsumableInterestBackgroundService", "GetGetActivityFactorAsync", "NotifyEntitiesChangedAsync", "GetActivityFactorAsyncSafe", "ExecuteAsync", "GetActivityFactorsAsync"], ["System", "System.Collections.Generic", "System.Linq", "System.Threading", "System.Threading.Tasks", "Infrastructure.Dotnet.Common", "Lim.Common.DotNET", "Microsoft.Extensions.Hosting", "Microsoft.Extensions.Logging"], false, false, [], false, false, [], {"_consumablesInterestQueue": [], "_consumablesStorage": [], "_logger": []}, [], 0, false, false, false, 6, 1.0, [], 869.1666666666666, 314, 0.0, 0.0, 1, 0, false, true, false, true, "public", true, ["Lim.API.IConsumablesInterestQueue<TConsumable>.DequeueAsync"], ["exception.IsOrWrapping<ProviderConnectionException>", "_logger.LogInformationOnProviderConnectionException", "typeof(TConsumable).GetDisplayName", "_consumablesStorage.GetAllAsync", "consumables.All", "sortedConsumableAndActivityFactor\n                        .GroupBy(tuple => tuple.consumable.ServerUrl, tuple => tuple.activityFactor)\n                        .ToDictionary", "sortedConsumableAndActivityFactor\n                        .GroupBy", "grouping.Sum", "sortedConsumableAndActivityFactor.Select(\n                            tuple => (\n                                tuple.consumable,\n                                activityFactor: tuple.activityFactor\n                                    .SafePercentage(totalFactorByServer[tuple.consumable.ServerUrl])\n                                    .Round()\n                            )\n                        )\n                        .ToList", "sortedConsumableAndActivityFactor.Select", "tuple.activityFactor\n                                    .SafePercentage(totalFactorByServer[tuple.consumable.ServerUrl])\n                                    .Round", "tuple.activityFactor\n                                    .SafePercentage", "Math.Max", "Math.Min", "_logger.LogInformation", "sortedConsumableAndActivityFactor.Select(tuple => $\"\\t{tuple.consumable} :: {tuple.activityFactor}\")\n                            .JoinToString", "sortedConsumableAndActivityFactor.Enumerate", "syncingTasksByKey.Add", "_consumablesStorage.SetFieldAsync", "syncingTasksByKey.Any", "Task.WhenAll", "exception.AsOrUnwrap<ConsumableNotFoundException>", "_consumablesStorage.DisableConsumableAsync", "_logger.LogError", "consumables.SelectParallelAsync", "GetActivityFactorAsyncSafe", "consumableAndActivityFactor\n                .OrderByDescending(tuple => tuple.activityFactor)\n                .ToList", "consumableAndActivityFactor\n                .OrderByDescending"], false, false, false, false, ["Factor per consumable:\n{data}", "\n", "Consumable {} is not found in server, disabling it", "Failed to estimate consumables interest"], false, 0, 0, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, false], ["ConsumableRemovalSimulator", "Lim.API.ConsumableRemovalSimulator", [], ["Lim.API.IConsumableRemovalSimulator"], "src/Lim.API/Services/ConsumableRemovalSimulator.cs", 8, 0, {"_apiClassificationStorage": "Lim.Common.DotNET.IApiClassificationStorage", "_governanceRulesStorage": "Lim.Common.DotNET.IGovernanceRulesStorage", "_projectsStorage": "Lim.Common.DotNET.IProjectsStorage", "_repositoriesStorage": "Lim.Common.DotNET.IRepositoriesStorage", "_serversStorage": "Lim.Common.DotNET.IServersStorage", "_workflowsStorage": "Lim.Common.DotNET.IWorkflowsStorage"}, ["_apiClassificationStorage", "_governanceRulesStorage", "_projectsStorage", "_repositoriesStorage", "_serversStorage", "_workflowsStorage"], ["ConsumableRemovalSimulator", "LookupServerAffectedResources"], ["System.Threading.Tasks", "Infrastructure.Dotnet.Common", "JetBrains.Annotations", "Lim.Common.DotNET"], false, false, ["UsedImplicitly"], false, false, [], {"_apiClassificationStorage": [], "_governanceRulesStorage": [], "_projectsStorage": [], "_repositoriesStorage": [], "_serversStorage": [], "_workflowsStorage": []}, [], 0, false, false, false, 2, 1.0, [], 988.0, 988, 0.0, 100.0, 1, 0, false, false, false, true, "public", false, [], ["TaskUtils.WhenAll", "_repositoriesStorage.GetRepositoryKeysByServerUrlAsync", "_repositoriesStorage.GetMonitoredRepositoryKeysByServerUrlAsync", "_projectsStorage.GetProjectKeysByServerUrlAsync", "_projectsStorage.GetMonitoredProjectKeysByServerUrlAsync", "GovernanceRule.KeysSpecificToConsumables", "_governanceRulesStorage.GetGovernanceRulesAsync", "ApiClassificationDefinition.KeysSpecificToRepositories", "_apiClassificationStorage.GetAllAsync", "Workflow.KeysSpecificToServer", "_workflowsStorage.GetWorkflowsAsync", "_serversStorage.GetServerAsync"], false, false, false, false, [], false, 0, 0, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, false], ["ConsumablesRemovalCleanupService", "Lim.API.ConsumablesRemovalCleanupService", ["???.BackgroundService"], [], "src/Lim.API/Services/ConsumablesRemovalCleanupService.cs", 11, 0, {"_apiClassificationStorage": "Lim.Common.DotNET.IApiClassificationStorage", "_consumableRemovalSimulator": "Lim.API.IConsumableRemovalSimulator", "_consumablesRemovalCleanupQueue": "Lim.API.IConsumablesRemovalCleanupQueue", "_governanceRulesStorage": "Lim.Common.DotNET.IGovernanceRulesStorage", "_logger": "???.ILogger<RepositoryInterestBackgroundService>", "_projectProfilesStorage": "Lim.Common.DotNET.IProjectProfilesStorage", "_repositoryProfilesStorage": "Lim.Common.DotNET.IRepositoryProfilesStorage", "_workflowsStorage": "Lim.Common.DotNET.IWorkflowsStorage"}, ["_apiClassificationStorage", "_consumableRemovalSimulator", "_consumablesRemovalCleanupQueue", "_governanceRulesStorage", "_logger", "_projectProfilesStorage", "_repositoryProfilesStorage", "_workflowsStorage"], ["ConsumablesRemovalCleanupService", "ExecuteAsync"], ["System", "System.Collections.Generic", "System.Threading", "System.Threading.Tasks", "Lim.Common.DotNET", "Microsoft.Extensions.Hosting", "Microsoft.Extensions.Logging"], false, false, [], false, false, [], {"_apiClassificationStorage": [], "_consumableRemovalSimulator": [], "_consumablesRemovalCleanupQueue": [], "_governanceRulesStorage": [], "_logger": [], "_projectProfilesStorage": [], "_repositoryProfilesStorage": [], "_workflowsStorage": []}, [], 0, false, false, false, 2, 1.0, [], 1810.5, 1810, 0.0, 50.0, 1, 0, false, false, false, true, "public", false, ["Lim.API.IConsumablesRemovalCleanupQueue.DequeueRemovedEntityAsync", "Lim.API.IConsumableRemovalSimulator.LookupServerAffectedResources"], ["_governanceRulesStorage.DeleteGovernanceRulesAsync", "_apiClassificationStorage.DeleteApiClassificationDefinitionsAsync", "_workflowsStorage.DeleteWorkflowsAsync", "_repositoryProfilesStorage.DeleteServerProfilesAsync", "_projectProfilesStorage.DeleteServerProfilesAsync", "GovernanceRule.KeysSpecificToConsumables", "_governanceRulesStorage.GetGovernanceRulesAsync", "ApiClassificationDefinition.KeysSpecificToRepositories", "_apiClassificationStorage.GetAllAsync", "_repositoryProfilesStorage.DeleteProfileAsync", "Workflow.WorkflowKeysSpecificToProjects", "_workflowsStorage.GetWorkflowsAsync", "_projectProfilesStorage.DeleteProfileAsync", "_logger.LogError"], false, false, false, false, ["Failed to process {entityType} {entityKey}"], false, 0, 0, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, false], ["ConsumableSyncService", "Lim.API.ConsumableSyncService<TConsumable>", ["???.HostedIntervalWorkingService"], [], "src/Lim.API/Services/ConsumableSyncService.cs", 17, 0, {"_consumablesProvider": "???.ITypedConsumableProvider<TConsumable>", "_consumablesStorage": "???.IConsumablesStorage<TConsumable>", "_consumablesSyncQueue": "???.IConsumablesSyncQueue<TConsumable>", "_logger": "???.ILogger<ConsumableSyncService<TConsumable>>", "_manualResetEvent": "???.AsyncManualResetEvent", "_serversStorage": "Lim.Common.DotNET.IServersStorage", "_backgroundLoops": "System.Threading.Tasks.Task"}, ["_consumablesProvider", "_consumablesStorage", "_consumablesSyncQueue", "_logger", "_manualResetEvent", "_serversStorage", "_backgroundLoops"], ["ConsumableSyncService", "StartAsync", "StopAsync", "Work", "DequeueLoop", "WorkerLoop", "HandleNewConsumable", "HandleNewConsumables", "HandleDeletedConsumables", "HandleModifiedConsumable", "SyncAsync", "UpdateServerReachabilityAsync", "GetRemoteAsync", "RefreshStoredAsync", "StoreNewAsync", "DeleteRemovedAsync", "CleanupAfterRemoval"], ["System", "System.Collections.Generic", "System.Linq", "System.Reflection", "System.Threading", "System.Threading.Tasks", "Infrastructure.Dotnet.Common", "JetBrains.Annotations", "Lim.Common.DotNET", "Lim.GitRestApi", "Microsoft.Extensions.Logging", "Nito.AsyncEx", "Lim.Common.DotNET.ExceptionExtensions"], false, false, ["UsedImplicitly"], false, false, [], {"_consumablesProvider": [], "_consumablesStorage": [], "_consumablesSyncQueue": [], "_logger": [], "_manualResetEvent": [], "_serversStorage": [], "_backgroundLoops": []}, [], 0, false, false, false, 18, 1.0, [], 433.3888888888889, 258, 0.0, 11.11111111111111, 1, 0, false, true, false, true, "public", true, ["Lim.API.IConsumablesSyncQueue<TConsumable>.EnqueueAsync", "Lim.API.IConsumablesSyncQueue<TConsumable>.DequeueAsync"], ["Task.WhenAll", "base.StartAsync", "base.StopAsync", "_manualResetEvent.Set", "ExceptionExtensions.IsCanceledException", "_logger.LogError", "_manualResetEvent.WaitAsync", "_manualResetEvent.Reset", "(await _serversStorage.GetServersAsync())\n                .Where(\n                    server => server.Provider.Provides(\n                        typeof(TConsumable).GetCustomAttribute<ConsumableTypeAttribute>()\n                            .Type\n                    )\n                )\n                .ToList", "(await _serversStorage.GetServersAsync())\n                .Where", "_serversStorage.GetServersAsync", "server.Provider.Provides", "typeof(TConsumable).GetCustomAttribute<ConsumableTypeAttribute>", "(await servers.SelectManyParallelAsync<Server, TConsumable>(async server => await SyncAsync(server))).ToList", "servers.SelectManyParallelAsync<Server, TConsumable>", "SyncAsync", "(await _consumablesStorage.GetAllForServerAsync(server.Url))\n                .ToDictionary", "_consumablesStorage.GetAllForServerAsync", "remoteConsumables.NullOrNone", "_logger.LogInformation", "storedConsumables.Values.ToList", "_logger.LogDebug", "typeof(TConsumable).GetDisplayName", "exception.IsOrWrapping<ProviderConnectionException>", "exception.AsOrUnwrap<ProviderConnectionException>", "_logger.LogInformationOnProviderConnectionException", "_serversStorage.SetServerFieldAsync", "_consumablesProvider.GetConsumablesAsync", "remoteConsumables.Keys.Intersect(storedConsumables.Keys)\n                .Where(\n                    key =>\n                        remoteConsumables[key]\n                            .GetHashCode() !=\n                        storedConsumables[key]\n                            .GetHashCode()\n                )\n                .ToList", "remoteConsumables.Keys.Intersect(storedConsumables.Keys)\n                .Where", "remoteConsumables.Keys.Intersect", "remoteConsumables[key]\n                            .GetHashCode", "storedConsumables[key]\n                            .GetHashCode", "_consumablesStorage.SyncConsumableAsync", "remoteConsumables.Keys.Except(storedConsumables.Keys)\n                .ToList", "remoteConsumables.Keys.Except", "newConsumableKeys.None", "remoteConsumables.ContainsKey", "_consumablesStorage.DeleteConsumableAsync", "storedConsumables.Remove"], false, false, false, false, ["Failed to sync consumables", "Found no remote items at all for server {server} - assuming its permissions issue and will not continue syncing"], false, 0, 0, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, false], ["DatabaseSeeder", "Lim.API.DatabaseSeeder", [], ["???.IHostedService"], "src/Lim.API/Services/DatabaseSeeder.cs", 10, 0, {"_configurationStorage": "Lim.Common.DotNET.IConfigurationStorage", "_governanceRulesStorage": "Lim.Common.DotNET.IGovernanceRulesStorage", "_logger": "???.ILogger<DatabaseSeeder>"}, ["_configurationStorage", "_governanceRulesStorage", "_logger"], ["DatabaseSeeder", "StartAsync", "StopAsync"], ["System.Threading", "System.Threading.Tasks", "JetBrains.Annotations", "Lim.Common.DotNET", "Microsoft.Extensions.Hosting", "Microsoft.Extensions.Logging"], false, false, ["UsedImplicitly"], false, false, [], {"_configurationStorage": [], "_governanceRulesStorage": [], "_logger": []}, [], 0, false, false, false, 3, 1.0, [], 1012.0, 170, 0.0, 100.0, 1, 0, false, false, false, true, "public", false, ["Lim.API.BaseGovernanceRulesSeeder.CreateDefaultGovernanceRules"], ["_configurationStorage.GetConfigurationAsync", "_logger.LogInformation", "_configurationStorage.SyncConfigurationFieldAsync"], false, false, false, false, [], false, 0, 0, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, false], ["EntityChangeHandler", "Lim.API.EntityChangeHandler", [], ["Lim.API.IEntityChangeHandler"], "src/Lim.API/Services/EntityChangeHandler.cs", 9, 0, {"_clientHub": "???.IHubContext<ClientHub>", "_logger": "???.ILogger<EntityChangeHandler>"}, ["_clientHub", "_logger"], ["EntityChangeHandler", "NotifyRepositoryChangedAsync", "NotifyRepositoriesChangedAsync", "NotifyAllRepositoriesChangedAsync", "NotifyProjectChangedAsync", "NotifyProjectsChangedAsync", "NotifyAllProjectsChangedAsync", "NotifyDevelopersChangedAsync", "NotifyCommitAsync", "NotifyDeveloperChangedAsync", "NotifyRepositoryAsync", "NotifyProjectAsync", "PostEntityChangeAsync"], ["System.Collections.Generic", "System.Threading.Tasks", "Lim.Common.DotNET", "Microsoft.AspNetCore.SignalR", "Microsoft.Extensions.Logging"], false, false, [], false, false, [], {"_clientHub": [], "_logger": []}, [], 0, false, false, false, 13, 1.0, [], 144.15384615384616, 169, 0.0, 69.23076923076923, 1, 0, false, false, false, true, "public", false, ["Lim.API.HubExtensions.SendToAllAsync"], ["nameof", "_logger.LogDebug"], false, false, false, false, ["Message: {message}"], false, 0, 0, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, false], ["Exporter", "Lim.API.Exporter", [], ["System.IDisposable"], "src/Lim.API/Services/Exporter.cs", 8, 0, {"_csvWriter": "???.CsvWriter", "_memoryStream": "System.IO.MemoryStream", "_streamWriter": "System.IO.StreamWriter", "_headersCount": "int?"}, ["_csvWriter", "_memoryStream", "_streamWriter", "_headersCount", "Content"], ["Exporter", "Content", "Dispose", "WriteLine"], ["System", "System.Globalization", "System.IO", "CsvHelper"], false, false, [], false, false, [], {"_csvWriter": [], "_memoryStream": [], "_streamWriter": [], "_headersCount": []}, [], 1, false, false, false, 3, 0.75, [], 260.75, 182, 0.0, 100.0, 1, 0, false, false, false, false, "public", false, [], ["_csvWriter.Flush", "_memoryStream.ToArray", ".Dispose", "_csvWriter.WriteField", "_csvWriter.NextRecord"], false, false, true, false, [], false, 1, 0, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, false], ["ChannelJoiningService", "Lim.API.ChannelJoiningService", ["???.BackgroundService"], [], "src/Lim.API/Services/Integrations/ChannelJoiningService.cs", 9, 0, {"_logger": "???.ILogger<ChannelJoiningService>", "_messagingChannelJoinQueue": "Lim.API.IMessagingChannelJoinQueue", "_messagingChannelStorage": "Lim.Common.DotNET.IMessagingChannelStorage", "_slackProvider": "Lim.API.ISlackProvider", "_workflowStorage": "Lim.Common.DotNET.IWorkflowsStorage"}, ["_logger", "_messagingChannelJoinQueue", "_messagingChannelStorage", "_slackProvider", "_workflowStorage"], ["ChannelJoiningService", "ExecuteAsync", "MarkWorkflowWithError"], ["System.Threading", "System.Threading.Tasks", "Lim.Common.DotNET", "Microsoft.Extensions.Hosting", "Microsoft.Extensions.Logging"], false, false, [], false, false, [], {"_logger": [], "_messagingChannelJoinQueue": [], "_messagingChannelStorage": [], "_slackProvider": [], "_workflowStorage": []}, [], 0, false, false, false, 3, 1.0, [], 623.3333333333334, 274, 0.0, 33.333333333333336, 1, 0, false, false, false, true, "public", false, ["Lim.API.IMessagingChannelJoinQueue.DequeueAsync", "Lim.API.ISlackProvider.FindChannelAsync"], ["_logger.LogInformation", "_slackProvider.JoinChannelWithNameAsync", "_messagingChannelStorage.UpsertChannelAsync", "_logger.LogError", "_workflowStorage.SyncWorkflowAsync"], false, false, false, false, [], false, 0, 0, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, false], ["HubConnectionBuilder", "Lim.API.HubConnectionBuilder", [], [], "src/Lim.API/Services/Integrations/HubConnectionBuilder.cs", 10, 0, {}, [], ["CreateConnectionAsync"], ["System", "System.Threading.Tasks", "Microsoft.AspNetCore.SignalR.Client", "Microsoft.Extensions.DependencyInjection", "Microsoft.Extensions.Logging", "Microsoft.AspNetCore.SignalR.Client.HubConnectionBuilder"], false, false, [], false, false, [], {}, [], 0, false, false, false, 1, 1.0, [], 792.0, 792, 100.0, 100.0, 0, 0, true, false, true, true, "internal", false, [], ["new SignalRHubConnectionBuilder()\n                .WithUrl(hubUrl)\n                .AddMessagePackProtocol()\n                .ConfigureLogging(\n                    logging =>\n                    {\n                        logging.AddConsole();\n                        logging.SetMinimumLevel(LogLevel.Debug);\n                    }\n                )\n                .Build", "new SignalRHubConnectionBuilder()\n                .WithUrl(hubUrl)\n                .AddMessagePackProtocol()\n                .ConfigureLogging", "new SignalRHubConnectionBuilder()\n                .WithUrl(hubUrl)\n                .AddMessagePackProtocol", "new SignalRHubConnectionBuilder()\n                .WithUrl", "logging.AddConsole", "logging.SetMinimumLevel", "registerListeners", "connection.StartAsync", "logger.LogInformation", "handleReconnection"], false, false, false, false, [], false, 0, 0, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, false], ["OAuthParameters", "Lim.API.OAuthParameters", [], [], "src/Lim.API/Services/Integrations/IntegrationsService.cs", 14, 0, {}, ["ClientId", "RedirectUri", "Scope"], ["OAuthParameters", "ClientId", "RedirectUri", "Scope", "FromConfiguration"], ["System", "System.Threading.Tasks", "Infrastructure.Dotnet.Common", "JetBrains.Annotations", "Lim.Common.DotNET", "Microsoft.AspNetCore.SignalR", "Microsoft.AspNetCore.SignalR.Client", "Microsoft.Extensions.Configuration", "Microsoft.Extensions.Logging", "RestSharp.Extensions"], false, false, [], false, false, [], {}, [], 3, false, false, false, 2, 0.4, [], 61.8, 0, 20.0, 80.0, 1, 0, true, false, false, false, "internal", false, [], ["configuration.GetValue<string>"], false, false, false, false, ["ClientId", "CallbackUrl", "RequestedPermissions"], false, 3, 3, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, false], ["IntegrationsService", "Lim.API.IntegrationsService", [], ["Lim.API.IIntegrationsService"], "src/Lim.API/Services/Integrations/IntegrationsService.cs", 33, 0, {"_auditServiceActionsService": "Lim.API.IAuditActionsService", "_clientHub": "???.IHubContext<ClientHub>", "_integrationsHubUrl": "string", "_logger": "???.ILogger", "_passcode": "string", "_returnUrl": "string", "_serverStorage": "Lim.Common.DotNET.IServersStorage", "_slackOAuth": "Lim.API.OAuthParameters", "_teamsOAuth": "Lim.API.OAuthParameters", "_urlProvider": "Lim.API.IAppUrlProvider", "_connection": "???.HubConnection"}, ["_auditServiceActionsService", "_clientHub", "_integrationsHubUrl", "_logger", "_passcode", "_returnUrl", "_serverStorage", "_slackOAuth", "_teamsOAuth", "_urlProvider", "_connection"], ["IntegrationsService", "ConnectAndNotifyAuthAsync", "BuildAuthenticationUrl", "SlackTokenAcquiredAsync", "FailedToAcquireSlackToken", "TeamsTokenAcquiredAsync", "DisconnectAsync", "NotifyAuthCompleteAsync", "FailedToAcquireTeamsToken", "Connect", "NotifyOAuthStartingAsync", "ReconnectAsync"], ["System", "System.Threading.Tasks", "Infrastructure.Dotnet.Common", "JetBrains.Annotations", "Lim.Common.DotNET", "Microsoft.AspNetCore.SignalR", "Microsoft.AspNetCore.SignalR.Client", "Microsoft.Extensions.Configuration", "Microsoft.Extensions.Logging", "RestSharp.Extensions"], false, false, ["UsedImplicitly"], false, false, [], {"_auditServiceActionsService": [], "_clientHub": [], "_integrationsHubUrl": [], "_logger": [], "_passcode": [], "_returnUrl": [], "_serverStorage": [], "_slackOAuth": [], "_teamsOAuth": [], "_urlProvider": [], "_connection": []}, [], 0, false, false, false, 12, 1.0, [], 387.8333333333333, 173, 0.0, 25.0, 1, 0, true, false, false, true, "internal", false, ["Lim.API.IAuditActionsService.AuditServerAddedAsync", "Lim.API.HubExtensions.InvokeClientMethodAsync", "Lim.API.HubConnectionBuilder.CreateConnectionAsync", "Lim.API.OAuthParameters.FromConfiguration"], ["_slackOAuth.Scope.UrlEncode", "_returnUrl.UrlEncode", "_teamsOAuth.RedirectUri.UrlEncode", "_teamsOAuth.Scope.UrlEncode", "_logger.LogInformation", "string.IsNullOrEmpty", "_logger.LogError", "_serverStorage.SyncServerAsync", "Provider.Teams.ToString", "_connection.StopAsync", "_connection.SendAsync", "_logger.LogDebug", "connection.On", "provider.ToString", "configuration.GetValue<string>", "FileUtils.GetFirstLineOrDefault", "configuration.GetSection"], false, false, false, false, ["Integrations:ServiceUrl", "Integrations:PasscodeFilePath", "Integrations:Slack", "Integrations:Teams", "oAuthSuccessful", "oAuthFailed", "Teams authentication successful", "Already connected, will reuse connection", "SlackTokenAcquired", "FailedToAcquireSlackToken", "MicrosoftGraphTokenAcquired", "FailedToAcquireMicrosoftGraphToken", "Reconnect", "NotifyOAuthStarted"], false, 0, 0, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, false], ["SlackProvider", "Lim.API.SlackProvider", [], ["Lim.API.ISlackProvider"], "src/Lim.API/Services/Integrations/SlackProvider.cs", 13, 0, {"TypePublic": "string", "MaxChannelsLimit": "int", "Slack5SecondsDelay": "System.TimeSpan", "_logger": "???.ILogger", "_messagingChannelStorage": "Lim.Common.DotNET.IMessagingChannelStorage", "_serversStorage": "Lim.Common.DotNET.IServersStorage", "_slackToken": "string"}, ["_logger", "_messagingChannelStorage", "_serversStorage", "_slackToken"], ["SlackProvider", "FindOrCreateChannelAsync", "SendMessageAsync", "FindChannelAsync", "JoinChannelWithNameAsync", "CreateChannelAsync", "CreateClient", "FindChannelIterationAsync", "ChannelNotFoundAndCursorAvailable", "FetchTokenAsync", "SlackServerAsync"], ["System", "System.Linq", "System.Threading.Tasks", "Lim.Common.DotNET", "Microsoft.Extensions.Logging", "Slack.NetStandard", "Slack.NetStandard.Objects", "Slack.NetStandard.WebApi.Chat", "Slack.NetStandard.WebApi.Conversations"], false, false, [], false, false, [], {"TypePublic": [], "MaxChannelsLimit": [], "Slack5SecondsDelay": [], "_logger": [], "_messagingChannelStorage": [], "_serversStorage": [], "_slackToken": []}, [], 0, false, false, false, 11, 1.0, [], 354.0, 259, 9.090909090909092, 54.54545454545455, 1, 0, true, false, false, true, "internal", false, [], ["_messagingChannelStorage.FindChannelForServerAsync", "client.Chat.Post", "_logger.LogError", "FindChannelIterationAsync", "ChannelNotFoundAndCursorAvailable", "Task.Delay", "client.Conversations.Join", "client.Conversations.Create", "_logger.LogInformation", "_messagingChannelStorage.UpsertChannelAsync", "channelCreationResult.ChannelAlreadyExistsError", "client.Conversations.List", "result.Channels.FirstOrDefault", "channel.Name.Equals", "string.IsNullOrEmpty", "_serversStorage.GetSlackServerAsync", "TimeSpan.FromSeconds"], false, false, false, false, ["public_channel"], false, 0, 0, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, false], ["TeamsProvider", "Lim.API.TeamsProvider", [], ["Lim.API.ITeamsProvider"], "src/Lim.API/Services/Integrations/TeamsProvider.cs", 16, 0, {"MicrosoftAuthUrl": "string", "MicrosoftGraphBaseUrl": "string", "_clientId": "string", "_clientSecret": "string", "_logger": "???.ILogger<TeamsProvider>", "_redirectUri": "string", "_restClient": "???.RestClient", "_scope": "string", "_serversStorage": "Lim.Common.DotNET.IServersStorage", "_accessToken": "string", "_lastRefresh": "System.DateTime"}, ["_clientId", "_clientSecret", "_logger", "_redirectUri", "_restClient", "_scope", "_serversStorage", "_accessToken", "_lastRefresh"], ["TeamsProvider", "ListTeamsAsync", "ListChannelsAsync", "SendMessageAsync", "SendWebhookMessageAsync", "QueryGraphAsync", "AcquireAccessToken", "ToIdNamePairs"], ["System", "System.Collections.Generic", "System.Linq", "System.Net", "System.Threading.Tasks", "Infrastructure.Dotnet.Common", "JetBrains.Annotations", "Lim.Common.DotNET", "Microsoft.Extensions.Configuration", "Microsoft.Extensions.Logging", "Newtonsoft.Json.Linq", "RestSharp"], false, false, ["UsedImplicitly"], false, false, [], {"MicrosoftAuthUrl": [], "MicrosoftGraphBaseUrl": [], "_clientId": [], "_clientSecret": [], "_logger": [], "_redirectUri": [], "_restClient": [], "_scope": [], "_serversStorage": [], "_accessToken": [], "_lastRefresh": []}, [], 0, false, false, false, 8, 1.0, [], 659.0, 511, 12.5, 62.5, 1, 0, false, false, false, true, "public", false, [], ["ToIdNamePairs", "(await QueryGraphAsync(\n                server,\n                $\"/teams/{teamId}/channels/{channelId}/messages\",\n                Method.POST,\n                new JObject(\n                    new JProperty(\n                        \"body\",\n                        new JObject(\n                            new JProperty(\"contentType\", \"html\"),\n                            new JProperty(\"content\", message)\n                        )\n                    )\n                )\n            )).Value<string>", "QueryGraphAsync", "webhook.AddJsonBody", "TimingUtils.ExecuteAndMeasureAsync", "_restClient.SafeExecuteTaskAsync", "_logger.LogDebug", "_logger.LogWarning", "queryRequest.FormatErrorResponse", "queryRequest.ThrowErrorResponse", "query.AddHeader", "HttpRequestHeader.Authorization.ToString", "query.AddParameter", "body.ToJson", "_restClient.ExecuteAsync<string>", "JObject.Parse", "TimeSpan.FromMinutes", "tokenRequest.AddHeader", "HttpRequestHeader.ContentType.ToString", "tokenRequest.AddParameter", "response.ThrowErrorResponse", "_serversStorage.SetServerFieldAsync", "responseJson.Value<string>", "graphApiResult[\"value\"]\n                .Select(value => (value.Value<string>(\"id\"), value.Value<string>(\"displayName\")))\n                .ToList", "graphApiResult[\"value\"]\n                .Select", "value.Value<string>", "configuration.GetValue<string>", "FileUtils.GetFirstLineOrDefault"], false, false, false, false, ["https://login.microsoftonline.com/common/oauth2/v2.0/token", "https://graph.microsoft.com/v1.0", "Integrations:Teams:ClientId", "Integrations:Teams:RequestedPermissions", "Integrations:Teams:CallbackUrl", "Integrations:Teams:PasscodeFilePath", "/me/joinedTeams", "body", "contentType", "html", "content", "id", "Sent message to webhook {}, query elapsed {}", "application/json", "Query to {relativePath} done, access token elapsed {}, query elapsed {}", "Query to {relativePath} failed, content: {}", "application/x-www-form-urlencoded", "client_id", "grant_type", "refresh_token", "scope", "redirect_uri", "client_secret", "acquire access token", "access_token", "value", "displayName"], false, 0, 0, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, false], ["IrrelevantRepositorySyncService", "Lim.API.IrrelevantRepositorySyncService", ["???.HostedIntervalWorkingService"], [], "src/Lim.API/Services/IrrelevantRepositorySyncService.cs", 12, 0, {"_repositoriesFilesDiscoveryQueue": "Lim.API.IRepositoriesFilesDiscoveryQueue", "_repositoriesStorage": "Lim.Common.DotNET.IRepositoriesStorage"}, ["_repositoriesFilesDiscoveryQueue", "_repositoriesStorage"], ["IrrelevantRepositorySyncService", "Work"], ["System", "System.Linq", "System.Threading", "System.Threading.Tasks", "Infrastructure.Dotnet.Common", "JetBrains.Annotations", "Lim.Common.DotNET", "Microsoft.Extensions.Logging"], false, false, ["UsedImplicitly"], false, false, [], {"_repositoriesFilesDiscoveryQueue": [], "_repositoriesStorage": []}, [], 0, false, false, false, 2, 1.0, [], 242.0, 242, 0.0, 50.0, 1, 0, false, false, false, true, "public", false, ["Lim.API.IRepositoriesFilesDiscoveryQueue.EnqueueAsync"], ["(await _repositoriesStorage.GetIrrelevantRepositoriesAsync())\n                .OrderBy(repository => repository.Key, StringComparer.OrdinalIgnoreCase)\n                .Select(repository => repository.Key)\n                .ToList", "(await _repositoriesStorage.GetIrrelevantRepositoriesAsync())\n                .OrderBy(repository => repository.Key, StringComparer.OrdinalIgnoreCase)\n                .Select", "(await _repositoriesStorage.GetIrrelevantRepositoriesAsync())\n                .OrderBy", "_repositoriesStorage.GetIrrelevantRepositoriesAsync", "TimeSpan.FromHours"], false, false, false, false, [], false, 0, 0, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, false], ["MaterialChangesService", "Lim.API.MaterialChangesService", [], ["Lim.API.IMaterialChangesService"], "src/Lim.API/Services/MaterialChangesService.cs", 12, 0, {"_cache": "???.IAsyncCache<(string CommitSha, string ReleaseKey), CommitMaterialChanges>", "_commitsStorage": "Lim.Common.DotNET.ICommitsStorage", "_entityChangeHandler": "Lim.API.IEntityChangeHandler", "_governanceRulesStorage": "Lim.Common.DotNET.IGovernanceRulesStorage", "_logger": "???.ILogger<MaterialChangesService>", "_materialChangesStorage": "Lim.Common.DotNET.IMaterialChangesStorage", "_repositoryProfilesStorage": "Lim.Common.DotNET.IRepositoryProfilesStorage", "_stripedAsyncLock": "???.StripedAsyncLock<string>"}, ["_cache", "_commitsStorage", "_entityChangeHandler", "_governanceRulesStorage", "_logger", "_materialChangesStorage", "_repositoryProfilesStorage", "_stripedAsyncLock"], ["MaterialChangesService", "GetMaterialChangesAsync", "DismissMaterialChangeAsync", "GetMaterialChangesUncachedAsync"], ["System", "System.Linq", "System.Threading.Tasks", "AsyncUtilities", "Infrastructure.Dotnet.Common", "JetBrains.Annotations", "Lim.Common.DotNET", "Microsoft.Extensions.Logging"], false, false, ["UsedImplicitly"], false, false, [], {"_cache": [], "_commitsStorage": [], "_entityChangeHandler": [], "_governanceRulesStorage": [], "_logger": [], "_materialChangesStorage": [], "_repositoryProfilesStorage": [], "_stripedAsyncLock": []}, [], 0, false, false, false, 4, 1.0, [], 994.25, 674, 0.0, 75.0, 1, 0, false, false, false, true, "public", false, ["Lim.API.IEntityChangeHandler.NotifyCommitAsync", "Lim.API.IEntityChangeHandler.NotifyRepositoryChangedAsync"], ["_cache.GetOrAddAsync", "_stripedAsyncLock.LockAsync", "_materialChangesStorage.GetMaterialChangeAsync", "_commitsStorage.LowerMaterialChangesAsync", "_logger.LogInformation", "_materialChangesStorage.DismissMaterialChange", "_cache.RemoveAsync", "TaskUtils.WhenAll", "_materialChangesStorage.GetMaterialChangesAsync", "_commitsStorage.GetFullCommitAsync", "_governanceRulesStorage.GetGovernanceRulesAsync", "materialChanges.Select(_ => _.GovernanceRuleKey)\n                    .ToHashSet", "materialChanges.Select", "_repositoryProfilesStorage.GetProfilesAsync", "GovernanceRule.ApplyEffectiveRiskForRepositories(governanceRules, repositoryProfiles)\n                .ToDictionary", "GovernanceRule.ApplyEffectiveRiskForRepositories", "materialChanges\n                    .Where(change => governanceRulesByKey.ContainsKey(change.GovernanceRuleKey))\n                    .GroupBy(_ => _.GovernanceRuleKey)\n                    .ToDictionary", "materialChanges\n                    .Where(change => governanceRulesByKey.ContainsKey(change.GovernanceRuleKey))\n                    .GroupBy", "materialChanges\n                    .Where", "governanceRulesByKey.ContainsKey", "changesByRule.SelectMany(change => change.RuleThenIndexes.Select(index => (index, change)))\n                                .GroupBy(tuple => tuple.index)\n                                .ToDictionary", "changesByRule.SelectMany(change => change.RuleThenIndexes.Select(index => (index, change)))\n                                .GroupBy", "changesByRule.SelectMany", "change.RuleThenIndexes.Select", "changeByIndex.Select(tuple => tuple.change)\n                                        .ToList", "changeByIndex.Select", "materialChanges\n                    .Where(change => governanceRulesByKey.ContainsKey(change.GovernanceRuleKey))\n                    .SelectMany(\n                        change => governanceRulesByKey[change.GovernanceRuleKey]\n                            .GetLabels(change.RuleThenIndexes)\n                            .Select(label => (label, change.Key))\n                    )\n                    .ToDictionaryGrouped<(string label, string key), string, string>", "materialChanges\n                    .Where(change => governanceRulesByKey.ContainsKey(change.GovernanceRuleKey))\n                    .SelectMany", "governanceRulesByKey[change.GovernanceRuleKey]\n                            .GetLabels(change.RuleThenIndexes)\n                            .Select", "governanceRulesByKey[change.GovernanceRuleKey]\n                            .GetLabels", "cacheBuilder", "TimeSpan.FromMinutes"], false, false, false, false, ["user chose to dismiss a material change: {0}"], false, 0, 0, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, false], ["ModuleProfileService", "Lim.API.ModuleProfileService", [], ["Lim.API.IModuleProfilesService"], "src/Lim.API/Services/ModuleProfileService.cs", 10, 0, {"_governanceRulesStorage": "Lim.Common.DotNET.IGovernanceRulesStorage", "_profilesCache": "???.IAsyncCache<(int, string), ModuleProfile>", "_projectsStorage": "Lim.Common.DotNET.IProjectsStorage", "_repositoryProfilesStorage": "Lim.Common.DotNET.IRepositoryProfilesStorage", "_repositoryRiskService": "Lim.API.IRepositoryRiskService"}, ["_governanceRulesStorage", "_profilesCache", "_projectsStorage", "_repositoryProfilesStorage", "_repositoryRiskService"], ["ModuleProfileService", "GetModuleProfileAsync", "GetCachedModuleAsync"], ["System", "System.Threading.Tasks", "Infrastructure.Dotnet.Common", "JetBrains.Annotations", "Lim.Common.DotNET", "Microsoft.Extensions.Logging"], false, false, ["UsedImplicitly"], false, false, [], {"_governanceRulesStorage": [], "_profilesCache": [], "_projectsStorage": [], "_repositoryProfilesStorage": [], "_repositoryRiskService": []}, [], 0, false, false, false, 3, 1.0, [], 564.3333333333334, 328, 0.0, 66.66666666666667, 1, 0, false, false, false, true, "public", false, [], ["_repositoryProfilesStorage.GetProfileByKeyAsync", "repositoryProfile.Modules.None", "_profilesCache.GetOrAddAsync", "repositoryProfile.GetHashCode", "TaskUtils.WhenAll", "_projectsStorage.GetMonitoredProjectsAsync", "_governanceRulesStorage.GetGovernanceRulesAsync", "Project.AssociatedProjectsForRepositories", "_repositoryRiskService.EnrichRisk", "cacheBuilder", "TimeSpan.FromHours"], false, false, false, false, [], false, 0, 0, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, false], ["OnExceptionFallbackFilter", "Lim.API.OnExceptionFallbackFilter", ["???.ExceptionFilterAttribute"], ["???.IActionFilter"], "src/Lim.API/Services/OnExceptionFallbackFilter.cs", 8, 0, {"_defaultValue": "object"}, ["_defaultValue"], ["OnExceptionFallbackFilter", "OnActionExecuted", "OnActionExecuting", "OnExceptionAsync"], ["System.Text", "System.Threading.Tasks", "Microsoft.AspNetCore.Mvc.Filters", "Newtonsoft.Json"], false, false, [], false, false, [], {"_defaultValue": []}, [], 0, false, false, false, 4, 1.0, [], 71.5, 31, 0.0, 100.0, 1, 0, false, false, false, true, "public", false, [], ["JsonConvert.SerializeObject", "context.HttpContext.Response.Body.WriteAsync", "Encoding.UTF8.GetBytes"], false, false, false, false, [], false, 0, 0, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, false], ["OnExceptionFallbackToEmptyArrayFilter", "Lim.API.OnExceptionFallbackToEmptyArrayFilter", ["Lim.API.OnExceptionFallbackFilter"], [], "src/Lim.API/Services/OnExceptionFallbackToEmptyArrayFilter.cs", 3, 0, {"_defaultValue": "object"}, ["_defaultValue"], ["OnExceptionFallbackToEmptyArrayFilter", "OnExceptionFallbackFilter", "OnActionExecuted", "OnActionExecuting", "OnExceptionAsync"], [], false, false, [], false, false, [], {"_defaultValue": []}, [], 0, false, false, false, 5, 1.0, [], 61.2, 20, 0.0, 100.0, 2, 0, false, false, false, true, "public", false, [], ["JsonConvert.SerializeObject", "context.HttpContext.Response.Body.WriteAsync", "Encoding.UTF8.GetBytes"], false, false, false, false, [], false, 0, 0, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, false], ["ProfileCalculatingService", "Lim.API.ProfileCalculatingService", [], ["Lim.API.IProfileCalculatingService"], "src/Lim.API/Services/ProfileCalculatingService.cs", 11, 0, {"_apiClassificationStorage": "Lim.Common.DotNET.IApiClassificationStorage", "_commitsStorage": "Lim.Common.DotNET.ICommitsStorage", "_consumableIsActiveThreshold": "System.TimeSpan", "_customAssetCollectionConfigurationStorage": "Lim.Common.DotNET.ICustomAssetCollectionConfigurationStorage", "_customAssetCollectionProfileKeyToHash": "System.Collections.Generic.Dictionary<string, int>", "_customAssetCollectionProfilesStorage": "Lim.Common.DotNET.ICustomAssetCollectionProfilesStorage", "_developerIdentityStorage": "Lim.Common.DotNET.IDeveloperIdentityStorage", "_developerProfileKeyToHash": "System.Collections.Generic.Dictionary<string, int>", "_developerProfilesStorage": "Lim.Common.DotNET.IDeveloperProfilesStorage", "_developerProjectProfilesStorage": "Lim.Common.DotNET.IDeveloperProjectProfilesStorage", "_developerRepositoryProfilesStorage": "Lim.Common.DotNET.IDeveloperRepositoryProfilesStorage", "_developersStorage": "Lim.Common.DotNET.IDevelopersStorage", "_entityChangeHandler": "Lim.API.IEntityChangeHandler", "_governanceRulesStorage": "Lim.Common.DotNET.IGovernanceRulesStorage", "_issuesStorage": "Lim.Common.DotNET.IIssuesStorage", "_logger": "???.ILogger<ProfileCalculatingService>", "_organizationProfileStorage": "Lim.Common.DotNET.IOrganizationProfileStorage", "_projectProfileKeyToHash": "System.Collections.Generic.Dictionary<string, int>", "_projectProfilesStorage": "Lim.Common.DotNET.IProjectProfilesStorage", "_projectsStorage": "Lim.Common.DotNET.IProjectsStorage", "_repositoriesStorage": "Lim.Common.DotNET.IRepositoriesStorage", "_repositoryInventoryService": "Lim.API.IRepositoryInventoryService", "_repositoryProfileKeyToHash": "System.Collections.Generic.Dictionary<string, int>", "_repositoryProfilesStorage": "Lim.Common.DotNET.IRepositoryProfilesStorage", "_repositoryProjectProfileStorage": "Lim.Common.DotNET.IRepositoryProjectProfileStorage", "_repositoryRiskService": "Lim.API.IRepositoryRiskService", "_securityScansProjectsStorage": "Lim.Common.DotNET.ISecurityScansProjectsStorage", "_securityScansStorage": "Lim.Common.DotNET.ISecurityScansStorage", "_serversStorage": "Lim.Common.DotNET.IServersStorage", "_configurationStorage": "Lim.Common.DotNET.IConfigurationStorage", "RepositoryKeyToBusinessImpactForDemo": "System.Collections.Generic.Dictionary<string, BusinessImpact>"}, ["_apiClassificationStorage", "_commitsStorage", "_consumableIsActiveThreshold", "_customAssetCollectionConfigurationStorage", "_customAssetCollectionProfileKeyToHash", "_customAssetCollectionProfilesStorage", "_developerIdentityStorage", "_developerProfileKeyToHash", "_developerProfilesStorage", "_developerProjectProfilesStorage", "_developerRepositoryProfilesStorage", "_developersStorage", "_entityChangeHandler", "_governanceRulesStorage", "_issuesStorage", "_logger", "_organizationProfileStorage", "_projectProfileKeyToHash", "_projectProfilesStorage", "_projectsStorage", "_repositoriesStorage", "_repositoryInventoryService", "_repositoryProfileKeyToHash", "_repositoryProfilesStorage", "_repositoryProjectProfileStorage", "_repositoryRiskService", "_securityScansProjectsStorage", "_securityScansStorage", "_serversStorage", "_configurationStorage"], ["ProfileCalculatingService", "CalculateProfilesAsync", "UpdateProfilesForAsync", "UpdateRepositoryProfilesAsync", "UpdateDeveloperProfilesAsync", "UpdateProjectProfilesAsync", "GetRepositoryProfilesAsync", "CreateRepositoryProfileAsync", "GetDeveloperProfilesAsync", "CreateDeveloperProfileAsync", "GetProjectProfilesAsync", "CreateProjectProfileAsync", "UpdateCustomerAssetCollectionProfilesAsync", "GetCustomAssetCollectionProfilesAsync", "CreateCustomAssetCollectionProfile", "UpdateOrganizationProfileAsync"], ["System", "System.Collections.Generic", "System.Linq", "System.Threading.Tasks", "Infrastructure.Dotnet.Common", "Lim.Common.DotNET", "Microsoft.Extensions.Logging"], false, false, [], false, false, [], {"_apiClassificationStorage": [], "_commitsStorage": [], "_consumableIsActiveThreshold": [], "_customAssetCollectionConfigurationStorage": [], "_customAssetCollectionProfileKeyToHash": [], "_customAssetCollectionProfilesStorage": [], "_developerIdentityStorage": [], "_developerProfileKeyToHash": [], "_developerProfilesStorage": [], "_developerProjectProfilesStorage": [], "_developerRepositoryProfilesStorage": [], "_developersStorage": [], "_entityChangeHandler": [], "_governanceRulesStorage": [], "_issuesStorage": [], "_logger": [], "_organizationProfileStorage": [], "_projectProfileKeyToHash": [], "_projectProfilesStorage": [], "_projectsStorage": [], "_repositoriesStorage": [], "_repositoryInventoryService": [], "_repositoryProfileKeyToHash": [], "_repositoryProfilesStorage": [], "_repositoryProjectProfileStorage": [], "_repositoryRiskService": [], "_securityScansProjectsStorage": [], "_securityScansStorage": [], "_serversStorage": [], "_configurationStorage": [], "RepositoryKeyToBusinessImpactForDemo": []}, [], 0, false, false, false, 16, 1.0, [], 1345.5625, 1065, 6.25, 12.5, 1, 0, false, false, false, true, "public", false, ["Lim.API.IRepositoryInventoryService.EnrichInventoryAsync", "Lim.API.IRepositoryRiskService.EnrichRisk"], ["_logger.LogDebug", "_repositoriesStorage.GetMonitoredRepositoriesAsync", "monitoredRepositories.ToDictionary", "(await _developerRepositoryProfilesStorage.GetMonitoredProfilesAsync(monitoredRepositoriesByKey.Keys.ToHashSet()))\n                    .ToList", "_developerRepositoryProfilesStorage.GetMonitoredProfilesAsync", "monitoredRepositoriesByKey.Keys.ToHashSet", "_projectsStorage.GetMonitoredProjectsAsync", "monitoredProjects.ToDictionary", "(await _developerProjectProfilesStorage.GetMonitoredProfilesAsync(monitoredProjectsByKey.Keys.ToHashSet()))\n                    .ToList", "_developerProjectProfilesStorage.GetMonitoredProfilesAsync", "monitoredProjectsByKey.Keys.ToHashSet", "developerRepositoryProfiles\n                    .GroupBy(profile => profile.RepositoryKey)\n                    .ToDictionary", "developerRepositoryProfiles\n                    .GroupBy", "_.ToList", "repositoryProfiles.ToDictionary", "_logger.LogError", "profiles\n                .Where(\n                    profile => !persistedProfileKeys.Contains(keySelector(profile)) ||\n                               !profileKeyToHash.TryGetValue(keySelector(profile), out var hash) ||\n                               hash != profile.GetHashCode()\n                )\n                .ToList", "profiles\n                .Where", "persistedProfileKeys.Contains", "keySelector", "profileKeyToHash.TryGetValue", "profile.GetHashCode", "typeof(TProfile).GetDisplayName", "updatedProfile.GetHashCode", "profiles.Select(keySelector)\n                .ToHashSet", "profiles.Select", "Task.WhenAll", "updatedProfiles.Any", "flushAsync", "clearStaleAsync", "profileKeyToHash.RemoveWhere", "profileKeys.Contains", "TaskUtils.WhenAll", "_repositoryProfilesStorage.GetAllKeysAsync", "UpdateProfilesForAsync", "_repositoryProfilesStorage.SyncProfilesAsync", "_entityChangeHandler.NotifyRepositoriesChangedAsync", "updatedProfiles.Select", "_repositoryProfilesStorage.DeleteStaleProfilesAsync", "_developerProfilesStorage.GetAllKeysAsync", "_developerProfilesStorage.SyncDeveloperProfilesAsync", "_entityChangeHandler.NotifyDevelopersChangedAsync", "_developerProfilesStorage.DeleteStaleProfilesAsync", "_projectProfilesStorage.GetAllKeysAsync", "_projectProfilesStorage.SyncProfilesAsync", "_repositoryProjectProfileStorage.SyncRepositoryProjectProfilesAsync", "updatedProfiles.ToDictionaryGroupedMany", "_developerProjectProfilesStorage.SyncDeveloperProjectProfilesAsync", "_entityChangeHandler.NotifyProjectsChangedAsync", "projectProfiles.Select", "_projectProfilesStorage.DeleteStaleProfilesAsync", "_governanceRulesStorage.GetGovernanceRulesAsync", "_commitsStorage.RecentMaterialChangeCountByRepository", "(await monitoredRepositories.SelectParallelAsync(\n                    async repository => await CreateRepositoryProfileAsync(\n                        repository,\n                        Project.AssociatedProjectsForRepositories(projects, new[] {repository}),\n                        projects.FirstOrDefault(project => repository.AssociatedProjectIds.Contains(project.Id) && repository.ServerUrl == project.ServerUrl),\n                        governanceRules,\n                        repositoryKeyToDeveloperRepositoryProfiles.GetValueOrDefault(repository.Key, new List<DeveloperRepositoryProfile>()),\n                        recentMaterialChangeCountByRepositoryKey.GetValueOrDefault(repository.Key),\n                        developerProfiles\n                    )\n                ))\n                .OrderByDescending(repositoryProfile => repositoryProfile.Risk.CombinedRiskLevel)\n                .ThenByDescending(repositoryProfile => repositoryProfile.Risk.CombinedRiskScore)\n                .ThenBy(repositoryProfile => repositoryProfile.Name)\n                .ToList", "(await monitoredRepositories.SelectParallelAsync(\n                    async repository => await CreateRepositoryProfileAsync(\n                        repository,\n                        Project.AssociatedProjectsForRepositories(projects, new[] {repository}),\n                        projects.FirstOrDefault(project => repository.AssociatedProjectIds.Contains(project.Id) && repository.ServerUrl == project.ServerUrl),\n                        governanceRules,\n                        repositoryKeyToDeveloperRepositoryProfiles.GetValueOrDefault(repository.Key, new List<DeveloperRepositoryProfile>()),\n                        recentMaterialChangeCountByRepositoryKey.GetValueOrDefault(repository.Key),\n                        developerProfiles\n                    )\n                ))\n                .OrderByDescending(repositoryProfile => repositoryProfile.Risk.CombinedRiskLevel)\n                .ThenByDescending(repositoryProfile => repositoryProfile.Risk.CombinedRiskScore)\n                .ThenBy", "(await monitoredRepositories.SelectParallelAsync(\n                    async repository => await CreateRepositoryProfileAsync(\n                        repository,\n                        Project.AssociatedProjectsForRepositories(projects, new[] {repository}),\n                        projects.FirstOrDefault(project => repository.AssociatedProjectIds.Contains(project.Id) && repository.ServerUrl == project.ServerUrl),\n                        governanceRules,\n                        repositoryKeyToDeveloperRepositoryProfiles.GetValueOrDefault(repository.Key, new List<DeveloperRepositoryProfile>()),\n                        recentMaterialChangeCountByRepositoryKey.GetValueOrDefault(repository.Key),\n                        developerProfiles\n                    )\n                ))\n                .OrderByDescending(repositoryProfile => repositoryProfile.Risk.CombinedRiskLevel)\n                .ThenByDescending", "(await monitoredRepositories.SelectParallelAsync(\n                    async repository => await CreateRepositoryProfileAsync(\n                        repository,\n                        Project.AssociatedProjectsForRepositories(projects, new[] {repository}),\n                        projects.FirstOrDefault(project => repository.AssociatedProjectIds.Contains(project.Id) && repository.ServerUrl == project.ServerUrl),\n                        governanceRules,\n                        repositoryKeyToDeveloperRepositoryProfiles.GetValueOrDefault(repository.Key, new List<DeveloperRepositoryProfile>()),\n                        recentMaterialChangeCountByRepositoryKey.GetValueOrDefault(repository.Key),\n                        developerProfiles\n                    )\n                ))\n                .OrderByDescending", "monitoredRepositories.SelectParallelAsync", "CreateRepositoryProfileAsync", "Project.AssociatedProjectsForRepositories", "projects.FirstOrDefault", "repository.AssociatedProjectIds.Contains", "repositoryKeyToDeveloperRepositoryProfiles.GetValueOrDefault", "recentMaterialChangeCountByRepositoryKey.GetValueOrDefault", "developerRepositoryProfiles\n                .Where(developerRepositoryProfile => developerRepositoryProfile.RepositoryKey == repository.Key && developerRepositoryProfile.SecurityCommits.Any())\n                .ToDictionary", "developerRepositoryProfiles\n                .Where", "developerRepositoryProfile.SecurityCommits.Any", "developerRepositoryProfilesMap.Any", "developerProfiles\n                    .Where(developerProfile => developerRepositoryProfilesMap.ContainsKey(developerProfile.Key))\n                    .ToList()\n                    .MaxBy", "developerProfiles\n                    .Where(developerProfile => developerRepositoryProfilesMap.ContainsKey(developerProfile.Key))\n                    .ToList", "developerProfiles\n                    .Where", "developerRepositoryProfilesMap.ContainsKey", "_repositoryProjectProfileStorage.GetProfilesCountForConsumableAsync", "_configurationStorage.GetConfigurationAsync", "RepositoryKeyToBusinessImpactForDemo.ContainsKey", "_commitsStorage.GetRepositoryMaterialChangesLabelsAsync", "_securityScansProjectsStorage.GetRepositoryMatchingProjectsAsync", "(await securityScansProjects\n                    .Where(project => project.Provider == Provider.Checkmarx && project.LatestScanId != null)\n                    .SelectAsync(async project => await _securityScansStorage.GetLatestScan(project)))\n                .WhereNotNull()\n                .ToList", "(await securityScansProjects\n                    .Where(project => project.Provider == Provider.Checkmarx && project.LatestScanId != null)\n                    .SelectAsync(async project => await _securityScansStorage.GetLatestScan(project)))\n                .WhereNotNull", "securityScansProjects\n                    .Where(project => project.Provider == Provider.Checkmarx && project.LatestScanId != null)\n                    .SelectAsync", "securityScansProjects\n                    .Where", "_securityScansStorage.GetLatestScan", "allScans.Any", "allScans.MaxBy", "_developersStorage.GetDevelopersAsync", "developerRepositoryProfiles\n                .GroupBy(profile => profile.DeveloperKey)\n                .ToDictionary", "developerRepositoryProfiles\n                .GroupBy", "developerProjectProfiles\n                .GroupBy(profile => profile.DeveloperKey)\n                .ToDictionary", "developerProjectProfiles\n                .GroupBy", "developerKeyToDeveloperRepositoryProfiles.Keys.Concat(developerProjectProfilesByKey.Keys)\n                .Distinct", "developerKeyToDeveloperRepositoryProfiles.Keys.Concat", "developerKeys.Select(\n                    developerKey => (Key: developerKey, LastActivity: new DateTime(\n                        (developerKeyToDeveloperRepositoryProfiles\n                            .GetValueOrDefault(developerKey) ?? new List<DeveloperRepositoryProfile>())\n                        .Select(profile => profile.LastActivity.Ticks)\n                        .Concat(\n                            (developerProjectProfilesByKey\n                                .GetValueOrDefault(developerKey) ?? new List<DeveloperProjectProfile>())\n                            .Select(profile => profile.LastActivity.Ticks)\n                        )\n                        .Max()\n                    ))\n                )\n                .ToDictionary", "developerKeys.Select", "(developerKeyToDeveloperRepositoryProfiles\n                            .GetValueOrDefault(developerKey) ?? new List<DeveloperRepositoryProfile>())\n                        .Select(profile => profile.LastActivity.Ticks)\n                        .Concat(\n                            (developerProjectProfilesByKey\n                                .GetValueOrDefault(developerKey) ?? new List<DeveloperProjectProfile>())\n                            .Select(profile => profile.LastActivity.Ticks)\n                        )\n                        .Max", "(developerKeyToDeveloperRepositoryProfiles\n                            .GetValueOrDefault(developerKey) ?? new List<DeveloperRepositoryProfile>())\n                        .Select(profile => profile.LastActivity.Ticks)\n                        .Concat", "(developerKeyToDeveloperRepositoryProfiles\n                            .GetValueOrDefault(developerKey) ?? new List<DeveloperRepositoryProfile>())\n                        .Select", "developerKeyToDeveloperRepositoryProfiles\n                            .GetValueOrDefault", "(developerProjectProfilesByKey\n                                .GetValueOrDefault(developerKey) ?? new List<DeveloperProjectProfile>())\n                            .Select", "developerProjectProfilesByKey\n                                .GetValueOrDefault", "(await developers.SelectParallelAsync(\n                    developer => CreateDeveloperProfileAsync(\n                        developer,\n                        developerKeyToDeveloperRepositoryProfiles.GetValueOrDefault(developer.Key) ?? new List<DeveloperRepositoryProfile>(),\n                        developerKeyToLastActivity.GetNullableValueOrDefault(developer.Key)\n                    )\n                ))\n                .WhereNotNull()\n                .ToList", "(await developers.SelectParallelAsync(\n                    developer => CreateDeveloperProfileAsync(\n                        developer,\n                        developerKeyToDeveloperRepositoryProfiles.GetValueOrDefault(developer.Key) ?? new List<DeveloperRepositoryProfile>(),\n                        developerKeyToLastActivity.GetNullableValueOrDefault(developer.Key)\n                    )\n                ))\n                .WhereNotNull", "developers.SelectParallelAsync", "CreateDeveloperProfileAsync", "developerKeyToDeveloperRepositoryProfiles.GetValueOrDefault", "developerKeyToLastActivity.GetNullableValueOrDefault", "_developerIdentityStorage.GetDeveloperIdentitiesByDeveloperKeyAsync", "developerIdentities.None", "_commitsStorage.GetDeveloperMaterialChangesLabelsAsync", "repositoryProfiles.Where(profile => profile.Repository.IsAssociatedWithProject(project))\n                    .ToList", "repositoryProfiles.Where", "profile.Repository.IsAssociatedWithProject", "(await _developerProjectProfilesStorage.GetProfilesAsync())\n                .GroupBy(profile => profile.ProjectKey)\n                .ToDictionary", "(await _developerProjectProfilesStorage.GetProfilesAsync())\n                .GroupBy", "_developerProjectProfilesStorage.GetProfilesAsync", "(await projects.SelectParallelAsync(\n                    project =>\n                    {\n                        var relevantRepositoryProfiles = projectKeyToRepositoryProfiles[project.Key];\n                        return CreateProjectProfileAsync(\n                            project,\n                            relevantRepositoryProfiles,\n                            relevantRepositoryProfiles\n                                .SelectMany(repositoryProfile => repositoryKeyToDeveloperRepositoryProfiles.GetValueOrDefault(repositoryProfile.Key, new List<DeveloperRepositoryProfile>()))\n                                .ToList(),\n                            developerProjectProfilesByProjectKey.GetValueOrDefault(project.Key, new List<DeveloperProjectProfile>()),\n                            relevantRepositoryProfiles.Any()\n                                ? relevantRepositoryProfiles.Sum(profile => profile.RecentMaterialChangeCount)\n                                : 0\n                        );\n                    }\n                ))\n                .OrderByDescending(projectProfile => projectProfile.Risk.CombinedRiskLevel)\n                .ThenByDescending(projectProfile => projectProfile.Risk.CombinedRiskScore)\n                .ThenBy(repositoryProfile => repositoryProfile.Name)\n                .ToList", "(await projects.SelectParallelAsync(\n                    project =>\n                    {\n                        var relevantRepositoryProfiles = projectKeyToRepositoryProfiles[project.Key];\n                        return CreateProjectProfileAsync(\n                            project,\n                            relevantRepositoryProfiles,\n                            relevantRepositoryProfiles\n                                .SelectMany(repositoryProfile => repositoryKeyToDeveloperRepositoryProfiles.GetValueOrDefault(repositoryProfile.Key, new List<DeveloperRepositoryProfile>()))\n                                .ToList(),\n                            developerProjectProfilesByProjectKey.GetValueOrDefault(project.Key, new List<DeveloperProjectProfile>()),\n                            relevantRepositoryProfiles.Any()\n                                ? relevantRepositoryProfiles.Sum(profile => profile.RecentMaterialChangeCount)\n                                : 0\n                        );\n                    }\n                ))\n                .OrderByDescending(projectProfile => projectProfile.Risk.CombinedRiskLevel)\n                .ThenByDescending(projectProfile => projectProfile.Risk.CombinedRiskScore)\n                .ThenBy", "(await projects.SelectParallelAsync(\n                    project =>\n                    {\n                        var relevantRepositoryProfiles = projectKeyToRepositoryProfiles[project.Key];\n                        return CreateProjectProfileAsync(\n                            project,\n                            relevantRepositoryProfiles,\n                            relevantRepositoryProfiles\n                                .SelectMany(repositoryProfile => repositoryKeyToDeveloperRepositoryProfiles.GetValueOrDefault(repositoryProfile.Key, new List<DeveloperRepositoryProfile>()))\n                                .ToList(),\n                            developerProjectProfilesByProjectKey.GetValueOrDefault(project.Key, new List<DeveloperProjectProfile>()),\n                            relevantRepositoryProfiles.Any()\n                                ? relevantRepositoryProfiles.Sum(profile => profile.RecentMaterialChangeCount)\n                                : 0\n                        );\n                    }\n                ))\n                .OrderByDescending(projectProfile => projectProfile.Risk.CombinedRiskLevel)\n                .ThenByDescending", "(await projects.SelectParallelAsync(\n                    project =>\n                    {\n                        var relevantRepositoryProfiles = projectKeyToRepositoryProfiles[project.Key];\n                        return CreateProjectProfileAsync(\n                            project,\n                            relevantRepositoryProfiles,\n                            relevantRepositoryProfiles\n                                .SelectMany(repositoryProfile => repositoryKeyToDeveloperRepositoryProfiles.GetValueOrDefault(repositoryProfile.Key, new List<DeveloperRepositoryProfile>()))\n                                .ToList(),\n                            developerProjectProfilesByProjectKey.GetValueOrDefault(project.Key, new List<DeveloperProjectProfile>()),\n                            relevantRepositoryProfiles.Any()\n                                ? relevantRepositoryProfiles.Sum(profile => profile.RecentMaterialChangeCount)\n                                : 0\n                        );\n                    }\n                ))\n                .OrderByDescending", "projects.SelectParallelAsync", "CreateProjectProfileAsync", "relevantRepositoryProfiles\n                                .SelectMany(repositoryProfile => repositoryKeyToDeveloperRepositoryProfiles.GetValueOrDefault(repositoryProfile.Key, new List<DeveloperRepositoryProfile>()))\n                                .ToList", "relevantRepositoryProfiles\n                                .SelectMany", "developerProjectProfilesByProjectKey.GetValueOrDefault", "relevantRepositoryProfiles.Any", "relevantRepositoryProfiles.Sum", "_issuesStorage.GetProjectIssuesCountAsync", "_issuesStorage.GetProjectOpenIssuesCountAsync", "repositoryProfiles.Select(repositoryProfile => repositoryProfile.Key)\n                .ToHashSet", "repositoryProfiles.Select", "_commitsStorage.GetRepositoriesMaterialChangesLabelsAsync", "_customAssetCollectionProfilesStorage.GetAllKeysAsync", "_customAssetCollectionProfilesStorage.SyncProfilesAsync", "_customAssetCollectionProfilesStorage.DeleteStaleProfilesAsync", "_customAssetCollectionConfigurationStorage.GetAllCustomAssetCollectionConfigurationsAsync", "customAssetCollectionConfigurations.Select(\n                    customAssetCollectionConfiguration => CreateCustomAssetCollectionProfile(\n                        customAssetCollectionConfiguration,\n                        customAssetCollectionConfiguration.RepositoryKeys\n                            .Where(repositoryKey => monitoredRepositoriesByKey.ContainsKey(repositoryKey))\n                            .Select(repositoryKey => repositoryProfilesByKey[repositoryKey])\n                            .ToHashSet(),\n                        repositoryKeyToDeveloperRepositoryProfiles\n                    )\n                )\n                .OrderBy(profile => profile.Name)\n                .ToList", "customAssetCollectionConfigurations.Select(\n                    customAssetCollectionConfiguration => CreateCustomAssetCollectionProfile(\n                        customAssetCollectionConfiguration,\n                        customAssetCollectionConfiguration.RepositoryKeys\n                            .Where(repositoryKey => monitoredRepositoriesByKey.ContainsKey(repositoryKey))\n                            .Select(repositoryKey => repositoryProfilesByKey[repositoryKey])\n                            .ToHashSet(),\n                        repositoryKeyToDeveloperRepositoryProfiles\n                    )\n                )\n                .OrderBy", "customAssetCollectionConfigurations.Select", "customAssetCollectionConfiguration.RepositoryKeys\n                            .Where(repositoryKey => monitoredRepositoriesByKey.ContainsKey(repositoryKey))\n                            .Select(repositoryKey => repositoryProfilesByKey[repositoryKey])\n                            .ToHashSet", "customAssetCollectionConfiguration.RepositoryKeys\n                            .Where(repositoryKey => monitoredRepositoriesByKey.ContainsKey(repositoryKey))\n                            .Select", "customAssetCollectionConfiguration.RepositoryKeys\n                            .Where", "monitoredRepositoriesByKey.ContainsKey", "repositoryProfiles\n                .SelectMany(\n                    repositoryProfile => repositoryKeyToDeveloperRepositoryProfiles\n                        .GetValueOrDefault(repositoryProfile.Key, new List<DeveloperRepositoryProfile>())\n                )\n                .ToList", "repositoryProfiles\n                .SelectMany", "repositoryKeyToDeveloperRepositoryProfiles\n                        .GetValueOrDefault", "_organizationProfileStorage.GetOrganizationProfileAsync", "monitoredRepositories.SelectMany(repository => repository.Languages)\n                .ToHashSet", "monitoredRepositories.SelectMany", "repositoryProfiles.SelectMany(repositoryProfile => repositoryProfile.Licenses)\n                .ToHashSet", "repositoryProfiles.SelectMany", "repositoryProfiles.SelectMany(repositoryProfile => repositoryProfile.Technologies)\n                .ToHashSet", "_apiClassificationStorage.CountAllAsync", "(await _serversStorage.GetServersAsync())\n                .Select(server => server.Provider)\n                .Any", "(await _serversStorage.GetServersAsync())\n                .Select", "_serversStorage.GetServersAsync", "provider.Provides", "_organizationProfileStorage.SyncOrganizationProfileAsync", "TimeSpan.FromDays"], false, false, false, false, ["https___bitbucket_apiiro_com_8443__LIM__Tieqiang-dc-heacth", "Starting profiles calculation", "Failed to calculate profiles"], false, 0, 0, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, false], ["ProfileSyncService", "Lim.API.ProfileSyncService", ["???.HostedIntervalWorkingService"], [], "src/Lim.API/Services/ProfileSyncService.cs", 10, 0, {"_profileCalculatingService": "Lim.API.IProfileCalculatingService"}, ["_profileCalculatingService"], ["ProfileSyncService", "Work"], ["System", "System.Threading", "System.Threading.Tasks", "Infrastructure.Dotnet.Common", "JetBrains.Annotations", "Microsoft.Extensions.Logging"], false, false, ["UsedImplicitly"], false, false, [], {"_profileCalculatingService": []}, [], 0, false, false, false, 2, 1.0, [], 67.5, 67, 0.0, 50.0, 1, 0, false, false, false, true, "public", false, ["Lim.API.IProfileCalculatingService.CalculateProfilesAsync"], ["TimeSpan.FromMinutes"], false, false, false, false, [], false, 0, 0, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, false], ["ProjectInterestBackgroundService", "Lim.API.ProjectInterestBackgroundService", ["???.ConsumableInterestBackgroundService<Project>"], [], "src/Lim.API/Services/ProjectInterestBackgroundService.cs", 10, 0, {"_entityChangeHandler": "Lim.API.IEntityChangeHandler", "_projectsProvider": "Lim.GitRestApi.IProjectsProvider"}, ["_entityChangeHandler", "_projectsProvider"], ["ProjectInterestBackgroundService", "GetGetActivityFactorAsync", "NotifyEntitiesChangedAsync"], ["System.Collections.Generic", "System.Threading.Tasks", "JetBrains.Annotations", "Lim.Common.DotNET", "Lim.GitRestApi", "Microsoft.Extensions.Logging"], false, false, ["UsedImplicitly"], false, false, [], {"_entityChangeHandler": [], "_projectsProvider": []}, [], 0, false, false, false, 3, 1.0, [], 90.66666666666667, 75, 0.0, 33.333333333333336, 1, 0, false, false, false, true, "public", false, ["Lim.API.IEntityChangeHandler.NotifyProjectsChangedAsync"], ["_projectsProvider.GetProjectActivityFactorAsync"], false, false, false, false, [], false, 0, 0, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, false], ["ProjectSyncService", "Lim.API.ProjectSyncService", ["???.ConsumableSyncService<Project>"], [], "src/Lim.API/Services/ProjectSyncService.cs", 10, 0, {"_consumablesRemovalCleanupQueue": "Lim.API.IConsumablesRemovalCleanupQueue", "_entityChangeHandler": "Lim.API.IEntityChangeHandler", "_projectsInterestQueue": "???.IConsumablesInterestQueue<Project>"}, ["_consumablesRemovalCleanupQueue", "_entityChangeHandler", "_projectsInterestQueue"], ["ProjectSyncService", "HandleNewConsumables", "HandleDeletedConsumables", "HandleModifiedConsumable", "CleanupAfterRemoval"], ["System", "System.Threading.Tasks", "JetBrains.Annotations", "Lim.Common.DotNET", "Lim.GitRestApi", "Microsoft.Extensions.Logging"], false, false, ["UsedImplicitly"], false, false, [], {"_consumablesRemovalCleanupQueue": [], "_entityChangeHandler": [], "_projectsInterestQueue": []}, [], 0, false, false, false, 5, 1.0, [], 121.0, 85, 0.0, 20.0, 1, 0, false, false, false, true, "public", false, ["Lim.API.IEntityChangeHandler.NotifyAllProjectsChangedAsync", "Lim.API.IEntityChangeHandler.NotifyProjectChangedAsync", "Lim.API.IConsumablesInterestQueue<Lim.Common.DotNET.Project>.EnqueueAsync", "Lim.API.IConsumablesRemovalCleanupQueue.EnqueueRemovedProjectAsync"], ["Task.WhenAll"], false, false, false, false, [], false, 0, 0, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, false], ["ReleasesProfileBackgroundService", "Lim.API.ReleasesProfileBackgroundService", ["???.HostedIntervalWorkingService"], [], "src/Lim.API/Services/ReleasesProfileBackgroundService.cs", 12, 0, {"_auditActionsService": "Lim.API.IAuditActionsService", "_governanceRulesStorage": "Lim.Common.DotNET.IGovernanceRulesStorage", "_projectsStorage": "Lim.Common.DotNET.IProjectsStorage", "_releasesStorage": "Lim.Common.DotNET.IReleasesStorage", "_repositoriesStorage": "Lim.Common.DotNET.IRepositoriesStorage", "_repositoryInventoryService": "Lim.API.IRepositoryInventoryService", "_repositoryRiskService": "Lim.API.IRepositoryRiskService"}, ["_auditActionsService", "_governanceRulesStorage", "_projectsStorage", "_releasesStorage", "_repositoriesStorage", "_repositoryInventoryService", "_repositoryRiskService"], ["ReleasesProfileBackgroundService", "GetRiskAndBadges", "Work"], ["System", "System.Collections.Generic", "System.Threading", "System.Threading.Tasks", "Infrastructure.Dotnet.Common", "JetBrains.Annotations", "Lim.Common.DotNET", "Microsoft.Extensions.Logging"], false, false, ["UsedImplicitly"], false, false, [], {"_auditActionsService": [], "_governanceRulesStorage": [], "_projectsStorage": [], "_releasesStorage": [], "_repositoriesStorage": [], "_repositoryInventoryService": [], "_repositoryRiskService": []}, [], 0, false, false, false, 3, 1.0, [], 1043.3333333333333, 439, 0.0, 33.333333333333336, 1, 0, false, false, false, true, "public", false, ["Lim.API.IRepositoryInventoryService.EnrichInventoryAsync", "Lim.API.IRepositoryRiskService.EnrichRisk"], ["RepositoryProfile.EmptyProfileFor", "TaskUtils.WhenAll", "_releasesStorage.GetAllReadyAsync", "_governanceRulesStorage.GetGovernanceRulesAsync", "releases.None", "Logger.LogInformation", "_repositoriesStorage.GetRepositoryAsync", "_projectsStorage.GetAssociatedProjectsByRepositoriesAsync", "GetRiskAndBadges", "Logger.LogError", "_releasesStorage.SyncReleaseAsync", "_auditActionsService.AuditReleaseCompleteAsync"], false, false, false, false, ["Found {count} releases to calculate", "Failed to calculate release {release} risk", "Processed {processedReleases}/{total} releases"], false, 0, 0, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, false], ["ReplicatedAuthenticationService", "Lim.API.ReplicatedAuthenticationService", [], ["Lim.API.IReplicatedAuthenticationService"], "src/Lim.API/Services/ReplicatedAuthenticationService.cs", 15, 0, {"_client": "???.IRestClient", "_configuration": "???.IConfiguration", "_logger": "???.ILogger<ReplicatedAuthenticationService>", "_authenticationType": "Lim.API.AuthenticationType?", "_successfulAuthenticationPasswordHash": "int?"}, ["_client", "_configuration", "_logger", "_authenticationType", "_successfulAuthenticationPasswordHash", "FullAdminGroup", "ViewOnlyGroup"], ["ReplicatedAuthenticationService", "FullAdminGroup", "ViewOnlyGroup", "IsSupported", "GetAuthenticationTypeAsync", "AuthenticateAsync", "ToFullAdmin", "AuthorizeUserWithLdap"], ["System", "System.Linq", "System.Net", "System.Threading.Tasks", "Infrastructure.Dotnet.Common", "JetBrains.Annotations", "Lim.Common.DotNET", "Microsoft.Extensions.Configuration", "Microsoft.Extensions.Logging", "Newtonsoft.Json.Linq", "RestSharp"], false, false, ["UsedImplicitly"], false, false, [], {"_client": [], "_configuration": [], "_logger": [], "_authenticationType": [], "_successfulAuthenticationPasswordHash": []}, [], 3, false, false, false, 6, 0.6666666666666666, [], 469.6666666666667, 163, 11.11111111111111, 44.44444444444444, 2, 0, false, false, false, true, "public", false, ["Lim.API.ConsoleUserCredentials.GetHashCode"], ["_configuration.GetValueWithEnv", "nameof", "_client.SafeExecuteTaskAsync", "response.AsJObject()[\"authType\"]\n                    .Value<string>", "response.AsJObject", "EnumUtils.TryFromUnderscoreNotationString<AuthenticationType>", "_logger.LogError", "response.FormatErrorResponse", "request.AddJsonBody", "AuthorizeUserWithLdap", "response.FromJson<ReplicatedLdapUser>", "_logger.LogInformation", ".GetHashCode", ".First", "user.Groups\n                .Select(group => group.Name)\n                .ToHashSet", "user.Groups\n                .Select", "groups.Contains", "string.IsNullOrEmpty", "_client.SetRemoteCertificateValidationCallback"], false, false, false, false, ["App:Ldap:FullAdminGroup", "", "App:Ldap:ViewOnlyGroup", "console/v1/auth", "authType", "get authentication type with Replicated", "identity/v1/login", "Authentication to replicated failed with password hash {hash}", "authenticate with Replicated"], false, 3, 0, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, false], ["RepositoryFilesDiscoveryBackgroundService", "Lim.API.RepositoryFilesDiscoveryBackgroundService", ["???.BackgroundService"], [], "src/Lim.API/Services/RepositoryFilesDiscoveryBackgroundService.cs", 16, 0, {"_entityChangeHandler": "Lim.API.IEntityChangeHandler", "_lastScanOfRepository": "System.Collections.Generic.Dictionary<string, DateTime>", "_logger": "???.ILogger<RepositoryFilesDiscoveryBackgroundService>", "_repositoriesFilesDiscoveryQueue": "Lim.API.IRepositoriesFilesDiscoveryQueue", "_repositoriesInterestQueue": "???.IConsumablesInterestQueue<Repository>", "_repositoriesProvider": "Lim.GitRestApi.IRepositoriesProvider", "_repositoriesStorage": "Lim.Common.DotNET.IRepositoriesStorage", "_serversStorage": "Lim.Common.DotNET.IServersStorage"}, ["_entityChangeHandler", "_lastScanOfRepository", "_logger", "_repositoriesFilesDiscoveryQueue", "_repositoriesInterestQueue", "_repositoriesProvider", "_repositoriesStorage", "_serversStorage"], ["RepositoryFilesDiscoveryBackgroundService", "StartAsync", "ExecuteAsync", "InvestigateRepository"], ["System", "System.Collections.Generic", "System.Data", "System.Linq", "System.Threading", "System.Threading.Tasks", "Infrastructure.Dotnet.Common", "JetBrains.Annotations", "Lim.Common.DotNET", "Lim.GitRestApi", "Microsoft.Extensions.Hosting", "Microsoft.Extensions.Logging"], false, false, ["UsedImplicitly"], false, false, [], {"_entityChangeHandler": [], "_lastScanOfRepository": [], "_logger": [], "_repositoriesFilesDiscoveryQueue": [], "_repositoriesInterestQueue": [], "_repositoriesProvider": [], "_repositoriesStorage": [], "_serversStorage": []}, [], 0, false, false, false, 4, 1.0, [], 1267.25, 995, 0.0, 50.0, 1, 0, false, false, false, true, "public", false, ["Lim.API.IRepositoriesFilesDiscoveryQueue.EnqueueAsync", "Lim.API.IRepositoriesFilesDiscoveryQueue.DequeueAsync", "Lim.API.IEntityChangeHandler.NotifyRepositoryChangedAsync", "Lim.API.IConsumablesInterestQueue<Lim.Common.DotNET.Repository>.EnqueueAsync"], ["(await _repositoriesStorage.GetNotPreScannedRepositoriesAsync())\n                .OrderBy(repository => repository.Name, StringComparer.OrdinalIgnoreCase)\n                .ThenBy(repository => repository.Key, StringComparer.OrdinalIgnoreCase)\n                .Select(repository => repository.Key)\n                .ToList", "(await _repositoriesStorage.GetNotPreScannedRepositoriesAsync())\n                .OrderBy(repository => repository.Name, StringComparer.OrdinalIgnoreCase)\n                .ThenBy(repository => repository.Key, StringComparer.OrdinalIgnoreCase)\n                .Select", "(await _repositoriesStorage.GetNotPreScannedRepositoriesAsync())\n                .OrderBy(repository => repository.Name, StringComparer.OrdinalIgnoreCase)\n                .ThenBy", "(await _repositoriesStorage.GetNotPreScannedRepositoriesAsync())\n                .OrderBy", "_repositoriesStorage.GetNotPreScannedRepositoriesAsync", "base.StartAsync", "repositoryKeys.TakeWhile", "_repositoriesStorage.GetRepositoryAsync", "_lastScanOfRepository.TryGetValue", "TimeSpan.FromHours", "exception.IsOrWrapping<ProviderConnectionException>", "_logger.LogInformationOnProviderConnectionException", "_logger.LogError", "_serversStorage.GetServerAsync", "_repositoriesProvider.GetRepositoryFilePathsAsync", "LanguageUtils.GetRepositoryLanguages", "_repositoriesProvider.GetRepositoryLanguagesAsync", "languages.None", "language.SupportsCodeParsing", "language.SupportsPropertiesExtraction", "_logger.LogInformation", "_repositoriesStorage.DisableRepositoryAsync", "_logger.LogDebug", "_repositoriesStorage.UpdateRepositoryRelevanceAsync"], false, false, false, false, ["Failed to process repositories"], false, 0, 0, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, false], ["RepositoryInterestBackgroundService", "Lim.API.RepositoryInterestBackgroundService", ["???.ConsumableInterestBackgroundService<Repository>"], [], "src/Lim.API/Services/RepositoryInterestBackgroundService.cs", 11, 0, {"_entityChangeHandler": "Lim.API.IEntityChangeHandler", "_repositoriesProvider": "Lim.GitRestApi.IRepositoriesProvider"}, ["_entityChangeHandler", "_repositoriesProvider"], ["RepositoryInterestBackgroundService", "GetGetActivityFactorAsync", "NotifyEntitiesChangedAsync", "GetActivityFactorsAsync"], ["System.Collections.Generic", "System.Linq", "System.Threading.Tasks", "JetBrains.Annotations", "Lim.Common.DotNET", "Lim.GitRestApi", "Microsoft.Extensions.Logging"], false, false, ["UsedImplicitly"], false, false, [], {"_entityChangeHandler": [], "_repositoriesProvider": []}, [], 0, false, false, false, 4, 1.0, [], 261.25, 107, 0.0, 25.0, 1, 0, false, false, false, true, "public", false, ["Lim.API.IEntityChangeHandler.NotifyRepositoriesChangedAsync", "Lim.API.ConsumableInterestBackgroundService<Lim.Common.DotNET.Repository>.GetActivityFactorsAsync"], ["_repositoriesProvider.GetRepositoryActivityFactorAsync", "sortedConsumableAndActivityFactor.Select(tuple => tuple.activityFactor)\n                .Max", "sortedConsumableAndActivityFactor.Select", "sortedConsumableAndActivityFactor.Select(\n                    tuple =>\n                    {\n                        if (tuple.consumable.Languages?.Contains(Language.Java) ?? false)\n                        {\n                            tuple.activityFactor += maxFactor;\n                        }\n\n                        return tuple;\n                    }\n                )\n                .ToList", ".Contains"], false, false, false, false, [], false, 0, 0, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, false], ["RepositoryInventoryService", "Lim.API.RepositoryInventoryService", [], ["Lim.API.IRepositoryInventoryService"], "src/Lim.API/Services/RepositoryInventoryService.cs", 11, 0, {"_inventoryEnricher": "Lim.Common.DotNET.IInventoryEnricher", "_logger": "???.ILogger<RepositoryInventoryService>", "_repositoriesProvider": "Lim.GitRestApi.IRepositoriesProvider"}, ["_inventoryEnricher", "_logger", "_repositoriesProvider"], ["RepositoryInventoryService", "EnrichInventoryAsync"], ["System", "System.Threading.Tasks", "Infrastructure.Dotnet.Common", "JetBrains.Annotations", "Lim.Common.DotNET", "Lim.GitRestApi", "Microsoft.Extensions.Logging"], false, false, ["UsedImplicitly"], false, false, [], {"_inventoryEnricher": [], "_logger": [], "_repositoriesProvider": []}, [], 0, false, false, false, 2, 1.0, [], 551.0, 551, 0.0, 100.0, 1, 0, false, false, false, true, "public", false, [], ["_inventoryEnricher.EnrichInventoryAsync", "_repositoriesProvider.GetVulnerabilitiesCountAsync", "e.IsOrWrapping<ProviderConnectionException>", "_logger.LogInformationOnProviderConnectionException"], false, false, false, false, ["Failed to fetch repository {} vulnerabilities"], false, 0, 0, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, false], ["RepositoryRiskService", "Lim.API.RepositoryRiskService", [], ["Lim.API.IRepositoryRiskService"], "src/Lim.API/Services/RepositoryRiskService.cs", 9, 0, {}, [], ["EnrichRisk", "CollectProfileRisk", "CollectInventoryRisk", "OrderRulesBySpecificness", "AlreadyDiscoveredMoreSpecificRule", "AddInventoryRisk", "ValidateRule", "CountForType", "CountPerValue", "CountPerValueWithAny"], ["System", "System.Collections.Generic", "System.Linq", "Infrastructure.Dotnet.Common", "Lim.Common.DotNET"], false, false, [], false, false, [], {}, [], 0, false, false, false, 10, 1.0, [], 1099.2, 742, 90.0, 10.0, 0, 0, false, false, false, false, "public", false, [], ["GovernanceRule.RelevantRulesForRepositories(\n                    governanceRules.Where(rule => rule.HasRisk),\n                    new Dictionary<string, RepositoryProfile> {{repositoryProfile.Repository.Key, repositoryProfile}},\n                    associatedProjects.ToDictionary(project => project.Key)\n                )\n                .ToList", "GovernanceRule.RelevantRulesForRepositories", "governanceRules.Where", "associatedProjects.ToDictionary", "riskRules.Where(\n                        rule => rule.ModuleKeys(repositoryKeys)\n                            .None() || rule.ModuleKeys(repositoryKeys)\n                            .Contains(moduleKey)\n                    )\n                    .ToList", "riskRules.Where", "rule.ModuleKeys(repositoryKeys)\n                            .None", "rule.ModuleKeys", "rule.ModuleKeys(repositoryKeys)\n                            .Contains", "riskRules\n                .ToDictionaryGrouped", "rule.When.First", "ruleType.ShouldCollectNonDiffableRisk", "CountForType", "repositoryProfile.IsActive.GetValueOrDefault", "ruleType.GetRiskScore", "CountPerValue", "repositoryProfile.VulnerabilitiesCountByRisk.GetValueOrDefault", "EnumUtils.FromString<RiskLevel>", "CountPerValueWithAny", "vulnerability.Type.GetDescription()\n                                .RemoveAllWhitespaces", "vulnerability.Type.GetDescription", "repositoryProfile.Risk.Add", "repositoryProfile.RiskPosture.Add", "repositoryProfile.Inventory.EnumerateDiffableProperties", "governanceRule.When.All", "diffableEntity.CanDiffRule", "diffableEntity.EnrichFromApplicableGovernanceRule", "discoveredWhenTypes.Add", "governanceRule.When.Select(_ => (_.Type, _.Value))\n                                .ToHashSet", "governanceRule.When.Select", "instancesPerGovernanceRuleKey.TryGetValue", "governanceRules\n                .OrderByDescending(rule => rule.When.Count)\n                .ThenBy(rule => rule.When.Any(portion => portion.Value == CodeGovernanceKeys.Any))\n                .ThenByDescending(rule => rule.Risk)\n                .ToList", "governanceRules\n                .OrderByDescending(rule => rule.When.Count)\n                .ThenBy(rule => rule.When.Any(portion => portion.Value == CodeGovernanceKeys.Any))\n                .ThenByDescending", "governanceRules\n                .OrderByDescending(rule => rule.When.Count)\n                .ThenBy", "governanceRules\n                .OrderByDescending", "rule.When.Any", "governanceRule.When\n                .Select(rule => (rule.Type, rule.Value))\n                .ToHashSet", "governanceRule.When\n                .Select", "discoveredWhenTypes.Any", "currentWhenPortions.IsSubsetOf", "currentWhenPortions\n                .Where(portion => portion.Value == CodeGovernanceKeys.Any)\n                .Select(portion => portion.Type)\n                .ToHashSet", "currentWhenPortions\n                .Where(portion => portion.Value == CodeGovernanceKeys.Any)\n                .Select", "currentWhenPortions\n                .Where", "discoveredWhenType.Any", "whenPortionsWithAny.Contains", "rule.When.Sum", "_.Type.GetRiskScore", "entity.CanDiffRule", "entity.IsEntityRelevantToRule", "entity.Diff", "rules.Where(\n                            rule => !onlyAny || rule.When.First()\n                                .Value == CodeGovernanceKeys.Any\n                        )\n                        .ToList()\n                        .MaxBy", "rules.Where(\n                            rule => !onlyAny || rule.When.First()\n                                .Value == CodeGovernanceKeys.Any\n                        )\n                        .ToList", "rules.Where", "counter", "rules.ToDictionary(\n                    rule => rule.When.First()\n                        .Value\n                )\n                .ToDictionary", "rules.ToDictionary", "items.GroupBy(\n                    item =>\n                    {\n                        var classification = itemClassifier(item);\n                        return rulesByClassification.ContainsKey(classification)\n                            ? classification\n                            : CodeGovernanceKeys.Any;\n                    }\n                )\n                .ToDictionary", "items.GroupBy", "itemClassifier", "rulesByClassification.ContainsKey", "itemsByRuleClassification.Remove", "itemsByRuleClassification\n                .ToDictionary", "pair.Value.Sum"], false, false, false, false, ["When"], false, 0, 0, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, false], ["RepositorySyncService", "Lim.API.RepositorySyncService", ["???.ConsumableSyncService<Repository>"], [], "src/Lim.API/Services/RepositorySyncService.cs", 11, 0, {"_consumablesRemovalCleanupQueue": "Lim.API.IConsumablesRemovalCleanupQueue", "_entityChangeHandler": "Lim.API.IEntityChangeHandler", "_repositoriesFilesDiscoveryQueue": "Lim.API.IRepositoriesFilesDiscoveryQueue", "_repositoriesInterestQueue": "???.IConsumablesInterestQueue<Repository>"}, ["_consumablesRemovalCleanupQueue", "_entityChangeHandler", "_repositoriesFilesDiscoveryQueue", "_repositoriesInterestQueue"], ["RepositorySyncService", "HandleNewConsumable", "HandleNewConsumables", "HandleDeletedConsumables", "HandleModifiedConsumable", "CleanupAfterRemoval"], ["System", "System.Collections.Generic", "System.Threading.Tasks", "JetBrains.Annotations", "Lim.Common.DotNET", "Lim.GitRestApi", "Microsoft.Extensions.Logging"], false, false, ["UsedImplicitly"], false, false, [], {"_consumablesRemovalCleanupQueue": [], "_entityChangeHandler": [], "_repositoriesFilesDiscoveryQueue": [], "_repositoriesInterestQueue": []}, [], 0, false, false, false, 6, 1.0, [], 135.83333333333334, 94, 0.0, 16.666666666666668, 1, 0, false, false, false, true, "public", false, ["Lim.API.IRepositoriesFilesDiscoveryQueue.EnqueueAsync", "Lim.API.IEntityChangeHandler.NotifyAllRepositoriesChangedAsync", "Lim.API.IEntityChangeHandler.NotifyRepositoryChangedAsync", "Lim.API.IConsumablesInterestQueue<Lim.Common.DotNET.Repository>.EnqueueAsync", "Lim.API.IConsumablesRemovalCleanupQueue.EnqueueRemovedRepositoryAsync"], ["Task.WhenAll"], false, false, false, false, [], false, 0, 0, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, false], ["SecurityScanProjectsSyncService", "Lim.API.SecurityScanProjectsSyncService", ["???.ConsumableSyncService<SecurityScansProject>"], [], "src/Lim.API/Services/SecurityScanProjectsSyncService.cs", 10, 0, {"_repositoriesStorage": "Lim.Common.DotNET.IRepositoriesStorage"}, ["_repositoriesStorage"], ["SecurityScanProjectsSyncService", "HandleNewConsumables", "HandleDeletedConsumables", "HandleModifiedConsumable", "CleanupAfterRemoval"], ["System", "System.Threading.Tasks", "JetBrains.Annotations", "Lim.Common.DotNET", "Lim.GitRestApi", "Microsoft.Extensions.Logging"], false, false, ["UsedImplicitly"], false, false, [], {"_repositoriesStorage": []}, [], 0, false, false, false, 5, 1.0, [], 37.8, 33, 0.0, 20.0, 1, 0, false, false, false, true, "public", false, [], [], false, false, false, false, [], false, 0, 0, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, false], ["WorkflowService", "Lim.API.WorkflowService", ["???.HostedIntervalWorkingService"], [], "src/Lim.API/Services/WorkflowService.cs", 14, 0, {"_auditLogsStorage": "Lim.Common.DotNET.IAuditLogsStorage", "_commitsStorage": "Lim.Common.DotNET.ICommitsStorage", "_governanceRulesStorage": "Lim.Common.DotNET.IGovernanceRulesStorage", "_projectsStorage": "Lim.Common.DotNET.IProjectsStorage", "_repositoriesStorage": "Lim.Common.DotNET.IRepositoriesStorage", "_workflowHostBuilder": "System.Func<IWorkflowHost>", "_workflowStorageBuilder": "System.Func<IWorkflowsStorage>", "_workflowHost": "???.IWorkflowHost", "_workflowStorage": "Lim.Common.DotNET.IWorkflowsStorage"}, ["_auditLogsStorage", "_commitsStorage", "_governanceRulesStorage", "_projectsStorage", "_repositoriesStorage", "_workflowHostBuilder", "_workflowStorageBuilder", "_workflowHost", "_workflowStorage"], ["WorkflowService", "StartAsync", "StopAsync", "Work", "IsRelevantGivenPortion"], ["System", "System.Collections.Generic", "System.Linq", "System.Threading", "System.Threading.Tasks", "Infrastructure.Dotnet.Common", "JetBrains.Annotations", "Lim.Common.DotNET", "Microsoft.Extensions.Logging", "WorkflowCore.Interface"], false, false, ["UsedImplicitly"], false, false, [], {"_auditLogsStorage": [], "_commitsStorage": [], "_governanceRulesStorage": [], "_projectsStorage": [], "_repositoriesStorage": [], "_workflowHostBuilder": [], "_workflowStorageBuilder": [], "_workflowHost": [], "_workflowStorage": []}, [], 0, false, false, false, 5, 1.0, [], 953.2, 394, 20.0, 60.0, 1, 0, false, false, false, true, "public", false, [], ["_workflowHostBuilder", "_workflowStorageBuilder", "_workflowHost.RegisterWorkflow<WorkflowProcess, WorkflowContext>", "_workflowHost.Start", "base.StartAsync", "_workflowHost.Stop", "base.StopAsync", "_workflowStorage.GetWorkflowsAsync", "workflows.None", "workflows.Select(workflow => workflow.CreatedAt)\n                .Min", "workflows.Select", "workflows\n                .Where(workflow => workflow.Given.Any(given => given.Type == WorkflowGivenType.Commit))\n                .SelectMany(workflow => workflow.When)\n                .Where(when => when.Type == GovernanceThenType.Label)\n                .Select(when => when.Value)\n                .ToHashSet", "workflows\n                .Where(workflow => workflow.Given.Any(given => given.Type == WorkflowGivenType.Commit))\n                .SelectMany(workflow => workflow.When)\n                .Where(when => when.Type == GovernanceThenType.Label)\n                .Select", "workflows\n                .Where(workflow => workflow.Given.Any(given => given.Type == WorkflowGivenType.Commit))\n                .SelectMany(workflow => workflow.When)\n                .Where", "workflows\n                .Where(workflow => workflow.Given.Any(given => given.Type == WorkflowGivenType.Commit))\n                .SelectMany", "workflows\n                .Where", "workflow.Given.Any", "(await _governanceRulesStorage.GetGovernanceRulesAsync())\n                .Select(rule => rule.Key)\n                .ToHashSet", "(await _governanceRulesStorage.GetGovernanceRulesAsync())\n                .Select", "_governanceRulesStorage.GetGovernanceRulesAsync", "_auditLogsStorage.GetTriggeredOnKeysForWorkflowsWithResultsAsync", "(await _commitsStorage.GetCommitsForWorkflowsAsync(\n                    since,\n                    currentGovernanceRulesKeys,\n                    relevantLabels\n                ))\n                .Where(_ => !triggeredCommitShas.Contains(_.Sha))\n                .ToList", "(await _commitsStorage.GetCommitsForWorkflowsAsync(\n                    since,\n                    currentGovernanceRulesKeys,\n                    relevantLabels\n                ))\n                .Where", "_commitsStorage.GetCommitsForWorkflowsAsync", "triggeredCommitShas.Contains", "relevantCommits.None", "relevantCommits.SelectMany(commit => commit.RepositoryKeys)\n                .ToHashSet", "relevantCommits.SelectMany", "(await _repositoriesStorage.GetRepositoriesAsync(relevantRepositoryKeys))\n                .Where(repository => repository.IsMonitored)\n                .ToDictionary", "(await _repositoriesStorage.GetRepositoriesAsync(relevantRepositoryKeys))\n                .Where", "_repositoriesStorage.GetRepositoriesAsync", "_projectsStorage.GetAssociatedProjectsByRepositoriesAsync", "workflows.Where", "workflow.When\n                            .Where(when => when.Type == GovernanceThenType.Label)\n                            .All", "workflow.When\n                            .Where", "commit.MaterialChangesLabelsToCount.ContainsKey", "Enumerable.Range(0, workflow.Then.Count)\n                            .ToList", "Enumerable.Range", "_workflowHost.StartWorkflow", "nameof", "_commitsStorage.SetCommitFieldAsync", "commit.RepositoryKeys.Contains", "Project.AssociatedProjectsForRepositories(\n                       projectsForCommits,\n                       commit.RepositoryKeys.Select(key => relevantRepositoriesByKey[key])\n                   )\n                   .Select(project => project.Key)\n                   .Contains", "Project.AssociatedProjectsForRepositories(\n                       projectsForCommits,\n                       commit.RepositoryKeys.Select(key => relevantRepositoriesByKey[key])\n                   )\n                   .Select", "Project.AssociatedProjectsForRepositories", "commit.RepositoryKeys.Select", "TimeSpan.FromMinutes"], false, false, false, false, [], false, 0, 0, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, false], ["Startup", "Lim.API.Startup", ["???.BaseStartup"], [], "src/Lim.API/Startup.cs", 19, 0, {}, ["OktaLoginFailureRedirectUrl", "SpaRootPath"], ["Startup", "OktaLoginFailureRedirectUrl", "SpaRootPath", "HasWritePermissions", "ConfigureServices", "ConfigureEndpoints", "Configure"], ["System.IO", "System.Security.Principal", "Infrastructure.Dotnet.SPA", "Lim.Common.DotNET", "Microsoft.AspNetCore.Builder", "Microsoft.AspNetCore.Hosting", "Microsoft.AspNetCore.Http", "Microsoft.AspNetCore.Mvc", "Microsoft.AspNetCore.Routing", "Microsoft.Extensions.DependencyInjection", "Microsoft.Extensions.Hosting", "Microsoft.IdentityModel.Logging", "Okta.AspNetCore"], false, false, [], false, false, [], {}, [], 2, false, false, false, 5, 0.7142857142857143, [], 205.14285714285714, 61, 0.0, 42.857142857142854, 1, 0, false, false, false, false, "public", false, ["Lim.API.IdentityExtensions.ToRole"], ["base.ConfigureServices", "services.AddSignalR()\n                .AddNewtonsoftJsonProtocol", "services.AddSignalR", "endpointRouteBuilder.MapHub<ClientHub>", "env.IsDevelopment", "app.UseSwagger", "app.UseSwaggerUI", "options.SwaggerEndpoint", "string.IsNullOrEmpty", "app.UseRouter", "routes.MapGet", "Path.Combine", "response.SendFileAsync", "base.Configure"], false, false, false, false, ["/unauthorized", "Lim.web", "/clientHub", "/swagger/v1/swagger.json", "Lim.API V1", ".well-known/acme-challenge/{id}", "id", ".well-known", "acme-challenge"], false, 2, 0, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, false], ["AppUrlProvider", "Lim.API.AppUrlProvider", [], ["Lim.API.IAppUrlProvider"], "src/Lim.API/Utils/AppUrlProvider.cs", 6, 0, {}, ["AppUrl"], ["AppUrlProvider", "AppUrl", "GetMaterialChangeUrl"], ["Infrastructure.Dotnet.Common", "Microsoft.Extensions.Configuration"], false, false, [], false, false, [], {}, [], 1, false, false, false, 2, 0.6666666666666666, [], 46.666666666666664, 47, 0.0, 100.0, 1, 0, false, false, false, false, "public", false, [], ["configuration.GetValueWithEnv"], false, false, false, false, ["App:AppUrl", "https://localhost:5001"], false, 1, 0, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, false], ["IdentityExtensions", "Lim.API.IdentityExtensions", [], [], "src/Lim.API/Utils/IdentityExtensions.cs", 10, 0, {"ReadOnlyRole": "string"}, [], ["ToRole"], ["System.Collections.Generic", "System.Linq", "System.Security.Claims", "System.Security.Principal", "Infrastructure.Dotnet.Common", "Lim.Common.DotNET"], false, false, [], false, false, [], {"ReadOnlyRole": []}, [], 0, false, false, false, 1, 1.0, [], 997.0, 997, 100.0, 100.0, 0, 0, false, false, true, false, "public", false, [], ["claimsIdentity.FindFirst", "string.IsNullOrEmpty", "EnumUtils.TryFromString<ConsoleUserRole>(claimsRole)\n                        .GetValueOrDefault", "EnumUtils.TryFromString<ConsoleUserRole>", "claimsIdentity.FindAll(\"groups\")\n                        .Select(claim => claim.Value)\n                        .FirstOrDefault(groupName => groupName.StartsWith(\"[\"))\n                        .FromJson<List<string>>", "claimsIdentity.FindAll(\"groups\")\n                        .Select(claim => claim.Value)\n                        .FirstOrDefault", "claimsIdentity.FindAll(\"groups\")\n                        .Select", "claimsIdentity.FindAll", "groupName.StartsWith", "groups.Any", "groups.Contains"], false, false, false, false, ["ReadOnlyRole", "groups", "["], false, 0, 0, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, false], ["KestrelMongoDataProtection", "Lim.API.KestrelMongoDataProtection", [], ["???.IXmlRepository"], "src/Lim.API/Utils/KestrelMongoDataProtection.cs", 11, 0, {"_mongoClient": "Lim.Common.DotNET.IMongoClient"}, ["_mongoClient"], ["KestrelMongoDataProtection", "GetAllElements", "StoreElement"], ["System.Collections.Generic", "System.Linq", "System.Xml.Linq", "JetBrains.Annotations", "Lim.Common.DotNET", "Microsoft.AspNetCore.DataProtection.Repositories", "MongoDB.Bson.Serialization.Attributes"], false, false, [], false, false, [], {"_mongoClient": []}, [], 0, false, false, false, 3, 1.0, [], 196.66666666666666, 252, 0.0, 100.0, 1, 0, false, false, false, false, "public", false, [], ["_mongoClient.GetAllAsync<KestrelDataProtectionElements>", "getTask.Wait", "getTask.Result.Select(element => XElement.Parse(element.SerializedData))\n                .ToList", "getTask.Result.Select", "XElement.Parse", "_mongoClient.UpsertAsync", "element.ToString", "setTask.Wait"], false, false, false, false, [], false, 0, 0, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, true], ["KestrelDataProtectionElements", "Lim.API.KestrelMongoDataProtection.KestrelDataProtectionElements", [], [], "src/Lim.API/Utils/KestrelMongoDataProtection.cs", 38, 0, {}, ["Key", "SerializedData"], ["Key", "SerializedData"], ["System.Collections.Generic", "System.Linq", "System.Xml.Linq", "JetBrains.Annotations", "Lim.Common.DotNET", "Microsoft.AspNetCore.DataProtection.Repositories", "MongoDB.Bson.Serialization.Attributes"], false, false, ["MongoCollection", "UsedImplicitly"], false, false, [], {}, ["BsonId"], 2, false, false, false, 0, 0.0, ["Lim.API.KestrelMongoDataProtection"], 0.0, 0, 0.0, 100.0, 0, 0, false, false, false, false, "public", false, [], [], false, false, false, false, ["kestrel"], false, 2, 2, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, 0, 0, true], ["MarkdownUtils", "Lim.API.MarkdownUtils", [], [], "src/Lim.API/Utils/MarkdownUtils.cs", 5, 0, {"TeamsLineBreak": "string", "SlackLineBreak": "string"}, [], ["TeamsNamedLink", "SlackNamedLink", "Bold"], ["System"], false, false, [], false, false, [], {"TeamsLineBreak": [], "SlackLineBreak": []}, [], 0, false, false, false, 3, 1.0, [], 31.333333333333332, 32, 100.0, 100.0, 0, 0, false, false, true, false, "public", false, [], [], false, false, false, false, ["   \n"], false, 0, 0, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, false], ["WorkflowContext", "Lim.API.WorkflowContext", [], [], "src/Lim.API/Workflows/WorkflowContext.cs", 5, 0, {}, ["CommitSha", "WorkflowKey", "WorkflowSteps"], ["CommitSha", "WorkflowKey", "WorkflowSteps"], ["System.Collections.Generic"], false, false, [], false, false, [], {}, [], 3, false, false, false, 0, 0.0, [], 0.0, 0, 0.0, 100.0, 0, 0, false, false, false, false, "public", false, [], [], false, false, false, false, [], false, 3, 3, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, false], ["WorkflowLogger", "Lim.API.WorkflowLogger", ["???.StepBody"], [], "src/Lim.API/Workflows/WorkflowLogger.cs", 7, 0, {"_logger": "???.ILogger<WorkflowLogger>"}, ["_logger", "WorkflowContext"], ["WorkflowLogger", "WorkflowContext", "Run"], ["Microsoft.Extensions.Logging", "WorkflowCore.Interface", "WorkflowCore.Models"], false, false, [], false, false, [], {"_logger": []}, [], 1, false, false, false, 2, 0.6666666666666666, [], 150.0, 31, 0.0, 100.0, 1, 0, false, false, false, false, "public", false, [], ["_logger.LogInformation", "ExecutionResult.Next"], false, false, false, false, ["Starting new workflow execution {Execution}. Commit: {CommitSha}; Workflow: {Workflow}; Steps count: {Count}"], false, 1, 1, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, false], ["WorkflowProcess", "Lim.API.WorkflowProcess", [], ["???.IWorkflow<WorkflowContext>"], "src/Lim.API/Workflows/WorkflowProcess.cs", 6, 0, {}, ["Id", "Version"], ["Id", "Version", "Build"], ["Lim.Common.DotNET", "WorkflowCore.Interface"], false, false, [], false, false, [], {}, [], 2, false, false, false, 1, 0.3333333333333333, [], 141.33333333333334, 0, 0.0, 100.0, 0, 0, false, false, false, false, "public", false, [], ["nameof", "builder\n                .StartWith<WorkflowLogger>()\n                .Input(logger => logger.WorkflowContext, data => data)\n                .ForEach(data => data.WorkflowSteps)\n                .Do", "builder\n                .StartWith<WorkflowLogger>()\n                .Input(logger => logger.WorkflowContext, data => data)\n                .ForEach", "builder\n                .StartWith<WorkflowLogger>()\n                .Input", "builder\n                .StartWith<WorkflowLogger>", "step\n                        .StartWith<WorkflowStepExecutor>()\n                        .Input", "step\n                        .StartWith<WorkflowStepExecutor>"], false, false, false, false, [], false, 2, 0, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, false], ["WorkflowStepExecutor", "Lim.API.WorkflowStepExecutor", ["???.StepBodyAsync"], [], "src/Lim.API/Workflows/WorkflowStepExecutor.cs", 16, 0, {"_appUrlProvider": "Lim.API.IAppUrlProvider", "_auditActionsService": "Lim.API.IAuditActionsService", "_auditLogsStorage": "Lim.Common.DotNET.IAuditLogsStorage", "_configuration": "???.IConfiguration", "_logger": "???.ILogger<WorkflowStepExecutor>", "_messagingChannelStorage": "Lim.Common.DotNET.IMessagingChannelStorage", "_projectsProvider": "Lim.GitRestApi.IProjectsProvider", "_projectsStorage": "Lim.Common.DotNET.IProjectsStorage", "_serversStorage": "Lim.Common.DotNET.IServersStorage", "_slackProvider": "Lim.API.ISlackProvider", "_teamsProvider": "Lim.API.ITeamsProvider", "_workflowsStorage": "Lim.Common.DotNET.IWorkflowsStorage"}, ["_appUrlProvider", "_auditActionsService", "_auditLogsStorage", "_configuration", "_logger", "_messagingChannelStorage", "_projectsProvider", "_projectsStorage", "_serversStorage", "_slackProvider", "_teamsProvider", "_workflowsStorage", "WorkflowContext", "ExecutionId"], ["WorkflowStepExecutor", "WorkflowContext", "ExecutionId", "RunAsync", "CheckThrottleLimit", "CreateAuditTrail", "SendSlackMessage", "SendTeamsMessage", "OpenIssueAsync", "BuildIssueDetails"], ["System", "System.Collections.Generic", "System.Linq", "System.Threading.Tasks", "Infrastructure.Dotnet.Common", "Lim.Common.DotNET", "Lim.GitRestApi", "Microsoft.Extensions.Configuration", "Microsoft.Extensions.Logging", "Polly", "WorkflowCore.Interface", "WorkflowCore.Models"], false, false, [], false, false, [], {"_appUrlProvider": [], "_auditActionsService": [], "_auditLogsStorage": [], "_configuration": [], "_logger": [], "_messagingChannelStorage": [], "_projectsProvider": [], "_projectsStorage": [], "_serversStorage": [], "_slackProvider": [], "_teamsProvider": [], "_workflowsStorage": []}, [], 2, false, false, false, 8, 0.8, [], 1241.7, 1138, 0.0, 30.0, 1, 0, false, false, false, true, "public", false, ["Lim.API.IAuditActionsService.AuditWorkflowTriggeredAsync", "Lim.API.IAppUrlProvider.GetMaterialChangeUrl", "Lim.API.MarkdownUtils.Bold", "Lim.API.MarkdownUtils.SlackNamedLink", "Lim.API.ISlackProvider.SendMessageAsync", "Lim.API.MarkdownUtils.TeamsNamedLink", "Lim.API.ITeamsProvider.SendWebhookMessageAsync", "Lim.API.ITeamsProvider.SendMessageAsync"], ["_logger.LogInformation", "_workflowsStorage.GetWorkflowAsync", "EnumUtils.FromString<ActionResultType>", "workflowStep.Type.ToString", "CheckThrottleLimit", "ExecutionResult.Next", "CreateAuditTrail", "OpenIssueAsync", "SendSlackMessage", "SendTeamsMessage", "_configuration.GetValue<int>", "stepType.ToString", "TimeSpan.FromDays", "_auditLogsStorage.CountAuditLogsForWorkflowByTypeAsync", "_auditLogsStorage.CreateAuditLogPlaceholderAsync", "workflowWhen.Select(\n                    when => when.Type == GovernanceThenType.Risk\n                        ? $\"{when.Value} risk\"\n                        : when.Value\n                )\n                .ToList", "workflowWhen.Select", "labels.JoinToString", "_auditLogsStorage.SetAuditLogResultKeyAsync", "_serversStorage.GetTeamsServerAsync", "_logger.LogError", "_messagingChannelStorage.GetMessagingChannelAsync", "Policy\n                    .Handle<Exception>(\n                        exception => exception.AsOrUnwrap<ProviderConnectionException>()\n                            ?.ErrorType == ProviderConnectionExceptionType.RateLimit\n                    )\n                    .WaitAndRetryAsync(20, _ => (5).Minutes())\n                    .ExecuteAsync", "Policy\n                    .Handle<Exception>(\n                        exception => exception.AsOrUnwrap<ProviderConnectionException>()\n                            ?.ErrorType == ProviderConnectionExceptionType.RateLimit\n                    )\n                    .WaitAndRetryAsync", "Policy\n                    .Handle<Exception>", "exception.AsOrUnwrap<ProviderConnectionException>", "TimeSpan.FromMinutes", "_projectsStorage.GetProjectAsync", "_projectsProvider.CreateIssueAsync", "string.IsNullOrEmpty"], false, false, false, false, ["[WFC-{Execution}] Starting step {Step} of workflow {Workflow}", "[WFC-{Execution}] Limit for type '{StepType}' is {Limit} per {Days} days; current count is {Count}; Can proceed? {CanProceed}", "[WFC-{Execution}] About to create audit trail for step type '{StepType}' of workflow {Workflow}", "[WFC-{Execution}] About to send a Slack message to #{slackChannelName} for commit {CommitSha}", ", ", "View full details", "[WFC-{Execution}] About to send a Teams message to #{channelName} for commit {CommitSha}", "Teams server not found, skipping message for commit {commit}", "Messaging channel not found, skipping message for commit {commit}", "[WFC-{Execution}] About to open issue in project {ProjectKey} for commit {CommitSha}", "[WFC-{Execution}] Failed to open issue in project {ProjectKey} for commit {CommitSha}", "FAILED", "[WFC-{Execution}] Opened issue {IssueId} in project {ProjectKey}", "A commit includes changes that require attention\n"], false, 2, 2, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, false], ["CsProjDependenciesCollector", "Lim.FeaturesExtractor.CsProjDependenciesCollector", ["Lim.FeaturesExtractor.PackagesXmlDependenciesCollector"], [], "src/Lim.FeaturesExtractor/DependenciesCollector/CSharp/CsProjDependenciesCollector.cs", 6, 0, {"_nuGetApiProxy": "Lim.FeaturesExtractor.INuGetApiProxy", "_dependenciesCache": "Lim.FeaturesExtractor.IDependenciesCache", "_licenseParserProxy": "Lim.FeaturesExtractor.ILicenseParserProxy", "Logger": "???.ILogger<DependenciesCollectorBase>"}, ["_nuGetApiProxy", "_dependenciesCache", "_licenseParserProxy", "Logger", "PackagesRoot", "PackageNameAttribute", "PackageVersionAttribute", "RelevantLanguages"], ["CsProjDependenciesCollector", "PackagesRoot", "PackageNameAttribute", "PackageVersionAttribute", "IsRelevantFile", "PackagesXmlDependenciesCollector", "RelevantLanguages", "ParseAsync", "EnrichDependencyAsync", "DependenciesCollectorBase", "ProcessFileAsync", "GetAndEnrichDependencies", "MergeDependencies", "EnrichAndResolveLicensesForDependencyAsync", "ResolveLicensesAsync", "ResolveLicense", "InitAsync"], ["System", "Microsoft.Extensions.Logging"], false, false, [], false, false, [], {"_nuGetApiProxy": [], "_dependenciesCache": [], "_licenseParserProxy": [], "Logger": []}, [], 4, false, false, false, 14, 0.7777777777777778, [], 448.94444444444446, 102, 5.555555555555555, 16.666666666666668, 3, 0, false, false, false, true, "public", false, ["Lim.FeaturesExtractor.IApiProxy.EnrichDependencyWithPackageInfo", "Lim.FeaturesExtractor.IDependenciesCache.GetOrAddByFileShaAsync", "Lim.FeaturesExtractor.ILicenseParserProxy.ResolveLicenseFromHomePageAsync", "Lim.FeaturesExtractor.ILicenseParserProxy.ResolveLicenseFromNameAsync", "Lim.FeaturesExtractor.ILicenseParserProxy.ResolveLicenseFromUrlAsync"], ["fileName.EndsWith", "XElement.Parse", "root.GetSubNodes", "packageNode.Attribute", "string.IsNullOrEmpty", "dependencies.Add", "Logger.LogInformation", "Task.FromResult<IReadOnlyCollection<Dependency>>", "RelevantLanguages.Intersects", "Path.GetRelativePath", "(await _dependenciesCache.GetOrAddByFileShaAsync(\n                    fileSha,\n                    async () =>\n                        await GetAndEnrichDependencies(\n                            filePath,\n                            fileSha,\n                            fileContentLazy,\n                            relativeFilePath,\n                            cancellationToken\n                        )\n                )).ToList", "dependencies.NullOrNone", "dependencies.Where", "commitProperties.DependenciesByName.AddOrUpdate", "(await ParseAsync(\n                    filePath,\n                    fileSha,\n                    fileContentLazy.Value,\n                    new Lazy<string>(() => fileContentLazy.Value.JoinToString(Environment.NewLine))\n                ))\n                .Select(\n                    dependency =>\n                    {\n                        dependency.CodeReference ??= new CodeReference(\n                            relativeFilePath,\n                            0,\n                            0\n                        );\n                        return dependency;\n                    }\n                )\n                .GroupBy(dependency => dependency.Name)\n                .Select(\n                    dependenciesToMerge =>\n                        MergeDependencies(dependenciesToMerge, relativeFilePath)\n                )\n                .ToList", "(await ParseAsync(\n                    filePath,\n                    fileSha,\n                    fileContentLazy.Value,\n                    new Lazy<string>(() => fileContentLazy.Value.JoinToString(Environment.NewLine))\n                ))\n                .Select(\n                    dependency =>\n                    {\n                        dependency.CodeReference ??= new CodeReference(\n                            relativeFilePath,\n                            0,\n                            0\n                        );\n                        return dependency;\n                    }\n                )\n                .GroupBy(dependency => dependency.Name)\n                .Select", "(await ParseAsync(\n                    filePath,\n                    fileSha,\n                    fileContentLazy.Value,\n                    new Lazy<string>(() => fileContentLazy.Value.JoinToString(Environment.NewLine))\n                ))\n                .Select(\n                    dependency =>\n                    {\n                        dependency.CodeReference ??= new CodeReference(\n                            relativeFilePath,\n                            0,\n                            0\n                        );\n                        return dependency;\n                    }\n                )\n                .GroupBy", "(await ParseAsync(\n                    filePath,\n                    fileSha,\n                    fileContentLazy.Value,\n                    new Lazy<string>(() => fileContentLazy.Value.JoinToString(Environment.NewLine))\n                ))\n                .Select", "fileContentLazy.Value.JoinToString", "MergeDependencies", "dependencies.ForEachAsync", "dependencies.Aggregate", "first.HomePage.OrIfEmpty", "first.Versions.Union", "first.Licenses.Union", "dependency.HomePage.NullOrNone", "homePageLicenses.NullOrNone", "dependency.Licenses.AddRange", "dependency.Licenses.NullOrNone", "dependency.Licenses.SelectManyParallelAsync", "Array.Empty<string>", "resolvedNames.None", "license.Url.Split(\"/\")\n                            .Last", "license.Url.Split", "_licenseParserProxy.ResolveLicenseFromNameAsync", "license.Url.RemoveAll(\n                                \"http://\",\n                                \"https://\",\n                                \"www.\"\n                            )\n                            .Split(\"/\")\n                            .First", "license.Url.RemoveAll(\n                                \"http://\",\n                                \"https://\",\n                                \"www.\"\n                            )\n                            .Split", "license.Url.RemoveAll", "resolvedNames.First", "resolvedNames.Select", "license.Clone"], false, false, false, false, ["PackageReference", "Include", "Version", ".csproj"], false, 4, 0, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, false], ["DllDependenciesCollector", "Lim.FeaturesExtractor.DllDependenciesCollector", ["Lim.FeaturesExtractor.DependenciesCollectorBase"], [], "src/Lim.FeaturesExtractor/DependenciesCollector/CSharp/DllDependenciesCollector.cs", 9, 0, {"_dllInspector": "Lim.FeaturesExtractor.IDllInspector", "_nuGetApiProxy": "Lim.FeaturesExtractor.INuGetApiProxy", "_dependenciesCache": "Lim.FeaturesExtractor.IDependenciesCache", "_licenseParserProxy": "Lim.FeaturesExtractor.ILicenseParserProxy", "Logger": "???.ILogger<DependenciesCollectorBase>"}, ["_dllInspector", "_nuGetApiProxy", "_dependenciesCache", "_licenseParserProxy", "Logger", "RelevantLanguages"], ["DllDependenciesCollector", "RelevantLanguages", "IsRelevantFile", "ParseAsync", "EnrichDependencyAsync", "DependenciesCollectorBase", "ProcessFileAsync", "GetAndEnrichDependencies", "MergeDependencies", "EnrichAndResolveLicensesForDependencyAsync", "ResolveLicensesAsync", "ResolveLicense", "InitAsync"], ["System", "System.Collections.Generic", "System.Threading.Tasks", "Lim.Common.DotNET", "Microsoft.Extensions.Logging"], false, false, [], false, false, [], {"_dllInspector": [], "_nuGetApiProxy": [], "_dependenciesCache": [], "_licenseParserProxy": [], "Logger": []}, [], 1, false, false, false, 13, 0.9285714285714286, [], 515.3571428571429, 173, 7.142857142857143, 21.428571428571427, 2, 0, false, false, false, true, "public", false, ["Lim.FeaturesExtractor.IDllInspector.GetDllInfoAsync", "Lim.FeaturesExtractor.IApiProxy.EnrichDependencyWithPackageInfo", "Lim.FeaturesExtractor.IDependenciesCache.GetOrAddByFileShaAsync", "Lim.FeaturesExtractor.ILicenseParserProxy.ResolveLicenseFromHomePageAsync", "Lim.FeaturesExtractor.ILicenseParserProxy.ResolveLicenseFromNameAsync", "Lim.FeaturesExtractor.ILicenseParserProxy.ResolveLicenseFromUrlAsync"], ["fileName.EndsWith", "string.IsNullOrEmpty", "RelevantLanguages.Intersects", "Path.GetRelativePath", "(await _dependenciesCache.GetOrAddByFileShaAsync(\n                    fileSha,\n                    async () =>\n                        await GetAndEnrichDependencies(\n                            filePath,\n                            fileSha,\n                            fileContentLazy,\n                            relativeFilePath,\n                            cancellationToken\n                        )\n                )).ToList", "dependencies.NullOrNone", "dependencies.Where", "commitProperties.DependenciesByName.AddOrUpdate", "(await ParseAsync(\n                    filePath,\n                    fileSha,\n                    fileContentLazy.Value,\n                    new Lazy<string>(() => fileContentLazy.Value.JoinToString(Environment.NewLine))\n                ))\n                .Select(\n                    dependency =>\n                    {\n                        dependency.CodeReference ??= new CodeReference(\n                            relativeFilePath,\n                            0,\n                            0\n                        );\n                        return dependency;\n                    }\n                )\n                .GroupBy(dependency => dependency.Name)\n                .Select(\n                    dependenciesToMerge =>\n                        MergeDependencies(dependenciesToMerge, relativeFilePath)\n                )\n                .ToList", "(await ParseAsync(\n                    filePath,\n                    fileSha,\n                    fileContentLazy.Value,\n                    new Lazy<string>(() => fileContentLazy.Value.JoinToString(Environment.NewLine))\n                ))\n                .Select(\n                    dependency =>\n                    {\n                        dependency.CodeReference ??= new CodeReference(\n                            relativeFilePath,\n                            0,\n                            0\n                        );\n                        return dependency;\n                    }\n                )\n                .GroupBy(dependency => dependency.Name)\n                .Select", "(await ParseAsync(\n                    filePath,\n                    fileSha,\n                    fileContentLazy.Value,\n                    new Lazy<string>(() => fileContentLazy.Value.JoinToString(Environment.NewLine))\n                ))\n                .Select(\n                    dependency =>\n                    {\n                        dependency.CodeReference ??= new CodeReference(\n                            relativeFilePath,\n                            0,\n                            0\n                        );\n                        return dependency;\n                    }\n                )\n                .GroupBy", "(await ParseAsync(\n                    filePath,\n                    fileSha,\n                    fileContentLazy.Value,\n                    new Lazy<string>(() => fileContentLazy.Value.JoinToString(Environment.NewLine))\n                ))\n                .Select", "fileContentLazy.Value.JoinToString", "MergeDependencies", "dependencies.ForEachAsync", "dependencies.Aggregate", "first.HomePage.OrIfEmpty", "first.Versions.Union", "first.Licenses.Union", "dependency.HomePage.NullOrNone", "homePageLicenses.NullOrNone", "dependency.Licenses.AddRange", "dependency.Licenses.NullOrNone", "dependency.Licenses.SelectManyParallelAsync", "Array.Empty<string>", "resolvedNames.None", "license.Url.Split(\"/\")\n                            .Last", "license.Url.Split", "_licenseParserProxy.ResolveLicenseFromNameAsync", "license.Url.RemoveAll(\n                                \"http://\",\n                                \"https://\",\n                                \"www.\"\n                            )\n                            .Split(\"/\")\n                            .First", "license.Url.RemoveAll(\n                                \"http://\",\n                                \"https://\",\n                                \"www.\"\n                            )\n                            .Split", "license.Url.RemoveAll", "resolvedNames.First", "resolvedNames.Select", "license.Clone"], false, false, false, false, [".dll"], false, 1, 0, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, false], ["PackagesConfigDependenciesCollector", "Lim.FeaturesExtractor.PackagesConfigDependenciesCollector", ["Lim.FeaturesExtractor.PackagesXmlDependenciesCollector"], [], "src/Lim.FeaturesExtractor/DependenciesCollector/CSharp/PackagesConfigDependenciesCollector.cs", 6, 0, {"_nuGetApiProxy": "Lim.FeaturesExtractor.INuGetApiProxy", "_dependenciesCache": "Lim.FeaturesExtractor.IDependenciesCache", "_licenseParserProxy": "Lim.FeaturesExtractor.ILicenseParserProxy", "Logger": "???.ILogger<DependenciesCollectorBase>"}, ["_nuGetApiProxy", "_dependenciesCache", "_licenseParserProxy", "Logger", "PackagesRoot", "PackageNameAttribute", "PackageVersionAttribute", "RelevantLanguages"], ["PackagesConfigDependenciesCollector", "PackagesRoot", "PackageNameAttribute", "PackageVersionAttribute", "IsRelevantFile", "PackagesXmlDependenciesCollector", "RelevantLanguages", "ParseAsync", "EnrichDependencyAsync", "DependenciesCollectorBase", "ProcessFileAsync", "GetAndEnrichDependencies", "MergeDependencies", "EnrichAndResolveLicensesForDependencyAsync", "ResolveLicensesAsync", "ResolveLicense", "InitAsync"], ["Infrastructure.Dotnet.Common", "Microsoft.Extensions.Logging"], false, false, [], false, false, [], {"_nuGetApiProxy": [], "_dependenciesCache": [], "_licenseParserProxy": [], "Logger": []}, [], 4, false, false, false, 14, 0.7777777777777778, [], 447.8333333333333, 99, 5.555555555555555, 16.666666666666668, 3, 0, false, false, false, true, "public", false, ["Lim.FeaturesExtractor.IApiProxy.EnrichDependencyWithPackageInfo", "Lim.FeaturesExtractor.IDependenciesCache.GetOrAddByFileShaAsync", "Lim.FeaturesExtractor.ILicenseParserProxy.ResolveLicenseFromHomePageAsync", "Lim.FeaturesExtractor.ILicenseParserProxy.ResolveLicenseFromNameAsync", "Lim.FeaturesExtractor.ILicenseParserProxy.ResolveLicenseFromUrlAsync"], ["fileName.EqualsIgnoreCase", "XElement.Parse", "root.GetSubNodes", "packageNode.Attribute", "string.IsNullOrEmpty", "dependencies.Add", "Logger.LogInformation", "Task.FromResult<IReadOnlyCollection<Dependency>>", "RelevantLanguages.Intersects", "Path.GetRelativePath", "(await _dependenciesCache.GetOrAddByFileShaAsync(\n                    fileSha,\n                    async () =>\n                        await GetAndEnrichDependencies(\n                            filePath,\n                            fileSha,\n                            fileContentLazy,\n                            relativeFilePath,\n                            cancellationToken\n                        )\n                )).ToList", "dependencies.NullOrNone", "dependencies.Where", "commitProperties.DependenciesByName.AddOrUpdate", "(await ParseAsync(\n                    filePath,\n                    fileSha,\n                    fileContentLazy.Value,\n                    new Lazy<string>(() => fileContentLazy.Value.JoinToString(Environment.NewLine))\n                ))\n                .Select(\n                    dependency =>\n                    {\n                        dependency.CodeReference ??= new CodeReference(\n                            relativeFilePath,\n                            0,\n                            0\n                        );\n                        return dependency;\n                    }\n                )\n                .GroupBy(dependency => dependency.Name)\n                .Select(\n                    dependenciesToMerge =>\n                        MergeDependencies(dependenciesToMerge, relativeFilePath)\n                )\n                .ToList", "(await ParseAsync(\n                    filePath,\n                    fileSha,\n                    fileContentLazy.Value,\n                    new Lazy<string>(() => fileContentLazy.Value.JoinToString(Environment.NewLine))\n                ))\n                .Select(\n                    dependency =>\n                    {\n                        dependency.CodeReference ??= new CodeReference(\n                            relativeFilePath,\n                            0,\n                            0\n                        );\n                        return dependency;\n                    }\n                )\n                .GroupBy(dependency => dependency.Name)\n                .Select", "(await ParseAsync(\n                    filePath,\n                    fileSha,\n                    fileContentLazy.Value,\n                    new Lazy<string>(() => fileContentLazy.Value.JoinToString(Environment.NewLine))\n                ))\n                .Select(\n                    dependency =>\n                    {\n                        dependency.CodeReference ??= new CodeReference(\n                            relativeFilePath,\n                            0,\n                            0\n                        );\n                        return dependency;\n                    }\n                )\n                .GroupBy", "(await ParseAsync(\n                    filePath,\n                    fileSha,\n                    fileContentLazy.Value,\n                    new Lazy<string>(() => fileContentLazy.Value.JoinToString(Environment.NewLine))\n                ))\n                .Select", "fileContentLazy.Value.JoinToString", "MergeDependencies", "dependencies.ForEachAsync", "dependencies.Aggregate", "first.HomePage.OrIfEmpty", "first.Versions.Union", "first.Licenses.Union", "dependency.HomePage.NullOrNone", "homePageLicenses.NullOrNone", "dependency.Licenses.AddRange", "dependency.Licenses.NullOrNone", "dependency.Licenses.SelectManyParallelAsync", "Array.Empty<string>", "resolvedNames.None", "license.Url.Split(\"/\")\n                            .Last", "license.Url.Split", "_licenseParserProxy.ResolveLicenseFromNameAsync", "license.Url.RemoveAll(\n                                \"http://\",\n                                \"https://\",\n                                \"www.\"\n                            )\n                            .Split(\"/\")\n                            .First", "license.Url.RemoveAll(\n                                \"http://\",\n                                \"https://\",\n                                \"www.\"\n                            )\n                            .Split", "license.Url.RemoveAll", "resolvedNames.First", "resolvedNames.Select", "license.Clone"], false, false, false, false, ["package", "id", "version", "packages.config"], false, 4, 0, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, false], ["PackagesXmlDependenciesCollector", "Lim.FeaturesExtractor.PackagesXmlDependenciesCollector", ["Lim.FeaturesExtractor.DependenciesCollectorBase"], [], "src/Lim.FeaturesExtractor/DependenciesCollector/CSharp/PackagesXmlDependenciesCollector.cs", 12, 0, {"_nuGetApiProxy": "Lim.FeaturesExtractor.INuGetApiProxy", "_dependenciesCache": "Lim.FeaturesExtractor.IDependenciesCache", "_licenseParserProxy": "Lim.FeaturesExtractor.ILicenseParserProxy", "Logger": "???.ILogger<DependenciesCollectorBase>"}, ["_nuGetApiProxy", "_dependenciesCache", "_licenseParserProxy", "Logger", "RelevantLanguages", "PackagesRoot", "PackageNameAttribute", "PackageVersionAttribute"], ["PackagesXmlDependenciesCollector", "RelevantLanguages", "PackagesRoot", "PackageNameAttribute", "PackageVersionAttribute", "ParseAsync", "EnrichDependencyAsync", "DependenciesCollectorBase", "IsRelevantFile", "ProcessFileAsync", "GetAndEnrichDependencies", "MergeDependencies", "EnrichAndResolveLicensesForDependencyAsync", "ResolveLicensesAsync", "ResolveLicense", "InitAsync"], ["System", "System.Collections.Generic", "System.Threading.Tasks", "System.Xml", "System.Xml.Linq", "Infrastructure.Dotnet.Common", "Lim.Common.DotNET", "Microsoft.Extensions.Logging"], false, false, [], false, false, [], {"_nuGetApiProxy": [], "_dependenciesCache": [], "_licenseParserProxy": [], "Logger": []}, [], 4, false, false, false, 13, 0.7647058823529411, [], 469.52941176470586, 125, 5.882352941176471, 11.764705882352942, 2, 0, false, true, false, true, "public", false, ["Lim.FeaturesExtractor.IApiProxy.EnrichDependencyWithPackageInfo", "Lim.FeaturesExtractor.IDependenciesCache.GetOrAddByFileShaAsync", "Lim.FeaturesExtractor.ILicenseParserProxy.ResolveLicenseFromHomePageAsync", "Lim.FeaturesExtractor.ILicenseParserProxy.ResolveLicenseFromNameAsync", "Lim.FeaturesExtractor.ILicenseParserProxy.ResolveLicenseFromUrlAsync"], ["XElement.Parse", "root.GetSubNodes", "packageNode.Attribute", "string.IsNullOrEmpty", "dependencies.Add", "Logger.LogInformation", "Task.FromResult<IReadOnlyCollection<Dependency>>", "RelevantLanguages.Intersects", "Path.GetRelativePath", "(await _dependenciesCache.GetOrAddByFileShaAsync(\n                    fileSha,\n                    async () =>\n                        await GetAndEnrichDependencies(\n                            filePath,\n                            fileSha,\n                            fileContentLazy,\n                            relativeFilePath,\n                            cancellationToken\n                        )\n                )).ToList", "dependencies.NullOrNone", "dependencies.Where", "commitProperties.DependenciesByName.AddOrUpdate", "(await ParseAsync(\n                    filePath,\n                    fileSha,\n                    fileContentLazy.Value,\n                    new Lazy<string>(() => fileContentLazy.Value.JoinToString(Environment.NewLine))\n                ))\n                .Select(\n                    dependency =>\n                    {\n                        dependency.CodeReference ??= new CodeReference(\n                            relativeFilePath,\n                            0,\n                            0\n                        );\n                        return dependency;\n                    }\n                )\n                .GroupBy(dependency => dependency.Name)\n                .Select(\n                    dependenciesToMerge =>\n                        MergeDependencies(dependenciesToMerge, relativeFilePath)\n                )\n                .ToList", "(await ParseAsync(\n                    filePath,\n                    fileSha,\n                    fileContentLazy.Value,\n                    new Lazy<string>(() => fileContentLazy.Value.JoinToString(Environment.NewLine))\n                ))\n                .Select(\n                    dependency =>\n                    {\n                        dependency.CodeReference ??= new CodeReference(\n                            relativeFilePath,\n                            0,\n                            0\n                        );\n                        return dependency;\n                    }\n                )\n                .GroupBy(dependency => dependency.Name)\n                .Select", "(await ParseAsync(\n                    filePath,\n                    fileSha,\n                    fileContentLazy.Value,\n                    new Lazy<string>(() => fileContentLazy.Value.JoinToString(Environment.NewLine))\n                ))\n                .Select(\n                    dependency =>\n                    {\n                        dependency.CodeReference ??= new CodeReference(\n                            relativeFilePath,\n                            0,\n                            0\n                        );\n                        return dependency;\n                    }\n                )\n                .GroupBy", "(await ParseAsync(\n                    filePath,\n                    fileSha,\n                    fileContentLazy.Value,\n                    new Lazy<string>(() => fileContentLazy.Value.JoinToString(Environment.NewLine))\n                ))\n                .Select", "fileContentLazy.Value.JoinToString", "MergeDependencies", "dependencies.ForEachAsync", "dependencies.Aggregate", "first.HomePage.OrIfEmpty", "first.Versions.Union", "first.Licenses.Union", "dependency.HomePage.NullOrNone", "homePageLicenses.NullOrNone", "dependency.Licenses.AddRange", "dependency.Licenses.NullOrNone", "dependency.Licenses.SelectManyParallelAsync", "Array.Empty<string>", "resolvedNames.None", "license.Url.Split(\"/\")\n                            .Last", "license.Url.Split", "_licenseParserProxy.ResolveLicenseFromNameAsync", "license.Url.RemoveAll(\n                                \"http://\",\n                                \"https://\",\n                                \"www.\"\n                            )\n                            .Split(\"/\")\n                            .First", "license.Url.RemoveAll(\n                                \"http://\",\n                                \"https://\",\n                                \"www.\"\n                            )\n                            .Split", "license.Url.RemoveAll", "resolvedNames.First", "resolvedNames.Select", "license.Clone"], false, false, false, false, ["Failed to parse xml at '{path}'"], false, 4, 0, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, false], ["ProjectJsonDependenciesCollector", "Lim.FeaturesExtractor.ProjectJsonDependenciesCollector", ["Lim.FeaturesExtractor.DependenciesCollectorBase"], [], "src/Lim.FeaturesExtractor/DependenciesCollector/CSharp/ProjectJsonDependenciesCollector.cs", 11, 0, {"_nuGetApiProxy": "Lim.FeaturesExtractor.INuGetApiProxy", "_dependenciesCache": "Lim.FeaturesExtractor.IDependenciesCache", "_licenseParserProxy": "Lim.FeaturesExtractor.ILicenseParserProxy", "Logger": "???.ILogger<DependenciesCollectorBase>"}, ["_nuGetApiProxy", "_dependenciesCache", "_licenseParserProxy", "Logger", "RelevantLanguages"], ["ProjectJsonDependenciesCollector", "RelevantLanguages", "IsRelevantFile", "ParseAsync", "EnrichDependencyAsync", "DependenciesCollectorBase", "ProcessFileAsync", "GetAndEnrichDependencies", "MergeDependencies", "EnrichAndResolveLicensesForDependencyAsync", "ResolveLicensesAsync", "ResolveLicense", "InitAsync"], ["System", "System.Collections.Generic", "System.Threading.Tasks", "Infrastructure.Dotnet.Common", "Lim.Common.DotNET", "Microsoft.Extensions.Logging", "Newtonsoft.Json.Linq"], false, false, [], false, false, [], {"_nuGetApiProxy": [], "_dependenciesCache": [], "_licenseParserProxy": [], "Logger": []}, [], 1, false, false, false, 13, 0.9285714285714286, [], 566.2142857142857, 173, 7.142857142857143, 21.428571428571427, 2, 0, false, false, false, true, "public", false, ["Lim.FeaturesExtractor.IApiProxy.EnrichDependencyWithPackageInfo", "Lim.FeaturesExtractor.IDependenciesCache.GetOrAddByFileShaAsync", "Lim.FeaturesExtractor.ILicenseParserProxy.ResolveLicenseFromHomePageAsync", "Lim.FeaturesExtractor.ILicenseParserProxy.ResolveLicenseFromNameAsync", "Lim.FeaturesExtractor.ILicenseParserProxy.ResolveLicenseFromUrlAsync"], ["fileName.EqualsIgnoreCase", "JObject.Parse", "json.FindTokens", "token.Children<JProperty>", "child.Value.StringValue", "child.Value.ChildProperty", ".StringValue", "string.IsNullOrEmpty", "dependency.Versions.Add", "dependencies.Add", "Task.FromResult<IReadOnlyCollection<Dependency>>", "RelevantLanguages.Intersects", "Path.GetRelativePath", "(await _dependenciesCache.GetOrAddByFileShaAsync(\n                    fileSha,\n                    async () =>\n                        await GetAndEnrichDependencies(\n                            filePath,\n                            fileSha,\n                            fileContentLazy,\n                            relativeFilePath,\n                            cancellationToken\n                        )\n                )).ToList", "dependencies.NullOrNone", "dependencies.Where", "commitProperties.DependenciesByName.AddOrUpdate", "(await ParseAsync(\n                    filePath,\n                    fileSha,\n                    fileContentLazy.Value,\n                    new Lazy<string>(() => fileContentLazy.Value.JoinToString(Environment.NewLine))\n                ))\n                .Select(\n                    dependency =>\n                    {\n                        dependency.CodeReference ??= new CodeReference(\n                            relativeFilePath,\n                            0,\n                            0\n                        );\n                        return dependency;\n                    }\n                )\n                .GroupBy(dependency => dependency.Name)\n                .Select(\n                    dependenciesToMerge =>\n                        MergeDependencies(dependenciesToMerge, relativeFilePath)\n                )\n                .ToList", "(await ParseAsync(\n                    filePath,\n                    fileSha,\n                    fileContentLazy.Value,\n                    new Lazy<string>(() => fileContentLazy.Value.JoinToString(Environment.NewLine))\n                ))\n                .Select(\n                    dependency =>\n                    {\n                        dependency.CodeReference ??= new CodeReference(\n                            relativeFilePath,\n                            0,\n                            0\n                        );\n                        return dependency;\n                    }\n                )\n                .GroupBy(dependency => dependency.Name)\n                .Select", "(await ParseAsync(\n                    filePath,\n                    fileSha,\n                    fileContentLazy.Value,\n                    new Lazy<string>(() => fileContentLazy.Value.JoinToString(Environment.NewLine))\n                ))\n                .Select(\n                    dependency =>\n                    {\n                        dependency.CodeReference ??= new CodeReference(\n                            relativeFilePath,\n                            0,\n                            0\n                        );\n                        return dependency;\n                    }\n                )\n                .GroupBy", "(await ParseAsync(\n                    filePath,\n                    fileSha,\n                    fileContentLazy.Value,\n                    new Lazy<string>(() => fileContentLazy.Value.JoinToString(Environment.NewLine))\n                ))\n                .Select", "fileContentLazy.Value.JoinToString", "MergeDependencies", "dependencies.ForEachAsync", "dependencies.Aggregate", "first.HomePage.OrIfEmpty", "first.Versions.Union", "first.Licenses.Union", "dependency.HomePage.NullOrNone", "homePageLicenses.NullOrNone", "dependency.Licenses.AddRange", "dependency.Licenses.NullOrNone", "dependency.Licenses.SelectManyParallelAsync", "Array.Empty<string>", "resolvedNames.None", "license.Url.Split(\"/\")\n                            .Last", "license.Url.Split", "_licenseParserProxy.ResolveLicenseFromNameAsync", "license.Url.RemoveAll(\n                                \"http://\",\n                                \"https://\",\n                                \"www.\"\n                            )\n                            .Split(\"/\")\n                            .First", "license.Url.RemoveAll(\n                                \"http://\",\n                                \"https://\",\n                                \"www.\"\n                            )\n                            .Split", "license.Url.RemoveAll", "resolvedNames.First", "resolvedNames.Select", "license.Clone"], false, false, false, false, ["project.json", "dependencies", "version"], false, 1, 0, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, false], ["DependenciesCollectorBase", "Lim.FeaturesExtractor.DependenciesCollectorBase", [], ["Lim.FeaturesExtractor.IPropertiesCollector"], "src/Lim.FeaturesExtractor/DependenciesCollector/DependenciesCollectorBase.cs", 13, 0, {"_dependenciesCache": "Lim.FeaturesExtractor.IDependenciesCache", "_licenseParserProxy": "Lim.FeaturesExtractor.ILicenseParserProxy", "Logger": "???.ILogger<DependenciesCollectorBase>"}, ["_dependenciesCache", "_licenseParserProxy", "Logger", "RelevantLanguages"], ["DependenciesCollectorBase", "RelevantLanguages", "IsRelevantFile", "ProcessFileAsync", "GetAndEnrichDependencies", "MergeDependencies", "ParseAsync", "EnrichDependencyAsync", "EnrichAndResolveLicensesForDependencyAsync", "ResolveLicensesAsync", "ResolveLicense", "InitAsync"], ["System", "System.Collections.Generic", "System.IO", "System.Linq", "System.Threading", "System.Threading.Tasks", "Infrastructure.Dotnet.Common", "Lim.Common.DotNET", "Microsoft.Extensions.Logging"], false, false, [], false, false, [], {"_dependenciesCache": [], "_licenseParserProxy": [], "Logger": []}, [], 1, false, false, false, 12, 0.9230769230769231, [], 494.61538461538464, 155, 7.6923076923076925, 15.384615384615385, 1, 0, false, true, false, true, "public", false, ["Lim.FeaturesExtractor.IDependenciesCache.GetOrAddByFileShaAsync", "Lim.FeaturesExtractor.ILicenseParserProxy.ResolveLicenseFromHomePageAsync", "Lim.FeaturesExtractor.ILicenseParserProxy.ResolveLicenseFromNameAsync", "Lim.FeaturesExtractor.ILicenseParserProxy.ResolveLicenseFromUrlAsync"], ["RelevantLanguages.Intersects", "Path.GetRelativePath", "(await _dependenciesCache.GetOrAddByFileShaAsync(\n                    fileSha,\n                    async () =>\n                        await GetAndEnrichDependencies(\n                            filePath,\n                            fileSha,\n                            fileContentLazy,\n                            relativeFilePath,\n                            cancellationToken\n                        )\n                )).ToList", "dependencies.NullOrNone", "dependencies.Where", "string.IsNullOrEmpty", "commitProperties.DependenciesByName.AddOrUpdate", "(await ParseAsync(\n                    filePath,\n                    fileSha,\n                    fileContentLazy.Value,\n                    new Lazy<string>(() => fileContentLazy.Value.JoinToString(Environment.NewLine))\n                ))\n                .Select(\n                    dependency =>\n                    {\n                        dependency.CodeReference ??= new CodeReference(\n                            relativeFilePath,\n                            0,\n                            0\n                        );\n                        return dependency;\n                    }\n                )\n                .GroupBy(dependency => dependency.Name)\n                .Select(\n                    dependenciesToMerge =>\n                        MergeDependencies(dependenciesToMerge, relativeFilePath)\n                )\n                .ToList", "(await ParseAsync(\n                    filePath,\n                    fileSha,\n                    fileContentLazy.Value,\n                    new Lazy<string>(() => fileContentLazy.Value.JoinToString(Environment.NewLine))\n                ))\n                .Select(\n                    dependency =>\n                    {\n                        dependency.CodeReference ??= new CodeReference(\n                            relativeFilePath,\n                            0,\n                            0\n                        );\n                        return dependency;\n                    }\n                )\n                .GroupBy(dependency => dependency.Name)\n                .Select", "(await ParseAsync(\n                    filePath,\n                    fileSha,\n                    fileContentLazy.Value,\n                    new Lazy<string>(() => fileContentLazy.Value.JoinToString(Environment.NewLine))\n                ))\n                .Select(\n                    dependency =>\n                    {\n                        dependency.CodeReference ??= new CodeReference(\n                            relativeFilePath,\n                            0,\n                            0\n                        );\n                        return dependency;\n                    }\n                )\n                .GroupBy", "(await ParseAsync(\n                    filePath,\n                    fileSha,\n                    fileContentLazy.Value,\n                    new Lazy<string>(() => fileContentLazy.Value.JoinToString(Environment.NewLine))\n                ))\n                .Select", "fileContentLazy.Value.JoinToString", "MergeDependencies", "dependencies.ForEachAsync", "dependencies.Aggregate", "first.HomePage.OrIfEmpty", "first.Versions.Union", "first.Licenses.Union", "dependency.HomePage.NullOrNone", "homePageLicenses.NullOrNone", "dependency.Licenses.AddRange", "dependency.Licenses.NullOrNone", "dependency.Licenses.SelectManyParallelAsync", "Array.Empty<string>", "resolvedNames.None", "license.Url.Split(\"/\")\n                            .Last", "license.Url.Split", "_licenseParserProxy.ResolveLicenseFromNameAsync", "license.Url.RemoveAll(\n                                \"http://\",\n                                \"https://\",\n                                \"www.\"\n                            )\n                            .Split(\"/\")\n                            .First", "license.Url.RemoveAll(\n                                \"http://\",\n                                \"https://\",\n                                \"www.\"\n                            )\n                            .Split", "license.Url.RemoveAll", "resolvedNames.First", "resolvedNames.Select", "license.Clone"], false, false, false, false, ["/", "http://", "https://", "www."], false, 1, 0, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, false], ["GradleDependenciesCollector", "Lim.FeaturesExtractor.GradleDependenciesCollector", ["Lim.FeaturesExtractor.DependenciesCollectorBase"], [], "src/Lim.FeaturesExtractor/DependenciesCollector/Java/GradleDependenciesCollector.cs", 11, 0, {"DependenciesKeywords": "string[]", "_mavenApiProxy": "Lim.FeaturesExtractor.IMavenApiProxy", "_dependenciesCache": "Lim.FeaturesExtractor.IDependenciesCache", "_licenseParserProxy": "Lim.FeaturesExtractor.ILicenseParserProxy", "Logger": "???.ILogger<DependenciesCollectorBase>"}, ["_mavenApiProxy", "_dependenciesCache", "_licenseParserProxy", "Logger", "RelevantLanguages"], ["GradleDependenciesCollector", "RelevantLanguages", "IsRelevantFile", "ToDependency", "GetLineDependencies", "ParseAsync", "EnrichDependencyAsync", "DependenciesCollectorBase", "ProcessFileAsync", "GetAndEnrichDependencies", "MergeDependencies", "EnrichAndResolveLicensesForDependencyAsync", "ResolveLicensesAsync", "ResolveLicense", "InitAsync"], ["System", "System.Collections.Generic", "System.Linq", "System.Threading.Tasks", "Infrastructure.Dotnet.Common", "Lim.Common.DotNET", "Microsoft.Extensions.Logging"], false, false, [], false, false, [], {"DependenciesKeywords": [], "_mavenApiProxy": [], "_dependenciesCache": [], "_licenseParserProxy": [], "Logger": []}, [], 1, false, false, false, 15, 0.9375, [], 690.125, 253, 18.75, 18.75, 2, 0, false, false, false, true, "public", false, ["Lim.FeaturesExtractor.IApiProxy.EnrichDependencyWithPackageInfo", "Lim.FeaturesExtractor.IDependenciesCache.GetOrAddByFileShaAsync", "Lim.FeaturesExtractor.ILicenseParserProxy.ResolveLicenseFromHomePageAsync", "Lim.FeaturesExtractor.ILicenseParserProxy.ResolveLicenseFromNameAsync", "Lim.FeaturesExtractor.ILicenseParserProxy.ResolveLicenseFromUrlAsync"], ["fileName.Contains", "string.IsNullOrEmpty", "line.RemoveAll(keyword)\n                .ReplaceAllWith(new[] {\"(\", \")\", \"[\", \"]\", \"\\t\"}, \" \")\n                .Trim", "line.RemoveAll(keyword)\n                .ReplaceAllWith", "line.RemoveAll", "line.StartsWith", "line.Split", "dependencyString.Split", "results.Add", "line.RemoveAll(\" \")\n                    .Split", "part.StartsWith", "part.RemoveAll", "string.IsNullOrWhiteSpace", "line.EndsWith", "results.AddRange", "fileContent.Append(\"\")\n                .Enumerate", "fileContent.Append", "line.Contains", "dependencies.AddRange", "GetLineDependencies", "Task.FromResult<IReadOnlyCollection<Dependency>>", "RelevantLanguages.Intersects", "Path.GetRelativePath", "(await _dependenciesCache.GetOrAddByFileShaAsync(\n                    fileSha,\n                    async () =>\n                        await GetAndEnrichDependencies(\n                            filePath,\n                            fileSha,\n                            fileContentLazy,\n                            relativeFilePath,\n                            cancellationToken\n                        )\n                )).ToList", "dependencies.NullOrNone", "dependencies.Where", "commitProperties.DependenciesByName.AddOrUpdate", "(await ParseAsync(\n                    filePath,\n                    fileSha,\n                    fileContentLazy.Value,\n                    new Lazy<string>(() => fileContentLazy.Value.JoinToString(Environment.NewLine))\n                ))\n                .Select(\n                    dependency =>\n                    {\n                        dependency.CodeReference ??= new CodeReference(\n                            relativeFilePath,\n                            0,\n                            0\n                        );\n                        return dependency;\n                    }\n                )\n                .GroupBy(dependency => dependency.Name)\n                .Select(\n                    dependenciesToMerge =>\n                        MergeDependencies(dependenciesToMerge, relativeFilePath)\n                )\n                .ToList", "(await ParseAsync(\n                    filePath,\n                    fileSha,\n                    fileContentLazy.Value,\n                    new Lazy<string>(() => fileContentLazy.Value.JoinToString(Environment.NewLine))\n                ))\n                .Select(\n                    dependency =>\n                    {\n                        dependency.CodeReference ??= new CodeReference(\n                            relativeFilePath,\n                            0,\n                            0\n                        );\n                        return dependency;\n                    }\n                )\n                .GroupBy(dependency => dependency.Name)\n                .Select", "(await ParseAsync(\n                    filePath,\n                    fileSha,\n                    fileContentLazy.Value,\n                    new Lazy<string>(() => fileContentLazy.Value.JoinToString(Environment.NewLine))\n                ))\n                .Select(\n                    dependency =>\n                    {\n                        dependency.CodeReference ??= new CodeReference(\n                            relativeFilePath,\n                            0,\n                            0\n                        );\n                        return dependency;\n                    }\n                )\n                .GroupBy", "(await ParseAsync(\n                    filePath,\n                    fileSha,\n                    fileContentLazy.Value,\n                    new Lazy<string>(() => fileContentLazy.Value.JoinToString(Environment.NewLine))\n                ))\n                .Select", "fileContentLazy.Value.JoinToString", "MergeDependencies", "dependencies.ForEachAsync", "dependencies.Aggregate", "first.HomePage.OrIfEmpty", "first.Versions.Union", "first.Licenses.Union", "dependency.HomePage.NullOrNone", "homePageLicenses.NullOrNone", "dependency.Licenses.AddRange", "dependency.Licenses.NullOrNone", "dependency.Licenses.SelectManyParallelAsync", "Array.Empty<string>", "resolvedNames.None", "license.Url.Split(\"/\")\n                            .Last", "license.Url.Split", "_licenseParserProxy.ResolveLicenseFromNameAsync", "license.Url.RemoveAll(\n                                \"http://\",\n                                \"https://\",\n                                \"www.\"\n                            )\n                            .Split(\"/\")\n                            .First", "license.Url.RemoveAll(\n                                \"http://\",\n                                \"https://\",\n                                \"www.\"\n                            )\n                            .Split", "license.Url.RemoveAll", "resolvedNames.First", "resolvedNames.Select", "license.Clone"], false, false, false, false, ["implementation", "antContrib", "externalLibs", "deploymentTools", "runtimeOnly", "compileOnly", "compile", "api", "testImplementation", "classpath", "androidTestCompile", "build.gradle", "(", ")", "[", "]", "\t", " ", "'", "group:", "name:", "version:", "files", "fileTree", ",", ""], false, 1, 0, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, false], ["JarDependenciesCollector", "Lim.FeaturesExtractor.JarDependenciesCollector", ["Lim.FeaturesExtractor.DependenciesCollectorBase"], [], "src/Lim.FeaturesExtractor/DependenciesCollector/Java/JarDependenciesCollector.cs", 13, 0, {"_mavenApiProxy": "Lim.FeaturesExtractor.IMavenApiProxy", "_pomParser": "Lim.FeaturesExtractor.IPomParser", "_dependenciesCache": "Lim.FeaturesExtractor.IDependenciesCache", "_licenseParserProxy": "Lim.FeaturesExtractor.ILicenseParserProxy", "Logger": "???.ILogger<DependenciesCollectorBase>"}, ["_mavenApiProxy", "_pomParser", "_dependenciesCache", "_licenseParserProxy", "Logger", "RelevantLanguages"], ["JarDependenciesCollector", "RelevantLanguages", "IsRelevantFile", "ParseAsync", "EnrichDependencyAsync", "ReadFromArchive", "DependenciesCollectorBase", "ProcessFileAsync", "GetAndEnrichDependencies", "MergeDependencies", "EnrichAndResolveLicensesForDependencyAsync", "ResolveLicensesAsync", "ResolveLicense", "InitAsync"], ["System", "System.Collections.Generic", "System.IO", "System.IO.Compression", "System.Linq", "System.Threading.Tasks", "Infrastructure.Dotnet.Common", "Lim.Common.DotNET", "Microsoft.Extensions.Logging"], false, false, [], false, false, [], {"_mavenApiProxy": [], "_pomParser": [], "_dependenciesCache": [], "_licenseParserProxy": [], "Logger": []}, [], 1, false, false, false, 14, 0.9333333333333333, [], 624.5333333333333, 191, 13.333333333333334, 20.0, 2, 0, false, false, false, true, "public", false, ["Lim.FeaturesExtractor.IMavenApiProxy.GetPackageInfoAsync", "Lim.FeaturesExtractor.IPomParser.GetDependenciesFromText", "Lim.FeaturesExtractor.IApiProxy.EnrichDependencyWithPackageInfo", "Lim.FeaturesExtractor.IDependenciesCache.GetOrAddByFileShaAsync", "Lim.FeaturesExtractor.ILicenseParserProxy.ResolveLicenseFromHomePageAsync", "Lim.FeaturesExtractor.ILicenseParserProxy.ResolveLicenseFromNameAsync", "Lim.FeaturesExtractor.ILicenseParserProxy.ResolveLicenseFromUrlAsync"], ["fileName.EndsWith", "string.IsNullOrEmpty", "path.StartsWith", "path.EndsWith", "pomContents.Any", "dependencies.AddRange", "Logger.LogError", "Path.GetFileName", "fileContent.ToBytes", "zip.Entries.Where", "filePathPredicate", "entry.Open", "stream.ReadToEnd", "RelevantLanguages.Intersects", "Path.GetRelativePath", "(await _dependenciesCache.GetOrAddByFileShaAsync(\n                    fileSha,\n                    async () =>\n                        await GetAndEnrichDependencies(\n                            filePath,\n                            fileSha,\n                            fileContentLazy,\n                            relativeFilePath,\n                            cancellationToken\n                        )\n                )).ToList", "dependencies.NullOrNone", "dependencies.Where", "commitProperties.DependenciesByName.AddOrUpdate", "(await ParseAsync(\n                    filePath,\n                    fileSha,\n                    fileContentLazy.Value,\n                    new Lazy<string>(() => fileContentLazy.Value.JoinToString(Environment.NewLine))\n                ))\n                .Select(\n                    dependency =>\n                    {\n                        dependency.CodeReference ??= new CodeReference(\n                            relativeFilePath,\n                            0,\n                            0\n                        );\n                        return dependency;\n                    }\n                )\n                .GroupBy(dependency => dependency.Name)\n                .Select(\n                    dependenciesToMerge =>\n                        MergeDependencies(dependenciesToMerge, relativeFilePath)\n                )\n                .ToList", "(await ParseAsync(\n                    filePath,\n                    fileSha,\n                    fileContentLazy.Value,\n                    new Lazy<string>(() => fileContentLazy.Value.JoinToString(Environment.NewLine))\n                ))\n                .Select(\n                    dependency =>\n                    {\n                        dependency.CodeReference ??= new CodeReference(\n                            relativeFilePath,\n                            0,\n                            0\n                        );\n                        return dependency;\n                    }\n                )\n                .GroupBy(dependency => dependency.Name)\n                .Select", "(await ParseAsync(\n                    filePath,\n                    fileSha,\n                    fileContentLazy.Value,\n                    new Lazy<string>(() => fileContentLazy.Value.JoinToString(Environment.NewLine))\n                ))\n                .Select(\n                    dependency =>\n                    {\n                        dependency.CodeReference ??= new CodeReference(\n                            relativeFilePath,\n                            0,\n                            0\n                        );\n                        return dependency;\n                    }\n                )\n                .GroupBy", "(await ParseAsync(\n                    filePath,\n                    fileSha,\n                    fileContentLazy.Value,\n                    new Lazy<string>(() => fileContentLazy.Value.JoinToString(Environment.NewLine))\n                ))\n                .Select", "fileContentLazy.Value.JoinToString", "MergeDependencies", "dependencies.ForEachAsync", "dependencies.Aggregate", "first.HomePage.OrIfEmpty", "first.Versions.Union", "first.Licenses.Union", "dependency.HomePage.NullOrNone", "homePageLicenses.NullOrNone", "dependency.Licenses.AddRange", "dependency.Licenses.NullOrNone", "dependency.Licenses.SelectManyParallelAsync", "Array.Empty<string>", "resolvedNames.None", "license.Url.Split(\"/\")\n                            .Last", "license.Url.Split", "_licenseParserProxy.ResolveLicenseFromNameAsync", "license.Url.RemoveAll(\n                                \"http://\",\n                                \"https://\",\n                                \"www.\"\n                            )\n                            .Split(\"/\")\n                            .First", "license.Url.RemoveAll(\n                                \"http://\",\n                                \"https://\",\n                                \"www.\"\n                            )\n                            .Split", "license.Url.RemoveAll", "resolvedNames.First", "resolvedNames.Select", "license.Clone"], false, false, false, false, [".jar", "META-INF", "pom.xml", "Failed to read or parse {filePath}"], false, 1, 0, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, false], ["MavenDependenciesCollector", "Lim.FeaturesExtractor.MavenDependenciesCollector", ["Lim.FeaturesExtractor.DependenciesCollectorBase"], [], "src/Lim.FeaturesExtractor/DependenciesCollector/Java/MavenDependenciesCollector.cs", 10, 0, {"_mavenApiProxy": "Lim.FeaturesExtractor.IMavenApiProxy", "_pomParser": "Lim.FeaturesExtractor.IPomParser", "_dependenciesCache": "Lim.FeaturesExtractor.IDependenciesCache", "_licenseParserProxy": "Lim.FeaturesExtractor.ILicenseParserProxy", "Logger": "???.ILogger<DependenciesCollectorBase>"}, ["_mavenApiProxy", "_pomParser", "_dependenciesCache", "_licenseParserProxy", "Logger", "RelevantLanguages"], ["MavenDependenciesCollector", "RelevantLanguages", "IsRelevantFile", "ParseAsync", "EnrichDependencyAsync", "DependenciesCollectorBase", "ProcessFileAsync", "GetAndEnrichDependencies", "MergeDependencies", "EnrichAndResolveLicensesForDependencyAsync", "ResolveLicensesAsync", "ResolveLicense", "InitAsync"], ["System", "System.Collections.Generic", "System.Threading.Tasks", "Infrastructure.Dotnet.Common", "Lim.Common.DotNET", "Microsoft.Extensions.Logging"], false, false, [], false, false, [], {"_mavenApiProxy": [], "_pomParser": [], "_dependenciesCache": [], "_licenseParserProxy": [], "Logger": []}, [], 1, false, false, false, 13, 0.9285714285714286, [], 488.7857142857143, 172, 7.142857142857143, 21.428571428571427, 2, 0, false, false, false, true, "public", false, ["Lim.FeaturesExtractor.IPomParser.GetDependenciesFromText", "Lim.FeaturesExtractor.IApiProxy.EnrichDependencyWithPackageInfo", "Lim.FeaturesExtractor.IDependenciesCache.GetOrAddByFileShaAsync", "Lim.FeaturesExtractor.ILicenseParserProxy.ResolveLicenseFromHomePageAsync", "Lim.FeaturesExtractor.ILicenseParserProxy.ResolveLicenseFromNameAsync", "Lim.FeaturesExtractor.ILicenseParserProxy.ResolveLicenseFromUrlAsync"], ["fileName.EqualsIgnoreCase", "Task.FromResult", "RelevantLanguages.Intersects", "Path.GetRelativePath", "(await _dependenciesCache.GetOrAddByFileShaAsync(\n                    fileSha,\n                    async () =>\n                        await GetAndEnrichDependencies(\n                            filePath,\n                            fileSha,\n                            fileContentLazy,\n                            relativeFilePath,\n                            cancellationToken\n                        )\n                )).ToList", "dependencies.NullOrNone", "dependencies.Where", "string.IsNullOrEmpty", "commitProperties.DependenciesByName.AddOrUpdate", "(await ParseAsync(\n                    filePath,\n                    fileSha,\n                    fileContentLazy.Value,\n                    new Lazy<string>(() => fileContentLazy.Value.JoinToString(Environment.NewLine))\n                ))\n                .Select(\n                    dependency =>\n                    {\n                        dependency.CodeReference ??= new CodeReference(\n                            relativeFilePath,\n                            0,\n                            0\n                        );\n                        return dependency;\n                    }\n                )\n                .GroupBy(dependency => dependency.Name)\n                .Select(\n                    dependenciesToMerge =>\n                        MergeDependencies(dependenciesToMerge, relativeFilePath)\n                )\n                .ToList", "(await ParseAsync(\n                    filePath,\n                    fileSha,\n                    fileContentLazy.Value,\n                    new Lazy<string>(() => fileContentLazy.Value.JoinToString(Environment.NewLine))\n                ))\n                .Select(\n                    dependency =>\n                    {\n                        dependency.CodeReference ??= new CodeReference(\n                            relativeFilePath,\n                            0,\n                            0\n                        );\n                        return dependency;\n                    }\n                )\n                .GroupBy(dependency => dependency.Name)\n                .Select", "(await ParseAsync(\n                    filePath,\n                    fileSha,\n                    fileContentLazy.Value,\n                    new Lazy<string>(() => fileContentLazy.Value.JoinToString(Environment.NewLine))\n                ))\n                .Select(\n                    dependency =>\n                    {\n                        dependency.CodeReference ??= new CodeReference(\n                            relativeFilePath,\n                            0,\n                            0\n                        );\n                        return dependency;\n                    }\n                )\n                .GroupBy", "(await ParseAsync(\n                    filePath,\n                    fileSha,\n                    fileContentLazy.Value,\n                    new Lazy<string>(() => fileContentLazy.Value.JoinToString(Environment.NewLine))\n                ))\n                .Select", "fileContentLazy.Value.JoinToString", "MergeDependencies", "dependencies.ForEachAsync", "dependencies.Aggregate", "first.HomePage.OrIfEmpty", "first.Versions.Union", "first.Licenses.Union", "dependency.HomePage.NullOrNone", "homePageLicenses.NullOrNone", "dependency.Licenses.AddRange", "dependency.Licenses.NullOrNone", "dependency.Licenses.SelectManyParallelAsync", "Array.Empty<string>", "resolvedNames.None", "license.Url.Split(\"/\")\n                            .Last", "license.Url.Split", "_licenseParserProxy.ResolveLicenseFromNameAsync", "license.Url.RemoveAll(\n                                \"http://\",\n                                \"https://\",\n                                \"www.\"\n                            )\n                            .Split(\"/\")\n                            .First", "license.Url.RemoveAll(\n                                \"http://\",\n                                \"https://\",\n                                \"www.\"\n                            )\n                            .Split", "license.Url.RemoveAll", "resolvedNames.First", "resolvedNames.Select", "license.Clone"], false, false, false, false, ["pom.xml"], false, 1, 0, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, false], ["PackageJsonDependenciesCollector", "Lim.FeaturesExtractor.PackageJsonDependenciesCollector", ["Lim.FeaturesExtractor.DependenciesCollectorBase"], [], "src/Lim.FeaturesExtractor/DependenciesCollector/JavaScript/PackageJsonDependenciesCollector.cs", 12, 0, {"_npmApiProxy": "Lim.FeaturesExtractor.INpmApiProxy", "_dependenciesCache": "Lim.FeaturesExtractor.IDependenciesCache", "_licenseParserProxy": "Lim.FeaturesExtractor.ILicenseParserProxy", "Logger": "???.ILogger<DependenciesCollectorBase>"}, ["_npmApiProxy", "_dependenciesCache", "_licenseParserProxy", "Logger", "RelevantLanguages"], ["PackageJsonDependenciesCollector", "RelevantLanguages", "IsRelevantFile", "ParseAsync", "EnrichDependencyAsync", "DependenciesCollectorBase", "ProcessFileAsync", "GetAndEnrichDependencies", "MergeDependencies", "EnrichAndResolveLicensesForDependencyAsync", "ResolveLicensesAsync", "ResolveLicense", "InitAsync"], ["System", "System.Collections.Generic", "System.Threading.Tasks", "Infrastructure.Dotnet.Common", "Lim.Common.DotNET", "Microsoft.Extensions.Logging", "Newtonsoft.Json", "Newtonsoft.Json.Linq"], false, false, [], false, false, [], {"_npmApiProxy": [], "_dependenciesCache": [], "_licenseParserProxy": [], "Logger": []}, [], 1, false, false, false, 13, 0.9285714285714286, [], 607.0714285714286, 173, 7.142857142857143, 21.428571428571427, 2, 0, false, false, false, true, "public", false, ["Lim.FeaturesExtractor.IApiProxy.EnrichDependencyWithPackageInfo", "Lim.FeaturesExtractor.IDependenciesCache.GetOrAddByFileShaAsync", "Lim.FeaturesExtractor.ILicenseParserProxy.ResolveLicenseFromHomePageAsync", "Lim.FeaturesExtractor.ILicenseParserProxy.ResolveLicenseFromNameAsync", "Lim.FeaturesExtractor.ILicenseParserProxy.ResolveLicenseFromUrlAsync"], ["fileName.EqualsIgnoreCase", "JObject.Parse", "Logger.LogInformation", "Task.FromResult<IReadOnlyCollection<Dependency>>", "json.FindTokens", "token.Children<JProperty>", "child.Value.StringValue()\n                            .RemoveAll", "child.Value.StringValue", "string.IsNullOrEmpty", "version.StartsWith", "dependency.Versions.Add", "dependencies.Add", "RelevantLanguages.Intersects", "Path.GetRelativePath", "(await _dependenciesCache.GetOrAddByFileShaAsync(\n                    fileSha,\n                    async () =>\n                        await GetAndEnrichDependencies(\n                            filePath,\n                            fileSha,\n                            fileContentLazy,\n                            relativeFilePath,\n                            cancellationToken\n                        )\n                )).ToList", "dependencies.NullOrNone", "dependencies.Where", "commitProperties.DependenciesByName.AddOrUpdate", "(await ParseAsync(\n                    filePath,\n                    fileSha,\n                    fileContentLazy.Value,\n                    new Lazy<string>(() => fileContentLazy.Value.JoinToString(Environment.NewLine))\n                ))\n                .Select(\n                    dependency =>\n                    {\n                        dependency.CodeReference ??= new CodeReference(\n                            relativeFilePath,\n                            0,\n                            0\n                        );\n                        return dependency;\n                    }\n                )\n                .GroupBy(dependency => dependency.Name)\n                .Select(\n                    dependenciesToMerge =>\n                        MergeDependencies(dependenciesToMerge, relativeFilePath)\n                )\n                .ToList", "(await ParseAsync(\n                    filePath,\n                    fileSha,\n                    fileContentLazy.Value,\n                    new Lazy<string>(() => fileContentLazy.Value.JoinToString(Environment.NewLine))\n                ))\n                .Select(\n                    dependency =>\n                    {\n                        dependency.CodeReference ??= new CodeReference(\n                            relativeFilePath,\n                            0,\n                            0\n                        );\n                        return dependency;\n                    }\n                )\n                .GroupBy(dependency => dependency.Name)\n                .Select", "(await ParseAsync(\n                    filePath,\n                    fileSha,\n                    fileContentLazy.Value,\n                    new Lazy<string>(() => fileContentLazy.Value.JoinToString(Environment.NewLine))\n                ))\n                .Select(\n                    dependency =>\n                    {\n                        dependency.CodeReference ??= new CodeReference(\n                            relativeFilePath,\n                            0,\n                            0\n                        );\n                        return dependency;\n                    }\n                )\n                .GroupBy", "(await ParseAsync(\n                    filePath,\n                    fileSha,\n                    fileContentLazy.Value,\n                    new Lazy<string>(() => fileContentLazy.Value.JoinToString(Environment.NewLine))\n                ))\n                .Select", "fileContentLazy.Value.JoinToString", "MergeDependencies", "dependencies.ForEachAsync", "dependencies.Aggregate", "first.HomePage.OrIfEmpty", "first.Versions.Union", "first.Licenses.Union", "dependency.HomePage.NullOrNone", "homePageLicenses.NullOrNone", "dependency.Licenses.AddRange", "dependency.Licenses.NullOrNone", "dependency.Licenses.SelectManyParallelAsync", "Array.Empty<string>", "resolvedNames.None", "license.Url.Split(\"/\")\n                            .Last", "license.Url.Split", "_licenseParserProxy.ResolveLicenseFromNameAsync", "license.Url.RemoveAll(\n                                \"http://\",\n                                \"https://\",\n                                \"www.\"\n                            )\n                            .Split(\"/\")\n                            .First", "license.Url.RemoveAll(\n                                \"http://\",\n                                \"https://\",\n                                \"www.\"\n                            )\n                            .Split", "license.Url.RemoveAll", "resolvedNames.First", "resolvedNames.Select", "license.Clone"], false, false, false, false, ["package.json", "bower.json", "Failed to parse json at '{path}'", "dependencies", "devDependencies", "peerDependencies", "bundledDependencies", "optionalDependencies", "^", "~", "http"], false, 1, 0, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, false], ["BasePackagesApiProxy", "Lim.FeaturesExtractor.BasePackagesApiProxy", [], ["Lim.FeaturesExtractor.IApiProxy"], "src/Lim.FeaturesExtractor/DependenciesCollector/PackagesApi/BasePackagesApiProxy.cs", 12, 0, {"TimeoutInSeconds": "int", "_logger": "???.ILogger<BasePackagesApiProxy>", "_proxyConnector": "???.IProxyConnector"}, ["_logger", "_proxyConnector"], ["BasePackagesApiProxy", "EnrichDependencyWithPackageInfo", "GetRestClient", "GetRequestAsync", "GetLatestVersionAsync", "GetPackageInfoAsync", "LogErrorResponse"], ["System", "System.Collections.Generic", "System.Linq", "System.Threading.Tasks", "Infrastructure.Dotnet.Common", "Lim.Common.DotNET", "Microsoft.Extensions.Logging", "RestSharp"], false, false, [], false, false, [], {"TimeoutInSeconds": [], "_logger": [], "_proxyConnector": []}, [], 0, false, false, false, 8, 1.0, [], 371.25, 197, 0.0, 12.5, 1, 0, false, true, false, true, "public", false, [], ["dependency.Versions.NullOrNone", "string.IsNullOrEmpty", "TimeSpan.FromSeconds", "restClient.ApplyProxyIfNeeded", "restClient.SafeExecuteTaskAsync", "LogErrorResponse", "(await versions.SelectParallelAsync(\n                    version =>\n                        GetPackageInfoAsync(name, version)\n                ))\n                .WhereNotNull()\n                .ToList", "(await versions.SelectParallelAsync(\n                    version =>\n                        GetPackageInfoAsync(name, version)\n                ))\n                .WhereNotNull", "versions.SelectParallelAsync", "GetPackageInfoAsync", "packageInfos.FirstOrDefault", "packageInfos\n                    .Where(packageInfo => packageInfo.Licenses != null)\n                    .SelectMany(packageInfo => packageInfo.Licenses)\n                    .Where(license => license != null && !license.IsEmpty)\n                    .Distinct()\n                    .ToList", "packageInfos\n                    .Where(packageInfo => packageInfo.Licenses != null)\n                    .SelectMany(packageInfo => packageInfo.Licenses)\n                    .Where(license => license != null && !license.IsEmpty)\n                    .Distinct", "packageInfos\n                    .Where(packageInfo => packageInfo.Licenses != null)\n                    .SelectMany(packageInfo => packageInfo.Licenses)\n                    .Where", "packageInfos\n                    .Where(packageInfo => packageInfo.Licenses != null)\n                    .SelectMany", "packageInfos\n                    .Where", "_logger.LogDebug", "response.FormatErrorResponse"], false, false, false, false, [], false, 0, 0, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, false], ["GemApiProxy", "Lim.FeaturesExtractor.GemApiProxy", ["Lim.FeaturesExtractor.BasePackagesApiProxy"], ["Lim.FeaturesExtractor.IGemApiProxy"], "src/Lim.FeaturesExtractor/DependenciesCollector/PackagesApi/GemApiProxy.cs", 14, 0, {"_latestVersionByNameCache": "???.IAsyncCache<string, string>", "_packageInfoByNameAndVersionCache": "???.IAsyncCache<(string Name, string Version), PackageInfo>", "_restClient": "???.IRestClient", "_throttler": "???.AsyncThrottler", "TimeoutInSeconds": "int", "_logger": "???.ILogger<BasePackagesApiProxy>", "_proxyConnector": "???.IProxyConnector"}, ["_latestVersionByNameCache", "_packageInfoByNameAndVersionCache", "_restClient", "_throttler", "_logger", "_proxyConnector"], ["GemApiProxy", "GetLatestVersionAsync", "GetRequestThrottledAsync", "GetPackageInfoAsync", "BasePackagesApiProxy", "EnrichDependencyWithPackageInfo", "GetRestClient", "GetRequestAsync", "LogErrorResponse"], ["System", "System.Collections.Generic", "System.Linq", "System.Threading.Tasks", "Infrastructure.Dotnet.Common", "Lim.Common.DotNET", "Microsoft.Extensions.Logging", "Newtonsoft.Json.Linq", "RestSharp", "RestSharp.Extensions"], false, false, [], false, false, [], {"_latestVersionByNameCache": [], "_packageInfoByNameAndVersionCache": [], "_restClient": [], "_throttler": [], "TimeoutInSeconds": [], "_logger": [], "_proxyConnector": []}, [], 0, false, false, false, 10, 1.0, [], 608.7, 324, 0.0, 20.0, 2, 0, false, false, false, true, "public", false, ["Lim.FeaturesExtractor.BasePackagesApiProxy.GetRequestAsync", "Lim.FeaturesExtractor.BasePackagesApiProxy.GetRestClient"], ["_latestVersionByNameCache.GetOrAddAsync", "name.UrlEncode().ToLowerInvariant", "name.UrlEncode", "response.ContentType.Contains", "response.AsJObject", ".Value<string>", "_throttler.ThrottleAsync", "_packageInfoByNameAndVersionCache.GetOrAddAsync", "string.IsNullOrEmpty", "info.GetValue", ".Values<string>", ".Select(license => new License {OriginalName = license})\n                            .ToList", ".Select", "dependency.Versions.NullOrNone", "TimeSpan.FromSeconds", "restClient.ApplyProxyIfNeeded", "restClient.SafeExecuteTaskAsync", "LogErrorResponse", "(await versions.SelectParallelAsync(\n                    version =>\n                        GetPackageInfoAsync(name, version)\n                ))\n                .WhereNotNull()\n                .ToList", "(await versions.SelectParallelAsync(\n                    version =>\n                        GetPackageInfoAsync(name, version)\n                ))\n                .WhereNotNull", "versions.SelectParallelAsync", "GetPackageInfoAsync", "packageInfos.FirstOrDefault", "packageInfos\n                    .Where(packageInfo => packageInfo.Licenses != null)\n                    .SelectMany(packageInfo => packageInfo.Licenses)\n                    .Where(license => license != null && !license.IsEmpty)\n                    .Distinct()\n                    .ToList", "packageInfos\n                    .Where(packageInfo => packageInfo.Licenses != null)\n                    .SelectMany(packageInfo => packageInfo.Licenses)\n                    .Where(license => license != null && !license.IsEmpty)\n                    .Distinct", "packageInfos\n                    .Where(packageInfo => packageInfo.Licenses != null)\n                    .SelectMany(packageInfo => packageInfo.Licenses)\n                    .Where", "packageInfos\n                    .Where(packageInfo => packageInfo.Licenses != null)\n                    .SelectMany", "packageInfos\n                    .Where", "_logger.LogDebug", "response.FormatErrorResponse", "cacheByNameAndVersionBuilder", "TimeSpan.FromDays", "cacheVersionByNameBuilder"], false, false, false, false, ["https://rubygems.org", "json", "version", "gems", "licenses", "homepage_uri"], false, 0, 0, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, false], ["MavenApiProxy", "Lim.FeaturesExtractor.MavenApiProxy", ["Lim.FeaturesExtractor.BasePackagesApiProxy"], ["Lim.FeaturesExtractor.IMavenApiProxy"], "src/Lim.FeaturesExtractor/DependenciesCollector/PackagesApi/MavenApiProxy.cs", 10, 0, {"_packageInfoByNameAndVersionCache": "???.IAsyncCache<(string Name, string Version), PackageInfo>", "_passcode": "string", "_pomByUrlCache": "???.IAsyncCache<string, PomMetadata>", "_pomParser": "Lim.FeaturesExtractor.IPomParser", "_restClient": "???.IRestClient", "TimeoutInSeconds": "int", "_logger": "???.ILogger<BasePackagesApiProxy>", "_proxyConnector": "???.IProxyConnector"}, ["_packageInfoByNameAndVersionCache", "_passcode", "_pomByUrlCache", "_pomParser", "_restClient", "_logger", "_proxyConnector"], ["MavenApiProxy", "GetPackageInfoAsync", "GetPomMetadataAsync", "GetLatestVersionAsync", "BasePackagesApiProxy", "EnrichDependencyWithPackageInfo", "GetRestClient", "GetRequestAsync", "LogErrorResponse"], ["System", "System.Threading.Tasks", "Infrastructure.Dotnet.Common", "JetBrains.Annotations", "Microsoft.Extensions.Logging", "RestSharp"], false, false, [], false, false, [], {"_packageInfoByNameAndVersionCache": [], "_passcode": [], "_pomByUrlCache": [], "_pomParser": [], "_restClient": [], "TimeoutInSeconds": [], "_logger": [], "_proxyConnector": []}, [], 0, false, false, false, 11, 1.0, [], 637.1818181818181, 364, 0.0, 27.272727272727273, 2, 0, false, false, false, true, "public", false, ["Lim.FeaturesExtractor.PomMetadata.GetPackageInfo", "Lim.FeaturesExtractor.BasePackagesApiProxy.GetRestClient"], ["_pomByUrlCache.GetOrAddAsync", "request.AddHeader", "_restClient.SafeExecuteTaskAsync", "LogErrorResponse", "response.FromJson<MavenApiResponse>", "_pomParser.GetMetadataFromText", "name.Split", "_packageInfoByNameAndVersionCache.GetOrAddAsync", "packageInfo.Licenses.AddRange", "string.IsNullOrEmpty", "packageInfo.Licenses.None", "dependency.Versions.NullOrNone", "TimeSpan.FromSeconds", "restClient.ApplyProxyIfNeeded", "restClient.SafeExecuteTaskAsync", "(await versions.SelectParallelAsync(\n                    version =>\n                        GetPackageInfoAsync(name, version)\n                ))\n                .WhereNotNull()\n                .ToList", "(await versions.SelectParallelAsync(\n                    version =>\n                        GetPackageInfoAsync(name, version)\n                ))\n                .WhereNotNull", "versions.SelectParallelAsync", "GetPackageInfoAsync", "packageInfos.FirstOrDefault", "packageInfos\n                    .Where(packageInfo => packageInfo.Licenses != null)\n                    .SelectMany(packageInfo => packageInfo.Licenses)\n                    .Where(license => license != null && !license.IsEmpty)\n                    .Distinct()\n                    .ToList", "packageInfos\n                    .Where(packageInfo => packageInfo.Licenses != null)\n                    .SelectMany(packageInfo => packageInfo.Licenses)\n                    .Where(license => license != null && !license.IsEmpty)\n                    .Distinct", "packageInfos\n                    .Where(packageInfo => packageInfo.Licenses != null)\n                    .SelectMany(packageInfo => packageInfo.Licenses)\n                    .Where", "packageInfos\n                    .Where(packageInfo => packageInfo.Licenses != null)\n                    .SelectMany", "packageInfos\n                    .Where", "_logger.LogDebug", "response.FormatErrorResponse", "cacheBuilder", "TimeSpan.FromDays", "packageInfoCacheBuilder", "_restClient.SetRemoteCertificateValidationCallback"], false, false, false, false, ["Empty passcode", "Authorization", ":"], false, 0, 0, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, false], ["MavenApiResponse", "Lim.FeaturesExtractor.MavenApiProxy.MavenApiResponse", [], [], "src/Lim.FeaturesExtractor/DependenciesCollector/PackagesApi/MavenApiProxy.cs", 143, 0, {}, ["Id", "Content"], ["Id", "Content"], ["System", "System.Threading.Tasks", "Infrastructure.Dotnet.Common", "JetBrains.Annotations", "Microsoft.Extensions.Logging", "RestSharp"], false, false, ["UsedImplicitly"], false, false, [], {}, [], 2, false, false, false, 0, 0.0, ["Lim.FeaturesExtractor.MavenApiProxy"], 0.0, 0, 0.0, 100.0, 0, 0, true, false, false, false, "private", false, [], [], false, false, false, false, [], false, 2, 2, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, false], ["NetworkAwareGemAPiProxy", "Lim.FeaturesExtractor.NetworkAwareGemAPiProxy", ["Lim.FeaturesExtractor.NetworkAwareProxy"], ["Lim.FeaturesExtractor.IGemApiProxy"], "src/Lim.FeaturesExtractor/DependenciesCollector/PackagesApi/NetworkAware/NetworkAwareGemAPiProxy.cs", 6, 0, {"_decorated": "Lim.FeaturesExtractor.IApiProxy", "_isAirGapped": "bool", "_logger": "???.ILogger<NetworkAwareProxy>", "_noNetworkNoCallInterval": "System.TimeSpan", "_networkErrorDetectedTimestamp": "System.DateTime?"}, ["_decorated", "_logger", "_noNetworkNoCallInterval", "_networkErrorDetectedTimestamp"], ["NetworkAwareGemAPiProxy", "NetworkAwareProxy", "EnrichDependencyWithPackageInfo", "ExecuteAsync", "IsAirGappedOrInNoNetworkInterval", "OnNetworkError"], ["JetBrains.Annotations", "Microsoft.Extensions.Logging"], false, false, ["UsedImplicitly"], false, false, [], {"_decorated": [], "_isAirGapped": [], "_logger": [], "_noNetworkNoCallInterval": [], "_networkErrorDetectedTimestamp": []}, [], 0, false, false, false, 6, 1.0, [], 228.16666666666666, 219, 0.0, 33.333333333333336, 2, 0, false, false, false, true, "public", false, ["Lim.FeaturesExtractor.IApiProxy.EnrichDependencyWithPackageInfo"], ["asyncAction", "webException.IsNoInternetException", "DateTime.UtcNow.Subtract", "_logger.LogInformation"], false, false, false, false, [], false, 0, 0, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, false], ["NetworkAwareMavenApiProxy", "Lim.FeaturesExtractor.NetworkAwareMavenApiProxy", ["Lim.FeaturesExtractor.NetworkAwareProxy"], ["Lim.FeaturesExtractor.IMavenApiProxy"], "src/Lim.FeaturesExtractor/DependenciesCollector/PackagesApi/NetworkAware/NetworkAwareMavenApiProxy.cs", 7, 0, {"_decorated": "Lim.FeaturesExtractor.IMavenApiProxy", "_isAirGapped": "bool", "_logger": "???.ILogger<NetworkAwareProxy>", "_noNetworkNoCallInterval": "System.TimeSpan", "_networkErrorDetectedTimestamp": "System.DateTime?"}, ["_decorated", "_logger", "_noNetworkNoCallInterval", "_networkErrorDetectedTimestamp"], ["NetworkAwareMavenApiProxy", "GetPackageInfoAsync", "NetworkAwareProxy", "EnrichDependencyWithPackageInfo", "ExecuteAsync", "IsAirGappedOrInNoNetworkInterval", "OnNetworkError"], ["System.Threading.Tasks", "JetBrains.Annotations", "Microsoft.Extensions.Logging"], false, false, ["UsedImplicitly"], false, false, [], {"_decorated": [], "_isAirGapped": [], "_logger": [], "_noNetworkNoCallInterval": [], "_networkErrorDetectedTimestamp": []}, [], 0, false, false, false, 7, 1.0, [], 208.42857142857142, 193, 0.0, 42.857142857142854, 2, 0, false, false, false, true, "public", false, ["Lim.FeaturesExtractor.NetworkAwareProxy.ExecuteAsync", "Lim.FeaturesExtractor.IMavenApiProxy.GetPackageInfoAsync", "Lim.FeaturesExtractor.IApiProxy.EnrichDependencyWithPackageInfo"], ["asyncAction", "webException.IsNoInternetException", "DateTime.UtcNow.Subtract", "_logger.LogInformation"], false, false, false, false, [], false, 0, 0, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, false], ["NetworkAwareNpmApiProxy", "Lim.FeaturesExtractor.NetworkAwareNpmApiProxy", ["Lim.FeaturesExtractor.NetworkAwareProxy"], ["Lim.FeaturesExtractor.INpmApiProxy"], "src/Lim.FeaturesExtractor/DependenciesCollector/PackagesApi/NetworkAware/NetworkAwareNpmApiProxy.cs", 6, 0, {"_decorated": "Lim.FeaturesExtractor.IApiProxy", "_isAirGapped": "bool", "_logger": "???.ILogger<NetworkAwareProxy>", "_noNetworkNoCallInterval": "System.TimeSpan", "_networkErrorDetectedTimestamp": "System.DateTime?"}, ["_decorated", "_logger", "_noNetworkNoCallInterval", "_networkErrorDetectedTimestamp"], ["NetworkAwareNpmApiProxy", "NetworkAwareProxy", "EnrichDependencyWithPackageInfo", "ExecuteAsync", "IsAirGappedOrInNoNetworkInterval", "OnNetworkError"], ["JetBrains.Annotations", "Microsoft.Extensions.Logging"], false, false, ["UsedImplicitly"], false, false, [], {"_decorated": [], "_isAirGapped": [], "_logger": [], "_noNetworkNoCallInterval": [], "_networkErrorDetectedTimestamp": []}, [], 0, false, false, false, 6, 1.0, [], 228.16666666666666, 219, 0.0, 33.333333333333336, 2, 0, false, false, false, true, "public", false, ["Lim.FeaturesExtractor.IApiProxy.EnrichDependencyWithPackageInfo"], ["asyncAction", "webException.IsNoInternetException", "DateTime.UtcNow.Subtract", "_logger.LogInformation"], false, false, false, false, [], false, 0, 0, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, false], ["NetworkAwareNuGetApiProxy", "Lim.FeaturesExtractor.NetworkAwareNuGetApiProxy", ["Lim.FeaturesExtractor.NetworkAwareProxy"], ["Lim.FeaturesExtractor.INuGetApiProxy"], "src/Lim.FeaturesExtractor/DependenciesCollector/PackagesApi/NetworkAware/NetworkAwareNuGetApiProxy.cs", 6, 0, {"_decorated": "Lim.FeaturesExtractor.IApiProxy", "_isAirGapped": "bool", "_logger": "???.ILogger<NetworkAwareProxy>", "_noNetworkNoCallInterval": "System.TimeSpan", "_networkErrorDetectedTimestamp": "System.DateTime?"}, ["_decorated", "_logger", "_noNetworkNoCallInterval", "_networkErrorDetectedTimestamp"], ["NetworkAwareNuGetApiProxy", "NetworkAwareProxy", "EnrichDependencyWithPackageInfo", "ExecuteAsync", "IsAirGappedOrInNoNetworkInterval", "OnNetworkError"], ["JetBrains.Annotations", "Microsoft.Extensions.Logging"], false, false, ["UsedImplicitly"], false, false, [], {"_decorated": [], "_isAirGapped": [], "_logger": [], "_noNetworkNoCallInterval": [], "_networkErrorDetectedTimestamp": []}, [], 0, false, false, false, 6, 1.0, [], 228.16666666666666, 219, 0.0, 33.333333333333336, 2, 0, false, false, false, true, "public", false, ["Lim.FeaturesExtractor.IApiProxy.EnrichDependencyWithPackageInfo"], ["asyncAction", "webException.IsNoInternetException", "DateTime.UtcNow.Subtract", "_logger.LogInformation"], false, false, false, false, [], false, 0, 0, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, false], ["NetworkAwarePipApiProxy", "Lim.FeaturesExtractor.NetworkAwarePipApiProxy", ["Lim.FeaturesExtractor.NetworkAwareProxy"], ["Lim.FeaturesExtractor.IPipApiProxy"], "src/Lim.FeaturesExtractor/DependenciesCollector/PackagesApi/NetworkAware/NetworkAwarePipApiProxy.cs", 6, 0, {"_decorated": "Lim.FeaturesExtractor.IApiProxy", "_isAirGapped": "bool", "_logger": "???.ILogger<NetworkAwareProxy>", "_noNetworkNoCallInterval": "System.TimeSpan", "_networkErrorDetectedTimestamp": "System.DateTime?"}, ["_decorated", "_logger", "_noNetworkNoCallInterval", "_networkErrorDetectedTimestamp"], ["NetworkAwarePipApiProxy", "NetworkAwareProxy", "EnrichDependencyWithPackageInfo", "ExecuteAsync", "IsAirGappedOrInNoNetworkInterval", "OnNetworkError"], ["JetBrains.Annotations", "Microsoft.Extensions.Logging"], false, false, ["UsedImplicitly"], false, false, [], {"_decorated": [], "_isAirGapped": [], "_logger": [], "_noNetworkNoCallInterval": [], "_networkErrorDetectedTimestamp": []}, [], 0, false, false, false, 6, 1.0, [], 228.16666666666666, 219, 0.0, 33.333333333333336, 2, 0, false, false, false, true, "public", false, ["Lim.FeaturesExtractor.IApiProxy.EnrichDependencyWithPackageInfo"], ["asyncAction", "webException.IsNoInternetException", "DateTime.UtcNow.Subtract", "_logger.LogInformation"], false, false, false, false, [], false, 0, 0, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, false], ["NetworkAwareProxy", "Lim.FeaturesExtractor.NetworkAwareProxy", [], ["Lim.FeaturesExtractor.IApiProxy"], "src/Lim.FeaturesExtractor/DependenciesCollector/PackagesApi/NetworkAwareProxy.cs", 10, 0, {"_decorated": "Lim.FeaturesExtractor.IApiProxy", "_isAirGapped": "bool", "_logger": "???.ILogger<NetworkAwareProxy>", "_noNetworkNoCallInterval": "System.TimeSpan", "_networkErrorDetectedTimestamp": "System.DateTime?"}, ["_decorated", "_logger", "_noNetworkNoCallInterval", "_networkErrorDetectedTimestamp"], ["NetworkAwareProxy", "EnrichDependencyWithPackageInfo", "ExecuteAsync", "IsAirGappedOrInNoNetworkInterval", "OnNetworkError"], ["System", "System.Net", "System.Threading.Tasks", "Infrastructure.Dotnet.Common", "Lim.Common.DotNET", "Microsoft.Extensions.Logging"], false, false, [], false, false, [], {"_decorated": [], "_isAirGapped": [], "_logger": [], "_noNetworkNoCallInterval": [], "_networkErrorDetectedTimestamp": []}, [], 0, false, false, false, 5, 1.0, [], 269.8, 246, 0.0, 20.0, 1, 0, false, true, false, true, "public", false, ["Lim.FeaturesExtractor.IApiProxy.EnrichDependencyWithPackageInfo"], ["asyncAction", "webException.IsNoInternetException", "DateTime.UtcNow.Subtract", "_logger.LogInformation", "TimeSpan.FromMinutes", "Environment.GetEnvironmentVariable"], false, false, false, false, ["IS_AIRGAP", "true", "Detected no network connection, entering no api calls interval for {minutes} minutes"], false, 0, 0, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, false], ["NpmApiProxy", "Lim.FeaturesExtractor.NpmApiProxy", ["Lim.FeaturesExtractor.BasePackagesApiProxy"], ["Lim.FeaturesExtractor.INpmApiProxy"], "src/Lim.FeaturesExtractor/DependenciesCollector/PackagesApi/NpmApiProxy.cs", 14, 0, {"_packageInfoByNameCache": "???.IAsyncCache<(string Name, string Version), PackageInfo>", "_restClient": "???.IRestClient", "TimeoutInSeconds": "int", "_logger": "???.ILogger<BasePackagesApiProxy>", "_proxyConnector": "???.IProxyConnector"}, ["_packageInfoByNameCache", "_restClient", "_logger", "_proxyConnector"], ["NpmApiProxy", "GetLatestVersionAsync", "GetPackageInfoAsync", "BasePackagesApiProxy", "EnrichDependencyWithPackageInfo", "GetRestClient", "GetRequestAsync", "LogErrorResponse"], ["System", "System.Collections.Generic", "System.Linq", "System.Threading.Tasks", "Infrastructure.Dotnet.Common", "Lim.Common.DotNET", "Microsoft.Extensions.Logging", "Newtonsoft.Json.Linq", "RestSharp", "RestSharp.Extensions"], false, false, [], false, false, [], {"_packageInfoByNameCache": [], "_restClient": [], "TimeoutInSeconds": [], "_logger": [], "_proxyConnector": []}, [], 0, false, false, false, 9, 1.0, [], 558.0, 299, 0.0, 22.22222222222222, 2, 0, false, false, false, true, "public", false, ["Lim.FeaturesExtractor.BasePackagesApiProxy.GetRequestAsync", "Lim.FeaturesExtractor.BasePackagesApiProxy.GetRestClient"], ["_packageInfoByNameCache.GetOrAddAsync", "name.UrlEncode().ToLowerInvariant", "name.UrlEncode", "response.AsJObject", ".Value<string>", ".Trim()\n                        .Trim", ".Trim", "links.Children()\n                            .FirstOrDefault", "links.Children", ".Children()\n                            .FirstOrDefault", ".Children", "version.OrIfEmpty", "metadata[\"version\"]\n                                .Value<string>", "string.IsNullOrEmpty", "dependency.Versions.NullOrNone", "TimeSpan.FromSeconds", "restClient.ApplyProxyIfNeeded", "restClient.SafeExecuteTaskAsync", "LogErrorResponse", "(await versions.SelectParallelAsync(\n                    version =>\n                        GetPackageInfoAsync(name, version)\n                ))\n                .WhereNotNull()\n                .ToList", "(await versions.SelectParallelAsync(\n                    version =>\n                        GetPackageInfoAsync(name, version)\n                ))\n                .WhereNotNull", "versions.SelectParallelAsync", "GetPackageInfoAsync", "packageInfos.FirstOrDefault", "packageInfos\n                    .Where(packageInfo => packageInfo.Licenses != null)\n                    .SelectMany(packageInfo => packageInfo.Licenses)\n                    .Where(license => license != null && !license.IsEmpty)\n                    .Distinct()\n                    .ToList", "packageInfos\n                    .Where(packageInfo => packageInfo.Licenses != null)\n                    .SelectMany(packageInfo => packageInfo.Licenses)\n                    .Where(license => license != null && !license.IsEmpty)\n                    .Distinct", "packageInfos\n                    .Where(packageInfo => packageInfo.Licenses != null)\n                    .SelectMany(packageInfo => packageInfo.Licenses)\n                    .Where", "packageInfos\n                    .Where(packageInfo => packageInfo.Licenses != null)\n                    .SelectMany", "packageInfos\n                    .Where", "_logger.LogDebug", "response.FormatErrorResponse", "cacheBuilder", "TimeSpan.FromDays"], false, false, false, false, ["https://api.npms.io", "npm", "collected", "metadata", "license", "links", "homepage", "version"], false, 0, 0, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, false], ["NuGetApiProxy", "Lim.FeaturesExtractor.NuGetApiProxy", ["Lim.FeaturesExtractor.BasePackagesApiProxy"], ["Lim.FeaturesExtractor.INuGetApiProxy"], "src/Lim.FeaturesExtractor/DependenciesCollector/PackagesApi/NuGetApiProxy.cs", 11, 0, {"_latestVersionByNameCache": "???.IAsyncCache<string, string>", "_nuspecParser": "Lim.FeaturesExtractor.INuspecParser", "_packageInfoByNameAndVersionCache": "???.IAsyncCache<(string Name, string Version), PackageInfo>", "_restClient": "???.IRestClient", "TimeoutInSeconds": "int", "_logger": "???.ILogger<BasePackagesApiProxy>", "_proxyConnector": "???.IProxyConnector"}, ["_latestVersionByNameCache", "_nuspecParser", "_packageInfoByNameAndVersionCache", "_restClient", "_logger", "_proxyConnector"], ["NuGetApiProxy", "GetLatestVersionAsync", "GetPackageInfoAsync", "BasePackagesApiProxy", "EnrichDependencyWithPackageInfo", "GetRestClient", "GetRequestAsync", "LogErrorResponse"], ["System", "System.Linq", "System.Threading.Tasks", "Infrastructure.Dotnet.Common", "Microsoft.Extensions.Logging", "RestSharp", "RestSharp.Extensions"], false, false, [], false, false, [], {"_latestVersionByNameCache": [], "_nuspecParser": [], "_packageInfoByNameAndVersionCache": [], "_restClient": [], "TimeoutInSeconds": [], "_logger": [], "_proxyConnector": []}, [], 0, false, false, false, 9, 1.0, [], 547.6666666666666, 350, 0.0, 22.22222222222222, 2, 0, false, false, false, true, "public", false, ["Lim.FeaturesExtractor.BasePackagesApiProxy.GetRequestAsync", "Lim.FeaturesExtractor.BasePackagesApiProxy.GetRestClient"], ["_latestVersionByNameCache.GetOrAddAsync", "name.UrlEncode().ToLowerInvariant", "name.UrlEncode", "response.AsJObject", "json[\"versions\"]\n                        .LastOrDefault", ".ToString", "_packageInfoByNameAndVersionCache.GetOrAddAsync", "Version.TryParse", "versionObject.ToThreeFieldString", "name.ToLowerInvariant", "version.ToLowerInvariant", "_restClient.SafeExecuteTaskAsync", "LogErrorResponse", "_nuspecParser.GetInfoFromText", "dependency.Versions.NullOrNone", "string.IsNullOrEmpty", "TimeSpan.FromSeconds", "restClient.ApplyProxyIfNeeded", "restClient.SafeExecuteTaskAsync", "(await versions.SelectParallelAsync(\n                    version =>\n                        GetPackageInfoAsync(name, version)\n                ))\n                .WhereNotNull()\n                .ToList", "(await versions.SelectParallelAsync(\n                    version =>\n                        GetPackageInfoAsync(name, version)\n                ))\n                .WhereNotNull", "versions.SelectParallelAsync", "GetPackageInfoAsync", "packageInfos.FirstOrDefault", "packageInfos\n                    .Where(packageInfo => packageInfo.Licenses != null)\n                    .SelectMany(packageInfo => packageInfo.Licenses)\n                    .Where(license => license != null && !license.IsEmpty)\n                    .Distinct()\n                    .ToList", "packageInfos\n                    .Where(packageInfo => packageInfo.Licenses != null)\n                    .SelectMany(packageInfo => packageInfo.Licenses)\n                    .Where(license => license != null && !license.IsEmpty)\n                    .Distinct", "packageInfos\n                    .Where(packageInfo => packageInfo.Licenses != null)\n                    .SelectMany(packageInfo => packageInfo.Licenses)\n                    .Where", "packageInfos\n                    .Where(packageInfo => packageInfo.Licenses != null)\n                    .SelectMany", "packageInfos\n                    .Where", "_logger.LogDebug", "response.FormatErrorResponse", "latestVersionCacheBuilder", "TimeSpan.FromDays", "packageInfoCacheBuilder"], false, false, false, false, ["https://api.nuget.org", "NuGet", "versions"], false, 0, 0, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, false], ["PipApiProxy", "Lim.FeaturesExtractor.PipApiProxy", ["Lim.FeaturesExtractor.BasePackagesApiProxy"], ["Lim.FeaturesExtractor.IPipApiProxy"], "src/Lim.FeaturesExtractor/DependenciesCollector/PackagesApi/PipApiProxy.cs", 14, 0, {"_packageInfoByNameAndVersionCache": "???.IAsyncCache<(string Name, string Version), PackageInfo>", "_restClient": "???.IRestClient", "TimeoutInSeconds": "int", "_logger": "???.ILogger<BasePackagesApiProxy>", "_proxyConnector": "???.IProxyConnector"}, ["_packageInfoByNameAndVersionCache", "_restClient", "_logger", "_proxyConnector"], ["PipApiProxy", "GetLatestVersionAsync", "GetPackageInfoAsync", "BasePackagesApiProxy", "EnrichDependencyWithPackageInfo", "GetRestClient", "GetRequestAsync", "LogErrorResponse"], ["System", "System.Collections.Generic", "System.Linq", "System.Threading.Tasks", "Infrastructure.Dotnet.Common", "Lim.Common.DotNET", "Microsoft.Extensions.Logging", "Newtonsoft.Json.Linq", "RestSharp", "RestSharp.Extensions"], false, false, [], false, false, [], {"_packageInfoByNameAndVersionCache": [], "_restClient": [], "TimeoutInSeconds": [], "_logger": [], "_proxyConnector": []}, [], 0, false, false, false, 9, 1.0, [], 599.7777777777778, 299, 0.0, 22.22222222222222, 2, 0, false, false, false, true, "public", false, ["Lim.FeaturesExtractor.BasePackagesApiProxy.GetRequestAsync", "Lim.FeaturesExtractor.BasePackagesApiProxy.GetRestClient"], ["_packageInfoByNameAndVersionCache.GetOrAddAsync", "name.UrlEncode().ToLowerInvariant", "name.UrlEncode", "response.ContentType.Contains", "response.AsJObject", ".Value<string>", ".Trim()\n                        .Trim", ".Trim", "string.IsNullOrEmpty", ".Select(token => token.Value<string>())\n                            .FirstOrDefault", ".Select", "token.Value<string>", "classifier.StartsWith", ".Split(\"::\")\n                            .Last()\n                            .Trim", ".Split(\"::\")\n                            .Last", ".Split", ".Children<JProperty>()\n                            .LastOrDefault", ".Children<JProperty>", "dependency.Versions.NullOrNone", "TimeSpan.FromSeconds", "restClient.ApplyProxyIfNeeded", "restClient.SafeExecuteTaskAsync", "LogErrorResponse", "(await versions.SelectParallelAsync(\n                    version =>\n                        GetPackageInfoAsync(name, version)\n                ))\n                .WhereNotNull()\n                .ToList", "(await versions.SelectParallelAsync(\n                    version =>\n                        GetPackageInfoAsync(name, version)\n                ))\n                .WhereNotNull", "versions.SelectParallelAsync", "GetPackageInfoAsync", "packageInfos.FirstOrDefault", "packageInfos\n                    .Where(packageInfo => packageInfo.Licenses != null)\n                    .SelectMany(packageInfo => packageInfo.Licenses)\n                    .Where(license => license != null && !license.IsEmpty)\n                    .Distinct()\n                    .ToList", "packageInfos\n                    .Where(packageInfo => packageInfo.Licenses != null)\n                    .SelectMany(packageInfo => packageInfo.Licenses)\n                    .Where(license => license != null && !license.IsEmpty)\n                    .Distinct", "packageInfos\n                    .Where(packageInfo => packageInfo.Licenses != null)\n                    .SelectMany(packageInfo => packageInfo.Licenses)\n                    .Where", "packageInfos\n                    .Where(packageInfo => packageInfo.Licenses != null)\n                    .SelectMany", "packageInfos\n                    .Where", "_logger.LogDebug", "response.FormatErrorResponse", "cacheBuilder", "TimeSpan.FromDays"], false, false, false, false, ["https://pypi.python.org", "pip", "json", "info", "license", "classifiers", "License", "::", "home_page", "releases"], false, 0, 0, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, false], ["DllInspector", "Lim.FeaturesExtractor.DllInspector", [], ["Lim.FeaturesExtractor.IDllInspector"], "src/Lim.FeaturesExtractor/DependenciesCollector/Parsers/DllInspector.cs", 12, 0, {"_asyncProcessExecutor": "???.IAsyncProcessExecutor", "_logger": "???.ILogger<DllInspector>"}, ["_asyncProcessExecutor", "_logger"], ["DllInspector", "GetDllInfoAsync", "TryGetDllInfoAsync"], ["System", "System.Collections.Generic", "System.IO", "System.Linq", "System.Threading.Tasks", "Infrastructure.Dotnet.Common", "Microsoft.CodeAnalysis", "Microsoft.Extensions.Logging"], false, false, [], false, false, [], {"_asyncProcessExecutor": [], "_logger": []}, [], 0, false, false, false, 3, 1.0, [], 888.3333333333334, 775, 0.0, 66.66666666666667, 1, 0, false, false, false, true, "public", false, [], ["_logger.LogInformation", "string.IsNullOrEmpty", "Path.GetFileName(filePath)\n                        .RemoveAllIgnoreCase", "Path.GetFileName", "AssemblyMetadata.CreateFromFile", "metadata.GetModules()\n                    .FirstOrDefault", "metadata.GetModules", "module.GetMetadataReader", "metadataReader.GetAssemblyDefinition", "metadataReader.GetString", "assemblyDefinition.Version.ToString", "_asyncProcessExecutor.RunAsync", "output.Select(row => row.Split('\\t'))\n                    .Where(split => split.Length == 2)\n                    .ToDictionary", "output.Select(row => row.Split('\\t'))\n                    .Where", "output.Select", "row.Split", "valuesByTags.GetValueOrDefault", ".RemoveAllIgnoreCase", "valuesByTags.GetWithRetryKeys"], false, false, false, false, ["Failed to inspect dll at '{path}'", ".dll", "/", "exiftool", "-t", "Original File Name", "Assembly Version", "Product Version Number", "Product Version", "File Version Number", "File Version"], false, 0, 0, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, false], ["NuspecParser", "Lim.FeaturesExtractor.NuspecParser", [], ["Lim.FeaturesExtractor.INuspecParser"], "src/Lim.FeaturesExtractor/DependenciesCollector/Parsers/NuspecParser.cs", 10, 0, {"_logger": "???.ILogger<NuspecParser>"}, ["_logger"], ["NuspecParser", "GetInfoFromText", "GetInfoFromXml"], ["System", "System.Collections.Generic", "System.Xml.Linq", "Infrastructure.Dotnet.Common", "Lim.Common.DotNET", "Microsoft.Extensions.Logging"], false, false, [], false, false, [], {"_logger": []}, [], 0, false, false, false, 3, 1.0, [], 320.0, 425, 33.333333333333336, 66.66666666666667, 1, 0, false, false, false, false, "public", false, [], ["XElement.Parse", "text.RemoveBomIfPresent", "_logger.LogDebug", "root.GetSubNodeValue", "UrlUtils.IsValidUrl"], false, false, false, false, ["Failed to parse metadata of nuspec content", "licenseUrl", "id", "version", "projectUrl"], false, 0, 0, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, false], ["PomParser", "Lim.FeaturesExtractor.PomParser", [], ["Lim.FeaturesExtractor.IPomParser"], "src/Lim.FeaturesExtractor/DependenciesCollector/Parsers/PomParser.cs", 11, 0, {"_logger": "???.ILogger<PomParser>"}, ["_logger"], ["PomParser", "GetDependenciesFromText", "GetMetadataFromText", "GetMetadataFromXml", "GetDependenciesFromXml", "GetProperties", "ModuleName", "ParseDependency"], ["System", "System.Collections.Generic", "System.Linq", "System.Xml.Linq", "Infrastructure.Dotnet.Common", "Lim.Common.DotNET", "Microsoft.Extensions.Logging"], false, false, [], false, false, [], {"_logger": []}, [], 0, false, false, false, 8, 1.0, [], 571.0, 484, 62.5, 37.5, 1, 0, false, false, false, false, "public", false, [], ["XElement.Parse", "text.RemoveBomIfPresent", "_logger.LogDebug", "Array.Empty<Dependency>", "root.GetSubNodes(\"parent\")\n                .FirstOrDefault", "root.GetSubNodes", "parentNode.GetSubNodeValue", "licenseNode.GetSubNodeValue", "UrlUtils.IsValidUrl", "licenseName.Trim()\n                        .Trim", "licenseName.Trim", "pomMetadata.Licenses.Add", "root.GetChild", "root.GetSubNodes(\"dependency\")\n                .Select(\n                    dependency => ParseDependency(\n                        dependency,\n                        properties,\n                        dependencyType\n                    )\n                )\n                .ToList", "root.GetSubNodes(\"dependency\")\n                .Select", "ParseDependency", "dependencies.Add", "root.GetSubNodes(\"properties\")\n                .FirstOrDefault", "properties.Descendants", "dependency.GetSubNodeValue", "string.IsNullOrEmpty", "version.StartsWith", "version.Split", "properties.GetValueOrDefault", "ModuleName"], false, false, false, false, ["Failed to parse text for dependency of type {type}", "Failed to parse metadata of pom content", "parent", "groupId", "artifactId", "version", "license", "name", "url", "dependency", "properties", "$"], false, 0, 0, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, false], ["PyPiDependenciesCollector", "Lim.FeaturesExtractor.PyPiDependenciesCollector", ["Lim.FeaturesExtractor.DependenciesCollectorBase"], [], "src/Lim.FeaturesExtractor/DependenciesCollector/Python/PyPiDependenciesCollector.cs", 11, 0, {"_pipApiProxy": "Lim.FeaturesExtractor.IPipApiProxy", "_dependenciesCache": "Lim.FeaturesExtractor.IDependenciesCache", "_licenseParserProxy": "Lim.FeaturesExtractor.ILicenseParserProxy", "Logger": "???.ILogger<DependenciesCollectorBase>"}, ["_pipApiProxy", "_dependenciesCache", "_licenseParserProxy", "Logger", "RelevantLanguages"], ["PyPiDependenciesCollector", "RelevantLanguages", "IsRelevantFile", "ParseAsync", "SimpleDependency", "EnrichDependencyAsync", "DependenciesCollectorBase", "ProcessFileAsync", "GetAndEnrichDependencies", "MergeDependencies", "EnrichAndResolveLicensesForDependencyAsync", "ResolveLicensesAsync", "ResolveLicense", "InitAsync"], ["System", "System.Collections.Generic", "System.Linq", "System.Threading.Tasks", "Infrastructure.Dotnet.Common", "Lim.Common.DotNET", "Microsoft.Extensions.Logging"], false, false, [], false, false, [], {"_pipApiProxy": [], "_dependenciesCache": [], "_licenseParserProxy": [], "Logger": []}, [], 1, false, false, false, 14, 0.9333333333333333, [], 590.8, 191, 13.333333333333334, 20.0, 2, 0, false, false, false, true, "public", false, ["Lim.FeaturesExtractor.IApiProxy.EnrichDependencyWithPackageInfo", "Lim.FeaturesExtractor.IDependenciesCache.GetOrAddByFileShaAsync", "Lim.FeaturesExtractor.ILicenseParserProxy.ResolveLicenseFromHomePageAsync", "Lim.FeaturesExtractor.ILicenseParserProxy.ResolveLicenseFromNameAsync", "Lim.FeaturesExtractor.ILicenseParserProxy.ResolveLicenseFromUrlAsync"], ["fileName.Contains", "fileName.EndsWith", "fileContent.Where", "string.IsNullOrEmpty", "line.Contains", "dependencies.Add", "line.StartsWith", "line.RemoveAll(\"-e \")\n                        .Split", "line.RemoveAll", "split[0]\n                            .Split", "Task.FromResult<IReadOnlyCollection<Dependency>>", "line.Split", "dependency.Versions.Add", "split[1]\n                        .Split(\",\")[0]\n                        .Split", "split[1]\n                        .Split", "RelevantLanguages.Intersects", "Path.GetRelativePath", "(await _dependenciesCache.GetOrAddByFileShaAsync(\n                    fileSha,\n                    async () =>\n                        await GetAndEnrichDependencies(\n                            filePath,\n                            fileSha,\n                            fileContentLazy,\n                            relativeFilePath,\n                            cancellationToken\n                        )\n                )).ToList", "dependencies.NullOrNone", "dependencies.Where", "commitProperties.DependenciesByName.AddOrUpdate", "(await ParseAsync(\n                    filePath,\n                    fileSha,\n                    fileContentLazy.Value,\n                    new Lazy<string>(() => fileContentLazy.Value.JoinToString(Environment.NewLine))\n                ))\n                .Select(\n                    dependency =>\n                    {\n                        dependency.CodeReference ??= new CodeReference(\n                            relativeFilePath,\n                            0,\n                            0\n                        );\n                        return dependency;\n                    }\n                )\n                .GroupBy(dependency => dependency.Name)\n                .Select(\n                    dependenciesToMerge =>\n                        MergeDependencies(dependenciesToMerge, relativeFilePath)\n                )\n                .ToList", "(await ParseAsync(\n                    filePath,\n                    fileSha,\n                    fileContentLazy.Value,\n                    new Lazy<string>(() => fileContentLazy.Value.JoinToString(Environment.NewLine))\n                ))\n                .Select(\n                    dependency =>\n                    {\n                        dependency.CodeReference ??= new CodeReference(\n                            relativeFilePath,\n                            0,\n                            0\n                        );\n                        return dependency;\n                    }\n                )\n                .GroupBy(dependency => dependency.Name)\n                .Select", "(await ParseAsync(\n                    filePath,\n                    fileSha,\n                    fileContentLazy.Value,\n                    new Lazy<string>(() => fileContentLazy.Value.JoinToString(Environment.NewLine))\n                ))\n                .Select(\n                    dependency =>\n                    {\n                        dependency.CodeReference ??= new CodeReference(\n                            relativeFilePath,\n                            0,\n                            0\n                        );\n                        return dependency;\n                    }\n                )\n                .GroupBy", "(await ParseAsync(\n                    filePath,\n                    fileSha,\n                    fileContentLazy.Value,\n                    new Lazy<string>(() => fileContentLazy.Value.JoinToString(Environment.NewLine))\n                ))\n                .Select", "fileContentLazy.Value.JoinToString", "MergeDependencies", "dependencies.ForEachAsync", "dependencies.Aggregate", "first.HomePage.OrIfEmpty", "first.Versions.Union", "first.Licenses.Union", "dependency.HomePage.NullOrNone", "homePageLicenses.NullOrNone", "dependency.Licenses.AddRange", "dependency.Licenses.NullOrNone", "dependency.Licenses.SelectManyParallelAsync", "Array.Empty<string>", "resolvedNames.None", "license.Url.Split(\"/\")\n                            .Last", "license.Url.Split", "_licenseParserProxy.ResolveLicenseFromNameAsync", "license.Url.RemoveAll(\n                                \"http://\",\n                                \"https://\",\n                                \"www.\"\n                            )\n                            .Split(\"/\")\n                            .First", "license.Url.RemoveAll(\n                                \"http://\",\n                                \"https://\",\n                                \"www.\"\n                            )\n                            .Split", "license.Url.RemoveAll", "resolvedNames.First", "resolvedNames.Select", "license.Clone"], false, false, false, false, ["req", ".txt", "==", "~=", "!=", "<=", ">=", "<", ">", "-e ", "#egg=", "+", ",", " "], false, 1, 0, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, false], ["GemfileDependenciesCollector", "Lim.FeaturesExtractor.GemfileDependenciesCollector", ["Lim.FeaturesExtractor.DependenciesCollectorBase"], [], "src/Lim.FeaturesExtractor/DependenciesCollector/Ruby/GemfileDependenciesCollector.cs", 11, 0, {"Quotes": "System.Collections.Generic.IReadOnlyCollection<string>", "VersionOperators": "System.Collections.Generic.IReadOnlyCollection<string>", "_gemApiProxy": "Lim.FeaturesExtractor.IGemApiProxy", "_dependenciesCache": "Lim.FeaturesExtractor.IDependenciesCache", "_licenseParserProxy": "Lim.FeaturesExtractor.ILicenseParserProxy", "Logger": "???.ILogger<DependenciesCollectorBase>"}, ["_gemApiProxy", "_dependenciesCache", "_licenseParserProxy", "Logger", "RelevantLanguages"], ["GemfileDependenciesCollector", "RelevantLanguages", "IsRelevantFile", "ExtractSecondOperand", "ParseAsync", "GetCustomHomePage", "EnrichDependencyAsync", "DependenciesCollectorBase", "ProcessFileAsync", "GetAndEnrichDependencies", "MergeDependencies", "EnrichAndResolveLicensesForDependencyAsync", "ResolveLicensesAsync", "ResolveLicense", "InitAsync"], ["System", "System.Collections.Generic", "System.Linq", "System.Threading.Tasks", "Infrastructure.Dotnet.Common", "Lim.Common.DotNET", "Microsoft.Extensions.Logging"], false, false, [], false, false, [], {"Quotes": [], "VersionOperators": [], "_gemApiProxy": [], "_dependenciesCache": [], "_licenseParserProxy": [], "Logger": []}, [], 1, false, false, false, 15, 0.9375, [], 604.1875, 181, 6.25, 18.75, 2, 0, false, false, false, true, "public", false, ["Lim.FeaturesExtractor.IApiProxy.EnrichDependencyWithPackageInfo", "Lim.FeaturesExtractor.IDependenciesCache.GetOrAddByFileShaAsync", "Lim.FeaturesExtractor.ILicenseParserProxy.ResolveLicenseFromHomePageAsync", "Lim.FeaturesExtractor.ILicenseParserProxy.ResolveLicenseFromNameAsync", "Lim.FeaturesExtractor.ILicenseParserProxy.ResolveLicenseFromUrlAsync"], ["fileName.Contains", "expression.Split(new[] {\"=>\", \" \"}, StringSplitOptions.RemoveEmptyEntries)\n                .Last()\n                .Trim()\n                .RemoveAll", "expression.Split(new[] {\"=>\", \" \"}, StringSplitOptions.RemoveEmptyEntries)\n                .Last()\n                .Trim", "expression.Split(new[] {\"=>\", \" \"}, StringSplitOptions.RemoveEmptyEntries)\n                .Last", "expression.Split", "fileContent.Where", "string.IsNullOrEmpty", "line.Trim()\n                    .StartsWith", "line.Trim", "line.RemoveAll(\"gem \")\n                    .Trim()\n                    .Split", "line.RemoveAll(\"gem \")\n                    .Trim", "line.RemoveAll", "split[0]\n                        .RemoveAll", "split[1]\n                        .Contains", "split[1]\n                            .Contains", "split[2]\n                                .Contains", "dependency.Versions.Add", "ExtractSecondOperand", "split[2]\n                            .Trim()\n                            .StartsWith", "split[2]\n                            .Trim", "split[1]\n                                .Trim()\n                                .RemoveAll", "split[1]\n                                .Trim", "Quotes.Union", "GetCustomHomePage", "dependencies.Add", "Task.FromResult<IReadOnlyCollection<Dependency>>", "split[index]\n                    .ContainsAny", "ExtractSecondOperand(split[index])\n                        .RemoveAll", "UrlUtils.IsValidUrl", "RelevantLanguages.Intersects", "Path.GetRelativePath", "(await _dependenciesCache.GetOrAddByFileShaAsync(\n                    fileSha,\n                    async () =>\n                        await GetAndEnrichDependencies(\n                            filePath,\n                            fileSha,\n                            fileContentLazy,\n                            relativeFilePath,\n                            cancellationToken\n                        )\n                )).ToList", "dependencies.NullOrNone", "dependencies.Where", "commitProperties.DependenciesByName.AddOrUpdate", "(await ParseAsync(\n                    filePath,\n                    fileSha,\n                    fileContentLazy.Value,\n                    new Lazy<string>(() => fileContentLazy.Value.JoinToString(Environment.NewLine))\n                ))\n                .Select(\n                    dependency =>\n                    {\n                        dependency.CodeReference ??= new CodeReference(\n                            relativeFilePath,\n                            0,\n                            0\n                        );\n                        return dependency;\n                    }\n                )\n                .GroupBy(dependency => dependency.Name)\n                .Select(\n                    dependenciesToMerge =>\n                        MergeDependencies(dependenciesToMerge, relativeFilePath)\n                )\n                .ToList", "(await ParseAsync(\n                    filePath,\n                    fileSha,\n                    fileContentLazy.Value,\n                    new Lazy<string>(() => fileContentLazy.Value.JoinToString(Environment.NewLine))\n                ))\n                .Select(\n                    dependency =>\n                    {\n                        dependency.CodeReference ??= new CodeReference(\n                            relativeFilePath,\n                            0,\n                            0\n                        );\n                        return dependency;\n                    }\n                )\n                .GroupBy(dependency => dependency.Name)\n                .Select", "(await ParseAsync(\n                    filePath,\n                    fileSha,\n                    fileContentLazy.Value,\n                    new Lazy<string>(() => fileContentLazy.Value.JoinToString(Environment.NewLine))\n                ))\n                .Select(\n                    dependency =>\n                    {\n                        dependency.CodeReference ??= new CodeReference(\n                            relativeFilePath,\n                            0,\n                            0\n                        );\n                        return dependency;\n                    }\n                )\n                .GroupBy", "(await ParseAsync(\n                    filePath,\n                    fileSha,\n                    fileContentLazy.Value,\n                    new Lazy<string>(() => fileContentLazy.Value.JoinToString(Environment.NewLine))\n                ))\n                .Select", "fileContentLazy.Value.JoinToString", "MergeDependencies", "dependencies.ForEachAsync", "dependencies.Aggregate", "first.HomePage.OrIfEmpty", "first.Versions.Union", "first.Licenses.Union", "dependency.HomePage.NullOrNone", "homePageLicenses.NullOrNone", "dependency.Licenses.AddRange", "dependency.Licenses.NullOrNone", "dependency.Licenses.SelectManyParallelAsync", "Array.Empty<string>", "resolvedNames.None", "license.Url.Split(\"/\")\n                            .Last", "license.Url.Split", "_licenseParserProxy.ResolveLicenseFromNameAsync", "license.Url.RemoveAll(\n                                \"http://\",\n                                \"https://\",\n                                \"www.\"\n                            )\n                            .Split(\"/\")\n                            .First", "license.Url.RemoveAll(\n                                \"http://\",\n                                \"https://\",\n                                \"www.\"\n                            )\n                            .Split", "license.Url.RemoveAll", "resolvedNames.First", "resolvedNames.Select", "license.Clone"], false, false, false, false, ["'", "\"", ">=", "<=", "<", ">", "~>", "~<", "!=", "gemfile", "lock", "=>", " ", "gem ", "git", "branch", ":branch", "source", ".git", "git@"], false, 1, 0, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, false], ["CommitProperties", "Lim.FeaturesExtractor.CommitProperties", [], ["Lim.Common.DotNET.ICommitProperties"], "src/Lim.FeaturesExtractor/Entities/CommitProperties.cs", 8, 0, {}, ["DependenciesByName", "CommitSha", "Dependencies", "ExposedSecrets", "ComponentsNonCodeIndications", "Modules", "SensitiveFiles"], ["CommitProperties", "DependenciesByName", "CommitSha", "Dependencies", "ExposedSecrets", "ComponentsNonCodeIndications", "Modules", "SensitiveFiles"], ["System.Collections.Concurrent", "System.Collections.Generic", "System.Linq", "Lim.Common.DotNET"], false, false, [], false, false, [], {}, [], 7, false, false, false, 1, 0.125, [], 5.75, 0, 0.0, 100.0, 1, 0, false, false, false, false, "public", false, [], ["DependenciesByName.Values.ToList"], false, false, false, false, [], false, 7, 2, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, false], ["DllInfo", "Lim.FeaturesExtractor.DllInfo", [], [], "src/Lim.FeaturesExtractor/Entities/DllInfo.cs", 3, 0, {}, ["ModuleName", "AssemblyVersion"], ["ModuleName", "AssemblyVersion"], [], false, false, [], false, false, [], {}, [], 2, false, false, false, 0, 0.0, [], 0.0, 0, 0.0, 100.0, 0, 0, false, false, false, false, "public", false, [], [], false, false, false, false, [], false, 2, 2, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, false], ["FeatureExtractorProxyConfig", "Lim.FeaturesExtractor.FeatureExtractorProxyConfig", [], [], "src/Lim.FeaturesExtractor/Entities/FeatureExtractorProxyConfig.cs", 5, 0, {}, ["Url", "Timeout"], ["Url", "Timeout", "Enabled"], ["System"], false, false, [], false, false, [], {}, [], 3, false, false, false, 0, 0.0, [], 0.0, 0, 0.0, 100.0, 0, 0, false, false, false, false, "public", false, [], [], false, false, false, false, [], false, 3, 3, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, false], ["MavenArtifactId", "Lim.FeaturesExtractor.MavenArtifactId", [], [], "src/Lim.FeaturesExtractor/Entities/MavenArtifactId.cs", 3, 0, {}, ["GroupId", "ArtifactId", "Version"], ["GroupId", "ArtifactId", "Version", "AllPresent", "ToString", "Equals", "GetHashCode"], [], false, false, [], false, false, [], {}, [], 4, true, true, true, 0, 0.0, [], 64.14285714285714, 0, 0.0, 100.0, 0, 0, false, false, false, false, "public", false, [], ["string.IsNullOrEmpty", "string.Equals", "(GroupId, ArtifactId, Version).GetHashCode"], false, false, false, false, [], false, 4, 3, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, false], ["PackageInfo", "Lim.FeaturesExtractor.PackageInfo", [], [], "src/Lim.FeaturesExtractor/Entities/PackageInfo.cs", 6, 0, {}, ["Name", "Version", "Licenses", "HomePage"], ["Name", "Version", "Licenses", "HomePage"], ["System.Collections.Generic", "Lim.Common.DotNET"], false, false, [], false, false, [], {}, [], 4, false, false, false, 0, 0.0, [], 0.0, 0, 0.0, 100.0, 0, 0, false, false, false, false, "public", false, [], [], false, false, false, false, [], false, 4, 4, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, false], ["PomMetadata", "Lim.FeaturesExtractor.PomMetadata", [], [], "src/Lim.FeaturesExtractor/Entities/PomMetadata.cs", 6, 0, {}, ["Id", "ParentId", "Licenses", "HomePage"], ["Id", "ParentId", "Licenses", "HomePage", "GetPackageInfo"], ["System.Collections.Generic", "Lim.Common.DotNET"], false, false, [], false, false, [], {}, [], 4, false, false, false, 1, 0.2, [], 41.6, 0, 0.0, 100.0, 0, 0, false, false, false, false, "public", false, [], [], false, false, false, false, [], false, 4, 4, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, false], ["FeaturesExtractorLimMicroService", "Lim.FeaturesExtractor.FeaturesExtractorLimMicroService", ["Lim.Common.DotNET.LimMicroService"], [], "src/Lim.FeaturesExtractor/FeaturesExtractorLimMicroService.cs", 14, 0, {"_logMetrics": "bool"}, [], ["ConfigureServices", "BuildPipeline", "GetPipelineBuilder", "RunAsync", "ConfigureLogging", "DecorateWithMetricsLogging", "RegisterCommonServices"], ["System", "System.Collections.Generic", "System.IO", "System.Linq", "System.Threading.Tasks.Dataflow", "Infrastructure.Dotnet.Common", "Lim.Common.DotNET", "Microsoft.Extensions.Configuration", "Microsoft.Extensions.DependencyInjection", "Microsoft.Extensions.Logging"], false, false, [], false, false, [], {"_logMetrics": []}, [], 0, false, false, false, 7, 1.0, [], 2081.285714285714, 921, 57.142857142857146, 28.571428571428573, 0, 0, false, false, false, true, "public", false, ["Lim.Common.DotNET.MongoCredentials.FromConfiguration"], ["RegisterCommonServices", "services.AddSingleton<IDependenciesCache, DependenciesCache>", "services.AddSingleton<IProxyConnector, ProxyConnector>", "services.AddSingletonWithConstructorParams<ITarHelper, TarHelper>", "configuration.GetValueWithEnv<bool>", "services.AddHostedServiceWithConstructorParams<SnapshotConsumer>", "configuration.GetValue<int>", "configuration.GetValue<string>", "services.AddSingletonWithConstructorParams<ICodeParsing, CodeParsing>", "services.AddSingleton<IPredictionEnricher, PredictionEnricher>", "services.AddSingleton<IFeatureDeducer, FeatureDeducer>", "DecorateWithMetricsLogging<IFeatureDeducer>", "services.AddSingleton<IFeaturesStoring, FeaturesStoring>", "DecorateWithMetricsLogging<IFeaturesStoring>", "services.AddSingletonWithConstructorParams<ICodeFeaturesStorage, CodeFeaturesStorage>", "configuration.GetValueWithEnv", "TimeSpan.FromMinutes", "services.AddSingleton<ITerraformModulesStorage, TerraformModulesStorage>", "services.AddSingleton<ICustomAnnotationsCollector, CustomAnnotationsCollector>", "services.AddSingletonWithConstructorParams<IFrameworksRelatedRiskPrimitivesCollector, ValidationFrameworksRelatedRiskPrimitivesCollector>", "services.AddSingletonWithConstructorParams<IFrameworksRelatedRiskPrimitivesCollector, AuthorizationFrameworksRelatedRiskPrimitivesCollector>", "services.AddSingletonWithConstructorParams<IFrameworksRelatedRiskPrimitivesCollector, FrameworkUsageCollector>", "services.AddSingletonWithConstructorParams<IUsageDeducer, DataModelByDatabaseServiceUsageDeducer>", "services.AddSingletonWithConstructorParams<IUsageDeducer, DataModelByLocalityDeducer>", "services.AddSingletonWithConstructorParams<IUsageDeducer, ReturnedOrUsedByApiDeducer>", "services.AddSingleton<IRiskPrimitivesCollector, JavaFrameworkRelatedRiskCollector>", "services.AddSingleton<IRiskPrimitivesCollector, DataOfInterestInApisCollector>", "DecorateWithMetricsLogging<IRiskPrimitivesCollector>", "services.AddSingleton<IAssociationDeducer, AssociationDeducer>", "services.AddSingleton<Func<string, IPipelineExecutor>>", "services.AddSingleton<IExtractor, JavaFeaturesExtractor>", "services.AddSingleton<IExtractor, NodeFeaturesExtractor>", "services.AddSingleton<IExtractor, PropertiesExtractor>", "services.AddSingleton<IExtractor, TerraformExtractor>", "services.AddSingletonWithConstructorParams<IFeatureExtractorProxy, FeatureExtractorProxy>", "DecorateWithMetricsLogging<IFeatureExtractorProxy>", "services.AddSingletonWithConstructorParams<IFeaturePredictorProxy, FeaturePredictorProxy>", "DecorateWithMetricsLogging<IFeaturePredictorProxy>", "services.AddSingletonWithConstructorParams<ILicenseParserProxy, LicenseParserProxy>", "services.AddSingleton<IFileDownloader, FileDownloader>", "DecorateWithMetricsLogging<ITarHelper>", "services.AddSingleton<IPomParser, PomParser>", "services.AddSingleton<IDllInspector, DllInspector>", "services.AddSingleton<INuspecParser, NuspecParser>", "services.AddSingletonWithConstructorParams<IMavenApiProxy, MavenApiProxy>", "File.ReadLines(configuration.GetValue<string>(\"App:MavenContentService:PasscodeFilePath\"))\n                        .FirstOrDefault", "File.ReadLines", "services.Decorate<IMavenApiProxy, NetworkAwareMavenApiProxy>", "services.AddSingleton<INuGetApiProxy, NuGetApiProxy>", "services.Decorate<INuGetApiProxy, NetworkAwareNuGetApiProxy>", "services.AddSingleton<INpmApiProxy, NpmApiProxy>", "services.Decorate<INpmApiProxy, NetworkAwareNpmApiProxy>", "services.AddSingleton<IPipApiProxy, PipApiProxy>", "services.Decorate<IPipApiProxy, NetworkAwarePipApiProxy>", "services.AddSingleton<IGemApiProxy, GemApiProxy>", "services.Decorate<IGemApiProxy, NetworkAwareGemAPiProxy>", "services.AddSingleton<IPropertiesCollector, MavenDependenciesCollector>", "services.AddSingleton<IPropertiesCollector, GradleDependenciesCollector>", "services.AddSingleton<IPropertiesCollector, JarDependenciesCollector>", "services.AddSingleton<IPropertiesCollector, CsProjDependenciesCollector>", "services.AddSingleton<IPropertiesCollector, DllDependenciesCollector>", "services.AddSingleton<IPropertiesCollector, PackagesConfigDependenciesCollector>", "services.AddSingleton<IPropertiesCollector, ProjectJsonDependenciesCollector>", "services.AddSingleton<IPropertiesCollector, PackageJsonDependenciesCollector>", "services.AddSingleton<IPropertiesCollector, PyPiDependenciesCollector>", "services.AddSingleton<IPropertiesCollector, GemfileDependenciesCollector>", "services.AddSingleton<IPropertiesCollector, SecretsCollector>", "services.AddSingleton<IPropertiesCollector, InfrastructureTechnologiesCollector>", "services.AddSingleton<IPropertiesCollector, MavenModuleCollector>", "services.AddSingleton<IPropertiesCollector, GradleModuleCollector>", "services.AddSingleton<IPropertiesCollector, PackageJsonModuleCollector>", "services.AddSingleton<IPropertiesCollector, VaultUsageCollector>", "services.AddSingleton<IFileSecretsCollector, FileSecretsCollector>", "services.AddSingleton<IRepositoryModuleCollector, RepositoryModuleCollector>", "services.AddSingleton<IPropertiesCollector, FileHashCollector>", "services.AddSingleton<IPropertiesCollector, ApiClassifierCollector>", "services.AddSingleton<IApiClassificationStorage, ApiClassificationStorage>", "services.RegisterCacheBuilder<string, string>", "services.RegisterCacheBuilder<string, PomMetadata>", "services.RegisterCacheBuilder<(string, string), PackageInfo>", "services.RegisterCacheBuilder<(string, int), IReadOnlyCollection<string>>", "services.RegisterCacheBuilder<string, (IReadOnlyCollection<int>, IReadOnlyCollection<string>)>", "services.RegisterCacheBuilder<(string, CodeParsingTarget, CodeEntity), CodeFeatures>", "services.RegisterCollectionsCacheBuilder<string, Dependency>", "GetPipelineBuilder(serviceProvider, name)\n                .AddStep<CodeParsingInputBin, PredictionEnricherInputBin>(\n                    serviceProvider.GetRequiredService<ICodeParsing>()\n                        .ParseAsync\n                )\n                .AddStep(\n                    (inputBin, cancellationToken) => serviceProvider.GetRequiredService<IPredictionEnricher>()\n                        .EnrichAsync(inputBin, cancellationToken)\n                )\n                .AddStep(\n                    (inputBin, cancellationToken) => serviceProvider.GetRequiredService<IFeatureDeducer>()\n                        .DeduceAsync(inputBin, cancellationToken)\n                )\n                .AddLastStep(\n                    (inputBin, cancellationToken) => serviceProvider.GetRequiredService<IFeaturesStoring>()\n                        .StoreAsync(inputBin)\n                )\n                .Build", "GetPipelineBuilder(serviceProvider, name)\n                .AddStep<CodeParsingInputBin, PredictionEnricherInputBin>(\n                    serviceProvider.GetRequiredService<ICodeParsing>()\n                        .ParseAsync\n                )\n                .AddStep(\n                    (inputBin, cancellationToken) => serviceProvider.GetRequiredService<IPredictionEnricher>()\n                        .EnrichAsync(inputBin, cancellationToken)\n                )\n                .AddStep(\n                    (inputBin, cancellationToken) => serviceProvider.GetRequiredService<IFeatureDeducer>()\n                        .DeduceAsync(inputBin, cancellationToken)\n                )\n                .AddLastStep", "GetPipelineBuilder(serviceProvider, name)\n                .AddStep<CodeParsingInputBin, PredictionEnricherInputBin>(\n                    serviceProvider.GetRequiredService<ICodeParsing>()\n                        .ParseAsync\n                )\n                .AddStep(\n                    (inputBin, cancellationToken) => serviceProvider.GetRequiredService<IPredictionEnricher>()\n                        .EnrichAsync(inputBin, cancellationToken)\n                )\n                .AddStep", "GetPipelineBuilder(serviceProvider, name)\n                .AddStep<CodeParsingInputBin, PredictionEnricherInputBin>(\n                    serviceProvider.GetRequiredService<ICodeParsing>()\n                        .ParseAsync\n                )\n                .AddStep", "GetPipelineBuilder(serviceProvider, name)\n                .AddStep<CodeParsingInputBin, PredictionEnricherInputBin>", "serviceProvider.GetRequiredService<ICodeParsing>", "serviceProvider.GetRequiredService<IPredictionEnricher>()\n                        .EnrichAsync", "serviceProvider.GetRequiredService<IPredictionEnricher>", "serviceProvider.GetRequiredService<IFeatureDeducer>()\n                        .DeduceAsync", "serviceProvider.GetRequiredService<IFeatureDeducer>", "serviceProvider.GetRequiredService<IFeaturesStoring>()\n                        .StoreAsync", "serviceProvider.GetRequiredService<IFeaturesStoring>", "serviceProvider.GetRequiredService<IConfiguration>", "PipelineExecutor.Builder", "serviceProvider.GetRequiredService<ILogger<PipelineExecutor>>", "new HostBuilder()\n                .ConfigureHostConfiguration(configHost => configHost.AddEnvironmentVariables())\n                .ConfigureAppConfiguration(\n                    (hostContext, configApp) =>\n                        hostContext.HostingEnvironment.ApplicationName = name\n                )\n                .ConfigureAppConfiguration(\n                    (hostContext, configApp) =>\n                        configApp\n                            .AddAppSettings()\n                            .AddCommandLine(args)\n                )\n                .ConfigureServices(\n                    (hostContext, services) =>\n                    {\n                        var configuration = hostContext.Configuration;\n                        _logMetrics = configuration.GetValue<bool>(\"App:LogPerformanceCounters\");\n                        ConfigureServices(configuration, services);\n                    }\n                )\n                .ConfigureLogging(ConfigureLogging)\n                .Build()\n                .RunAsyncSafe", "new HostBuilder()\n                .ConfigureHostConfiguration(configHost => configHost.AddEnvironmentVariables())\n                .ConfigureAppConfiguration(\n                    (hostContext, configApp) =>\n                        hostContext.HostingEnvironment.ApplicationName = name\n                )\n                .ConfigureAppConfiguration(\n                    (hostContext, configApp) =>\n                        configApp\n                            .AddAppSettings()\n                            .AddCommandLine(args)\n                )\n                .ConfigureServices(\n                    (hostContext, services) =>\n                    {\n                        var configuration = hostContext.Configuration;\n                        _logMetrics = configuration.GetValue<bool>(\"App:LogPerformanceCounters\");\n                        ConfigureServices(configuration, services);\n                    }\n                )\n                .ConfigureLogging(ConfigureLogging)\n                .Build", "new HostBuilder()\n                .ConfigureHostConfiguration(configHost => configHost.AddEnvironmentVariables())\n                .ConfigureAppConfiguration(\n                    (hostContext, configApp) =>\n                        hostContext.HostingEnvironment.ApplicationName = name\n                )\n                .ConfigureAppConfiguration(\n                    (hostContext, configApp) =>\n                        configApp\n                            .AddAppSettings()\n                            .AddCommandLine(args)\n                )\n                .ConfigureServices(\n                    (hostContext, services) =>\n                    {\n                        var configuration = hostContext.Configuration;\n                        _logMetrics = configuration.GetValue<bool>(\"App:LogPerformanceCounters\");\n                        ConfigureServices(configuration, services);\n                    }\n                )\n                .ConfigureLogging", "new HostBuilder()\n                .ConfigureHostConfiguration(configHost => configHost.AddEnvironmentVariables())\n                .ConfigureAppConfiguration(\n                    (hostContext, configApp) =>\n                        hostContext.HostingEnvironment.ApplicationName = name\n                )\n                .ConfigureAppConfiguration(\n                    (hostContext, configApp) =>\n                        configApp\n                            .AddAppSettings()\n                            .AddCommandLine(args)\n                )\n                .ConfigureServices", "new HostBuilder()\n                .ConfigureHostConfiguration(configHost => configHost.AddEnvironmentVariables())\n                .ConfigureAppConfiguration(\n                    (hostContext, configApp) =>\n                        hostContext.HostingEnvironment.ApplicationName = name\n                )\n                .ConfigureAppConfiguration", "new HostBuilder()\n                .ConfigureHostConfiguration(configHost => configHost.AddEnvironmentVariables())\n                .ConfigureAppConfiguration", "new HostBuilder()\n                .ConfigureHostConfiguration", "configHost.AddEnvironmentVariables", "configApp\n                            .AddAppSettings()\n                            .AddCommandLine", "configApp\n                            .AddAppSettings", "configuration.GetValue<bool>", "configLogging.ClearProviders", "configLogging.AddConfiguration", "hostContext.Configuration.GetSection", "configLogging.AddFile", "hostContext.Configuration.GetSection(\"FileLoggingOptions\")\n                        .Bind", "configLogging.AddConsoleLogger", "services.DecorateWithMetricsLogging<T>", "services.RegisterServicesFromAssembly", "Assembly.Load", "services.AddSingleton", "services.AddSingletonWithConstructorParams<ICommitsStorage, CommitsStorage>", "services.AddSingleton<IConfigureUntrustedCertificatePolicy, AllowUntrustedCertificatePolicy>", "services.AddSingleton<IConfigureUntrustedCertificatePolicy, DefaultUntrustedCertificatePolicy>", "services.RegisterCacheBuilder<string, Developer>", "services.RegisterCacheBuilder<string, DeveloperIdentity>", "services.RegisterCacheBuilder<string, IReadOnlyCollection<Repository>>", "services.RegisterCacheBuilder<(Consumable, string), int>", "services.RegisterCacheBuilder<(string, CodeParsingTarget), string>", "services.AddBuilder<IBoundAsyncExecutor, BoundAsyncExecutor, ExecutionDataflowBlockOptions>"], false, false, false, false, ["App:LimitDiskIo", "App:SnapshotConsumer:ConcurrencyLevel", "App:SnapshotConsumer:CommitSnapshotsDirectory", "App:ExtractedFeaturesDirectory", "App:FeaturesStorage:StoredFeaturesDirectory", "App:FeaturesStorage:CacheSize", "App:FeaturesStorage:CacheTtlInMinutes", "App:JavaFrameworksFilePaths:InputValidation", "App:JavaFrameworksFilePaths:Authorization", "App:JavaFrameworksFilePaths:APiClient", "App:JavaFrameworksFilePaths:APiServer", "App:JavaFrameworksFilePaths:Cloud", "App:JavaFrameworksFilePaths:Db", "App:JavaFrameworksFilePaths:Kms", "App:JavaFrameworksFilePaths:Logging", "App:FeaturesExtractors:Lim.FeaturesExtractor.Java:Url", "App:FeaturesExtractors:Lim.FeaturesExtractor.Java:TimeoutInMinutes", "App:FeaturesExtractors:Lim.FeaturesExtractor.Node:Url", "App:FeaturesExtractors:Lim.FeaturesExtractor.Node:TimeoutInMinutes", "App:Lim.Predictor", "App:Lim.LicenseParser", "App:MavenContentService:Url", "App:MavenContentService:PasscodeFilePath", "App:Pipeline:BoundedCapacity", "App:Pipeline:MaxDegreeOfParallelism", "App:Pipeline:PlotDebugIntervalInMinutes"], false, 0, 0, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, false], ["CodeParsing", "Lim.FeaturesExtractor.CodeParsing", [], ["Lim.FeaturesExtractor.ICodeParsing"], "src/Lim.FeaturesExtractor/FeaturesSteps/CodeParsing/CodeParsing.cs", 8, 0, {"_featureExtractorProxy": "Lim.FeaturesExtractor.IFeatureExtractorProxy"}, ["_featureExtractorProxy"], ["CodeParsing", "ParseAsync", "CleanUpStaleOutputFiles"], ["System.Threading", "System.Threading.Tasks", "Infrastructure.Dotnet.Common", "JetBrains.Annotations"], false, false, ["UsedImplicitly"], false, false, [], {"_featureExtractorProxy": []}, [], 0, false, false, false, 3, 1.0, [], 263.0, 175, 33.333333333333336, 66.66666666666667, 1, 0, false, false, false, true, "public", false, ["Lim.FeaturesExtractor.IFeatureExtractorProxy.ExtractFeaturesAsync", "Lim.FeaturesExtractor.CodeParsing.CleanUpStaleOutputFiles"], ["fileSystem.DeleteDirectory", "fileSystem.CreateDirectoryIfNotExists"], false, false, false, false, [], false, 0, 0, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, false], ["CodeParsingInputBin", "Lim.FeaturesExtractor.CodeParsingInputBin", ["???.InputBin"], [], "src/Lim.FeaturesExtractor/FeaturesSteps/CodeParsing/CodeParsingInputBin.cs", 6, 0, {}, ["RepositorySnapshotTarPath", "CodeParsingTarget"], ["CodeParsingInputBin", "RepositorySnapshotTarPath", "CodeParsingTarget", "ToString"], ["Infrastructure.Dotnet.Common", "Lim.Common.DotNET"], false, false, [], false, false, [], {}, [], 2, false, true, false, 1, 0.25, [], 70.0, 64, 0.0, 100.0, 1, 0, false, false, false, false, "public", false, [], ["base.ToString", "nameof"], false, false, false, false, [], false, 2, 0, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, false], ["AssociationDeducer", "Lim.FeaturesExtractor.AssociationDeducer", [], ["Lim.FeaturesExtractor.IAssociationDeducer"], "src/Lim.FeaturesExtractor/FeaturesSteps/FeatureDeductions/AssociationDeducer.cs", 9, 0, {"_resolvedApiClassificationStorage": "Lim.Common.DotNET.IResolvedApiClassificationStorage"}, ["_resolvedApiClassificationStorage"], ["AssociationDeducer", "AssociateApiMethodsAsync", "ClassifyJavaApis", "ClassifyNodeApis", "ClassifyApis", "GetApiClassification", "GetClassificationForPath"], ["System.Collections.Generic", "System.Linq", "System.Threading.Tasks", "Infrastructure.Dotnet.Common", "Lim.Common.DotNET"], false, false, [], false, false, [], {"_resolvedApiClassificationStorage": []}, [], 0, false, false, false, 7, 1.0, [], 355.42857142857144, 402, 71.42857142857143, 28.571428571428573, 1, 0, false, false, false, true, "public", false, ["Lim.FeaturesExtractor.UrlMatchingUtils.MatchPatternToRoute"], ["_resolvedApiClassificationStorage.GetAllResolvedApiClassificationsSettingsAsync", "apiClassificationSettings.None", "methodFeatures.EntityIds.Where", "methodFeatures.GetFeature<bool>", "apiSnippets.EntityIds.Where", "apiSnippets.PredictedAsApiSnippet", "apis.GetFeature<string>", "apis.SetFeature", "string.IsNullOrEmpty", "apiClassificationSettings.Select(setting => GetClassificationForPath(setting, path))\n                .Aggregate", "apiClassificationSettings.Select", "classification.Urls.Any"], false, false, false, false, [], false, 0, 0, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, false], ["FeatureDeducer", "Lim.FeaturesExtractor.FeatureDeducer", [], ["Lim.FeaturesExtractor.IFeatureDeducer"], "src/Lim.FeaturesExtractor/FeaturesSteps/FeatureDeductions/FeatureDeducer.cs", 11, 0, {"_associationDeducer": "Lim.FeaturesExtractor.IAssociationDeducer", "_codeFeaturesStorage": "Lim.Common.DotNET.ICodeFeaturesStorage", "_fileSystem": "???.IFileSystem", "_riskPrimitivesCollectors": "System.Collections.Generic.IReadOnlyCollection<IRiskPrimitivesCollector>", "_usageDeducers": "System.Collections.Generic.IReadOnlyCollection<IUsageDeducer>"}, ["_associationDeducer", "_codeFeaturesStorage", "_fileSystem", "_riskPrimitivesCollectors", "_usageDeducers"], ["FeatureDeducer", "DeduceAsync"], ["System", "System.Collections.Generic", "System.Linq", "System.Threading", "System.Threading.Tasks", "Infrastructure.Dotnet.Common", "Lim.Common.DotNET"], false, false, [], false, false, [], {"_associationDeducer": [], "_codeFeaturesStorage": [], "_fileSystem": [], "_riskPrimitivesCollectors": [], "_usageDeducers": []}, [], 0, false, false, false, 2, 1.0, [], 1007.5, 1007, 0.0, 100.0, 1, 0, false, false, false, true, "public", false, ["Lim.FeaturesExtractor.IUsageDeducer.DeduceFromUsages", "Lim.FeaturesExtractor.IRiskPrimitivesCollector.CollectRiskPrimitives", "Lim.FeaturesExtractor.IAssociationDeducer.AssociateApiMethodsAsync"], ["EnumUtils.GetValues<CodeEntity>", "inputBin.CodeEntityToExtractedFeaturesPath.TryGetValue", "_codeFeaturesStorage.LoadAsync", "_codeFeaturesStorage.StoreAsync", "_fileSystem.DeleteFile", "usageDeducers.ToList", "riskPrimitivesCollectors.ToList"], false, false, false, false, [], false, 0, 0, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, false], ["FeatureDeductionsInputBin", "Lim.FeaturesExtractor.FeatureDeductionsInputBin", ["Lim.FeaturesExtractor.FeaturesStepInputBin"], [], "src/Lim.FeaturesExtractor/FeaturesSteps/FeatureDeductions/FeatureDeductionsInputBin.cs", 3, 0, {}, ["CodeEntityToExtractedFeaturesPath", "CodeParsingTarget"], ["FeatureDeductionsInputBin", "FeaturesStepInputBin", "CodeEntityToExtractedFeaturesPath", "CodeParsingTarget", "ToString"], [], false, false, [], false, false, [], {}, [], 2, false, true, false, 3, 0.5, [], 89.5, 87, 0.0, 66.66666666666667, 3, 0, false, false, false, false, "public", false, [], ["base.ToString", "nameof", "string.Join"], false, false, false, false, [], false, 2, 0, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, false], ["AuthorizationFrameworksRelatedRiskPrimitivesCollector", "Lim.FeaturesExtractor.AuthorizationFrameworksRelatedRiskPrimitivesCollector", ["Lim.FeaturesExtractor.FrameworksRelatedRiskPrimitivesCollector"], [], "src/Lim.FeaturesExtractor/FeaturesSteps/FeatureDeductions/FrameworkViolations/AuthorizationFrameworksRelatedRiskPrimitivesCollector.cs", 10, 0, {}, ["Frameworks"], ["AuthorizationFrameworksRelatedRiskPrimitivesCollector", "MarkAnyFramework", "AllMethodsOfClassAreValid", "CollectMethodViolations", "FrameworksRelatedRiskPrimitivesCollector", "Frameworks", "CollectRiskPrimitives", "AnyAnnotationIsUnderFramework"], ["System.Collections.Generic", "System.Linq", "Infrastructure.Dotnet.Common", "JetBrains.Annotations", "Lim.Common.DotNET", "Microsoft.Extensions.Logging"], false, false, ["UsedImplicitly"], false, false, [], {}, [], 1, false, false, false, 7, 0.875, [], 622.625, 318, 12.5, 37.5, 2, 0, false, false, false, false, "public", false, ["Lim.FeaturesExtractor.FrameworksRelatedRiskPrimitivesCollector.AnyAnnotationIsUnderFramework"], ["methodFeatures.SetFeature", "methodFeatures.GetFeature<HashSet<string>>", "classFeatures.GetFeature<HashSet<string>>", "methodFeatures.GetFeature<HashSet<string>>(methodId, MethodFeatureNames.Annotations)\n                .Select(\n                    annotationWithParameters => annotationWithParameters.Split(\":\")\n                        .First()\n                )\n                .ToHashSet", "methodFeatures.GetFeature<HashSet<string>>(methodId, MethodFeatureNames.Annotations)\n                .Select", "annotationWithParameters.Split(\":\")\n                        .First", "annotationWithParameters.Split", "methodFeatures.GetFeature<Dictionary<string, HashSet<string>>>(methodId, MethodFeatureNames.ParameterNameToAnnotations)\n                .Values.Flatten()\n                .ToHashSet", "methodFeatures.GetFeature<Dictionary<string, HashSet<string>>>(methodId, MethodFeatureNames.ParameterNameToAnnotations)\n                .Values.Flatten", "methodFeatures.GetFeature<Dictionary<string, HashSet<string>>>", "AnyAnnotationIsUnderFramework", "missingAuthorizationFrameworks.Add", "classFeatures.ShouldIgnore", "methodIdsByClassId.GetValueOrDefault", ".Where(id => methodFeatures.GetFeature<bool>(id, MethodFeatureNames.PredictApi))\n                    .ToList", ".Where", "methodFeatures.GetFeature<bool>", "customAnnotationsForFrameworkType", "javaFramework.IdentifiersByAnnotations.Concat", "annotations\n                    .Intersect(inputValidationAnnotations)\n                    .ToList", "annotations\n                    .Intersect", "possibleAnnotations.None", "possibleAnnotations.Append(\"*\")\n                    .Select", "possibleAnnotations.Append", "importsList.Intersects"], false, false, false, false, [":"], false, 1, 0, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, false], ["FrameworksRelatedRiskPrimitivesCollector", "Lim.FeaturesExtractor.FrameworksRelatedRiskPrimitivesCollector", [], ["Lim.FeaturesExtractor.IFrameworksRelatedRiskPrimitivesCollector"], "src/Lim.FeaturesExtractor/FeaturesSteps/FeatureDeductions/FrameworkViolations/FrameworksRelatedRiskPrimitivesCollector.cs", 9, 0, {}, ["Frameworks"], ["FrameworksRelatedRiskPrimitivesCollector", "Frameworks", "CollectRiskPrimitives", "MarkAnyFramework", "AllMethodsOfClassAreValid", "CollectMethodViolations", "AnyAnnotationIsUnderFramework"], ["System", "System.Collections.Generic", "System.Linq", "Infrastructure.Dotnet.Common", "Lim.Common.DotNET"], false, false, [], false, false, [], {}, [], 1, false, false, false, 6, 0.8571428571428571, [], 413.0, 8, 14.285714285714286, 28.571428571428573, 1, 0, false, true, false, false, "public", false, ["Lim.FeaturesExtractor.JavaFramework.LoadFromFile"], ["classFeatures.ShouldIgnore", "classFeatures.GetFeature<HashSet<string>>", "methodIdsByClassId.GetValueOrDefault", ".Where(id => methodFeatures.GetFeature<bool>(id, MethodFeatureNames.PredictApi))\n                    .ToList", ".Where", "methodFeatures.GetFeature<bool>", "customAnnotationsForFrameworkType", "methodFeatures.SetFeature", "javaFramework.IdentifiersByAnnotations.Concat", "annotations\n                    .Intersect(inputValidationAnnotations)\n                    .ToList", "annotations\n                    .Intersect", "possibleAnnotations.None", "possibleAnnotations.Append(\"*\")\n                    .Select", "possibleAnnotations.Append", "importsList.Intersects"], false, false, false, false, ["*"], false, 1, 0, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, false], ["FrameworkUsageCollector", "Lim.FeaturesExtractor.FrameworkUsageCollector", [], ["Lim.FeaturesExtractor.IFrameworksRelatedRiskPrimitivesCollector"], "src/Lim.FeaturesExtractor/FeaturesSteps/FeatureDeductions/FrameworkViolations/FrameworkUsageCollector.cs", 10, 0, {"_frameworks": "System.Collections.Generic.List<JavaFramework>"}, ["_frameworks"], ["FrameworkUsageCollector", "Frameworks", "CollectRiskPrimitives", "CollectMethodFrameworkUsage", "ExternalMethodIsUnderFramework"], ["System", "System.Collections.Generic", "System.Linq", "Infrastructure.Dotnet.Common", "JetBrains.Annotations", "Lim.Common.DotNET"], false, false, ["UsedImplicitly"], false, false, [], {"_frameworks": []}, [], 1, false, false, false, 4, 0.8, [], 460.2, 487, 20.0, 60.0, 1, 0, false, false, false, false, "public", false, ["Lim.FeaturesExtractor.JavaFramework.LoadFromFile"], ["methodFeatures.GetFeature<string>", "classFeatures.GetFeature<HashSet<string>>", "methodFeatures.GetFeature<HashSet<string>>", "externalMethodCalls.None", "Frameworks.Where(\n                    framework => ExternalMethodIsUnderFramework(\n                        framework,\n                        imports,\n                        externalMethodCalls\n                    )\n                )\n                .Select(framework => new CodeFramework(framework.CodeFrameworkType, framework.Name))\n                .ToList", "Frameworks.Where(\n                    framework => ExternalMethodIsUnderFramework(\n                        framework,\n                        imports,\n                        externalMethodCalls\n                    )\n                )\n                .Select", "Frameworks.Where", "codeFrameworks.Any", "methodFeatures.SetJsonFeature", "javaFramework.IdentifiersByMethods.Any", "identifier.Value.Any", "methodCalls.Any", "call.EndsWith", "importsList.Contains", "JavaParsingUtils.GetPackageFromQualifiedName", "_frameworks.AddRange"], false, false, false, false, [], false, 1, 0, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, false], ["ValidationFrameworksRelatedRiskPrimitivesCollector", "Lim.FeaturesExtractor.ValidationFrameworksRelatedRiskPrimitivesCollector", ["Lim.FeaturesExtractor.FrameworksRelatedRiskPrimitivesCollector"], [], "src/Lim.FeaturesExtractor/FeaturesSteps/FeatureDeductions/FrameworkViolations/ValidationFrameworksRelatedRiskPrimitivesCollector.cs", 11, 0, {}, ["Frameworks"], ["ValidationFrameworksRelatedRiskPrimitivesCollector", "MarkAnyFramework", "CollectMethodViolations", "GetMethodInputValidation", "GetMethodParameterValidationDetails", "AreMethodParametersValidated", "FrameworksRelatedRiskPrimitivesCollector", "Frameworks", "CollectRiskPrimitives", "AllMethodsOfClassAreValid", "AnyAnnotationIsUnderFramework"], ["System", "System.Collections.Generic", "System.Linq", "Infrastructure.Dotnet.Common", "JetBrains.Annotations", "Lim.Common.DotNET", "Microsoft.Extensions.Logging"], false, false, ["UsedImplicitly"], false, false, [], {}, [], 1, false, false, false, 10, 0.9090909090909091, [], 1069.7272727272727, 783, 36.36363636363637, 27.272727272727273, 2, 0, false, false, false, false, "public", false, ["Lim.FeaturesExtractor.FrameworksRelatedRiskPrimitivesCollector.AnyAnnotationIsUnderFramework"], ["methodFeatures.GetFeature<Dictionary<string, string>>(methodId, MethodFeatureNames.ParametersNameToType)\n                .Values\n                .Any", "methodFeatures.GetFeature<Dictionary<string, string>>", "JavaInjectedTypes.WhiteList.Contains", "methodFeatures.SetFeature", "methodFeatures.GetJsonFeature<Dictionary<string, List<UnvalidatedMethodParameter>>>", "unvalidatedParametersByFramework.Values.FirstOrDefault", "unvalidatedParametersByFramework.Values.Any", "unvalidatedParameters.Any", "methodFeatures.SetJsonFeature", "methodFeatures.GetFeature<Dictionary<string, HashSet<string>>>", "parametersNameToEssentialTypes.GetValueOrDefault", "JavaParsingUtils.GetNameFromQualifiedName", "parameterTypeName.Contains", "unvalidatedParameters.Add", "NamedCodeReference.FromClassFeatures", "unvalidatedParameters.None", "unvalidatedParameters.All", "classFeatures.ContainsId", "classFeatures.GetFeature<Dictionary<string, HashSet<string>>>", "classFields.NullOrNone", "classFeatures.GetFeature<HashSet<string>>", "methodIdsByClassId\n                    .GetValueOrDefault(typeFullName, new HashSet<string>())\n                    .Where", "methodIdsByClassId\n                    .GetValueOrDefault", "methodFeatures.GetFeature<bool>", "methodFeatures.GetFeature<string>(methodId, MethodFeatureNames.MethodName)\n                                .EndsWith", "methodFeatures.GetFeature<string>", "associatedMethods.Any", "unvalidatedTypeFieldsNames.Add", "unvalidatedTypeFieldsNames.None", "methodFeatures.GetFeature<Dictionary<string, HashSet<string>>>(methodId, MethodFeatureNames.ParameterNameToAnnotations)\n                .Where(\n                    parameterAnnotations => !AnyAnnotationIsUnderFramework(\n                        framework,\n                        customAnnotations,\n                        imports,\n                        parameterAnnotations.Value\n                    )\n                )\n                .None", "methodFeatures.GetFeature<Dictionary<string, HashSet<string>>>(methodId, MethodFeatureNames.ParameterNameToAnnotations)\n                .Where", "classFeatures.ShouldIgnore", "methodIdsByClassId.GetValueOrDefault", ".Where(id => methodFeatures.GetFeature<bool>(id, MethodFeatureNames.PredictApi))\n                    .ToList", ".Where", "customAnnotationsForFrameworkType", "javaFramework.IdentifiersByAnnotations.Concat", "annotations\n                    .Intersect(inputValidationAnnotations)\n                    .ToList", "annotations\n                    .Intersect", "possibleAnnotations.None", "possibleAnnotations.Append(\"*\")\n                    .Select", "possibleAnnotations.Append", "importsList.Intersects"], false, false, false, false, ["session", "attribute"], false, 1, 0, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, false], ["CustomAnnotationsCollector", "Lim.FeaturesExtractor.CustomAnnotationsCollector", [], ["Lim.FeaturesExtractor.ICustomAnnotationsCollector"], "src/Lim.FeaturesExtractor/FeaturesSteps/FeatureDeductions/JavaFrameworks/CustomAnnotationsCollector.cs", 10, 0, {"_logger": "???.ILogger<CustomAnnotationsCollector>"}, ["_logger"], ["CustomAnnotationsCollector", "CollectCustomAnnotations"], ["System", "System.Collections.Concurrent", "System.Collections.Generic", "Infrastructure.Dotnet.Common", "Lim.Common.DotNET", "Microsoft.Extensions.Logging"], false, false, [], false, false, [], {"_logger": []}, [], 0, false, false, false, 3, 1.0, [], 1118.6666666666667, 656, 0.0, 66.66666666666667, 1, 0, false, false, false, false, "public", false, [], ["customAnnotationsByFramework.AddOrUpdate", "collectedAnnotations.MergeWithOverwrite", "framework.CustomAnnotationsIdentifiers.None", "annotationsFeatures.GetFeature<HashSet<string>>(annotationKey, AnnotationFeaturesNames.Annotations)\n                                .Intersects", "annotationsFeatures.GetFeature<HashSet<string>>", "annotationsFeatures.GetFeature<HashSet<string>>(annotationKey, AnnotationFeaturesNames.Imports)\n                                .Contains", "_logger.LogDebug", "JavaParsingUtils.GetPackageFromQualifiedName", "JavaParsingUtils.GetNameFromQualifiedName", "newIdentifiers.AddOrUpdate", "existingAnnotations.Add", "annotationsFeatures.SetFeature", "nameof"], false, false, false, false, ["Found custom annotation {annotation} for framework {framework}", "framework type is not supported"], false, 0, 0, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, false], ["JavaFramework", "Lim.FeaturesExtractor.JavaFramework", [], [], "src/Lim.FeaturesExtractor/FeaturesSteps/FeatureDeductions/JavaFrameworks/JavaFramework.cs", 8, 0, {}, ["Name", "CustomAnnotationsIdentifiers", "IdentifiersByAnnotations", "IdentifiersByMethods", "CodeFrameworkType"], ["Name", "CustomAnnotationsIdentifiers", "IdentifiersByAnnotations", "IdentifiersByMethods", "CodeFrameworkType", "LoadFromFile", "ToString"], ["System.Collections.Generic", "Infrastructure.Dotnet.Common", "JetBrains.Annotations", "Lim.Common.DotNET"], false, false, ["UsedImplicitly"], false, false, [], {}, [], 5, false, true, false, 1, 0.14285714285714285, [], 42.0, 0, 14.285714285714286, 100.0, 0, 0, false, false, false, false, "public", false, [], ["fileSystem.ReadJson<HashSet<JavaFramework>>"], false, false, false, false, [], false, 5, 5, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, false], ["JavaInjectedTypes", "Lim.FeaturesExtractor.JavaInjectedTypes", [], [], "src/Lim.FeaturesExtractor/FeaturesSteps/FeatureDeductions/JavaFrameworks/JavaInjectedTypes.cs", 5, 0, {"WhiteList": "System.Collections.Generic.ISet<string>"}, [], [], ["System.Collections.Generic"], false, false, [], false, false, [], {"WhiteList": []}, [], 0, false, false, false, 0, 0.0, [], 0.0, 0, 0.0, 0.0, 0, 0, false, false, true, false, "public", false, [], [], false, false, false, false, ["Principal", "HttpServletRequest", "ServletRequest", "HttpServletResponse", "ServletResponse", "ServletContext", "HttpSession", "HttpSessionStatus", "UserTransaction", "Validator", "ValidatorFactory", "BindingResult", "MultipartRequest", "MultipartHttpServletRequest", "WebRequest", "NativeWebRequest", "PushBuilder", "HttpMethod", "Locale", "TimeZone", "ZoneId", "InputStream", "Reader", "OutputStream", "Writer", "HttpEntity", "Model", "ModelMap", "RedirectAttributes", "Errors", "SessionStatus", "UriComponentsBuilder", "FormDataContentDisposition", "JwtAuthenticationToken"], false, 0, 0, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, false], ["DataOfInterestInApisCollector", "Lim.FeaturesExtractor.DataOfInterestInApisCollector", [], ["Lim.FeaturesExtractor.IRiskPrimitivesCollector"], "src/Lim.FeaturesExtractor/FeaturesSteps/FeatureDeductions/RiskPrimitivesCollectors/DataOfInterestInApisCollector.cs", 9, 0, {"_logger": "???.ILogger<DataOfInterestInApisCollector>"}, ["_logger"], ["DataOfInterestInApisCollector", "CollectRiskPrimitives", "CollectForApi", "CollectReturnTypeImplications", "CollectMethodCallsImplications", "GetMethodsCalledFrom"], ["System.Collections.Generic", "System.Linq", "Infrastructure.Dotnet.Common", "Lim.Common.DotNET", "Microsoft.Extensions.Logging"], false, false, [], false, false, [], {"_logger": []}, [], 0, false, false, false, 6, 1.0, [], 1084.3333333333333, 1260, 16.666666666666668, 33.333333333333336, 1, 0, false, false, false, false, "public", false, ["Lim.FeaturesExtractor.SecurityConfigurationUtil.FindMatcherChain"], ["classFeatures.ShouldIgnore", "classFeatures.GetJsonFeature<SecurityConfiguration>", "securityConfigurations.Add", "methodFeatures.GetFeature<bool>", "codeLinks.AddRange", "codeLinks.Any", "methodFeatures.SetJsonFeature", "methodFeatures.GetFeature<string>", "string.IsNullOrEmpty", "methodFeatures.GetFeature<HashSet<string>>", "classFeatures.ContainsId", "classFeatures.IsDataOfInterestApplicable", "classFeatures.GetFeature<DataOfInterestTypes>", "DataOfInterestType.ByPiiLevel.TryGetValue", "_logger.LogInformation", "currentMethodCalls.Any", "methodsFeatures.GetFeature<string>", "classFeatures.GetFeature<int>", "classPiiLevel.IsOfInterest", "visitedMethodIds.AddRange", "fromMethodIds\n                .SelectMany(methodFeatures.MethodCalls)\n                .Select(methodId => $\"{methodId}(\")\n                .SelectMany(methodId => methodFeatures.EntityIds.Where(candidateMethodId => candidateMethodId.StartsWith(methodId)))\n                .Except(observedMethodIds)\n                .ToHashSet", "fromMethodIds\n                .SelectMany(methodFeatures.MethodCalls)\n                .Select(methodId => $\"{methodId}(\")\n                .SelectMany(methodId => methodFeatures.EntityIds.Where(candidateMethodId => candidateMethodId.StartsWith(methodId)))\n                .Except", "fromMethodIds\n                .SelectMany(methodFeatures.MethodCalls)\n                .Select(methodId => $\"{methodId}(\")\n                .SelectMany", "fromMethodIds\n                .SelectMany(methodFeatures.MethodCalls)\n                .Select", "fromMethodIds\n                .SelectMany", "methodFeatures.EntityIds.Where", "candidateMethodId.StartsWith"], false, false, false, false, ["Found a {codeLinkType}: ({returnType}) exposure through an api ({methodId})", ""], false, 0, 0, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, false], ["JavaFrameworkRelatedRiskCollector", "Lim.FeaturesExtractor.JavaFrameworkRelatedRiskCollector", [], ["Lim.FeaturesExtractor.IRiskPrimitivesCollector"], "src/Lim.FeaturesExtractor/FeaturesSteps/FeatureDeductions/RiskPrimitivesCollectors/JavaFrameworkRelatedRiskCollector.cs", 8, 0, {"_customAnnotationsCollector": "Lim.FeaturesExtractor.ICustomAnnotationsCollector", "_frameworkViolationsCollectors": "System.Collections.Generic.IReadOnlyCollection<IFrameworksRelatedRiskPrimitivesCollector>"}, ["_customAnnotationsCollector", "_frameworkViolationsCollectors"], ["JavaFrameworkRelatedRiskCollector", "CollectRiskPrimitives"], ["System.Collections.Generic", "System.Linq", "Infrastructure.Dotnet.Common", "Lim.Common.DotNET"], false, false, [], false, false, [], {"_customAnnotationsCollector": [], "_frameworkViolationsCollectors": []}, [], 0, false, false, false, 2, 1.0, [], 586.5, 586, 0.0, 100.0, 1, 0, false, false, false, false, "public", false, ["Lim.FeaturesExtractor.ICustomAnnotationsCollector.CollectCustomAnnotations"], ["_frameworkViolationsCollectors.SelectMany(collector => collector.Frameworks)\n                    .ToList", "_frameworkViolationsCollectors.SelectMany", "methodFeatures.EntityIds\n                .ToDictionaryGrouped", "methodFeatures.GetFeature<string>", "frameworkViolationsCollector.CollectRiskPrimitives", "frameworkViolationsCollectors.ToList"], false, false, false, false, [], false, 0, 0, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, false], ["SecurityConfigurationUtil", "Lim.FeaturesExtractor.SecurityConfigurationUtil", [], [], "src/Lim.FeaturesExtractor/FeaturesSteps/FeatureDeductions/RiskPrimitivesCollectors/SecurityConfigurationUtil.cs", 7, 0, {}, [], ["FindMatcherChain", "FindMatchingPattern"], ["System.Collections.Generic", "System.Linq", "Lim.Common.DotNET"], false, false, [], false, false, [], {}, [], 0, false, false, false, 2, 1.0, [], 459.0, 459, 100.0, 50.0, 0, 0, false, false, true, false, "public", false, ["Lim.FeaturesExtractor.UrlMatchingUtils.MatchPatternToRoute"], ["securityConfiguration.MainMatchers\n                .Select(mainMatcher => FindMatchingPattern(mainMatcher, route))\n                .FirstOrDefault", "securityConfiguration.MainMatchers\n                .Select", "matchedChain.Add", "securityConfiguration.SubMatchers\n                .Select(mainMatcher => mainMatcher.FindMatchingPattern(route))\n                .FirstOrDefault", "securityConfiguration.SubMatchers\n                .Select", "matcher.Patterns\n                .FirstOrDefault"], false, false, false, false, [], false, 0, 0, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, false], ["DataModelByDatabaseServiceUsageDeducer", "Lim.FeaturesExtractor.DataModelByDatabaseServiceUsageDeducer", [], ["Lim.FeaturesExtractor.IUsageDeducer"], "src/Lim.FeaturesExtractor/FeaturesSteps/FeatureDeductions/UsageDeducers/DataModelByDatabaseServiceUsageDeducer.cs", 10, 0, {"_logger": "???.ILogger<DataModelByDatabaseServiceUsageDeducer>"}, ["_logger", "RelevantCodeEntities"], ["DataModelByDatabaseServiceUsageDeducer", "RelevantCodeEntities", "DeduceFromUsages"], ["System.Collections.Generic", "System.Linq", "Infrastructure.Dotnet.Common", "JetBrains.Annotations", "Lim.Common.DotNET", "Microsoft.Extensions.Logging"], false, false, ["UsedImplicitly"], false, false, [], {"_logger": []}, [], 1, false, false, false, 2, 0.6666666666666666, [], 1122.0, 31, 0.0, 100.0, 1, 0, false, false, false, false, "public", false, ["Lim.FeaturesExtractor.WeightedDatabaseKeywords.GetDatabaseKeywords", "Lim.FeaturesExtractor.WeightedDatabaseKeywords.GetKeywordsWeight"], ["methodFeatures.EntityIds.ToDictionaryGrouped", "methodFeatures.GetFeature<string>", "classFeatures.ShouldIgnore", "classFeatures.GetFeature<string>(classId, ClassFeatureNames.ClassName)\n                        .ContainsAny", "classFeatures.GetFeature<string>", "classFeatures.GetFeature<HashSet<string>>", "WeightedDatabaseKeywords.GetDatabaseKeywords(methodName)\n                        .ToHashSet", "databaseKeywords.Any", "relevantMethodNames.Add", "classDatabaseKeywords.AddRange", "classFeatures.SetFeature", "_logger.LogDebug", "methodFeaturesByClassId.GetValueOrDefault", "databaseServiceAssociatedTypes.AddRange", "methodFeatures.GetFeature<HashSet<string>>", "methodFeatures.GetFeature<Dictionary<string, HashSet<string>>>(methodId, MethodFeatureNames.ParametersNameToEssentialTypes)\n                            .Values.Flatten", "methodFeatures.GetFeature<Dictionary<string, HashSet<string>>>", "classFeatures.ContainsId"], false, false, false, false, ["config", "settings", "Discovered database service class: {classId}", "Class {fullName} is used by database service method - marking it as data model"], false, 1, 0, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, false], ["DataModelByLocalityDeducer", "Lim.FeaturesExtractor.DataModelByLocalityDeducer", [], ["Lim.FeaturesExtractor.IUsageDeducer"], "src/Lim.FeaturesExtractor/FeaturesSteps/FeatureDeductions/UsageDeducers/DataModelByLocalityDeducer.cs", 11, 0, {"_logger": "???.ILogger<DataModelByLocalityDeducer>"}, ["_logger", "RelevantCodeEntities"], ["DataModelByLocalityDeducer", "RelevantCodeEntities", "DeduceFromUsages", "MarkAllPotentialAsPredicted"], ["System.Collections.Generic", "System.IO", "System.Linq", "Infrastructure.Dotnet.Common", "JetBrains.Annotations", "Lim.Common.DotNET", "Microsoft.Extensions.Logging"], false, false, ["UsedImplicitly"], false, false, [], {"_logger": []}, [], 1, false, false, false, 3, 0.75, [], 692.0, 260, 25.0, 75.0, 1, 0, false, false, false, false, "public", false, [], ["Path.GetDirectoryName", "classFeatures.GetFeature<string>", "classFeatures.ShouldIgnore", "classFeatures.GetFeature<bool>", "directoryDescriptorsByPath.GetOrAdd", "directoryDescriptor.Add", "dataModelIds.Add", "_logger.LogDebug", "classFeatures.EntityIds.ToDictionaryGrouped", "classFeatures.GetFeature<int>", "clusterClassIds.Any", "MarkAllPotentialAsPredicted", "classFeatures.GetFeature<double>", "classFeatures.SetFeature"], false, false, false, false, ["Marking directory {path} as data models container"], false, 1, 0, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, false], ["DirectoryDescriptor", "Lim.FeaturesExtractor.DataModelByLocalityDeducer.DirectoryDescriptor", [], [], "src/Lim.FeaturesExtractor/FeaturesSteps/FeatureDeductions/UsageDeducers/DataModelByLocalityDeducer.cs", 89, 0, {}, ["ClassIds", "DataModelCount"], ["ClassIds", "DataModelCount", "AllAreDataModels", "MajorityAreDataModels", "Add"], ["System.Collections.Generic", "System.IO", "System.Linq", "Infrastructure.Dotnet.Common", "JetBrains.Annotations", "Lim.Common.DotNET", "Microsoft.Extensions.Logging"], false, false, [], false, false, [], {}, [], 4, false, false, false, 1, 0.2, ["Lim.FeaturesExtractor.DataModelByLocalityDeducer"], 34.8, 0, 0.0, 80.0, 0, 0, true, false, false, false, "private", false, [], ["DataModelCount.SafeDivision", "ClassIds.Add"], false, false, false, false, [], false, 4, 1, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, false], ["ReturnedOrUsedByApiDeducer", "Lim.FeaturesExtractor.ReturnedOrUsedByApiDeducer", [], ["Lim.FeaturesExtractor.IUsageDeducer"], "src/Lim.FeaturesExtractor/FeaturesSteps/FeatureDeductions/UsageDeducers/ReturnedOrUsedByApiDeducer.cs", 9, 0, {}, ["RelevantCodeEntities"], ["RelevantCodeEntities", "DeduceFromUsages"], ["System.Collections.Generic", "System.Linq", "Infrastructure.Dotnet.Common", "JetBrains.Annotations", "Lim.Common.DotNET"], false, false, ["UsedImplicitly"], false, false, [], {}, [], 1, false, false, false, 1, 0.5, [], 581.5, 581, 0.0, 100.0, 0, 0, false, false, false, false, "public", false, [], ["methodFeatures.EntityIds.Where", "methodFeatures.GetFeature<bool>", "methodFeatures.GetFeature<HashSet<string>>", "involvedTypesFullNames.AddRange", "methodFeatures\n                        .GetFeature<Dictionary<string, HashSet<string>>>(methodId, MethodFeatureNames.ParametersNameToEssentialTypes)\n                        .Values.Flatten", "methodFeatures\n                        .GetFeature<Dictionary<string, HashSet<string>>>", "involvedTypesFullNames.Where", "classFeatures.ContainsId", "classFeatures.SetFeature"], false, false, false, false, [], false, 1, 0, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, false], ["WeightedDatabaseKeywords", "Lim.FeaturesExtractor.WeightedDatabaseKeywords", [], [], "src/Lim.FeaturesExtractor/FeaturesSteps/FeatureDeductions/UsageDeducers/WeightedDatabaseKeywords.cs", 8, 0, {"Level1Weight": "int", "Level2Weight": "int", "Level3Weight": "int", "DatabaseServiceThreshold": "int", "DatabaseKeywords": "System.Collections.Generic.IReadOnlyDictionary<string, int>"}, [], ["SplitName", "GetDatabaseKeywords", "GetKeywordsWeight"], ["System", "System.Collections.Generic", "System.Linq", "System.Text"], false, false, [], false, false, [], {"Level1Weight": [], "Level2Weight": [], "Level3Weight": [], "DatabaseServiceThreshold": [], "DatabaseKeywords": []}, [], 0, false, false, false, 3, 1.0, [], 359.0, 148, 100.0, 66.66666666666667, 0, 0, false, false, true, false, "public", false, [], ["char.IsUpper", "char.IsLower", "stringBuilder.Append", "stringBuilder.ToString()\n                .Split", "stringBuilder.ToString", "SplitName(name)\n                .Select(_ => _.ToLowerInvariant())\n                .Where", "SplitName(name)\n                .Select", "_.ToLowerInvariant", "DatabaseKeywords.ContainsKey", "keywords.Select(word => DatabaseKeywords.GetValueOrDefault(word, 0))\n                .Sum", "keywords.Select", "DatabaseKeywords.GetValueOrDefault"], false, false, false, false, ["replace", "update", "delete", "search", "refresh", "collection", "duplicate", "serialize", "deserialize", "store", "query", "table", "column", "join", "record", "storage", "db", "insert", "select", "drop", "upsert", "jdbc", "sql", "mysql", "postgre", "postgresql", "mongodb", "mongo", "cassandra", "redis", "dynamo", "cosmos", "realm", "oracle", "vertica", "elastic", "elasticsearch", "solr", "db2", "maria", "firebase", "firestore", "presto", "couchbase"], false, 0, 0, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, false], ["FeaturesStepInputBin", "Lim.FeaturesExtractor.FeaturesStepInputBin", ["???.InputBin"], [], "src/Lim.FeaturesExtractor/FeaturesSteps/FeaturesStepInputBin.cs", 7, 0, {}, ["CodeEntityToExtractedFeaturesPath", "CodeParsingTarget"], ["FeaturesStepInputBin", "CodeEntityToExtractedFeaturesPath", "CodeParsingTarget", "ToString"], ["System.Collections.Generic", "Infrastructure.Dotnet.Common", "Lim.Common.DotNET"], false, false, [], false, false, [], {}, [], 2, false, true, false, 2, 0.4, [], 103.4, 154, 0.0, 60.0, 2, 0, false, true, false, false, "public", false, [], ["base.ToString", "nameof", "string.Join"], false, false, false, false, [], false, 2, 0, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, false], ["PredictionEnricher", "Lim.FeaturesExtractor.PredictionEnricher", [], ["Lim.FeaturesExtractor.IPredictionEnricher"], "src/Lim.FeaturesExtractor/FeaturesSteps/PredictionEnriching/PredictionEnricher.cs", 9, 0, {"_featurePredictorProxy": "Lim.FeaturesExtractor.IFeaturePredictorProxy", "_fileSystem": "???.IFileSystem", "_logger": "???.ILogger<PredictionEnricher>"}, ["_featurePredictorProxy", "_fileSystem", "_logger"], ["PredictionEnricher", "EnrichAsync", "EnrichEntityAsync"], ["System.Threading", "System.Threading.Tasks", "Infrastructure.Dotnet.Common", "Lim.Common.DotNET", "Microsoft.Extensions.Logging"], false, false, [], false, false, [], {"_featurePredictorProxy": [], "_fileSystem": [], "_logger": []}, [], 0, false, false, false, 3, 1.0, [], 395.3333333333333, 359, 0.0, 66.66666666666667, 1, 0, false, false, false, true, "public", false, ["Lim.FeaturesExtractor.IFeaturePredictorProxy.PredictAsync"], ["_fileSystem.FileExists", "_logger.LogInformation", "codeEntity.SupportsPredictionEnriching"], false, false, false, false, ["No features extracted for repository at {path} for {entity} in {parser}"], false, 0, 0, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, false], ["PredictionEnricherInputBin", "Lim.FeaturesExtractor.PredictionEnricherInputBin", ["Lim.FeaturesExtractor.FeaturesStepInputBin"], [], "src/Lim.FeaturesExtractor/FeaturesSteps/PredictionEnriching/PredictionEnricherInputBin.cs", 6, 0, {}, ["CodeEntityToExtractedFeaturesPath", "CodeParsingTarget"], ["PredictionEnricherInputBin", "FeaturesStepInputBin", "CodeEntityToExtractedFeaturesPath", "CodeParsingTarget", "ToString"], ["System.Collections.Generic", "Lim.Common.DotNET"], false, false, [], false, false, [], {}, [], 2, false, true, false, 3, 0.5, [], 89.5, 87, 0.0, 66.66666666666667, 3, 0, false, false, false, false, "public", false, [], ["base.ToString", "nameof", "string.Join"], false, false, false, false, [], false, 2, 0, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, false], ["FeaturesStoring", "Lim.FeaturesExtractor.FeaturesStoring", [], ["Lim.FeaturesExtractor.IFeaturesStoring"], "src/Lim.FeaturesExtractor/FeaturesSteps/Storing/FeaturesStoring.cs", 8, 0, {"_codeFeaturesStorage": "Lim.Common.DotNET.ICodeFeaturesStorage", "_fileSystem": "???.IFileSystem"}, ["_codeFeaturesStorage", "_fileSystem"], ["FeaturesStoring", "StoreAsync"], ["System", "System.Threading.Tasks", "Infrastructure.Dotnet.Common", "Lim.Common.DotNET"], false, false, [], false, false, [], {"_codeFeaturesStorage": [], "_fileSystem": []}, [], 0, false, false, false, 2, 1.0, [], 501.5, 501, 0.0, 100.0, 1, 0, false, false, false, true, "public", false, [], ["_fileSystem.FileExists", "_codeFeaturesStorage.StoreFromExisting", "_fileSystem.DeleteFile"], false, false, false, false, [], false, 0, 0, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, false], ["FeaturesStoringInputBin", "Lim.FeaturesExtractor.FeaturesStoringInputBin", ["Lim.FeaturesExtractor.FeaturesStepInputBin"], [], "src/Lim.FeaturesExtractor/FeaturesSteps/Storing/FeaturesStoringInputBin.cs", 3, 0, {}, ["CodeEntityToExtractedFeaturesPath", "CodeParsingTarget"], ["FeaturesStoringInputBin", "FeaturesStepInputBin", "CodeEntityToExtractedFeaturesPath", "CodeParsingTarget", "ToString"], [], false, false, [], false, false, [], {}, [], 2, false, true, false, 3, 0.5, [], 89.5, 87, 0.0, 66.66666666666667, 3, 0, false, false, false, false, "public", false, [], ["base.ToString", "nameof", "string.Join"], false, false, false, false, [], false, 2, 0, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, false], ["ApiClassifierCollector", "Lim.FeaturesExtractor.ApiClassifierCollector", [], ["Lim.FeaturesExtractor.IPropertiesCollector"], "src/Lim.FeaturesExtractor/FileComparationCollectors/ApiClassifierCollector.cs", 13, 0, {"_apiClassificationStorage": "Lim.Common.DotNET.IApiClassificationStorage", "_regex": "System.Text.RegularExpressions.Regex", "_resolvedApiClassificationStorage": "Lim.Common.DotNET.IResolvedApiClassificationStorage", "_settings": "System.Collections.Generic.IReadOnlyCollection<ApiClassificationDefinition>"}, ["_apiClassificationStorage", "_regex", "_resolvedApiClassificationStorage", "_settings"], ["ApiClassifierCollector", "InitAsync", "IsRelevantFile", "ProcessFileAsync", "MatchUrlLine", "ShouldParseFile"], ["System", "System.Collections.Generic", "System.IO", "System.Linq", "System.Text.RegularExpressions", "System.Threading", "System.Threading.Tasks", "Infrastructure.Dotnet.Common", "Lim.Common.DotNET"], false, false, [], false, false, [], {"_apiClassificationStorage": [], "_regex": [], "_resolvedApiClassificationStorage": [], "_settings": []}, [], 0, false, false, false, 6, 1.0, [], 342.1666666666667, 199, 16.666666666666668, 83.33333333333333, 1, 0, false, false, false, true, "public", false, [], ["_apiClassificationStorage.GetAllAsync", "Path.Join", "_settings.Any", "fileContentLazy.Value.Select(MatchUrlLine)\n                .Where(str => !string.IsNullOrEmpty(str))\n                .ToHashSet", "fileContentLazy.Value.Select(MatchUrlLine)\n                .Where", "fileContentLazy.Value.Select", "string.IsNullOrEmpty", "Path.GetRelativePath", "_settings.First", "_resolvedApiClassificationStorage.SyncResolvedApiClassificationAsync", "_regex.Match", "definition.FilePath.EnsureNotStartingWith(\"/\")\n                .Equals", "definition.FilePath.EnsureNotStartingWith", "repositoryKeys.Contains", "RegexUtils.GetCompiledRegex"], false, false, false, false, ["(?<=\\[\\s*\").*(?=\"\\s*\\])", "/"], false, 0, 0, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, false], ["FileHashCollector", "Lim.FeaturesExtractor.FileHashCollector", [], ["Lim.FeaturesExtractor.IPropertiesCollector"], "src/Lim.FeaturesExtractor/FileComparationCollectors/FileHashCollector.cs", 13, 0, {"_fileSystem": "???.IFileSystem", "_governanceRulesStorage": "Lim.Common.DotNET.IGovernanceRulesStorage", "_sensitiveFilesPaths": "System.Collections.Generic.List<string>", "_rules": "System.Collections.Generic.IReadOnlyCollection<GovernanceRule>"}, ["_fileSystem", "_governanceRulesStorage", "_sensitiveFilesPaths", "_rules"], ["FileHashCollector", "InitAsync", "IsRelevantFile", "ProcessFileAsync", "ClearPrecedingBackslash"], ["System", "System.Collections.Generic", "System.IO", "System.Linq", "System.Threading", "System.Threading.Tasks", "Infrastructure.Dotnet.Common", "Lim.Common.DotNET", "System.IO.File"], false, false, [], false, false, [], {"_fileSystem": [], "_governanceRulesStorage": [], "_sensitiveFilesPaths": [], "_rules": []}, [], 0, false, false, false, 5, 1.0, [], 250.4, 120, 20.0, 80.0, 1, 0, false, false, false, true, "public", false, [], ["GovernanceRule.GetRulesByTypeAndValue", "_governanceRulesStorage.GetGovernanceRulesAsync", "_sensitiveFilesPaths.Add", "rule.When.First", "_sensitiveFilesPaths.Contains", "Path.Join", "(await ReadAllTextAsync(filePath, cancellationToken)).RemoveAllWhitespaces", "ReadAllTextAsync", "_fileSystem.Sha1", "_fileSystem.CompressString", "Path.GetRelativePath", "commitProperties.SensitiveFiles.Add", "value.StartsWith", "value.Substring"], false, false, false, false, ["/"], false, 0, 0, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, false], ["InfrastructureTechnologiesCollector", "Lim.FeaturesExtractor.InfrastructureTechnologiesCollector", [], ["Lim.FeaturesExtractor.IPropertiesCollector"], "src/Lim.FeaturesExtractor/IacCollectors/InfrastructureTechnologiesCollector.cs", 12, 0, {"_relevantExtensions": "System.Collections.Generic.HashSet<string>"}, ["_relevantExtensions"], ["IsRelevantFile", "ProcessFileAsync", "InitAsync"], ["System", "System.Collections.Generic", "System.IO", "System.Linq", "System.Threading", "System.Threading.Tasks", "Infrastructure.Dotnet.Common", "Lim.Common.DotNET"], false, false, [], false, false, [], {"_relevantExtensions": []}, [], 0, false, false, false, 3, 1.0, [], 604.0, 153, 0.0, 66.66666666666667, 0, 0, false, false, false, true, "public", false, ["Lim.FeaturesExtractor.NonCodeFilesAnalysisUtils.ExtractGitReferences", "Lim.FeaturesExtractor.NonCodeFilesAnalysisUtils.ExtractContainerRegistriesReferences"], ["_relevantExtensions.Contains", "fileName.ToLower()\n                    .Split(\".\")\n                    .Last", "fileName.ToLower()\n                    .Split", "fileName.ToLower", "Path.GetFileName(filePath)\n                    .Split(\".\")\n                    .Last()\n                    .ToLower", "Path.GetFileName(filePath)\n                    .Split(\".\")\n                    .Last", "Path.GetFileName(filePath)\n                    .Split", "Path.GetFileName", "Language.Hcl.FileExtensions()\n                        .Contains", "Language.Hcl.FileExtensions", "commitProperties.ComponentsNonCodeIndications.Add", "filePath.RemoveAll", "gitReferences.ToHashSet", "containerRegistriesReferences.ToHashSet", "Language.CiCd.FileExtensions()\n            .Concat(Language.Hcl.FileExtensions())\n            .ToHashSet", "Language.CiCd.FileExtensions()\n            .Concat", "Language.CiCd.FileExtensions"], false, false, false, false, [".", "jenkinsfile", "bzl", "dinghyfile", "dockerfile"], false, 0, 0, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, false], ["TerraformExtractor", "Lim.FeaturesExtractor.TerraformExtractor", [], ["Lim.FeaturesExtractor.IExtractor"], "src/Lim.FeaturesExtractor/IacCollectors/TerraformExtractor.cs", 10, 0, {"_featurePredictorProxy": "Lim.FeaturesExtractor.IFeaturePredictorProxy", "_logger": "???.ILogger<TerraformExtractor>", "_terraformModulesStorage": "Lim.Common.DotNET.ITerraformModulesStorage"}, ["_featurePredictorProxy", "_logger", "_terraformModulesStorage", "CodeParsingTarget"], ["TerraformExtractor", "CodeParsingTarget", "ExtractAsync", "Shutdown"], ["System.Collections.Generic", "System.Threading", "System.Threading.Tasks", "Infrastructure.Dotnet.Common", "Lim.Common.DotNET", "Microsoft.Extensions.Logging"], false, false, [], false, false, [], {"_featurePredictorProxy": [], "_logger": [], "_terraformModulesStorage": []}, [], 1, false, false, false, 3, 0.75, [], 447.5, 97, 0.0, 100.0, 1, 0, false, false, false, true, "public", false, ["Lim.FeaturesExtractor.IFeaturePredictorProxy.ParseTerraformAsync"], ["commitContext.Languages.Contains", "terraformJson.FromJson<IDictionary<string, TerraformHighlights>>", "_logger.LogDebug", "_terraformModulesStorage.SyncTerraformModuleAsync", "commitContext.GetState"], false, false, false, false, ["syncing terraform cluster for commit {commitSha}, for directory {relativePath}"], false, 1, 0, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, false], ["VaultUsageCollector", "Lim.FeaturesExtractor.VaultUsageCollector", [], ["Lim.FeaturesExtractor.IPropertiesCollector"], "src/Lim.FeaturesExtractor/IacCollectors/VaultUsageCollector.cs", 12, 0, {"HintsThreshold": "int", "_vaultCommands": "System.Collections.Generic.HashSet<string>", "_vaultHintWords": "System.Collections.Generic.HashSet<string>"}, ["_vaultCommands", "_vaultHintWords"], ["IsRelevantFile", "ProcessFileAsync", "InitAsync"], ["System", "System.Collections.Generic", "System.IO", "System.Linq", "System.Threading", "System.Threading.Tasks", "Infrastructure.Dotnet.Common", "Lim.Common.DotNET"], false, false, [], false, false, [], {"HintsThreshold": [], "_vaultCommands": [], "_vaultHintWords": []}, [], 0, false, false, false, 3, 1.0, [], 571.3333333333334, 108, 0.0, 66.66666666666667, 0, 0, false, false, false, true, "public", false, ["Lim.FeaturesExtractor.NonCodeFilesAnalysisUtils.ExtractGitReferences", "Lim.FeaturesExtractor.NonCodeFilesAnalysisUtils.ExtractContainerRegistriesReferences"], ["fileName.EndsWithAny", "vaultCommandsUsed.AddRange", "_vaultCommands\n                        .Select(command => $@\"vault {command}\")\n                        .Where", "_vaultCommands\n                        .Select", "line.StartsWith", "vaultHintWordsUsed.AddRange", "_vaultHintWords.Where", "line.Contains", "commitProperties.ComponentsNonCodeIndications.Add", "Path.GetRelativePath", "NonCodeFilesAnalysisUtils.ExtractGitReferences(fileContent)\n                            .ToHashSet", "NonCodeFilesAnalysisUtils.ExtractContainerRegistriesReferences(fileContent)\n                            .ToHashSet"], false, false, false, false, ["auth", "debug", "kv", "lease", "list", "login", "namespace", "operator", "plugin", "policy", "read", "secrets", "server", "ssh", "status", "token", "unwrap", "write", "vault", "hashicorp", "$VAULT_TOKEN", "$VAULT_ADDR", "X-Vault-Token", "X-Vault-Namespace", "X-VaultAPI-DescribeQuery", ":8200", "sh", "yml", "yaml", "Jenkinsfile", "json", "xml"], false, 0, 0, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, false], ["DirectoryData", "Lim.FeaturesExtractor.DirectoryData", [], [], "src/Lim.FeaturesExtractor/ModulesCollector/DirectoryData.cs", 3, 0, {}, ["RelativePath", "LevelScore", "ChildrenScore"], ["DirectoryData", "RelativePath", "LevelScore", "ChildrenScore"], [], false, false, [], false, false, [], {}, [], 3, false, false, false, 1, 0.25, [], 35.25, 0, 0.0, 100.0, 1, 0, false, false, false, false, "public", false, [], [], false, false, false, false, [], false, 3, 1, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, false], ["GradleModuleCollector", "Lim.FeaturesExtractor.GradleModuleCollector", [], ["Lim.FeaturesExtractor.IPropertiesCollector"], "src/Lim.FeaturesExtractor/ModulesCollector/Java/GradleModuleCollector.cs", 11, 0, {}, [], ["IsRelevantFile", "ProcessFileAsync", "InitAsync"], ["System", "System.Collections.Generic", "System.IO", "System.Threading", "System.Threading.Tasks", "Infrastructure.Dotnet.Common", "Lim.Common.DotNET"], false, false, [], false, false, [], {}, [], 0, false, false, false, 3, 1.0, [], 191.33333333333334, 56, 0.0, 66.66666666666667, 0, 0, false, false, false, true, "public", false, [], ["fileName.EqualsIgnoreCase", "Path.GetRelativePath", "Path.GetDirectoryName", "Path.GetFileName", "commitProperties.Modules.Add"], false, false, false, false, ["build.gradle"], false, 0, 0, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, false], ["MavenModuleCollector", "Lim.FeaturesExtractor.MavenModuleCollector", [], ["Lim.FeaturesExtractor.IPropertiesCollector"], "src/Lim.FeaturesExtractor/ModulesCollector/Java/MavenModuleCollector.cs", 11, 0, {}, [], ["IsRelevantFile", "ProcessFileAsync", "InitAsync"], ["System", "System.Collections.Generic", "System.IO", "System.Threading", "System.Threading.Tasks", "Infrastructure.Dotnet.Common", "Lim.Common.DotNET"], false, false, [], false, false, [], {}, [], 0, false, false, false, 3, 1.0, [], 189.33333333333334, 51, 0.0, 66.66666666666667, 0, 0, false, false, false, true, "public", false, [], ["fileName.EqualsIgnoreCase", "Path.GetRelativePath", "Path.GetDirectoryName", "Path.GetFileName", "commitProperties.Modules.Add"], false, false, false, false, ["pom.xml"], false, 0, 0, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, false], ["PackageJsonModuleCollector", "Lim.FeaturesExtractor.PackageJsonModuleCollector", [], ["Lim.FeaturesExtractor.IPropertiesCollector"], "src/Lim.FeaturesExtractor/ModulesCollector/Node/PackageJsonModuleCollector.cs", 11, 0, {}, [], ["IsRelevantFile", "ProcessFileAsync", "InitAsync"], ["System", "System.Collections.Generic", "System.IO", "System.Threading", "System.Threading.Tasks", "Infrastructure.Dotnet.Common", "Lim.Common.DotNET"], false, false, [], false, false, [], {}, [], 0, false, false, false, 3, 1.0, [], 190.66666666666666, 56, 0.0, 66.66666666666667, 0, 0, false, false, false, true, "public", false, [], ["fileName.EqualsIgnoreCase", "Path.GetRelativePath", "Path.GetDirectoryName", "Path.GetFileName", "commitProperties.Modules.Add"], false, false, false, false, ["package.json"], false, 0, 0, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, false], ["RepositoryModuleCollectionResults", "Lim.FeaturesExtractor.RepositoryModuleCollectionResults", [], [], "src/Lim.FeaturesExtractor/ModulesCollector/RepositoryModuleCollectionResults.cs", 5, 0, {}, ["DirectoryTree", "SuggestedModulePaths"], ["RepositoryModuleCollectionResults", "DirectoryTree", "SuggestedModulePaths"], ["System.Collections.Generic"], false, false, [], false, false, [], {}, [], 2, false, false, false, 1, 0.3333333333333333, [], 40.0, 0, 0.0, 100.0, 1, 0, false, false, false, false, "public", false, [], [], false, false, false, false, [], false, 2, 0, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, false], ["RepositoryModuleCollector", "Lim.FeaturesExtractor.RepositoryModuleCollector", [], ["Lim.FeaturesExtractor.IRepositoryModuleCollector"], "src/Lim.FeaturesExtractor/ModulesCollector/RepositoryModuleCollector.cs", 11, 0, {"MinimumRootCodeFilePortion": "double", "MinimumModuleCodeFilePortion": "double", "CodeFileExtensions": "System.Collections.Generic.IReadOnlyCollection<string>", "_fileSystem": "???.IFileSystem", "_logger": "???.ILogger<RepositoryModuleCollector>"}, ["_fileSystem", "_logger"], ["RepositoryModuleCollector", "ExtractModules", "ExtractAdditionalModules", "CollectSuggestedModulePaths", "BuildDirectoryTree", "CountSourceFilesInDirectory", "RemoveChildren", "IsAboveModuleSizeThreshold", "SumChildrenScores", "IsCodeFile", "FilterEmptyModules"], ["System", "System.Collections.Generic", "System.IO", "System.Linq", "Infrastructure.Dotnet.Common", "Lim.Common.DotNET", "Microsoft.Extensions.Logging"], false, false, [], false, false, [], {"MinimumRootCodeFilePortion": [], "MinimumModuleCodeFilePortion": [], "CodeFileExtensions": [], "_fileSystem": [], "_logger": []}, [], 0, false, false, false, 11, 1.0, [], 616.0, 602, 45.45454545454545, 18.181818181818183, 1, 0, false, false, false, false, "public", false, [], ["Path.GetRelativePath", "commitProperties.Modules.Select(module => module.Root)\n                .ToHashSet", "commitProperties.Modules.Select", "suggestedModulePaths.Where", "currentModuleRoots.Contains", "commitProperties.Modules.Add", "Path.GetFileName", "commitProperties.Modules\n                    .Where(module => !string.IsNullOrEmpty(module.Root))\n                    .ToHashSet", "commitProperties.Modules\n                    .Where", "string.IsNullOrEmpty", "filteredDirectoryTree.Reverse", "suggestedModulePaths.Add", "_fileSystem.GetDirectoryPaths(sourceRoot, true)\n                .Where(\n                    subDirectory =>\n                        IsAboveModuleSizeThreshold(\n                            directoryTree[subDirectory],\n                            totalSourceFiles\n                        )\n                )\n                .Select(\n                    path => directoryTree[path]\n                        .RelativePath\n                )\n                .ToList", "_fileSystem.GetDirectoryPaths(sourceRoot, true)\n                .Where(\n                    subDirectory =>\n                        IsAboveModuleSizeThreshold(\n                            directoryTree[subDirectory],\n                            totalSourceFiles\n                        )\n                )\n                .Select", "_fileSystem.GetDirectoryPaths(sourceRoot, true)\n                .Where", "_fileSystem.GetDirectoryPaths", "CountSourceFilesInDirectory", "Directory.GetFiles(directoryPath)\n                .Where(IsCodeFile)\n                .Count", "Directory.GetFiles(directoryPath)\n                .Where", "Directory.GetFiles", "dictionary.WhereKeys(path => !path.StartsWith(trimmedNodePath))\n                .Select(\n                    pair =>\n                    {\n                        var (path, directoryData) = pair;\n                        if (trimmedNodePath.StartsWith(path))\n                        {\n                            directoryData.ChildrenScore = directoryData.ChildrenScore - trimmedNode.ChildrenScore - trimmedNode.LevelScore;\n                        }\n\n                        return pair;\n                    }\n                )\n                .ToSortedDictionary", "dictionary.WhereKeys(path => !path.StartsWith(trimmedNodePath))\n                .Select", "dictionary.WhereKeys", "path.StartsWith", "trimmedNodePath.StartsWith", "directoryTree.Reverse", "_fileSystem.GetDirectoryPaths(fullPath, true)\n                    .Select(subdirectory => directoryTree[subdirectory])\n                    .Select(subDirectoryData => subDirectoryData.LevelScore + subDirectoryData.ChildrenScore)\n                    .Sum", "_fileSystem.GetDirectoryPaths(fullPath, true)\n                    .Select(subdirectory => directoryTree[subdirectory])\n                    .Select", "_fileSystem.GetDirectoryPaths(fullPath, true)\n                    .Select", "Path.GetExtension", "fileExtension.StartsWith", "fileExtension.Substring", "CodeFileExtensions.Contains", "commitProperties.Modules.Where(\n                    module =>\n                    {\n                        if (directoryTree.TryGetValue(Path.Join(repositoryRootPath, module.Root), out var directoryData))\n                        {\n                            return directoryData.ChildrenScore > 0;\n                        }\n\n                        _logger.LogWarning($\"Could not find module in directory tree, module: ({module})\");\n                        return false;\n                    }\n                )\n                .ToHashSet", "commitProperties.Modules.Where", "directoryTree.TryGetValue", "Path.Join", "_logger.LogWarning"], false, false, false, false, ["", "."], false, 0, 0, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, false], ["Program", "Lim.FeaturesExtractor.Program", [], [], "src/Lim.FeaturesExtractor/Program.cs", 5, 0, {}, [], ["Main"], ["System.Threading.Tasks"], false, false, [], false, false, [], {}, [], 0, false, false, false, 1, 1.0, [], 99.0, 99, 100.0, 100.0, 0, 0, false, false, true, true, "public", false, [], ["new FeaturesExtractorLimMicroService().RunAsync"], false, false, false, false, ["Lim.FeaturesExtractor"], false, 0, 0, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, false], ["FeatureExtractorProxy", "Lim.FeaturesExtractor.FeatureExtractorProxy", [], ["Lim.FeaturesExtractor.IFeatureExtractorProxy"], "src/Lim.FeaturesExtractor/Proxies/FeatureExtractorProxy.cs", 15, 0, {"RetryCount": "int", "_fileSystem": "???.IFileSystem", "_languageToClientConfig": "System.Collections.Generic.Dictionary<CodeParsingTarget, (RestClient Client, TimeSpan Timeout, bool Enabled)>", "_logger": "???.ILogger<FeatureExtractorProxy>", "_outputDirectory": "string"}, ["_fileSystem", "_languageToClientConfig", "_logger", "_outputDirectory"], ["FeatureExtractorProxy", "ExtractFeaturesAsync"], ["System", "System.Collections.Generic", "System.Threading", "System.Threading.Tasks", "Infrastructure.Dotnet.Common", "JetBrains.Annotations", "Lim.Common.DotNET", "Microsoft.Extensions.Logging", "Newtonsoft.Json", "Polly", "RestSharp"], false, false, ["UsedImplicitly"], false, false, [], {"RetryCount": [], "_fileSystem": [], "_languageToClientConfig": [], "_logger": [], "_outputDirectory": []}, [], 0, false, false, false, 2, 1.0, [], 2084.5, 2084, 0.0, 100.0, 1, 0, false, false, false, true, "public", false, [], ["request.AddParameter", "_logger.LogInformation", "Policy.Handle<JsonReaderException>()\n                .RetryAsync(\n                    RetryCount,\n                    (exception, retryCount) => LogRetry(exception, retryCount)\n                )\n                .ExecuteAsync", "Policy.Handle<JsonReaderException>()\n                .RetryAsync", "Policy.Handle<JsonReaderException>", "LogRetry", "client\n                            .ExecuteAsyncWithTimeoutRetry", "cancellationToken.ThrowIfCancellationRequested", "_logger.LogError", "response.ThrowErrorResponse", "_logger.LogDebug", "response.FromJson<Dictionary<CodeEntity, string>>", "_fileSystem.FileExists", "_fileSystem.IsFileEmpty", "_fileSystem.DeleteDirectory", "_fileSystem.CreateDirectoryIfNotExists", "_languageToClientConfig.Add"], false, false, false, false, ["/repository/parse", "path", "output", "compressed", "timeout", "retrying"], false, 0, 0, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, false], ["FeaturePredictorProxy", "Lim.FeaturesExtractor.FeaturePredictorProxy", [], ["Lim.FeaturesExtractor.IFeaturePredictorProxy"], "src/Lim.FeaturesExtractor/Proxies/FeaturePredictorProxy.cs", 10, 0, {"TimeoutInMinutes": "int", "_client": "???.RestClient", "_fileSystem": "???.IFileSystem"}, ["_client", "_fileSystem"], ["FeaturePredictorProxy", "PredictAsync", "ParseTerraformAsync"], ["System", "System.Threading.Tasks", "Infrastructure.Dotnet.Common", "JetBrains.Annotations", "Lim.Common.DotNET", "RestSharp"], false, false, ["UsedImplicitly"], false, false, [], {"TimeoutInMinutes": [], "_client": [], "_fileSystem": []}, [], 0, false, false, false, 3, 1.0, [], 478.0, 473, 0.0, 100.0, 1, 0, false, false, false, true, "public", false, [], ["_fileSystem.EnableReadWritePermissions", "codeParsingTarget.ToString()\n                .ToLower", "codeParsingTarget.ToString", "entityTarget.ToString()\n                .ToLower", "entityTarget.ToString", "request.AddQueryParameter", "_client.ExecuteAsyncWithTimeoutRetry", "response.ThrowErrorResponse", "request.AddParameter", "TimeSpan.FromMinutes"], false, false, false, false, ["path", "/parse/hcl", "tf_path"], false, 0, 0, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, false], ["LicenseParserProxy", "Lim.FeaturesExtractor.LicenseParserProxy", [], ["Lim.FeaturesExtractor.ILicenseParserProxy"], "src/Lim.FeaturesExtractor/Proxies/LicenseParserProxy.cs", 16, 0, {"GithubUriContentTypeIndex": "int", "SeparatorMinChars": "int", "SeparatorMinCharPresentRatio": "double", "NewLineChars": "string", "WhitespaceRegex": "System.Text.RegularExpressions.Regex", "HtmlTagsRegex": "System.Text.RegularExpressions.Regex", "HtmlScriptTagContentRegex": "System.Text.RegularExpressions.Regex", "HtmlHeadTagContentRegex": "System.Text.RegularExpressions.Regex", "_client": "???.RestClient", "_fileDownloader": "Lim.FeaturesExtractor.IFileDownloader", "_licensesByUrlAndContentCache": "???.IAsyncCache<(string Url, int BodyHash), IReadOnlyCollection<string>>", "_logger": "???.ILogger<LicenseParserProxy>"}, ["_client", "_fileDownloader", "_licensesByUrlAndContentCache", "_logger"], ["LicenseParserProxy", "ResolveLicenseFromUrlAsync", "ResolveLicenseFromNameAsync", "ResolveLicenseFromHomePageAsync", "CleanContentFromHtmlTags", "ConvertToGithubRawUrl", "SeparateStringToLicenses", "IsContentSeparator", "ParseLicenseFromFileContentAsync", "ParseLicenseAsync"], ["System", "System.Collections.Generic", "System.Linq", "System.Net", "System.Text.RegularExpressions", "System.Threading.Tasks", "Flurl", "Infrastructure.Dotnet.Common", "JetBrains.Annotations", "Lim.Common.DotNET", "Microsoft.Extensions.Logging", "RestSharp"], false, false, ["UsedImplicitly"], false, false, [], {"GithubUriContentTypeIndex": [], "SeparatorMinChars": [], "SeparatorMinCharPresentRatio": [], "NewLineChars": [], "WhitespaceRegex": [], "HtmlTagsRegex": [], "HtmlScriptTagContentRegex": [], "HtmlHeadTagContentRegex": [], "_client": [], "_fileDownloader": [], "_licensesByUrlAndContentCache": [], "_logger": []}, [], 0, false, false, false, 10, 1.0, [], 562.7, 582, 20.0, 40.0, 1, 0, false, false, false, true, "public", false, ["Lim.FeaturesExtractor.IFileDownloader.GetUrlContentAsync"], ["string.IsNullOrEmpty", "Array.Empty<string>", "_logger.LogError", "homePage.StartsWith", "ConvertToGithubRawUrl", "Url.Combine", "licenses.Select(\n                    license => new License\n                    {\n                        Url = licenseFileUrl,\n                        ResolvedName = license\n                    }\n                )\n                .ToList", "licenses.Select", "HtmlHeadTagContentRegex.Replace", "HtmlScriptTagContentRegex.Replace", "HtmlTagsRegex.Replace", "homePageUriBuilder.Path.Split", "homePageUriBuilder.Host.ToLower", "homePagePathSplit[GithubUriContentTypeIndex]\n                    .ToLower", "homePagePathSplit[GithubUriContentTypeIndex]\n                .ToLower", "homePagePathSplit.JoinToString", "fileContent.Split", "NewLineChars.ToCharArray", "fileContents.Add", "currentFileContent.JoinToString", "currentFileContent.Add", "WhitespaceRegex.Replace", "line.GroupBy(_ => _)\n                .Max", "line.GroupBy", "currentChar.Count", "mostCommonCharRepetitions.SafeDivision", "licenseContents.SelectAsync", "ParseLicenseAsync", "allLicensesResults.SelectMany(_ => _)\n                .Where(license => !string.IsNullOrEmpty(license))\n                .ToHashSet", "allLicensesResults.SelectMany(_ => _)\n                .Where", "allLicensesResults.SelectMany", "_licensesByUrlAndContentCache.GetOrAddAsync", "body.GetHashCode", "request.AddStringBody", "_client.ExecuteAsyncWithTimeoutRetry", "response.ThrowErrorResponse", "response.Content\n                        .Split(\"\\n\", StringSplitOptions.RemoveEmptyEntries)\n                        .Select(name => name.Trim())\n                        .ToList", "response.Content\n                        .Split(\"\\n\", StringSplitOptions.RemoveEmptyEntries)\n                        .Select", "response.Content\n                        .Split", "name.Trim", "RegexUtils.GetCompiledRegex", "cacheBuilder", "TimeSpan.FromDays"], false, false, false, false, ["\r\n", "\\s+", "<[^>]*>", "<script[^>]*>[\\s\\S]*?</script>", "<head[^>]*>[\\s\\S]*?</head>", "Failed to parse license from url '{url}'", "/parse/name", "https://github.com/", "master/LICENSE", "/", "github.com", "raw", "blob", "raw.githubusercontent.com", "", "/parse/content", "parse license", "\n"], false, 0, 0, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, false], ["FileSecretsCollector", "Lim.FeaturesExtractor.FileSecretsCollector", [], ["Lim.FeaturesExtractor.IFileSecretsCollector"], "src/Lim.FeaturesExtractor/SecretsCollector/FileSecretsCollector.cs", 11, 0, {"SecretCensor": "string", "LengthThreshold": "int", "MaxLineLength": "int", "Base64Charset": "System.Collections.Generic.HashSet<char>", "HexCharset": "System.Collections.Generic.HashSet<char>", "JwtCharset": "System.Collections.Generic.HashSet<char>", "Base64Regex": "System.Text.RegularExpressions.Regex", "HexRegex": "System.Text.RegularExpressions.Regex", "JwtRegex": "System.Text.RegularExpressions.Regex", "LineKeywordBlacklist": "System.Collections.Generic.IReadOnlyCollection<string>", "LineKeywordWhitelist": "System.Collections.Generic.IReadOnlyCollection<string>"}, [], ["FileSecretsCollector", "GetSecrets", "LargeEntropyTokens", "ExtractCamelCaseStrings", "ExtractHexStrings", "ExtractBase64Strings", "ExtractJwtStrings", "ShannonEntropyFromCharset"], ["System", "System.Collections.Generic", "System.Linq", "System.Text", "System.Text.RegularExpressions", "Infrastructure.Dotnet.Common", "Lim.Common.DotNET"], false, false, [], false, false, [], {"SecretCensor": [], "LengthThreshold": [], "MaxLineLength": [], "Base64Charset": [], "HexCharset": [], "JwtCharset": [], "Base64Regex": [], "HexRegex": [], "JwtRegex": [], "LineKeywordBlacklist": [], "LineKeywordWhitelist": []}, [], 0, false, false, false, 8, 1.0, [], 1041.25, 891, 87.5, 12.5, 1, 0, false, false, false, false, "public", false, [], ["lines\n                .Enumerate", "line.Substring", "SecretRegexes.Regexes\n                            .SelectMany(regex => regex.Matches(line))\n                            .ToList", "SecretRegexes.Regexes\n                            .SelectMany", "regex.Matches", "regexMatches.Any", "lineNumbers.Add", "secrets.Add", "line.ReplaceAllWith", "regexMatches.Select", "regexMatches.Min", "line.ContainsAny", "line.TryFindFirstAppearance", "LargeEntropyTokens(line)\n                                .Where(\n                                    match => SecretRegexes.BlackListedEntropyRegexes\n                                        .None(\n                                            matcher =>\n                                                (matcher.LineMatcher == null || matcher.LineMatcher.IsMatch(originalLine)) &&\n                                                matcher.SecretMatcher.IsMatch(match)\n                                        )\n                                )\n                                .Where(\n                                    match =>\n                                        line.Substring(0, line.IndexOf(match, StringComparison.Ordinal))\n                                            .ContainsAny(LineKeywordWhitelist)\n                                )\n                                .ToList", "LargeEntropyTokens(line)\n                                .Where(\n                                    match => SecretRegexes.BlackListedEntropyRegexes\n                                        .None(\n                                            matcher =>\n                                                (matcher.LineMatcher == null || matcher.LineMatcher.IsMatch(originalLine)) &&\n                                                matcher.SecretMatcher.IsMatch(match)\n                                        )\n                                )\n                                .Where", "LargeEntropyTokens(line)\n                                .Where", "LargeEntropyTokens", "SecretRegexes.BlackListedEntropyRegexes\n                                        .None", "matcher.LineMatcher.IsMatch", "matcher.SecretMatcher.IsMatch", "line.Substring(0, line.IndexOf(match, StringComparison.Ordinal))\n                                            .ContainsAny", "line.IndexOf", "entropyMatches.Any", "originalLine.ReplaceAllWith", "ExtractCamelCaseStrings(token)\n                        .ToList", "words.Count", "Math.Max", "char.IsUpper", "substring.ToString", "substring.Clear", "substring.Append", "char.IsLower", "char.IsDigit", "HexRegex.Matches(line)\n                .Select(match => match.Value)\n                .ToList", "HexRegex.Matches(line)\n                .Select", "HexRegex.Matches", "line.Contains", "Base64Regex.Matches(line)\n                .Select(match => match.Value)\n                .Where", "Base64Regex.Matches(line)\n                .Select", "Base64Regex.Matches", "JwtRegex.Matches(line)\n                .Select", "JwtRegex.Matches", "string.IsNullOrEmpty", "token.CharacterCount", "Math.Log2", "\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=\".ToHashSet", "\"1234567890abcdefABCDEF-\".ToHashSet", "\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_=.\".ToHashSet", "RegexUtils.GetCompiledRegex"], false, false, false, false, ["•••••", "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=", "1234567890abcdefABCDEF-", "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_=.", "http", "publicKeyToken", "guid", "ApplicationId", "AppId", "token", "secret", "password", "pwd", "access", "user", "://", "(?<=[^A-Za-z0-9+/]|^)(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=|(?:[A-Za-z0-9+/]{4}))(?=[^A-Za-z0-9+/=]|$)", "(?:(?<=[^0-9a-f]|^)(?:[0-9a-f]{2})+(?:-(?:[0-9a-f]{2})+)*(?=[^0-9a-f]|$))|(?:(?<=[^0-9A-F]|^)(?:[0-9A-F]{2})+(?:-(?:[0-9A-F]{2})+)*(?=[^0-9A-F]|$))", "(?<=[^A-Za-z0-9-_]|^)[A-Za-z0-9-_=]{26,}\\.[A-Za-z0-9-_=]*\\.[A-Za-z0-9-_=]{42,}(?=[^A-Za-z0-9+/=]|$)"], false, 0, 0, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, false], ["SecretRegexes", "Lim.FeaturesExtractor.SecretRegexes", [], [], "src/Lim.FeaturesExtractor/SecretsCollector/SecretRegexes.cs", 8, 0, {"UnDelimitedGuidRegex": "string", "DelimitedGuidRegex": "string", "Regexes": "System.Collections.Generic.IReadOnlyCollection<Regex>", "BlackListedEntropyRegexes": "System.Collections.Generic.IReadOnlyCollection<(Regex LineMatcher, Regex SecretMatcher)>", "RegexesStrings": "System.Collections.Generic.List<string>", "BlackListedEntropyRegexesStrings": "System.Collections.Generic.List<(string LineMatcher, string SecretMatcher)>"}, [], ["SecretRegexes"], ["System.Collections.Generic", "System.Linq", "System.Text.RegularExpressions", "Lim.Common.DotNET"], false, false, [], false, false, [], {"UnDelimitedGuidRegex": [], "DelimitedGuidRegex": [], "Regexes": [], "BlackListedEntropyRegexes": [], "RegexesStrings": [], "BlackListedEntropyRegexesStrings": []}, [], 0, false, false, false, 1, 1.0, [], 581.0, 581, 100.0, 0.0, 1, 0, false, false, true, false, "public", false, [], ["RegexesStrings.Select(RegexUtils.GetCompiledRegex)\n                .ToList", "RegexesStrings.Select", "BlackListedEntropyRegexesStrings\n                .Select(\n                    matcher =>\n                    (\n                        matcher.LineMatcher == null\n                            ? null\n                            : RegexUtils.GetCompiledRegex(matcher.LineMatcher),\n                        RegexUtils.GetCompiledRegex(matcher.SecretMatcher)\n                    )\n                )\n                .ToList", "BlackListedEntropyRegexesStrings\n                .Select", "RegexUtils.GetCompiledRegex"], false, false, false, false, ["[0-9a-zA-Z]{32}", "[0-9a-zA-Z]{8}-(?:[0-9a-zA-Z]{4}-){3}[0-9a-zA-Z]{12}", "(xox[p|b|o|a]-[0-9]{12}-[0-9]{12}-[0-9]{12}-[a-z0-9]{32})", "-----BEGIN (?:DSA|EC|RSA) PRIVATE KEY-----", "-----BEGIN PGP PRIVATE KEY BLOCK-----", "AIza[0-9A-Za-z\\-_]{35}", "AKIA[0-9A-Z]{16}", "EAACEdEose0cBA[0-9A-Za-z]+", "SK[0-9a-fA-F]{32}", "[0-9]+-[0-9A-Za-z_]{32}\\.apps\\.googleusercontent", "[0-9a-f]{32}-us[0-9]{1,2}", "(?<=(?:api_?key|API_?KEY|ApiKey).*['|\"])[0-9a-zA-Z]{32,45}(?=['|\"])", "[f|F][a|A][c|C][e|E][b|B][o|O][o|O][k|K].*['|\"][0-9a-f]{32}['|\"]", "[g|G][i|I][t|T][h|H][u|U][b|B].*['|\"][0-9a-zA-Z]{35,40}['|\"]", "[h|H][e|E][r|R][o|O][k|K][u|U].*[0-9A-F]{8}-[0-9A-F]{4}-[0-9A-F]{4}-[0-9A-F]{4}-[0-9A-F]{12}", "[s|S][e|E][c|C][r|R][e|E][t|T].*['|\"][0-9a-zA-Z]{32,45}['|\"]", "[t|T][w|W][i|I][t|T][t|T][e|E][r|R].*['|\"][0-9a-zA-Z]{35,44}['|\"]", "[t|T][w|W][i|I][t|T][t|T][e|E][r|R].*[1-9][0-9]+-[0-9a-zA-Z]{40}", "access_token\\$production\\$[0-9a-z]{16}\\$[0-9a-f]{32}", "amzn\\.mws\\.[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}", "https://hooks.slack.com/services/T[a-zA-Z0-9_]{8}/B[a-zA-Z0-9_]{8}/[a-zA-Z0-9_]{24}", "key-[0-9a-zA-Z]{32}", "rk_live_[0-9a-zA-Z]{24}", "sk_live_[0-9a-zA-Z]{24}", "sk_live_[0-9a-z]{32}", "sq0atp-[0-9A-Za-z\\-_]{22}", "sq0csp-[0-9A-Za-z\\-_]{43}", "ya29\\.[0-9A-Za-z\\-_]+", "git://.*?\\.git@[0-9a-z]{40}", "^[0-9a-z]{40}$"], false, 0, 0, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, false], ["SecretsCollector", "Lim.FeaturesExtractor.SecretsCollector", [], ["Lim.FeaturesExtractor.IPropertiesCollector"], "src/Lim.FeaturesExtractor/SecretsCollector/SecretsCollector.cs", 12, 0, {"IgnoredFiles": "System.Collections.Generic.IReadOnlyCollection<string>", "ExtensionToFileClassification": "System.Collections.Generic.IReadOnlyDictionary<string, FileClassification>", "_fileSecretsCollector": "Lim.FeaturesExtractor.IFileSecretsCollector", "_fileSystem": "???.IFileSystem", "_logger": "???.ILogger<SecretsCollector>", "_secretsByFileShaCache": "???.IAsyncCache<string, (IReadOnlyCollection<int> LineNumbers, IReadOnlyCollection<string> Secrets)>"}, ["_fileSecretsCollector", "_fileSystem", "_logger", "_secretsByFileShaCache"], ["SecretsCollector", "ProcessFileAsync", "IsRelevantFile", "GetSecrets", "MatchingFileClassification", "InitAsync"], ["System", "System.Collections.Generic", "System.Linq", "System.Threading", "System.Threading.Tasks", "Infrastructure.Dotnet.Common", "Lim.Common.DotNET", "Microsoft.Extensions.Logging"], false, false, [], false, false, [], {"IgnoredFiles": [], "ExtensionToFileClassification": [], "_fileSecretsCollector": [], "_fileSystem": [], "_logger": [], "_secretsByFileShaCache": []}, [], 0, false, false, false, 6, 1.0, [], 369.1666666666667, 333, 0.0, 50.0, 1, 0, false, false, false, true, "public", false, ["Lim.FeaturesExtractor.IFileSecretsCollector.GetSecrets"], ["_secretsByFileShaCache.GetOrAddAsync", "Task.FromResult", "lineNumbers.HasItems", "secrets.HasItems", "commitProperties.ExposedSecrets.Add", "filePath.RemoveAll", "MatchingFileClassification(filePath, true)\n                            .GetValueOrDefault", "IgnoredFiles.Any", "fileName.Contains", "results.Secrets.Any", "_logger.LogDebug", "results.Secrets.JoinToString", "SourceCodeUtils.IsSuspectedAsTest", "ExtensionToFileClassification\n                    .TryGetValue", "_fileSystem.GetFileExtension(filePath)\n                            .ToLowerInvariant", "_fileSystem.GetFileExtension", "EnumUtils.GetValues<FileClassification>()\n            .SelectManyToPairs(classification => classification.FileExtensions())\n            .ToDictionary", "EnumUtils.GetValues<FileClassification>()\n            .SelectManyToPairs", "EnumUtils.GetValues<FileClassification>", "classification.FileExtensions", "cacheBuilder", "TimeSpan.FromHours"], false, false, false, false, ["google-services.json", "lock", "Secret in {path}:\n{secrets}", "\n"], false, 0, 0, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, false], ["FeaturesExtractor", "Lim.FeaturesExtractor.FeaturesExtractor", [], ["Lim.FeaturesExtractor.IExtractor"], "src/Lim.FeaturesExtractor/Services/FeaturesExtractor.cs", 9, 0, {"_logger": "???.ILogger<FeaturesExtractor>", "_pipelineExecutor": "???.IPipelineExecutor"}, ["_logger", "_pipelineExecutor", "CodeParsingTarget"], ["FeaturesExtractor", "CodeParsingTarget", "ExtractAsync", "Shutdown"], ["System.Threading", "System.Threading.Tasks", "Infrastructure.Dotnet.Common", "Lim.Common.DotNET", "Microsoft.Extensions.Logging"], false, false, [], false, false, [], {"_logger": [], "_pipelineExecutor": []}, [], 1, false, false, false, 3, 0.75, [], 279.5, 70, 0.0, 75.0, 1, 0, false, true, false, true, "public", false, [], ["commitContext.Languages.Intersects", "CodeParsingTarget.GetSupportedLanguages", "_logger.LogDebug", "_pipelineExecutor.EnqueueAsync", "commitContext.GetState", "_pipelineExecutor.Cancel"], false, false, false, false, ["Attempting to enqueue features extraction for {target} on {input}"], false, 1, 0, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, false], ["JavaFeaturesExtractor", "Lim.FeaturesExtractor.JavaFeaturesExtractor", ["Lim.FeaturesExtractor.FeaturesExtractor"], [], "src/Lim.FeaturesExtractor/Services/JavaFeaturesExtractor.cs", 8, 0, {"_logger": "???.ILogger<FeaturesExtractor>", "_pipelineExecutor": "???.IPipelineExecutor"}, ["_logger", "_pipelineExecutor", "CodeParsingTarget"], ["JavaFeaturesExtractor", "CodeParsingTarget", "FeaturesExtractor", "ExtractAsync", "Shutdown"], ["System", "Infrastructure.Dotnet.Common", "Lim.Common.DotNET", "Microsoft.Extensions.Logging"], false, false, [], false, false, [], {"_logger": [], "_pipelineExecutor": []}, [], 1, false, false, false, 4, 0.8, [], 227.6, 41, 0.0, 80.0, 2, 0, false, false, false, true, "public", false, [], ["commitContext.Languages.Intersects", "CodeParsingTarget.GetSupportedLanguages", "_logger.LogDebug", "_pipelineExecutor.EnqueueAsync", "commitContext.GetState", "_pipelineExecutor.Cancel", "pipelineExecutorBuilder", "nameof"], false, false, false, false, [], false, 1, 0, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, false], ["NodeFeaturesExtractor", "Lim.FeaturesExtractor.NodeFeaturesExtractor", ["Lim.FeaturesExtractor.FeaturesExtractor"], [], "src/Lim.FeaturesExtractor/Services/NodeFeaturesExtractor.cs", 8, 0, {"_logger": "???.ILogger<FeaturesExtractor>", "_pipelineExecutor": "???.IPipelineExecutor"}, ["_logger", "_pipelineExecutor", "CodeParsingTarget"], ["NodeFeaturesExtractor", "CodeParsingTarget", "FeaturesExtractor", "ExtractAsync", "Shutdown"], ["System", "Infrastructure.Dotnet.Common", "Lim.Common.DotNET", "Microsoft.Extensions.Logging"], false, false, [], false, false, [], {"_logger": [], "_pipelineExecutor": []}, [], 1, false, false, false, 4, 0.8, [], 227.6, 41, 0.0, 80.0, 2, 0, false, false, false, true, "public", false, [], ["commitContext.Languages.Intersects", "CodeParsingTarget.GetSupportedLanguages", "_logger.LogDebug", "_pipelineExecutor.EnqueueAsync", "commitContext.GetState", "_pipelineExecutor.Cancel", "pipelineExecutorBuilder", "nameof"], false, false, false, false, [], false, 1, 0, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, false], ["PropertiesExtractor", "Lim.FeaturesExtractor.PropertiesExtractor", [], ["Lim.FeaturesExtractor.IExtractor"], "src/Lim.FeaturesExtractor/Services/PropertiesExtractor.cs", 12, 0, {"_commitsStorage": "Lim.Common.DotNET.ICommitsStorage", "_fileSystem": "???.IFileSystem", "_propertiesCollectors": "System.Collections.Generic.IReadOnlyCollection<IPropertiesCollector>", "_repositoryModuleCollector": "Lim.FeaturesExtractor.IRepositoryModuleCollector", "_tarHelper": "Lim.FeaturesExtractor.ITarHelper"}, ["_commitsStorage", "_fileSystem", "_propertiesCollectors", "_repositoryModuleCollector", "_tarHelper", "CodeParsingTarget"], ["PropertiesExtractor", "CodeParsingTarget", "ExtractAsync", "Shutdown", "InitCollectors"], ["System", "System.Collections.Generic", "System.IO", "System.Linq", "System.Threading", "System.Threading.Tasks", "Infrastructure.Dotnet.Common", "Lim.Common.DotNET"], false, false, [], false, false, [], {"_commitsStorage": [], "_fileSystem": [], "_propertiesCollectors": [], "_repositoryModuleCollector": [], "_tarHelper": []}, [], 1, false, false, false, 4, 0.8, [], 594.8, 174, 0.0, 80.0, 1, 0, false, false, false, true, "public", false, ["Lim.FeaturesExtractor.IPropertiesCollector.InitAsync"], ["snapshotDescriptor.RepositoryLanguages.Any", "language.SupportsPropertiesExtraction", "repositoryDirectory.Path.EnsureEndsWith", "_tarHelper.ExtractTarAsync", "_fileSystem.GetFilePathsRecursive", "cancellationToken.ThrowIfCancellationRequested", "Path.GetFileName", "Path.GetDirectoryName", "Path.GetRelativePath", "_fileSystem.FileContentLines", "_fileSystem.FileSha1", "propertiesCollector.IsRelevantFile", "string.IsNullOrEmpty", "propertiesCollector.ProcessFileAsync", "_repositoryModuleCollector.ExtractModules", "_commitsStorage.SetPropertiesAsync", "propertiesCollectors.ToList"], false, false, false, false, [], false, 1, 0, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, false], ["SnapshotConsumer", "Lim.FeaturesExtractor.SnapshotConsumer", [], ["???.IHostedService"], "src/Lim.FeaturesExtractor/Services/SnapshotConsumer.cs", 18, 0, {"BusyWaitInterval": "System.TimeSpan", "_cancellationTokenSource": "System.Threading.CancellationTokenSource", "_commitsStorage": "Lim.Common.DotNET.ICommitsStorage", "_concurrencyLevel": "int", "_extractors": "System.Collections.Generic.IReadOnlyCollection<IExtractor>", "_fileSystem": "???.IFileSystem", "_logger": "???.ILogger<SnapshotConsumer>", "_rootDirectory": "string", "_snapshotsInProgress": "System.Collections.Concurrent.ConcurrentDictionary<string, bool>", "_orchestratorBlock": "System.Threading.Tasks.Dataflow.ActionBlock<(string, SnapshotDescriptor, ICommitContext)>"}, ["_cancellationTokenSource", "_commitsStorage", "_concurrencyLevel", "_extractors", "_fileSystem", "_logger", "_rootDirectory", "_snapshotsInProgress", "_orchestratorBlock"], ["SnapshotConsumer", "StartAsync", "StopAsync", "CreateOrchestratorBlock", "ConsumeSnapshotsAsync", "CleanUp", "TryGetNextSnapshot", "ProcessSnapshotSafeAsync", "MarkFailedAsync", "ProcessSnapshotAsync"], ["System", "System.Collections.Concurrent", "System.Collections.Generic", "System.IO", "System.Linq", "System.Threading", "System.Threading.Tasks", "System.Threading.Tasks.Dataflow", "Infrastructure.Dotnet.Common", "JetBrains.Annotations", "Lim.Common.DotNET", "Microsoft.Extensions.Hosting", "Microsoft.Extensions.Logging", "Lim.Common.DotNET.ExceptionExtensions"], false, false, ["UsedImplicitly"], false, false, [], {"BusyWaitInterval": [], "_cancellationTokenSource": [], "_commitsStorage": [], "_concurrencyLevel": [], "_extractors": [], "_fileSystem": [], "_logger": [], "_rootDirectory": [], "_snapshotsInProgress": [], "_orchestratorBlock": []}, [], 0, false, false, false, 10, 1.0, [], 930.9, 562, 0.0, 30.0, 1, 0, false, false, false, true, "public", false, ["Lim.FeaturesExtractor.IExtractor.Shutdown", "Lim.FeaturesExtractor.IExtractor.ExtractAsync", "Lim.FeaturesExtractor.SnapshotConsumer.CreateOrchestratorBlock"], ["Task.Run", "_cancellationTokenSource.Cancel", "_orchestratorBlock.Complete", "string.IsNullOrEmpty", "_commitsStorage.GetCommitContextAsync", "_logger.LogInformation", "_orchestratorBlock.SendAsync", "_logger.LogError", "snapshotDescriptor.ToJson", "Task.Delay", "ExceptionExtensions.IsCanceledException", "_fileSystem.DeleteDirectory", "_snapshotsInProgress.TryRemove", "_fileSystem\n                .GetDirectoryPathsSortedByOldest(_rootDirectory)\n                .FirstOrDefault", "_fileSystem\n                .GetDirectoryPathsSortedByOldest", "_snapshotsInProgress.ContainsKey", "_fileSystem.FileExists", "Path.Combine", "_fileSystem.ReadJson<SnapshotDescriptor>", "_fileSystem.DeleteFile", "cancellationToken.ThrowIfCancellationRequested", "_fileSystem.Write", "DateTime.UtcNow.ToString", ".RepositoryKeys.JoinToString", "EnumUtils.GetValues<CodeParsingTarget>", "commitContext.GetState", "Revisions.TargetFeaturesRevision", "_commitsStorage.SetStateAsync", "commitContext.RepositoryKeys.JoinToString", "TimeSpan.FromSeconds", "extractors.ToList", "_fileSystem.CreateDirectoryIfNotExists"], false, false, false, false, ["Deleting snapshot for missing commit at '{path}'", "Deleting outdated snapshot at '{path}'", "Orchestration block has stopped accepting new jobs, recreating it", "Failed consuming snapshot", "O", "Failed to process snapshot {snapshot} at {path} for repositories {repositories}", "Failed processing snapshot {}", "Failed to process snapshot {snapshot} at {path} for repositories {repositories} for {target}"], false, 0, 0, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, false], ["DependenciesCache", "Lim.FeaturesExtractor.DependenciesCache", [], ["Lim.FeaturesExtractor.IDependenciesCache"], "src/Lim.FeaturesExtractor/Utils/DependenciesCache.cs", 9, 0, {"_dependencyHashCodesByFileShaCache": "???.ICollectionsAsyncCache<string, Dependency>"}, ["_dependencyHashCodesByFileShaCache"], ["DependenciesCache", "GetOrAddByFileShaAsync"], ["System", "System.Collections.Generic", "System.Threading.Tasks", "Infrastructure.Dotnet.Common", "Lim.Common.DotNET"], false, false, [], false, false, [], {"_dependencyHashCodesByFileShaCache": []}, [], 0, false, false, false, 2, 1.0, [], 93.0, 93, 0.0, 100.0, 1, 0, false, false, false, false, "public", false, [], ["_dependencyHashCodesByFileShaCache.GetOrAddAsync", "cacheByFileShaBuilder", "TimeSpan.FromDays"], false, false, false, false, [], false, 0, 0, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, false], ["FileDownloader", "Lim.FeaturesExtractor.FileDownloader", [], ["Lim.FeaturesExtractor.IFileDownloader"], "src/Lim.FeaturesExtractor/Utils/FileDownloader.cs", 9, 0, {"TimeoutInSeconds": "int", "_client": "???.RestClient", "_contentByUrlCache": "???.IAsyncCache<string, string>", "_logger": "???.ILogger<FileDownloader>"}, ["_client", "_contentByUrlCache", "_logger"], ["FileDownloader", "GetUrlContentAsync"], ["System", "System.Threading.Tasks", "Infrastructure.Dotnet.Common", "Microsoft.Extensions.Logging", "RestSharp"], false, false, [], false, false, [], {"TimeoutInSeconds": [], "_client": [], "_contentByUrlCache": [], "_logger": []}, [], 0, false, false, false, 2, 1.0, [], 500.5, 500, 0.0, 100.0, 1, 0, false, false, false, false, "public", false, [], ["_contentByUrlCache.GetOrAddAsync", "UrlUtils.IsValidUrl", "_client.SafeExecuteTaskAsync", "_logger.LogDebug", "response.FormatErrorResponse", "response.RawBytes.AsString", "cacheBuilder", "TimeSpan.FromHours", "TimeSpan.FromSeconds"], false, false, false, false, [], false, 0, 0, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, false], ["NonCodeFilesAnalysisUtils", "Lim.FeaturesExtractor.NonCodeFilesAnalysisUtils", [], [], "src/Lim.FeaturesExtractor/Utils/NonCodeFilesAnalysisUtils.cs", 6, 0, {"Separators": "char[]", "ContainerRegistriesUrls": "System.Collections.Generic.HashSet<string>"}, [], ["ExtractGitReferences", "ExtractContainerRegistriesReferences"], ["System.Collections.Generic", "System.Linq"], false, false, [], false, false, [], {"Separators": [], "ContainerRegistriesUrls": []}, [], 0, false, false, false, 2, 1.0, [], 189.0, 189, 100.0, 100.0, 0, 0, false, false, true, false, "public", false, [], ["fileContent.SelectMany(line => line.Split(Separators))\n                .Where", "fileContent.SelectMany", "line.Split", "item.ToLower()\n                        .EndsWith", "item.ToLower", "ContainerRegistriesUrls.Any"], false, false, false, false, ["gcr.io", "ecr.dkr", "ecr.api", "azurecr.io", "index.docker.io", ".git"], false, 0, 0, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, false], ["TarHelper", "Lim.FeaturesExtractor.TarHelper", [], ["Lim.FeaturesExtractor.ITarHelper"], "src/Lim.FeaturesExtractor/Utils/TarHelper.cs", 7, 0, {"_asyncProcessExecutor": "???.IAsyncProcessExecutor", "_limitDiskIo": "bool"}, ["_asyncProcessExecutor"], ["TarHelper", "ExtractTarAsync"], ["System.Threading.Tasks", "Infrastructure.Dotnet.Common", "JetBrains.Annotations"], false, false, ["UsedImplicitly"], false, false, [], {"_asyncProcessExecutor": [], "_limitDiskIo": []}, [], 0, false, false, false, 2, 1.0, [], 300.0, 300, 0.0, 100.0, 1, 0, false, false, false, true, "public", false, [], ["_asyncProcessExecutor.RunAsync"], false, false, false, false, ["ionice", "-c3", "tar", "-xf"], false, 0, 0, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, false], ["UrlMatchingUtils", "Lim.FeaturesExtractor.UrlMatchingUtils", [], [], "src/Lim.FeaturesExtractor/Utils/UrlMatchingUtils.cs", 5, 0, {}, [], ["MatchPatternToRoute"], ["AntPathMatching"], false, false, [], false, false, [], {}, [], 0, false, false, false, 1, 1.0, [], 168.0, 168, 100.0, 100.0, 0, 0, false, false, false, false, "public", false, [], ["new Ant(pattern).IsMatch"], false, false, false, false, ["/**", "/**/"], false, 0, 0, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, false], ["DifferIntervalOrchestrator", "Lim.FeaturesDiffer.DifferIntervalOrchestrator", ["???.HostedIntervalWorkingService"], [], "src/Lim.FeaturesDiffer/Core/DifferIntervalOrchestrator.cs", 14, 0, {"MaxIterationCommitsCount": "int", "_boundAsyncExecutor": "???.IBoundAsyncExecutor", "_commitsStorage": "Lim.Common.DotNET.ICommitsStorage", "_differService": "Lim.FeaturesDiffer.IDifferService", "_governanceRulesStorage": "Lim.Common.DotNET.IGovernanceRulesStorage", "_materialChangesStorage": "Lim.Common.DotNET.IMaterialChangesStorage", "_projectsStorage": "Lim.Common.DotNET.IProjectsStorage", "_releasesStorage": "Lim.Common.DotNET.IReleasesStorage", "_repositoriesStorage": "Lim.Common.DotNET.IRepositoriesStorage", "_repositoryProfilesStorage": "Lim.Common.DotNET.IRepositoryProfilesStorage"}, ["_boundAsyncExecutor", "_commitsStorage", "_differService", "_governanceRulesStorage", "_materialChangesStorage", "_projectsStorage", "_releasesStorage", "_repositoriesStorage", "_repositoryProfilesStorage"], ["DifferIntervalOrchestrator", "Work", "DiffLatestAsync", "DiffAndSetStateAsync", "DiffCommitInReleaseContextsAsync", "DiffCommitWithParentAsync", "DiffCommitsAsync", "GetCommitWithFeaturesPerParsingTargetAsync", "GetLanguages"], ["System", "System.Collections.Generic", "System.Linq", "System.Threading", "System.Threading.Tasks", "System.Threading.Tasks.Dataflow", "Infrastructure.Dotnet.Common", "JetBrains.Annotations", "Lim.Common.DotNET", "Microsoft.Extensions.Logging"], false, false, ["UsedImplicitly"], false, false, [], {"MaxIterationCommitsCount": [], "_boundAsyncExecutor": [], "_commitsStorage": [], "_differService": [], "_governanceRulesStorage": [], "_materialChangesStorage": [], "_projectsStorage": [], "_releasesStorage": [], "_repositoriesStorage": [], "_repositoryProfilesStorage": []}, [], 0, false, false, false, 9, 1.0, [], 1285.0, 867, 11.11111111111111, 11.11111111111111, 1, 0, false, false, false, true, "public", false, ["Lim.FeaturesDiffer.IDifferService.DiffAsync"], ["Logger.LogError", "(await _repositoriesStorage.GetMonitoredRepositoriesAsync())\n                .Where(repository => !repositoriesWithNoHits.Contains(repository.Key))\n                .ToDictionary", "(await _repositoriesStorage.GetMonitoredRepositoriesAsync())\n                .Where", "_repositoriesStorage.GetMonitoredRepositoriesAsync", "repositoriesWithNoHits.Contains", "(await _releasesStorage.GetAllClonedAsync()).ToDictionary", "_releasesStorage.GetAllClonedAsync", "ongoingReleaseByKey.Values.ToDictionaryGrouped", "Math.Ceiling", "MaxIterationCommitsCount.SafeDivision", "TaskUtils.WhenAll", "_governanceRulesStorage.GetGovernanceRulesAsync", "_projectsStorage.GetMonitoredProjectsAsync", "repositoriesByKey.Values.OrderBy", "cancellationToken.ThrowIfCancellationRequested", "(await _commitsStorage.GetDiffReadyCommitsAsync(commitCountPerRepository, repository.Key))\n                    .Where(\n                        commitContext => !collectedCommitShas.Contains(commitContext.Sha) &&\n                                         (commitContext.IsMainBranchCommit || commitContext.ReleaseKeys.Intersects(ongoingReleaseByKey.Keys))\n                    )\n                    .ToList", "(await _commitsStorage.GetDiffReadyCommitsAsync(commitCountPerRepository, repository.Key))\n                    .Where", "_commitsStorage.GetDiffReadyCommitsAsync", "collectedCommitShas.Contains", "commitContext.ReleaseKeys.Intersects", "readyCommits.None", "repositoriesWithNoHits.Add", "collectedCommitShas.AddRange", "readyCommits.Select", "collectedCommitShas.None", "Logger.LogDebug", "Logger.LogInformation", "collectedCommitsByRepository.Values.ZipAll()\n                .ToList", "collectedCommitsByRepository.Values.ZipAll", "(await _repositoryProfilesStorage.GetProfilesAsync(collectedCommitsByRepository.Keys))\n                .ToDictionary", "_repositoryProfilesStorage.GetProfilesAsync", "_boundAsyncExecutor.ProcessAsync", "commitContext.RepositoryKeys.All", "relevantRepositoryProfilesByKey.ContainsKey", "releasesByTargetSha.GetValueOrDefault", "DiffAndSetStateAsync", "failedCommits.Any", "diffedCommits.None", "diffedCommits\n                .SelectMany(context => context.RepositoryKeys)\n                .Distinct()\n                .Where", "diffedCommits\n                .SelectMany(context => context.RepositoryKeys)\n                .Distinct", "diffedCommits\n                .SelectMany", "_repositoriesStorage.SetFieldAsync", "_commitsStorage.SetCommitFieldAsync", ".MaterialChangesLabelsToCount.Keys.ToHashSet", "_releasesStorage.SyncReleaseAsync", "_commitsStorage.SyncCommitInsightsAsync", "_materialChangesStorage.ClearMaterialChangesAsync", "_materialChangesStorage.SyncMaterialChangesAsync", "targetCommitContext.RepositoryKeys.JoinToString", "EnumUtils.GetValues<CodeParsingTarget>()\n                .Where(\n                    codeParsingTarget =>\n                    {\n                        var codeParsingTargetLanguages = codeParsingTarget.GetSupportedLanguages();\n                        return codeParsingTargetLanguages == null || codeParsingTargetLanguages.Intersects(repositoriesLanguages);\n                    }\n                )\n                .ToList", "EnumUtils.GetValues<CodeParsingTarget>()\n                .Where", "EnumUtils.GetValues<CodeParsingTarget>", "codeParsingTarget.GetSupportedLanguages", "codeParsingTargetLanguages.Intersects", "_commitsStorage.GetFirstCommitWithFeaturesPerParsingTarget", "sourceCommit.RepositoryKeys\n                .SelectMany(\n                    key => repositoryProfileByKey[key]\n                        .Repository.Languages\n                )\n                .ToHashSet", "sourceCommit.RepositoryKeys\n                .SelectMany", "boundAsyncExecutorBuilder"], false, false, false, false, ["Failed to diff commits", "No commits found to diff", "Will diff {count} commits for {count} repositories", "Failed to diff {}/{} commits: ", "Completed diff for {count}/{count} commits", "Marking first cycle completed for {repository}", "Marking release {release} as diffed", "Commit {commit} no longer has material changes, clearing them", "Failed to diff {source}->{target} (repositories: {repositories})"], false, 0, 0, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, false], ["CodeFeaturesDiffer", "Lim.FeaturesDiffer.CodeFeaturesDiffer<TBin>", [], ["Lim.FeaturesDiffer.ICommitsDiffer"], "src/Lim.FeaturesDiffer/Core/Differs/CodeFeaturesDiffer.cs", 11, 0, {"_codeFeaturesStorage": "Lim.Common.DotNET.ICodeFeaturesStorage", "_logger": "???.ILogger<CodeFeaturesDiffer<TBin>>"}, ["_codeFeaturesStorage", "_logger", "CodeEntities", "OrderWeight", "CodeParsingTargets"], ["CodeFeaturesDiffer", "CodeEntities", "OrderWeight", "CodeParsingTargets", "DiffAsync", "GroupByFeature", "BuildBin", "AllIds", "CollectInsights", "LoadAsync"], ["System", "System.Collections.Generic", "System.Linq", "System.Threading.Tasks", "Infrastructure.Dotnet.Common", "Lim.Common.DotNET", "Microsoft.Extensions.Logging"], false, false, [], false, false, [], {"_codeFeaturesStorage": [], "_logger": []}, [], 3, false, false, false, 7, 0.7, [], 383.3, 0, 10.0, 30.0, 1, 0, false, true, false, true, "public", true, [], ["nameof", "CodeParsingTargets.JoinToString", "CodeParsingTargets.First", "differContext.SourceCommitShaByTarget.TryGetValue", "differContext.CommitContext.GetState", "_logger.LogInformation", "previousFeaturesByEntity.Values.SelectMany(tuple => tuple.IdsByGroupingKey.Keys)\n                .Union(currentFeaturesByEntity.Values.SelectMany(tuple => tuple.IdsByGroupingKey.Keys))\n                .Distinct", "previousFeaturesByEntity.Values.SelectMany(tuple => tuple.IdsByGroupingKey.Keys)\n                .Union", "previousFeaturesByEntity.Values.SelectMany", "currentFeaturesByEntity.Values.SelectMany", "(previousIds.GetValueOrDefault(groupingKey) ?? new HashSet<string>())\n                .Union(currentIds.GetValueOrDefault(groupingKey) ?? new HashSet<string>())\n                .ToHashSet", "(previousIds.GetValueOrDefault(groupingKey) ?? new HashSet<string>())\n                .Union", "previousIds.GetValueOrDefault", "currentIds.GetValueOrDefault", "_codeFeaturesStorage.LoadAsync", "codeEntityFeatures.EntityIds.ToDictionaryGrouped", "codeEntityFeatures.GetFeature<string>"], false, false, false, false, ["No {target} {entity} features found for commit {sha} - will not diff with it as parent", "No {target} {entity} features found for commit {sha} - will not diff with it as current"], false, 3, 0, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, false], ["InventoryDiffer", "Lim.FeaturesDiffer.InventoryDiffer", [], ["Lim.FeaturesDiffer.ICommitsDiffer"], "src/Lim.FeaturesDiffer/Core/Differs/InventoryDiffer.cs", 9, 0, {}, ["OrderWeight", "CodeParsingTargets"], ["OrderWeight", "CodeParsingTargets", "DiffAsync", "JoinAllEntityPairs", "MergeSimilarEntities", "DiffEntity"], ["System.Collections.Generic", "System.Linq", "System.Threading.Tasks", "Infrastructure.Dotnet.Common", "Lim.Common.DotNET"], false, false, [], false, false, [], {}, [], 2, false, false, false, 4, 0.6666666666666666, [], 789.8333333333334, 873, 50.0, 50.0, 0, 0, false, false, false, true, "public", false, [], ["currentInventory.EnumerateDiffableProperties()\n                .Zip", "currentInventory.EnumerateDiffableProperties", "previousInventory.EnumerateDiffableProperties", "first.None", "second.None", "JoinAllEntityPairs(first, second)\n                    .ToList", "current.FirstOrDefault", "previous.First", "current.Select", "previous.GetValueOrDefault", "previous.Where(pair => !current.ContainsKey(pair.Key))\n                .Select", "previous.Where", "current.ContainsKey", "typeRepresentative.FindSimilarEntities(current, previous)\n                .ToList", "typeRepresentative.FindSimilarEntities", "similarEntities.Any", "sharedOrAddedEntities.Concat", "similarEntities.Concat(sharedOrAddedEntities)\n                .Concat", "similarEntities.Concat", "discoveredEntityIds.Contains", "allEntities.Add", "discoveredEntityIds.Add", "currentAndPreviousEntities.FirstOrDefault", "currentAndPreviousEntities.First", "governanceRule.When.Select", "typeRepresentative.CanDiffRule", "nonEmptyEntity.CollectInsightsForDiffable", "nonEmptyEntity.CollectNonGovernanceInsightsForDiffable", "typeRepresentative.AggregateMaterialChanges"], false, false, false, false, [], false, 2, 0, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, false], ["JavaFrameworkUsageCollector", "Lim.FeaturesDiffer.JavaFrameworkUsageCollector", [], ["Lim.FeaturesDiffer.IInsightFromJavaFeaturesCollector"], "src/Lim.FeaturesDiffer/Core/Differs/Java/Collectors/JavaFrameworkUsageCollector.cs", 8, 0, {}, [], ["CollectInsights"], ["System.Collections.Generic", "System.Linq", "Infrastructure.Dotnet.Common", "Lim.Common.DotNET"], false, false, [], false, false, [], {}, [], 0, false, false, false, 1, 1.0, [], 855.0, 855, 0.0, 100.0, 0, 0, false, false, false, false, "public", false, [], ["featuresBin.CurrentFeatures.Class.ShouldIgnore", "currentMethodFeatures.GetJsonFeature<List<CodeFramework>>", "previousMethodFeatures.GetJsonFeature<List<CodeFramework>>", "currentFrameworks.Except", "commitInsights.CodeFrameworks.AddRange"], false, false, false, false, [], false, 0, 0, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, false], ["JavaFeaturesDiffer", "Lim.FeaturesDiffer.JavaFeaturesDiffer", ["???.CodeFeaturesDiffer<JavaFeaturesBin>"], [], "src/Lim.FeaturesDiffer/Core/Differs/Java/JavaFeaturesDiffer.cs", 9, 0, {"_insightCollectors": "System.Collections.Generic.IReadOnlyCollection<IInsightFromJavaFeaturesCollector>"}, ["_insightCollectors", "CodeEntities", "CodeParsingTargets"], ["JavaFeaturesDiffer", "CodeEntities", "CodeParsingTargets", "GroupByFeature", "BuildBin", "CollectInsights"], ["System", "System.Collections.Generic", "System.Linq", "Lim.Common.DotNET", "Microsoft.Extensions.Logging"], false, false, [], false, false, [], {"_insightCollectors": []}, [], 2, false, false, false, 4, 0.6666666666666666, [], 269.8333333333333, 192, 0.0, 33.333333333333336, 1, 0, false, false, false, false, "public", false, ["Lim.FeaturesDiffer.IInsightFromJavaFeaturesCollector.CollectInsights"], ["nameof", "previousFeaturesByEntity[CodeEntity.Method]\n                    .IdsByGroupingKey.GetValueOrDefault", "currentFeaturesByEntity[CodeEntity.Method]\n                    .IdsByGroupingKey.GetValueOrDefault", "insightCollectors.ToList"], false, false, false, false, [], false, 2, 0, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, false], ["NodeFeaturesDiffer", "Lim.FeaturesDiffer.NodeFeaturesDiffer", ["???.CodeFeaturesDiffer<NodeFeaturesBin>"], [], "src/Lim.FeaturesDiffer/Core/Differs/Node/NodeFeaturesDiffer.cs", 8, 0, {"_insightCollectors": "System.Collections.Generic.IReadOnlyCollection<IInsightFromNodeFeaturesCollector>"}, ["_insightCollectors", "CodeEntities", "CodeParsingTargets"], ["NodeFeaturesDiffer", "CodeEntities", "CodeParsingTargets", "CollectInsights", "GroupByFeature", "BuildBin"], ["System.Collections.Generic", "System.Linq", "Lim.Common.DotNET", "Microsoft.Extensions.Logging"], false, false, [], false, false, [], {"_insightCollectors": []}, [], 2, false, false, false, 4, 0.6666666666666666, [], 267.0, 52, 0.0, 33.333333333333336, 1, 0, false, false, false, false, "public", false, ["Lim.FeaturesDiffer.IInsightFromNodeFeaturesCollector.CollectInsights", "Lim.FeaturesDiffer.CodeFeaturesDiffer<Lim.FeaturesDiffer.NodeFeaturesBin>.AllIds"], ["insightCollectors.ToList"], false, false, false, false, [], false, 2, 0, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, false], ["ExternalDependenciesComparator", "Lim.FeaturesDiffer.ExternalDependenciesComparator", [], ["Lim.FeaturesDiffer.IExternalDependenciesComparator"], "src/Lim.FeaturesDiffer/Core/Differs/Properties/Collectors/ExternalDependenciesComparator.cs", 10, 0, {}, [], ["StableDependenciesMaterialChanges", "RemovedDependenciesMaterialChanges", "AddedDependenciesMaterialChanges", "GetVersions"], ["System", "System.Collections.Generic", "System.Linq", "Infrastructure.Dotnet.Common", "Lim.Common.DotNET", "Microsoft.Extensions.Logging"], false, false, [], false, false, [], {}, [], 0, false, false, false, 4, 1.0, [], 1341.0, 1103, 25.0, 75.0, 0, 0, false, false, false, false, "public", false, ["Lim.FeaturesDiffer.IDependencyChangeCollector.HandleStableDependencyDowngraded", "Lim.FeaturesDiffer.IDependencyChangeCollector.HandleStableDependencyUpgraded", "Lim.FeaturesDiffer.IDependencyChangeCollector.HandleRemovedDependency", "Lim.FeaturesDiffer.IDependencyChangeCollector.HandleDependencyAdded"], ["currentDependenciesByName.Keys.Where(\n                    name => previousDependenciesByName.ContainsKey(name) &&\n                            currentDependenciesByName[name]\n                                .IsExternal\n                )\n                .ToList", "currentDependenciesByName.Keys.Where", "previousDependenciesByName.ContainsKey", "previousVersions.None", "currentVersions.None", "currentVersions.Max", "previousVersions.Min", "logger.LogInformation", "currentVersions.Min", "GovernanceRule.RelevantLabelsBySubType", "previousVersions.Max", "previousDependenciesByName.Keys.Where(\n                    name => !currentDependenciesByName.ContainsKey(name) &&\n                            previousDependenciesByName[name]\n                                .IsExternal\n                )\n                .ToList", "previousDependenciesByName.Keys.Where", "currentDependenciesByName.ContainsKey", "currentDependenciesByName.Keys.Where(\n                    name => !previousDependenciesByName.ContainsKey(name) &&\n                            currentDependenciesByName[name]\n                                .IsExternal\n                )\n                .ToList", "dependency.Versions.Select(\n                    versionString => Version.TryParse(versionString, out var version)\n                        ? version\n                        : null\n                )\n                .WhereNotNull()\n                .ToList", "dependency.Versions.Select(\n                    versionString => Version.TryParse(versionString, out var version)\n                        ? version\n                        : null\n                )\n                .WhereNotNull", "dependency.Versions.Select", "Version.TryParse"], false, false, false, false, ["{commit} - external dependency downgraded: '{dependency}' ({from} -> {to})", "{commit} - external dependency upgraded: '{dependency}' ({from} -> {to})", "{commit} - external dependency removed: '{dependency}'", "{commit} - external dependency added: '{dependency}'"], false, 0, 0, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, false], ["MetadataDiffer", "Lim.FeaturesDiffer.MetadataDiffer", [], ["Lim.FeaturesDiffer.ICommitsDiffer"], "src/Lim.FeaturesDiffer/Core/Differs/Properties/MetadataDiffer.cs", 8, 0, {}, ["OrderWeight", "CodeParsingTargets"], ["OrderWeight", "CodeParsingTargets", "DiffAsync", "CalculateNewDeveloperRules", "CalculateCompoundRules", "CreateMaterialChange"], ["System.Collections.Generic", "System.Linq", "System.Threading.Tasks", "Lim.Common.DotNET"], false, false, [], false, false, [], {}, [], 2, false, false, false, 4, 0.6666666666666666, [], 522.5, 638, 0.0, 50.0, 0, 0, false, false, false, true, "public", false, [], ["currentInventory.IsNewDeveloperCommit", "governanceRules.ToList()\n                .Where", "governanceRules.ToList", "rule.When.All", "commitInsights.MaterialChanges.Add", "commitInsights.MaterialChanges.OfType<CompoundMaterialChange>()\n                .ToList", "commitInsights.MaterialChanges.OfType<CompoundMaterialChange>", "governanceRules.FirstOrDefault", "rule.When.Any", "materialChange.PartialMaterialChangeKeys.Add", "relevantThenIndices.Add", "relevantThenIndices.Any", "newDeveloperRule.GetWhenIndexes"], false, false, false, false, [], false, 2, 0, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, false], ["DifferService", "Lim.FeaturesDiffer.DifferService", [], ["Lim.FeaturesDiffer.IDifferService"], "src/Lim.FeaturesDiffer/Core/DifferService.cs", 9, 0, {"_commitsDiffers": "System.Collections.Generic.ICollection<ICommitsDiffer>", "InventoryEnricher": "Lim.Common.DotNET.IInventoryEnricher"}, ["_commitsDiffers", "InventoryEnricher"], ["DifferService", "DiffAsync", "CollectCommitLabels", "EnrichInventoriesAsync", "EnrichAndFilterModuleMaterialChanges"], ["System.Collections.Generic", "System.Linq", "System.Threading.Tasks", "Infrastructure.Dotnet.Common", "Lim.Common.DotNET"], false, false, [], false, false, [], {"_commitsDiffers": [], "InventoryEnricher": []}, [], 0, false, false, false, 5, 1.0, [], 1349.6, 981, 40.0, 40.0, 1, 0, false, false, false, true, "public", false, ["Lim.FeaturesDiffer.ICommitsDiffer.DiffAsync"], ["repositoryProfilesByKey.Values\n                .Where(profile => targetCommitContext.RepositoryKeys.Contains(profile.Key))\n                .ToDictionary", "repositoryProfilesByKey.Values\n                .Where", "targetCommitContext.RepositoryKeys.Contains", "commitRepositoriesByKey.Values.Select(_ => _.Key)\n                .ToHashSet", "commitRepositoriesByKey.Values.Select", "Project.AssociatedProjectsForRepositories(\n                    projects,\n                    commitRepositoriesByKey.Values.Select(_ => _.Repository)\n                )\n                .ToDictionary", "Project.AssociatedProjectsForRepositories", "GovernanceRule.RelevantRulesForRepositories(\n                    governanceRules.Where(rule => rule.HasLabels),\n                    commitRepositoriesByKey,\n                    associatedProjectsByKey\n                )\n                .ToDictionary", "GovernanceRule.RelevantRulesForRepositories", "governanceRules.Where", "repositoryProfilesByKey.WhereKeys(repositoryKey => commitRepositoryKeys.Contains(repositoryKey))\n                .Values\n                .SelectMany(_ => _.Modules)\n                .Select(module => module.Root)\n                .ToHashSet", "repositoryProfilesByKey.WhereKeys(repositoryKey => commitRepositoryKeys.Contains(repositoryKey))\n                .Values\n                .SelectMany(_ => _.Modules)\n                .Select", "repositoryProfilesByKey.WhereKeys(repositoryKey => commitRepositoryKeys.Contains(repositoryKey))\n                .Values\n                .SelectMany", "repositoryProfilesByKey.WhereKeys", "commitRepositoryKeys.Contains", "repositoryProfilesByKey.Values.First", "RepositoryProfile.EmptyProfileFor", "commitsDiffer.CodeParsingTargets.None", "commitModules.Any", "EnrichAndFilterModuleMaterialChanges", "commitInsights.MaterialChanges\n                .Where(materialChange => !materialChange.IsPartial)\n                .Select(\n                    materialChange => relevantGovernanceRulesByKey[materialChange.GovernanceRuleKey]\n                        .GetRelevantRisk(materialChange.RuleThenIndexes)\n                )\n                .Aggregate", "commitInsights.MaterialChanges\n                .Where(materialChange => !materialChange.IsPartial)\n                .Select", "commitInsights.MaterialChanges\n                .Where", "relevantGovernanceRulesByKey[materialChange.GovernanceRuleKey]\n                        .GetRelevantRisk", "combinedRiskLevel.CombineWith", "commitInsights.MaterialChanges.Where", "relevantGovernanceRulesByKey[materialChange.GovernanceRuleKey]\n                    .GetLabels(materialChange.RuleThenIndexes)\n                    .ToList", "relevantGovernanceRulesByKey[materialChange.GovernanceRuleKey]\n                    .GetLabels", "materialChangeLabelToCount.TryGetValue", "moduleRootToCombinedLabels.GetOrAdd", "currentModuleLabels.TryGetValue", "Task.WhenAll", "InventoryEnricher.EnrichInventoryAsync", "governanceRulesByKey[materialChange.GovernanceRuleKey]\n                    .ModuleKeys(repositoryKeys)\n                    .ToHashSet", "governanceRulesByKey[materialChange.GovernanceRuleKey]\n                    .ModuleKeys", "moduleKeys.NullOrNone", "materialChange.GetMatchingModules", "filteredMaterialChanges.Add", "materialChange.ModuleKeys.Any", "commitsDiffers\n                .OrderBy(differ => differ.OrderWeight)\n                .ToList", "commitsDiffers\n                .OrderBy"], false, false, false, false, [], false, 0, 0, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, false], ["CommitInsights", "Lim.FeaturesDiffer.CommitInsights", [], ["Lim.Common.DotNET.ICommitInsights"], "src/Lim.FeaturesDiffer/Entities/CommitInsights.cs", 7, 0, {}, ["JavaSecurityFrameworks", "CombinedLabels", "SecurityExpertise", "MaterialChanges", "BadgeRelatedInsights", "AddedOrModifiedApisByClassId", "CombinedRiskLevel", "MaterialChangesLabelsToCount", "ModuleKeysWithMaterialChange", "ModuleRootToLabelCount", "CodeFrameworks"], ["HasInsights", "JavaSecurityFrameworks", "CombinedLabels", "SecurityExpertise", "MaterialChanges", "BadgeRelatedInsights", "AddedOrModifiedApisByClassId", "CombinedRiskLevel", "MaterialChangesLabelsToCount", "ModuleKeysWithMaterialChange", "ModuleRootToLabelCount", "HasJavaSecurityControls", "CodeFrameworks"], ["System.Collections.Generic", "System.Linq", "Lim.Common.DotNET"], false, false, [], false, false, [], {}, [], 13, false, false, false, 0, 0.0, [], 0.0, 0, 0.0, 100.0, 0, 0, false, false, false, false, "public", false, [], ["JavaSecurityFrameworks.Any", "MaterialChanges.Any", "BadgeRelatedInsights.Any", "MaterialChangesLabelsToCount.Keys.ToHashSet", "ModuleRootToLabelCount.Keys.ToHashSet"], false, false, false, false, [], false, 13, 6, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, false], ["DifferContext", "Lim.FeaturesDiffer.DifferContext", [], [], "src/Lim.FeaturesDiffer/Entities/DifferContext.cs", 6, 0, {}, ["SourceCommitShaByTarget", "CommitContext"], ["DifferContext", "SourceCommitShaByTarget", "CommitContext"], ["System.Collections.Generic", "Lim.Common.DotNET"], false, false, [], false, false, [], {}, [], 2, false, false, false, 1, 0.3333333333333333, [], 42.0, 0, 0.0, 100.0, 1, 0, false, false, false, false, "public", false, [], [], false, false, false, false, [], false, 2, 0, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, false], ["JavaFeaturesBin", "Lim.FeaturesDiffer.JavaFeaturesBin", [], [], "src/Lim.FeaturesDiffer/Entities/JavaFeaturesBin.cs", 6, 0, {}, ["PreviousFeatures", "CurrentFeatures", "ClassId", "PreviousMethodIds", "CurrentMethodIds"], ["JavaFeaturesBin", "PreviousFeatures", "CurrentFeatures", "ClassId", "PreviousMethodIds", "CurrentMethodIds"], ["System.Collections.Generic", "Lim.Common.DotNET"], false, false, [], false, false, [], {}, [], 5, false, false, false, 1, 0.16666666666666666, [], 41.166666666666664, 0, 0.0, 100.0, 1, 0, false, false, false, false, "public", false, [], [], false, false, false, false, [], false, 5, 0, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, false], ["NodeFeaturesBin", "Lim.FeaturesDiffer.NodeFeaturesBin", [], [], "src/Lim.FeaturesDiffer/Entities/NodeFeaturesBin.cs", 6, 0, {}, ["PreviousFeatures", "CurrentFeatures", "FilePath", "ApiUids", "DataModelUids"], ["NodeFeaturesBin", "PreviousFeatures", "CurrentFeatures", "FilePath", "ApiUids", "DataModelUids"], ["System.Collections.Generic", "Lim.Common.DotNET"], false, false, [], false, false, [], {}, [], 5, false, false, false, 1, 0.16666666666666666, [], 37.166666666666664, 0, 0.0, 100.0, 1, 0, false, false, false, false, "public", false, [], [], false, false, false, false, [], false, 5, 0, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, false], ["FeaturesDifferLimMicroService", "Lim.FeaturesDiffer.FeaturesDifferLimMicroService", ["Lim.Common.DotNET.LimMicroService"], [], "src/Lim.FeaturesDiffer/FeaturesDifferLimMicroService.cs", 10, 0, {"_logMetrics": "bool"}, [], ["ConfigureServices", "RunAsync", "ConfigureLogging", "DecorateWithMetricsLogging", "RegisterCommonServices"], ["System", "System.Threading.Tasks.Dataflow", "Infrastructure.Dotnet.Common", "Lim.Common.DotNET", "Microsoft.Extensions.Configuration", "Microsoft.Extensions.DependencyInjection"], false, false, [], false, false, [], {"_logMetrics": []}, [], 0, false, false, false, 5, 1.0, [], 982.4, 1047, 40.0, 40.0, 0, 0, false, false, false, true, "public", false, ["Lim.Common.DotNET.MongoCredentials.FromConfiguration"], ["RegisterCommonServices", "services.AddHostedServiceWithConstructorParams<DifferIntervalOrchestrator>", "TimeSpan.FromMinutes", "configuration.GetValue<int>", "configuration.GetValueWithEnv", "services.AddSingleton<IDifferService, DifferService>", "services.DecorateWithMetricsLogging<IDifferService>", "services.AddSingleton<ICommitsDiffer, JavaFeaturesDiffer>", "services.AddSingleton<ICommitsDiffer, NodeFeaturesDiffer>", "services.AddSingleton<ICommitsDiffer, InventoryDiffer>", "services.AddSingleton<ICommitsDiffer, MetadataDiffer>", "services.AddSingletonWithConstructorParams<ICodeFeaturesStorage, CodeFeaturesStorage>", "configuration.GetValue<string>", "services.AddSingleton<IMaterialChangesStorage, MaterialChangesStorage>", "services.AddSingleton<IInsightFromJavaFeaturesCollector, JavaFrameworkUsageCollector>", "services.AddSingleton<IExternalDependenciesComparator, ExternalDependenciesComparator>", "services.RegisterCacheBuilder<(string, CodeParsingTarget, CodeEntity), CodeFeatures>", "new HostBuilder()\n                .ConfigureHostConfiguration(configHost => configHost.AddEnvironmentVariables())\n                .ConfigureAppConfiguration(\n                    (hostContext, configApp) =>\n                        hostContext.HostingEnvironment.ApplicationName = name\n                )\n                .ConfigureAppConfiguration(\n                    (hostContext, configApp) =>\n                        configApp\n                            .AddAppSettings()\n                            .AddCommandLine(args)\n                )\n                .ConfigureServices(\n                    (hostContext, services) =>\n                    {\n                        var configuration = hostContext.Configuration;\n                        _logMetrics = configuration.GetValue<bool>(\"App:LogPerformanceCounters\");\n                        ConfigureServices(configuration, services);\n                    }\n                )\n                .ConfigureLogging(ConfigureLogging)\n                .Build()\n                .RunAsyncSafe", "new HostBuilder()\n                .ConfigureHostConfiguration(configHost => configHost.AddEnvironmentVariables())\n                .ConfigureAppConfiguration(\n                    (hostContext, configApp) =>\n                        hostContext.HostingEnvironment.ApplicationName = name\n                )\n                .ConfigureAppConfiguration(\n                    (hostContext, configApp) =>\n                        configApp\n                            .AddAppSettings()\n                            .AddCommandLine(args)\n                )\n                .ConfigureServices(\n                    (hostContext, services) =>\n                    {\n                        var configuration = hostContext.Configuration;\n                        _logMetrics = configuration.GetValue<bool>(\"App:LogPerformanceCounters\");\n                        ConfigureServices(configuration, services);\n                    }\n                )\n                .ConfigureLogging(ConfigureLogging)\n                .Build", "new HostBuilder()\n                .ConfigureHostConfiguration(configHost => configHost.AddEnvironmentVariables())\n                .ConfigureAppConfiguration(\n                    (hostContext, configApp) =>\n                        hostContext.HostingEnvironment.ApplicationName = name\n                )\n                .ConfigureAppConfiguration(\n                    (hostContext, configApp) =>\n                        configApp\n                            .AddAppSettings()\n                            .AddCommandLine(args)\n                )\n                .ConfigureServices(\n                    (hostContext, services) =>\n                    {\n                        var configuration = hostContext.Configuration;\n                        _logMetrics = configuration.GetValue<bool>(\"App:LogPerformanceCounters\");\n                        ConfigureServices(configuration, services);\n                    }\n                )\n                .ConfigureLogging", "new HostBuilder()\n                .ConfigureHostConfiguration(configHost => configHost.AddEnvironmentVariables())\n                .ConfigureAppConfiguration(\n                    (hostContext, configApp) =>\n                        hostContext.HostingEnvironment.ApplicationName = name\n                )\n                .ConfigureAppConfiguration(\n                    (hostContext, configApp) =>\n                        configApp\n                            .AddAppSettings()\n                            .AddCommandLine(args)\n                )\n                .ConfigureServices", "new HostBuilder()\n                .ConfigureHostConfiguration(configHost => configHost.AddEnvironmentVariables())\n                .ConfigureAppConfiguration(\n                    (hostContext, configApp) =>\n                        hostContext.HostingEnvironment.ApplicationName = name\n                )\n                .ConfigureAppConfiguration", "new HostBuilder()\n                .ConfigureHostConfiguration(configHost => configHost.AddEnvironmentVariables())\n                .ConfigureAppConfiguration", "new HostBuilder()\n                .ConfigureHostConfiguration", "configHost.AddEnvironmentVariables", "configApp\n                            .AddAppSettings()\n                            .AddCommandLine", "configApp\n                            .AddAppSettings", "configuration.GetValue<bool>", "configLogging.ClearProviders", "configLogging.AddConfiguration", "hostContext.Configuration.GetSection", "configLogging.AddFile", "hostContext.Configuration.GetSection(\"FileLoggingOptions\")\n                        .Bind", "configLogging.AddConsoleLogger", "services.DecorateWithMetricsLogging<T>", "services.RegisterServicesFromAssembly", "Assembly.Load", "services.AddSingleton", "services.AddSingletonWithConstructorParams<ICommitsStorage, CommitsStorage>", "services.AddSingleton<IConfigureUntrustedCertificatePolicy, AllowUntrustedCertificatePolicy>", "services.AddSingleton<IConfigureUntrustedCertificatePolicy, DefaultUntrustedCertificatePolicy>", "services.RegisterCacheBuilder<string, Developer>", "services.RegisterCacheBuilder<string, DeveloperIdentity>", "services.RegisterCacheBuilder<string, IReadOnlyCollection<Repository>>", "services.RegisterCacheBuilder<(Consumable, string), int>", "services.RegisterCacheBuilder<(string, CodeParsingTarget), string>", "services.AddBuilder<IBoundAsyncExecutor, BoundAsyncExecutor, ExecutionDataflowBlockOptions>"], false, false, false, false, ["App:PollingIntervalMinutes", "App:DifferIntervalWorkingService:BoundedCapacity", "App:DifferIntervalWorkingService:MaxDegreeOfParallelism", "App:FeaturesStorage:StoredFeaturesDirectory", "App:FeaturesStorage:CacheSize", "App:FeaturesStorage:CacheTtlInMinutes"], false, 0, 0, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, false], ["Program", "Lim.FeaturesDiffer.Program", [], [], "src/Lim.FeaturesDiffer/Program.cs", 5, 0, {}, [], ["Main"], ["System.Threading.Tasks"], false, false, [], false, false, [], {}, [], 0, false, false, false, 1, 1.0, [], 93.0, 93, 100.0, 100.0, 0, 0, false, false, true, true, "public", false, [], ["new FeaturesDifferLimMicroService().RunAsync"], false, false, false, false, ["Lim.FeaturesDiffer"], false, 0, 0, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, false], ["BenchmarkRunner", "Lim.Benchmark.BenchmarkRunner", [], [], "tests/Lim.Benchmark/BenchmarkRunner.cs", 6, 0, {}, [], ["Main"], ["System.Threading.Tasks", "CommandLine"], false, false, [], false, false, [], {}, [], 0, false, false, false, 1, 1.0, [], 743.0, 743, 100.0, 100.0, 0, 0, false, false, true, true, "public", false, [], ["Parser.Default.ParseArguments<CommandLineOptions>", "extractorBenchmark.ProcessRepositoryRepeatedly", "extractorBenchmark.ProcessAllRepositoryCommits"], false, false, false, false, [], false, 0, 0, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, false], ["CommandLineOptions", "Lim.Benchmark.CommandLineOptions", [], [], "tests/Lim.Benchmark/CommandLineOptions.cs", 6, 0, {}, ["ConcurrencyLevel", "RepositoryPath", "RepeatTimes"], ["ConcurrencyLevel", "RepositoryPath", "ReverseCommits", "RepeatTimes"], ["CommandLine", "JetBrains.Annotations"], false, false, ["UsedImplicitly"], false, false, [], {}, ["Option"], 4, false, false, false, 0, 0.0, [], 0.0, 0, 0.0, 100.0, 0, 0, false, false, false, false, "public", false, [], [], false, false, false, false, ["concurrency", "path", "reverse", "times"], false, 4, 4, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, false], ["JavaFeaturesExtractorBenchmark", "Lim.Benchmark.JavaFeaturesExtractorBenchmark", [], [], "tests/Lim.Benchmark/JavaFeaturesExtractorBenchmark.cs", 18, 0, {"_asyncProcessExecutor": "???.AsyncProcessExecutor", "_commitRuntimeSeconds": "System.Collections.Concurrent.ConcurrentDictionary<string, double>", "_concurrencyLevel": "int", "_fileSystem": "System.IO.FileSystem", "_javaFeatureExtractorProxy": "Lim.FeaturesExtractor.FeatureExtractorProxy"}, ["_asyncProcessExecutor", "_commitRuntimeSeconds", "_concurrencyLevel", "_fileSystem", "_javaFeatureExtractorProxy"], ["JavaFeaturesExtractorBenchmark", "ProcessRepositoryRepeatedly", "ProcessAllRepositoryCommits", "GetCommitsFlowChain", "ProcessCommitsWorker"], ["System", "System.Collections.Concurrent", "System.Collections.Generic", "System.IO", "System.Linq", "System.Threading", "System.Threading.Tasks", "Infrastructure.Dotnet.Common", "Lim.Common.DotNET", "Lim.FeaturesExtractor", "Microsoft.Extensions.Logging", "Microsoft.Extensions.Logging.Abstractions", "Moq", "LibGit2Sharp.Repository"], false, false, [], false, false, [], {"_asyncProcessExecutor": [], "_commitRuntimeSeconds": [], "_concurrencyLevel": [], "_fileSystem": [], "_javaFeatureExtractorProxy": []}, [], 0, false, false, false, 5, 1.0, [], 1060.2, 904, 20.0, 60.0, 1, 0, false, false, false, true, "public", false, [], ["_asyncProcessExecutor.RunAsync", "Enumerable.Range", "TimingUtils.ExecuteAndMeasureAsync", "_javaFeatureExtractorProxy.ExtractFeaturesAsync", "Console.WriteLine", "commitsFlowChain.Reverse", "commitsFlowChain\n                .Enumerate()\n                .GroupBy(x => x.Index % _concurrencyLevel)\n                .Select(\n                    x => x.Select(v => v.Value)\n                        .ToList()\n                )\n                .ToList", "commitsFlowChain\n                .Enumerate()\n                .GroupBy(x => x.Index % _concurrencyLevel)\n                .Select", "commitsFlowChain\n                .Enumerate()\n                .GroupBy", "commitsFlowChain\n                .Enumerate", "x.Select(v => v.Value)\n                        .ToList", "x.Select", "Enumerable.Range(0, _concurrencyLevel)\n                .Select", "ProcessCommitsWorker", "Task.WhenAll", "writer.WriteLine", "latestCommit.Sha.Substring", "chain.Push", "latestCommit.Parents.FirstOrDefault", "chain.ToList", "Path.Combine", "Path.GetFileName", "commits.EnumerateAsync", "TimeSpan.FromHours"], false, false, false, false, ["http://localhost:8090", "git reset --hard origin/master", "tar", "Commit,RunTimeSec", "master"], false, 0, 0, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, false], ["AlertsGenerator", "Lim.LoggingAgent.AlertsGenerator", [], ["Lim.LoggingAgent.IAlertsGenerator"], "src/Lim.LoggingAgent/Core/AlertsGenerator.cs", 15, 0, {"ErrorLogLevels": "System.Collections.Generic.IReadOnlyCollection<string>", "_checkAlerts": "bool", "_customerInstanceDataProvider": "Lim.LoggingAgent.ICustomerInstanceDataProvider", "_directoriesToIgnore": "System.Collections.Generic.List<string>", "_filePathToCurrentRow": "System.Collections.Concurrent.ConcurrentDictionary<string, int>", "_fileSystem": "???.IFileSystem", "_logger": "???.ILogger<AlertsGenerator>", "_reporterApiProxy": "???.IReporterApiProxy", "_sendToReporter": "bool", "_stateFilePath": "string", "_workingDirectory": "string"}, ["_customerInstanceDataProvider", "_directoriesToIgnore", "_filePathToCurrentRow", "_fileSystem", "_logger", "_reporterApiProxy", "_stateFilePath", "_workingDirectory"], ["AlertsGenerator", "SearchForErrorsAsync", "FlushState", "ForwardToReporterAsync", "LoadState", "CollectErrors", "ActOnErrorsAsync", "PublishAlertsAsync"], ["System", "System.Collections.Concurrent", "System.Collections.Generic", "System.IO", "System.Linq", "System.Threading.Tasks", "Infrastructure.Dotnet.Common", "Microsoft.Extensions.Configuration", "Microsoft.Extensions.Logging", "Newtonsoft.Json", "Reporter.Contracts"], false, false, [], false, false, [], {"ErrorLogLevels": [], "_checkAlerts": [], "_customerInstanceDataProvider": [], "_directoriesToIgnore": [], "_filePathToCurrentRow": [], "_fileSystem": [], "_logger": [], "_reporterApiProxy": [], "_sendToReporter": [], "_stateFilePath": [], "_workingDirectory": []}, [], 0, false, false, false, 9, 1.0, [], 687.6666666666666, 635, 11.11111111111111, 44.44444444444444, 1, 0, false, false, false, true, "public", false, ["Lim.LoggingAgent.SimilarTolerantStringCollection.ToEnumerable", "Lim.LoggingAgent.SimilarTolerantStringCollection.Add", "Lim.LoggingAgent.AlertsGenerator.LoadState"], ["Directory.EnumerateDirectories", "_directoriesToIgnore\n                    .Any", "deployment.Contains", "Path.GetFileName(deployment)\n                    .Split", "Path.GetFileName", "Directory.EnumerateFiles", "_logger.LogError", "errorsCollection.ToEnumerable()\n                        .ToList", "_logger.LogInformation", "_fileSystem.Write", "_filePathToCurrentRow.ToJson", "_reporterApiProxy.SendErrorMessageAsync", "File.Exists", "_fileSystem.ReadJson<Dictionary<string, int>>", "_filePathToCurrentRow.GetOrAdd", "File.ReadLines(logFilePath)\n                .Skip", "File.ReadLines", "row.Contains", "ErrorLogLevels.Any", "string.IsNullOrEmpty", "row.StartsWith", "errors.Any", "error.Split('\\n')\n                        .FirstOrDefault", "error.Split", "configuration.GetValue<string>", "configuration.GetValue<bool>", "configuration.GetValue<string>(\"App:LogDirectoriesToIgnore\")\n                .Split(\",\")\n                .ToList", "configuration.GetValue<string>(\"App:LogDirectoriesToIgnore\")\n                .Split", "File.ReadLines(reporterPasscodeFilePath)\n                .First", "reporterApiProxyBuilder", "Path.Combine"], false, false, false, false, ["[FATAL]", "[ERROR]", "[WARN]", "App:WorkingDirectory", "App:CheckAlerts", "App:SendToReporter", "App:ReporterPasscodeFilePath", "App:LogDirectoriesToIgnore", ",", "errors_state.json", "_", "*.log", "Failed to parse file '{file}': {exception}", "Flushing state with {count} file paths", "[INFO] Lim.FeaturesExtractor.EntityFeaturesLogger", "20", "Found error for {namespaceName} {deploymentName}: {error}"], false, 0, 0, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, false], ["CustomerInstanceDataProvider", "Lim.LoggingAgent.CustomerInstanceDataProvider", [], ["Lim.LoggingAgent.ICustomerInstanceDataProvider"], "src/Lim.LoggingAgent/Core/CustomerInstanceDataProvider.cs", 6, 0, {"CustomerNameGKE": "string"}, ["CustomerName"], ["CustomerInstanceDataProvider", "CustomerName", "IsAirGapped"], ["JetBrains.Annotations", "Microsoft.Extensions.Configuration"], false, false, ["UsedImplicitly"], false, false, [], {"CustomerNameGKE": []}, [], 2, false, false, false, 1, 0.3333333333333333, [], 65.66666666666667, 0, 0.0, 100.0, 1, 0, false, false, false, false, "public", false, [], ["configuration.GetValue", "configuration.GetValue<string>"], false, false, false, false, ["gke", "REPLICATED_CUSTOMER_NAME", "IS_AIRGAP", "true"], false, 2, 0, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, false], ["ProcessRunner", "Lim.LoggingAgent.ProcessRunner", [], ["Lim.LoggingAgent.IProcessRunner"], "src/Lim.LoggingAgent/Core/ProcessRunner.cs", 9, 0, {"_logger": "???.ILogger<ProcessRunner>"}, ["_logger"], ["ProcessRunner", "RunProcess", "StartProcess"], ["System", "System.Diagnostics", "System.IO", "Microsoft.Extensions.Logging", "Polly"], false, false, [], false, false, [], {"_logger": []}, [], 0, false, false, false, 3, 1.0, [], 744.0, 968, 0.0, 66.66666666666667, 1, 0, false, false, false, false, "public", false, [], ["Policy.Handle<IOException>(exception => exception.Message.Contains(\"out of memory\", StringComparison.OrdinalIgnoreCase))\n                .WaitAndRetry(3, _ => (3).Seconds())\n                .Execute", "Policy.Handle<IOException>(exception => exception.Message.Contains(\"out of memory\", StringComparison.OrdinalIgnoreCase))\n                .WaitAndRetry", "Policy.Handle<IOException>", "exception.Message.Contains", "TimeSpan.FromSeconds", "process.WaitForExit", "process.Kill", "_logger.LogInformation", "_logger.LogError", "process.Start"], false, false, false, false, ["out of memory", "Running process {filename} {arguments}", "{filename} stderr: {data}", "{filename} process exited"], false, 0, 0, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, false], ["SimilarTolerantStringCollection", "Lim.LoggingAgent.SimilarTolerantStringCollection", [], [], "src/Lim.LoggingAgent/Core/SimilarTolerantStringCollection.cs", 7, 0, {"SimilarEnoughScoreValue": "double", "_items": "System.Collections.Generic.List<string>"}, ["_items", "UnfilteredCount"], ["UnfilteredCount", "Add", "Clear", "ToEnumerable"], ["System", "System.Collections.Generic", "Fastenshtein"], false, false, [], false, false, [], {"SimilarEnoughScoreValue": [], "_items": []}, [], 1, false, false, false, 3, 0.75, [], 161.5, 45, 0.0, 100.0, 0, 0, false, false, false, false, "public", false, [], ["levenshteinRepresentation.DistanceFrom", "Math.Max", "_items.Add", "_items.Clear"], false, false, false, false, [], false, 1, 1, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, false], ["Worker", "Lim.LoggingAgent.Worker", ["???.BackgroundService"], [], "src/Lim.LoggingAgent/Core/Worker.cs", 17, 0, {"MaxLogFileSizeMb": "int", "MaxCompressedFilesCount": "int", "_alertsGenerator": "Lim.LoggingAgent.IAlertsGenerator", "_customerInstanceDataProvider": "Lim.LoggingAgent.ICustomerInstanceDataProvider", "_filesCheckInterval": "System.TimeSpan", "_logFilePattern": "string", "_logger": "???.ILogger<Worker>", "_logsDirectory": "string", "_monitoredLogs": "System.Collections.Concurrent.ConcurrentDictionary<string, (string MirrorFilePath, Task Task, CancellationTokenSource CancellationTokenSource)>", "_processRunner": "Lim.LoggingAgent.IProcessRunner", "_storageBucket": "string", "_syncToStorage": "bool", "_workingDirectory": "string"}, ["_alertsGenerator", "_customerInstanceDataProvider", "_filesCheckInterval", "_logFilePattern", "_logger", "_logsDirectory", "_monitoredLogs", "_processRunner", "_storageBucket", "_workingDirectory"], ["Worker", "ExecuteAsync", "PeriodicRunAsync", "StopAsync", "DiscoverLogFiles", "CompressFile", "SyncToStorageBucket", "FileNameToDeployment", "ExtractPreHash", "MonitorFileJob", "MirrorFilePath"], ["System", "System.Collections.Concurrent", "System.Collections.Generic", "System.IO", "System.Linq", "System.Threading", "System.Threading.Tasks", "ByteSizeLib", "JetBrains.Annotations", "Microsoft.Extensions.Configuration", "Microsoft.Extensions.Hosting", "Microsoft.Extensions.Logging", "Reporter.Contracts"], false, false, ["UsedImplicitly"], false, false, [], {"MaxLogFileSizeMb": [], "MaxCompressedFilesCount": [], "_alertsGenerator": [], "_customerInstanceDataProvider": [], "_filesCheckInterval": [], "_logFilePattern": [], "_logger": [], "_logsDirectory": [], "_monitoredLogs": [], "_processRunner": [], "_storageBucket": [], "_syncToStorage": [], "_workingDirectory": []}, [], 0, false, false, false, 11, 1.0, [], 871.0909090909091, 793, 18.181818181818183, 18.181818181818183, 1, 0, false, false, false, true, "public", false, ["Lim.LoggingAgent.IAlertsGenerator.SearchForErrorsAsync", "Lim.LoggingAgent.IAlertsGenerator.ForwardToReporterAsync", "Lim.LoggingAgent.IAlertsGenerator.FlushState", "Lim.LoggingAgent.IProcessRunner.RunProcess"], ["Directory.Exists", "Directory.CreateDirectory", "Task.WhenAll", "_alertsGenerator.SearchForErrorsAsync(_customerInstanceDataProvider.CustomerName)\n                        .Wait", "worker", "_logger.LogError", "Task.Delay", "_logger.LogInformation", "Task.Run", "base.StopAsync", "Directory\n                .EnumerateFileSystemEntries(\n                    _logsDirectory,\n                    _logFilePattern,\n                    SearchOption.TopDirectoryOnly\n                )\n                .Select(Path.GetFileName)\n                .Where(\n                    filePath =>\n                        !string.IsNullOrEmpty(filePath) &&\n                        filePath.Contains(\"_lim-\", StringComparison.OrdinalIgnoreCase) &&\n                        !filePath.Contains(\"logging\", StringComparison.OrdinalIgnoreCase) &&\n                        !filePath.Contains(\"_kube-system_\", StringComparison.OrdinalIgnoreCase)\n                )\n                .ToHashSet", "Directory\n                .EnumerateFileSystemEntries(\n                    _logsDirectory,\n                    _logFilePattern,\n                    SearchOption.TopDirectoryOnly\n                )\n                .Select(Path.GetFileName)\n                .Where", "Directory\n                .EnumerateFileSystemEntries(\n                    _logsDirectory,\n                    _logFilePattern,\n                    SearchOption.TopDirectoryOnly\n                )\n                .Select", "Directory\n                .EnumerateFileSystemEntries", "string.IsNullOrEmpty", "filePath.Contains", "string.Join", "logFileNames.Where", "_monitoredLogs.ContainsKey", "_monitoredLogs.Keys.Where", "logFileNames.Contains", "_monitoredLogs.TryGetValue", "tuple.CancellationTokenSource.Cancel", "_monitoredLogs.TryRemove", "ByteSize.FromBytes", "ByteSize.FromMegaBytes", "File.Delete", "Directory.GetFiles", "Path.GetDirectoryName", "compressedFiles.Select(filePath => new FileInfo(filePath))\n                    .OrderBy(info => info.CreationTimeUtc)\n                    .Take", "compressedFiles.Select(filePath => new FileInfo(filePath))\n                    .OrderBy", "compressedFiles.Select", "fileInfo.Delete", "Directory.EnumerateDirectories", "Path.GetFileName", "fileName.Split", "fileName.First", "fileName.IndexOf", "fileName.Substring", "File.Exists", "File.Create(mirrorFilePath)\n                        .DisposeAsync", "File.Create", "Path.Combine", "configuration.GetValue<string>", "TimeSpan.FromMinutes", "configuration.GetValue<int>", "configuration.GetValue<bool>"], false, false, false, false, ["App:LogsDirectory", "App:LogFilePattern", "App:FilesCheckIntervalMinutes", "App:WorkingDirectory", "App:StorageBucket", "App:SyncToStorage", "logging-agent", "Stopping by token", "Got stop command ...", "_lim-", "logging", "_kube-system_", "Discovered files:\n{files}", "\n", "Discovered new file: {file}", "Removed file: {file}", "File '{path}' is too big - {mb} MB", "gzip", "*.gz", "Syncing to storage at {bucket}/{customer}", "*.log", "gsutil", "Mirroring {source} -> {target}", "sh", "Monitor file {file} failed: {exception}", "repl"], false, 0, 0, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, false], ["Program", "Lim.LoggingAgent.Program", [], [], "src/Lim.LoggingAgent/Program.cs", 15, 0, {}, [], ["Main", "CreateHostBuilder"], ["System", "System.IO", "System.Threading", "System.Threading.Tasks", "Infrastructure.Dotnet.Common", "JetBrains.Annotations", "Microsoft.Extensions.Configuration", "Microsoft.Extensions.DependencyInjection", "Microsoft.Extensions.Hosting", "Microsoft.Extensions.Logging", "Reporter.Contracts"], false, false, ["UsedImplicitly"], false, false, [], {}, [], 0, false, false, false, 2, 1.0, [], 1261.0, 1261, 100.0, 50.0, 0, 0, false, false, false, true, "public", false, [], ["cancellationTokenSource.Cancel", "CreateHostBuilder(args)\n                .Build()\n                .RunAsync", "CreateHostBuilder(args)\n                .Build", "Host.CreateDefaultBuilder(args)\n                .ConfigureHostConfiguration(configHost => configHost.AddEnvironmentVariables())\n                .ConfigureAppConfiguration(\n                    (hostContext, configApp) =>\n                    {\n                        hostContext.HostingEnvironment.ApplicationName = \"Lim.LoggingAgent\";\n                    }\n                )\n                .ConfigureAppConfiguration(\n                    (hostContext, configApp) =>\n                    {\n                        configApp.SetBasePath(Directory.GetCurrentDirectory());\n                        configApp.AddJsonFile(\"appsettings.json\");\n                        configApp.AddJsonFile(\n                            $\"appsettings.{hostContext.HostingEnvironment.EnvironmentName}.json\",\n                            true\n                        );\n                        configApp.AddEnvironmentVariables();\n                        configApp.AddCommandLine(args);\n                    }\n                )\n                .ConfigureLogging(\n                    builder => builder.AddConsole(\n                        options =>\n                        {\n                            options.DisableColors = true;\n                            options.TimestampFormat = \"yyyy-MM-dd HH:mm:ss \";\n                        }\n                    )\n                )\n                .ConfigureServices", "Host.CreateDefaultBuilder(args)\n                .ConfigureHostConfiguration(configHost => configHost.AddEnvironmentVariables())\n                .ConfigureAppConfiguration(\n                    (hostContext, configApp) =>\n                    {\n                        hostContext.HostingEnvironment.ApplicationName = \"Lim.LoggingAgent\";\n                    }\n                )\n                .ConfigureAppConfiguration(\n                    (hostContext, configApp) =>\n                    {\n                        configApp.SetBasePath(Directory.GetCurrentDirectory());\n                        configApp.AddJsonFile(\"appsettings.json\");\n                        configApp.AddJsonFile(\n                            $\"appsettings.{hostContext.HostingEnvironment.EnvironmentName}.json\",\n                            true\n                        );\n                        configApp.AddEnvironmentVariables();\n                        configApp.AddCommandLine(args);\n                    }\n                )\n                .ConfigureLogging", "Host.CreateDefaultBuilder(args)\n                .ConfigureHostConfiguration(configHost => configHost.AddEnvironmentVariables())\n                .ConfigureAppConfiguration(\n                    (hostContext, configApp) =>\n                    {\n                        hostContext.HostingEnvironment.ApplicationName = \"Lim.LoggingAgent\";\n                    }\n                )\n                .ConfigureAppConfiguration", "Host.CreateDefaultBuilder(args)\n                .ConfigureHostConfiguration(configHost => configHost.AddEnvironmentVariables())\n                .ConfigureAppConfiguration", "Host.CreateDefaultBuilder(args)\n                .ConfigureHostConfiguration", "Host.CreateDefaultBuilder", "configHost.AddEnvironmentVariables", "configApp.SetBasePath", "Directory.GetCurrentDirectory", "configApp.AddJsonFile", "configApp.AddEnvironmentVariables", "configApp.AddCommandLine", "builder.AddConsole", "services.AddSingleton", "services.AddSingleton<IFileSystem, FileSystem>", "services.AddSingleton<IAsyncProcessExecutor, AsyncProcessExecutor>", "services.AddSingleton<IProcessRunner, ProcessRunner>", "services.AddSingleton<IAlertsGenerator, AlertsGenerator>", "services.AddSingleton<ICustomerInstanceDataProvider, CustomerInstanceDataProvider>", "services.AddSingleton<Func<string, IReporterApiProxy>>", "services.AddHostedService<Worker>"], false, false, false, false, ["Lim.LoggingAgent", "appsettings.json", "yyyy-MM-dd HH:mm:ss "], false, 0, 0, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, false], ["ApiMethodCodeReferenceFactory", "Lim.TestsCommon.DotNET.ApiMethodCodeReferenceFactory", [], [], "tests/Lim.TestsCommon.DotNET/ModelFactories/ApiMethodCodeReferenceFactory.cs", 6, 0, {}, [], ["Build"], ["System.Collections.Generic", "Lim.Common.DotNET"], false, false, [], false, false, [], {}, [], 0, false, false, false, 1, 1.0, [], 294.0, 294, 100.0, 100.0, 0, 0, false, false, true, false, "public", false, ["Lim.TestsCommon.DotNET.CodeFeaturesFactory.BuildMethodFeatures", "Lim.TestsCommon.DotNET.CodeFeaturesFactory.BuildApiMethodRow"], [], false, false, false, false, [], false, 0, 0, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, false], ["ApiMethodFactory", "Lim.TestsCommon.DotNET.ApiMethodFactory", [], [], "tests/Lim.TestsCommon.DotNET/ModelFactories/ApiMethodFactory.cs", 6, 0, {}, [], ["BuildApiMethod"], ["System.Collections.Generic", "Lim.Common.DotNET"], false, false, [], false, false, [], {}, [], 0, false, false, false, 1, 1.0, [], 905.0, 905, 100.0, 100.0, 0, 0, false, false, true, false, "public", false, ["Lim.TestsCommon.DotNET.CodeFeaturesFactory.BuildMethodFeatures", "Lim.TestsCommon.DotNET.CodeFeaturesFactory.BuildApiMethodRow", "Lim.TestsCommon.DotNET.CodeFeaturesFactory.BuildClassFeatures"], ["ApiMethod.FromFeatures"], false, false, false, false, [], false, 0, 0, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, false], ["ApiMethodsCodeReferenceFactory", "Lim.TestsCommon.DotNET.ApiMethodsCodeReferenceFactory", [], [], "tests/Lim.TestsCommon.DotNET/ModelFactories/ApiMethodsCodeReferenceFactory.cs", 6, 0, {}, [], ["Build"], ["System.Collections.Generic", "Lim.Common.DotNET"], false, false, [], false, false, [], {}, [], 0, false, false, false, 1, 1.0, [], 607.0, 607, 100.0, 100.0, 0, 0, false, false, true, false, "public", false, ["Lim.TestsCommon.DotNET.CodeFeaturesFactory.BuildClassFeatures", "Lim.TestsCommon.DotNET.CodeFeaturesFactory.BuildClassRow", "Lim.TestsCommon.DotNET.CodeFeaturesFactory.BuildMethodFeatures", "Lim.TestsCommon.DotNET.CodeFeaturesFactory.BuildApiMethodRow"], [], false, false, false, false, [], false, 0, 0, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, false], ["CodeFeaturesFactory", "Lim.TestsCommon.DotNET.CodeFeaturesFactory", [], [], "tests/Lim.TestsCommon.DotNET/ModelFactories/CodeFeaturesFactory.cs", 9, 0, {}, [], ["BuildMethodFeatures", "BuildMethodRow", "BuildApiMethodRow", "BuildClassFeatures", "BuildClassRow", "BuildFeatures"], ["System", "System.Collections.Generic", "System.Linq", "Infrastructure.Dotnet.Common", "Lim.Common.DotNET"], false, false, [], false, false, [], {}, [], 0, false, false, false, 7, 1.0, [], 451.57142857142856, 352, 100.0, 71.42857142857143, 0, 0, false, false, true, false, "public", false, [], ["(codeFrameworks ?? Array.Empty<CodeFramework>()).ToJson", "Array.Empty<CodeFramework>", "(unvalidatedParametersByFramework ?? new Dictionary<string, List<UnvalidatedMethodParameter>>()).ToJson", "(codeLinks ?? Array.Empty<CodeLink>()).ToJson", "Array.Empty<CodeLink>", ".ToJson", "new Dictionary<string, object>\n            {\n                {MethodFeatureNames.UniqueMethodName, methodName},\n                {MethodFeatureNames.MethodName, methodName},\n                {MethodFeatureNames.ClassPath, \"path\"},\n                {MethodFeatureNames.DisplayString, methodName},\n                {MethodFeatureNames.ClassName, className},\n                {MethodFeatureNames.ClassFullName, className},\n                {MethodFeatureNames.ReturnType, returnType ?? \"void\"},\n                {MethodFeatureNames.Annotations, annotations ?? new HashSet<string>()}\n            }.MergeWithOverwrite", "rows.FirstOrDefault", ".Keys.ToList", "rows.Select(row => row.Values.ToList())\n                        .ToList", "rows.Select", "row.Values.ToList"], false, false, false, false, ["path", "void"], false, 0, 0, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, false], ["CommitFactory", "Lim.TestsCommon.DotNET.CommitFactory", [], [], "tests/Lim.TestsCommon.DotNET/ModelFactories/CommitFactory.cs", 12, 0, {}, [], ["Build"], ["System", "System.Collections.Generic", "System.Linq", "System.Linq.Expressions", "System.Security.Cryptography", "Infrastructure.Dotnet.Common", "Lim.Common.DotNET", "Lim.TestsCommon.DotNET.Utils"], false, false, [], false, false, [], {}, [], 0, false, false, false, 1, 1.0, [], 1212.0, 1212, 100.0, 100.0, 0, 0, false, false, true, false, "public", false, ["Lim.TestsCommon.DotNET.RepositoryFactory.Build", "Lim.TestsCommon.DotNET.Utils.ExpressionUtils.MergeExpressions", "Lim.TestsCommon.DotNET.Utils.ExpressionUtils.SetProperties"], ["SHA256.Create", "new Random().NextBytes", "hash.ComputeHash(buffer)\n                            .Select(hashByte => hashByte.ToString(\"x2\"))\n                            .JoinToString", "hash.ComputeHash(buffer)\n                            .Select", "hash.ComputeHash", "hashByte.ToString"], false, false, false, false, ["x2", ""], false, 0, 0, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, false], ["GovernanceRuleFactory", "Lim.TestsCommon.DotNET.GovernanceRuleFactory", [], [], "tests/Lim.TestsCommon.DotNET/ModelFactories/GovernanceRuleFactory.cs", 8, 0, {"_runningOrdinalId": "int", "_ruleName": "string"}, [], ["Build"], ["System", "System.Collections.Generic", "System.Linq", "Lim.Common.DotNET"], false, false, [], false, false, [], {"_runningOrdinalId": [], "_ruleName": []}, [], 0, false, false, false, 6, 1.0, [], 444.1666666666667, 223, 100.0, 100.0, 0, 0, false, false, true, false, "public", false, [], ["Array.Empty<(GovernanceThenSubType, string)>", "riskLevel.Equals", "thenActions.Add", "riskLevel.ToString", "thenActions.AddRange", "labels.Select", "Guid.NewGuid()\n                    .ToString", "Guid.NewGuid", "when.Select(\n                        portion =>\n                            new RulePortionWithProperties<GovernanceWhenType> {Type = portion.type, Value = portion.value}\n                    )\n                    .ToList", "when.Select"], false, false, false, false, ["test"], false, 0, 0, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, false], ["IssueFactory", "Lim.TestsCommon.DotNET.IssueFactory", [], [], "tests/Lim.TestsCommon.DotNET/ModelFactories/IssueFactory.cs", 9, 0, {}, [], ["Build"], ["System", "System.Collections.Generic", "System.Linq.Expressions", "Lim.Common.DotNET", "Lim.TestsCommon.DotNET.Utils"], false, false, [], false, false, [], {}, [], 0, false, false, false, 1, 1.0, [], 530.0, 530, 100.0, 100.0, 0, 0, false, false, true, false, "public", false, ["Lim.TestsCommon.DotNET.Utils.ExpressionUtils.MergeExpressions", "Lim.TestsCommon.DotNET.Utils.ExpressionUtils.SetProperties"], ["new Random().Next"], false, false, false, false, [], false, 0, 0, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, false], ["ProjectFactory", "Lim.TestsCommon.DotNET.ProjectFactory", [], [], "tests/Lim.TestsCommon.DotNET/ModelFactories/ProjectFactory.cs", 9, 0, {}, [], ["Build"], ["System", "System.Collections.Generic", "System.Linq.Expressions", "Lim.Common.DotNET", "Lim.TestsCommon.DotNET.Utils"], false, false, [], false, false, [], {}, [], 0, false, false, false, 2, 1.0, [], 458.5, 458, 100.0, 100.0, 0, 0, false, false, true, false, "public", false, ["Lim.TestsCommon.DotNET.ServerFactory.Build", "Lim.TestsCommon.DotNET.Utils.ExpressionUtils.MergeExpressions", "Lim.TestsCommon.DotNET.Utils.ExpressionUtils.SetProperties"], ["new Random().Next"], false, false, false, false, [], false, 0, 0, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, false], ["RepositoryFactory", "Lim.TestsCommon.DotNET.RepositoryFactory", [], [], "tests/Lim.TestsCommon.DotNET/ModelFactories/RepositoryFactory.cs", 9, 0, {}, [], ["Build"], ["System", "System.Collections.Generic", "System.Linq.Expressions", "Lim.Common.DotNET", "Lim.TestsCommon.DotNET.Utils"], false, false, [], false, false, [], {}, [], 0, false, false, false, 3, 1.0, [], 373.3333333333333, 210, 100.0, 100.0, 0, 0, false, false, true, false, "public", false, ["Lim.TestsCommon.DotNET.ServerFactory.Build", "Lim.TestsCommon.DotNET.Utils.ExpressionUtils.MergeExpressions", "Lim.TestsCommon.DotNET.Utils.ExpressionUtils.SetProperties"], ["Guid.NewGuid"], false, false, false, false, ["LIM"], false, 0, 0, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, false], ["RepositoryProfileFactory", "Lim.TestsCommon.DotNET.RepositoryProfileFactory", [], [], "tests/Lim.TestsCommon.DotNET/ModelFactories/RepositoryProfileFactory.cs", 9, 0, {}, [], ["Build"], ["System", "System.Collections.Generic", "System.Linq.Expressions", "Lim.Common.DotNET", "Lim.TestsCommon.DotNET.Utils"], false, false, [], false, false, [], {}, [], 0, false, false, false, 1, 1.0, [], 576.0, 576, 100.0, 100.0, 0, 0, false, false, true, false, "public", false, ["Lim.TestsCommon.DotNET.Utils.ExpressionUtils.MergeExpressions", "Lim.TestsCommon.DotNET.RepositoryFactory.Build", "Lim.TestsCommon.DotNET.Utils.ExpressionUtils.SetProperties"], [], false, false, false, false, [], false, 0, 0, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, false], ["ServerFactory", "Lim.TestsCommon.DotNET.ServerFactory", [], [], "tests/Lim.TestsCommon.DotNET/ModelFactories/ServerFactory.cs", 11, 0, {}, [], ["Build"], ["System", "System.Collections.Generic", "System.Linq", "System.Linq.Expressions", "Infrastructure.Dotnet.Common", "Lim.Common.DotNET", "Lim.TestsCommon.DotNET.Utils"], false, false, [], false, false, [], {}, [], 0, false, false, false, 2, 1.0, [], 481.5, 481, 100.0, 100.0, 0, 0, false, false, true, false, "public", false, ["Lim.TestsCommon.DotNET.Utils.ExpressionUtils.MergeExpressions", "Lim.TestsCommon.DotNET.Utils.ExpressionUtils.SetProperties"], ["EnumUtils.GetValues<Provider>()\n                .First", "EnumUtils.GetValues<Provider>", "provider.Provides", "provider.ToString().ToLower", "provider.ToString"], false, false, false, false, ["http://bit.buck/org"], false, 0, 0, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, false], ["WorkflowFactory", "Lim.TestsCommon.DotNET.WorkflowFactory", [], [], "tests/Lim.TestsCommon.DotNET/ModelFactories/WorkflowFactory.cs", 8, 0, {}, [], ["Build"], ["System", "System.Collections.Generic", "System.Linq", "Lim.Common.DotNET"], false, false, [], false, false, [], {}, [], 0, false, false, false, 2, 1.0, [], 673.0, 673, 100.0, 100.0, 0, 0, false, false, true, false, "public", false, [], ["Guid.NewGuid()\n                    .ToString", "Guid.NewGuid", "given.Select(\n                        portion =>\n                            new RulePortionWithSubType<WorkflowGivenType, WorkflowGivenSubType>\n                            {\n                                Type = WorkflowGivenType.Commit,\n                                SubType = portion.subType,\n                                Value = portion.value\n                            }\n                    )\n                    .ToList", "given.Select"], false, false, false, false, [""], false, 0, 0, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, false], ["ExpressionUtils", "Lim.TestsCommon.DotNET.Utils.ExpressionUtils", [], [], "tests/Lim.TestsCommon.DotNET/Utils/ExpressionUtils.cs", 9, 0, {}, [], ["MergeExpressions", "SetProperties", "GetPropertyInfoToValueDictionary", "GetPropertyInfo"], ["System", "System.Collections.Generic", "System.Linq", "System.Linq.Expressions", "System.Reflection"], false, false, [], false, false, [], {}, [], 0, false, false, false, 4, 1.0, [], 446.5, 444, 100.0, 50.0, 0, 0, false, false, false, false, "public", false, [], ["propertyInfoToValueDictionary.ContainsKey", "valueGenerator.Invoke", "propertyInfo.SetValue", "expressionToValueDictionary.ToDictionary", "expression.Body.GetType", "member.Member.GetType"], false, false, false, false, [], false, 0, 0, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, false], ["MockExtensions", "Lim.TestsCommon.DotNET.Utils.MockExtensions", [], [], "tests/Lim.TestsCommon.DotNET/Utils/MockExtensions.cs", 8, 0, {}, [], ["ReturnsAsync"], ["System", "System.Threading.Tasks", "Moq.Language", "Moq.Language.Flow"], false, false, [], false, false, [], {}, [], 0, false, false, false, 4, 1.0, [], 121.5, 82, 100.0, 100.0, 0, 0, false, false, true, false, "public", false, [], ["mock.Returns<TArg>", "Task.FromResult", "getter", "mock.Returns<TArg1, TArg2>", "mock.Returns<TArg1, TArg2, TArg3>", "mock.Returns"], false, false, false, false, [], false, 0, 0, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, false], ["MigrationRevisionAttribute", "Lim.Migrator.MigrationRevisionAttribute", ["System.Attribute"], [], "src/Lim.Migrator/Migrations/Base/MigrationRevisionAttribute.cs", 6, 0, {}, ["Revision"], ["MigrationRevisionAttribute", "Revision"], ["System", "JetBrains.Annotations"], false, false, ["AttributeUsage", "MeansImplicitUse"], false, false, [], {}, [], 1, false, false, false, 1, 0.5, [], 17.0, 17, 0.0, 100.0, 1, 0, false, false, false, false, "public", false, [], [], true, false, false, false, [], false, 1, 0, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, false], ["MongoClientExtensions", "Lim.Migrator.MongoClientExtensions", [], [], "src/Lim.Migrator/Migrations/Base/MongoClientExtensions.cs", 10, 0, {"ValidWrappers": "string[]"}, [], ["UnsetFieldsAsync", "UnsetFieldsWhereAsync", "SetFieldsAsync", "SetFieldsWhereAsync", "AddToSetWhereAsync", "RenameFieldsAsync", "RawUpdateAsync", "RawDeleteAsync", "FormatKeyValuePair", "FormatKeyValuePairs"], ["System.Collections.Generic", "System.Linq", "System.Threading.Tasks", "Infrastructure.Dotnet.Common", "Lim.Common.DotNET", "Microsoft.Extensions.Logging"], false, false, [], false, false, [], {"ValidWrappers": []}, [], 0, false, false, false, 11, 1.0, [], 249.54545454545453, 202, 100.0, 81.81818181818181, 0, 0, false, false, true, true, "public", false, [], ["fieldNames.Select(fieldName => (fieldName, \"''\"))\n                    .ToList", "fieldNames.Select", "logger.LogInformation", "mongoClient.ExecuteRawAsync", "keyValuePairs.Select(\n                    pair =>\n                        $\"{pair.key.EnsureWrappedWithAny(ValidWrappers)}: {(pair.value == \"null\" ? pair.value : pair.value.EnsureWrappedWithAny(ValidWrappers))}\"\n                )\n                .JoinToString", "keyValuePairs.Select", "pair.key.EnsureWrappedWithAny", "pair.value.EnsureWrappedWithAny"], false, false, false, false, ["'", "\"", "{", "}", "/", "[", "]", "unset", "''", "set", "addToSet", "rename", "Running command:\n{command}", "null", ", "], false, 0, 0, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, false], ["Migration_056_ResetIProjectProfileActiveSince", "Lim.Migrator.Migration_056_ResetIProjectProfileActiveSince", [], ["Lim.Migrator.IMigration"], "src/Lim.Migrator/Migrations/Migration_056_ResetIProjectprofileActiveSince.cs", 7, 0, {"_logger": "???.ILogger", "_mongoClient": "Lim.Common.DotNET.IMongoClientAdvanced"}, ["_logger", "_mongoClient"], ["Migration_056_ResetIProjectProfileActiveSince", "MigrateAsync"], ["System.Threading.Tasks", "Lim.Common.DotNET", "Microsoft.Extensions.Logging"], false, false, ["MigrationRevision"], false, false, [], {"_logger": [], "_mongoClient": []}, [], 0, false, false, false, 2, 1.0, [], 245.0, 245, 0.0, 100.0, 1, 0, false, false, false, true, "public", false, ["Lim.Migrator.MongoClientExtensions.UnsetFieldsAsync", "Lim.Migrator.MongoClientExtensions.SetFieldsAsync"], [], false, false, false, false, ["developerProjectProfiles", "ActiveSince", "projects", "LastIssueOrdinalId", "null", "LastScannedIssueRevision"], false, 0, 0, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, false], ["Migration_057_RenameLastActivityInDeveloperProfile", "Lim.Migrator.Migration_057_RenameLastActivityInDeveloperProfile", [], ["Lim.Migrator.IMigration"], "src/Lim.Migrator/Migrations/Migration_057_RenameLastActivityInDeveloperProfile.cs", 7, 0, {"_logger": "???.ILogger", "_mongoClient": "Lim.Common.DotNET.IMongoClientAdvanced"}, ["_logger", "_mongoClient"], ["Migration_057_RenameLastActivityInDeveloperProfile", "MigrateAsync"], ["System.Threading.Tasks", "Lim.Common.DotNET", "Microsoft.Extensions.Logging"], false, false, ["MigrationRevision"], false, false, [], {"_logger": [], "_mongoClient": []}, [], 0, false, false, false, 2, 1.0, [], 126.0, 126, 0.0, 100.0, 1, 0, false, false, false, true, "public", false, ["Lim.Migrator.MongoClientExtensions.UnsetFieldsAsync"], [], false, false, false, false, ["developerProfiles", "LastCodeActivity"], false, 0, 0, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, false], ["Migration_058_DeletePoliciesRedundantFields", "Lim.Migrator.Migration_058_DeletePoliciesRedundantFields", [], ["Lim.Migrator.IMigration"], "src/Lim.Migrator/Migrations/Migration_058_DeletePoliciesRedundantFields.cs", 7, 0, {"_logger": "???.ILogger", "_mongoClient": "Lim.Common.DotNET.IMongoClientAdvanced"}, ["_logger", "_mongoClient"], ["Migration_058_DeletePoliciesRedundantFields", "MigrateAsync"], ["System.Threading.Tasks", "Lim.Common.DotNET", "Microsoft.Extensions.Logging"], false, false, ["MigrationRevision"], false, false, [], {"_logger": [], "_mongoClient": []}, [], 0, false, false, false, 2, 1.0, [], 301.5, 301, 0.0, 100.0, 1, 0, false, false, false, true, "public", false, ["Lim.Migrator.MongoClientExtensions.UnsetFieldsAsync"], [], false, false, false, false, ["terraformModules", "TerraformHighlights.StorageAccessPolicies.$[].AffectedIps", "TerraformHighlights.StorageAccessPolicies.$[].Ports", "TerraformHighlights.StorageAccessPolicies.$[].Access", "TerraformHighlights.StorageAccessPolicies.$[].Direction", "TerraformHighlights.StorageAccessPolicies.$[].Protocol"], false, 0, 0, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, false], ["RemoveAllTerraformModuleForKeyChange", "Lim.Migrator.RemoveAllTerraformModuleForKeyChange", [], ["Lim.Migrator.IMigration"], "src/Lim.Migrator/Migrations/Migration_059_RemoveAllTerraformModuleForKeyChange.cs", 7, 0, {"_logger": "???.ILogger", "_mongoClient": "Lim.Common.DotNET.IMongoClientAdvanced"}, ["_logger", "_mongoClient"], ["RemoveAllTerraformModuleForKeyChange", "MigrateAsync"], ["System.Threading.Tasks", "Lim.Common.DotNET", "Microsoft.Extensions.Logging"], false, false, ["MigrationRevision"], false, false, [], {"_logger": [], "_mongoClient": []}, [], 0, false, false, false, 2, 1.0, [], 91.0, 91, 0.0, 100.0, 1, 0, false, false, false, true, "public", false, [], ["_mongoClient.DropCollectionAsync"], false, false, false, false, ["terraformModules"], false, 0, 0, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, false], ["Migration_060_CompoundRuleFields", "Lim.Migrator.Migration_060_CompoundRuleFields", [], ["Lim.Migrator.IMigration"], "src/Lim.Migrator/Migrations/Migration_060_CompoundRuleFields.cs", 7, 0, {"_logger": "???.ILogger", "_mongoClient": "Lim.Common.DotNET.IMongoClientAdvanced"}, ["_logger", "_mongoClient"], ["Migration_060_CompoundRuleFields", "MigrateAsync"], ["System.Threading.Tasks", "Lim.Common.DotNET", "Microsoft.Extensions.Logging"], false, false, ["MigrationRevision"], false, false, [], {"_logger": [], "_mongoClient": []}, [], 0, false, false, false, 2, 1.0, [], 219.5, 219, 0.0, 100.0, 1, 0, false, false, false, true, "public", false, ["Lim.Migrator.MongoClientExtensions.RenameFieldsAsync", "Lim.Migrator.MongoClientExtensions.SetFieldsAsync"], [], false, false, false, false, ["materialChanges", "EntityId", "'ClassId'", "IsPartial", "false"], false, 0, 0, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, false], ["Migration_061_DropMaterialChanges", "Lim.Migrator.Migration_061_DropMaterialChanges", [], ["Lim.Migrator.IMigration"], "src/Lim.Migrator/Migrations/Migration_061_DropMaterialChanges.cs", 6, 0, {"_mongoClient": "Lim.Common.DotNET.IMongoClientAdvanced"}, ["_mongoClient"], ["Migration_061_DropMaterialChanges", "MigrateAsync"], ["System.Threading.Tasks", "Lim.Common.DotNET"], false, false, ["MigrationRevision"], false, false, [], {"_mongoClient": []}, [], 0, false, false, false, 2, 1.0, [], 56.5, 56, 0.0, 100.0, 1, 0, false, false, false, true, "public", false, [], ["_mongoClient.DropCollectionAsync"], false, false, false, false, ["materialChanges"], false, 0, 0, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, false], ["Migration_062_UsingNewDependencyTypeForAtComponents", "Lim.Migrator.Migration_062_UsingNewDependencyTypeForAtComponents", [], ["Lim.Migrator.IMigration"], "src/Lim.Migrator/Migrations/Migration_062_UsingNewDependenciesTypeAtComponents.cs", 7, 0, {"_logger": "???.ILogger", "_mongoClient": "Lim.Common.DotNET.IMongoClientAdvanced"}, ["_logger", "_mongoClient"], ["Migration_062_UsingNewDependencyTypeForAtComponents", "MigrateAsync"], ["System.Threading.Tasks", "Lim.Common.DotNET", "Microsoft.Extensions.Logging"], false, false, ["MigrationRevision"], false, false, [], {"_logger": [], "_mongoClient": []}, [], 0, false, false, false, 2, 1.0, [], 124.5, 124, 0.0, 100.0, 1, 0, false, false, false, true, "public", false, ["Lim.Migrator.MongoClientExtensions.UnsetFieldsAsync"], [], false, false, false, false, ["commits", "Components.Dependencies"], false, 0, 0, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, false], ["Migration_063_UnsetDependencyName", "Lim.Migrator.Migration_063_UnsetDependencyName", [], ["Lim.Migrator.IMigration"], "src/Lim.Migrator/Migrations/Migration_063_UnsetDependencyNames.cs", 7, 0, {"_logger": "???.ILogger", "_mongoClient": "Lim.Common.DotNET.IMongoClientAdvanced"}, ["_logger", "_mongoClient"], ["Migration_063_UnsetDependencyName", "MigrateAsync"], ["System.Threading.Tasks", "Lim.Common.DotNET", "Microsoft.Extensions.Logging"], false, false, ["MigrationRevision"], false, false, [], {"_logger": [], "_mongoClient": []}, [], 0, false, false, false, 2, 1.0, [], 125.5, 125, 0.0, 100.0, 1, 0, false, false, false, true, "public", false, ["Lim.Migrator.MongoClientExtensions.UnsetFieldsAsync"], [], false, false, false, false, ["commits", "Components.DependencyName"], false, 0, 0, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, false], ["Migration_064_UnsetDependencyNameFromArray", "Lim.Migrator.Migration_064_UnsetDependencyNameFromArray", [], ["Lim.Migrator.IMigration"], "src/Lim.Migrator/Migrations/Migration_064_UnsetDependencyNameFromArray.cs", 7, 0, {"_logger": "???.ILogger", "_mongoClient": "Lim.Common.DotNET.IMongoClientAdvanced"}, ["_logger", "_mongoClient"], ["Migration_064_UnsetDependencyNameFromArray", "MigrateAsync"], ["System.Threading.Tasks", "Lim.Common.DotNET", "Microsoft.Extensions.Logging"], false, false, ["MigrationRevision"], false, false, [], {"_logger": [], "_mongoClient": []}, [], 0, false, false, false, 2, 1.0, [], 127.5, 127, 0.0, 100.0, 1, 0, false, false, false, true, "public", false, ["Lim.Migrator.MongoClientExtensions.UnsetFieldsAsync"], [], false, false, false, false, ["commits", "Components.$[].DependencyName"], false, 0, 0, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, false], ["Migration_065_UnsetComponents", "Lim.Migrator.Migration_065_UnsetComponents", [], ["Lim.Migrator.IMigration"], "src/Lim.Migrator/Migrations/Migration_065_UnsetComponents.cs", 7, 0, {"_logger": "???.ILogger", "_mongoClient": "Lim.Common.DotNET.IMongoClientAdvanced"}, ["_logger", "_mongoClient"], ["Migration_065_UnsetComponents", "MigrateAsync"], ["System.Threading.Tasks", "Lim.Common.DotNET", "Microsoft.Extensions.Logging"], false, false, ["MigrationRevision"], false, false, [], {"_logger": [], "_mongoClient": []}, [], 0, false, false, false, 2, 1.0, [], 118.0, 118, 0.0, 100.0, 1, 0, false, false, false, true, "public", false, ["Lim.Migrator.MongoClientExtensions.UnsetFieldsAsync"], [], false, false, false, false, ["commits", "Components"], false, 0, 0, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, false], ["Migration_066_DropRepositoryProfiles", "Lim.Migrator.Migration_066_DropRepositoryProfiles", [], ["Lim.Migrator.IMigration"], "src/Lim.Migrator/Migrations/Migration_066_DropRepositoryProfiles.cs", 6, 0, {"_mongoClient": "Lim.Common.DotNET.IMongoClientAdvanced"}, ["_mongoClient"], ["Migration_066_DropRepositoryProfiles", "MigrateAsync"], ["System.Threading.Tasks", "Lim.Common.DotNET"], false, false, ["MigrationRevision"], false, false, [], {"_mongoClient": []}, [], 0, false, false, false, 2, 1.0, [], 58.0, 58, 0.0, 100.0, 1, 0, false, false, false, true, "public", false, [], ["_mongoClient.DropCollectionAsync"], false, false, false, false, ["repositoryProfiles"], false, 0, 0, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, false], ["Migration_067_UpdateDevelopersIdentitiesIndexWithCollation", "Lim.Migrator.Migration_067_UpdateDevelopersIdentitiesIndexWithCollation", [], ["Lim.Migrator.IMigration"], "src/Lim.Migrator/Migrations/Migration_067_UpdateDevelopersIdentitiesIndexWithCollation.cs", 6, 0, {"_mongoClient": "Lim.Common.DotNET.IMongoClientAdvanced"}, ["_mongoClient"], ["Migration_067_UpdateDevelopersIdentitiesIndexWithCollation", "MigrateAsync"], ["System.Threading.Tasks", "Lim.Common.DotNET"], false, false, ["MigrationRevision"], false, false, [], {"_mongoClient": []}, [], 0, false, false, false, 2, 1.0, [], 136.5, 136, 0.0, 100.0, 1, 0, false, false, false, true, "public", false, [], ["_mongoClient.DropIndexAsync<Developer>"], false, false, false, false, ["Identities"], false, 0, 0, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, false], ["Migration_068_FixAuthorizationGovernanceSeed", "Lim.Migrator.Migration_068_FixAuthorizationGovernanceSeed", [], ["Lim.Migrator.IMigration"], "src/Lim.Migrator/Migrations/Migration_068_FixAuthorizationGovernanceSeed.cs", 9, 0, {"_mongoClient": "Lim.Common.DotNET.IMongoClientAdvanced"}, ["_mongoClient"], ["Migration_068_FixAuthorizationGovernanceSeed", "MigrateAsync"], ["System.Collections.Generic", "System.Threading.Tasks", "Lim.Common.DotNET", "MongoDB.Bson", "MongoDB.Driver"], false, false, ["MigrationRevision"], false, false, [], {"_mongoClient": []}, [], 0, false, false, false, 2, 1.0, [], 295.5, 295, 0.0, 100.0, 1, 0, false, false, false, true, "public", false, [], ["_mongoClient.DeleteManyAsync<GovernanceRule>", "_mongoClient.UpdateAsync", "Builders<Configuration>.Update.Set"], false, false, false, false, ["When.Type", "InputValidation", "Then.Value", "Missing authorization", "1"], false, 0, 0, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, true], ["Migration_069_ApiValidationReference", "Lim.Migrator.Migration_069_ApiValidationReference", [], ["Lim.Migrator.IMigration"], "src/Lim.Migrator/Migrations/Migration_069_ApiValidationReference.cs", 8, 0, {"_logger": "???.ILogger", "_mongoClient": "Lim.Common.DotNET.IMongoClientAdvanced"}, ["_logger", "_mongoClient"], ["Migration_069_ApiValidationReference", "MigrateAsync"], ["System.Collections.Generic", "System.Threading.Tasks", "Lim.Common.DotNET", "Microsoft.Extensions.Logging"], false, false, ["MigrationRevision"], false, false, [], {"_logger": [], "_mongoClient": []}, [], 0, false, false, false, 2, 1.0, [], 223.5, 223, 0.0, 100.0, 1, 0, false, false, false, true, "public", false, ["Lim.Migrator.MongoClientExtensions.UnsetFieldsWhereAsync"], [], false, false, false, false, ["materialChanges", "'_t'", "'MethodsMaterialChange'", "CodeReference.ApiMethodsDetails.$[].UnvalidatedParametersByFramework"], false, 0, 0, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, false], ["Migration_070_UpdateRepositoryAndProjectProfilesIndexWithCollation", "Lim.Migrator.Migration_070_UpdateRepositoryAndProjectProfilesIndexWithCollation", [], ["Lim.Migrator.IMigration"], "src/Lim.Migrator/Migrations/Migration_070_UpdateRepositoryAndProjectProfilesIndexWithCollation.cs", 6, 0, {"_mongoClient": "Lim.Common.DotNET.IMongoClientAdvanced"}, ["_mongoClient"], ["Migration_070_UpdateRepositoryAndProjectProfilesIndexWithCollation", "MigrateAsync"], ["System.Threading.Tasks", "Lim.Common.DotNET"], false, false, ["MigrationRevision"], false, false, [], {"_mongoClient": []}, [], 0, false, false, false, 2, 1.0, [], 182.5, 182, 0.0, 100.0, 1, 0, false, false, false, true, "public", false, [], ["_mongoClient.DropIndexAsync<ProjectProfile>", "_mongoClient.DropIndexAsync<RepositoryProfile>"], false, false, false, false, ["Name"], false, 0, 0, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, false], ["Migration_071_DropNonCodeIndication", "Lim.Migrator.Migration_071_DropNonCodeIndication", [], ["Lim.Migrator.IMigration"], "src/Lim.Migrator/Migrations/Migration_071_DropNonCodeIndication.cs", 7, 0, {"_logger": "???.ILogger", "_mongoClient": "Lim.Common.DotNET.IMongoClientAdvanced"}, ["_logger", "_mongoClient"], ["Migration_071_DropNonCodeIndication", "MigrateAsync"], ["System.Threading.Tasks", "Lim.Common.DotNET", "Microsoft.Extensions.Logging"], false, false, ["MigrationRevision"], false, false, [], {"_logger": [], "_mongoClient": []}, [], 0, false, false, false, 2, 1.0, [], 127.0, 127, 0.0, 100.0, 1, 0, false, false, false, true, "public", false, ["Lim.Migrator.MongoClientExtensions.UnsetFieldsAsync"], [], false, false, false, false, ["commits", "ComponentsNonCodeIndications"], false, 0, 0, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, false], ["Migration_072_SetReleaseStatus", "Lim.Migrator.Migration_072_SetReleaseStatus", [], ["Lim.Migrator.IMigration"], "src/Lim.Migrator/Migrations/Migration_072_SetReleaseStatus.cs", 7, 0, {"_logger": "???.ILogger", "_mongoClient": "Lim.Common.DotNET.IMongoClientAdvanced"}, ["_logger", "_mongoClient"], ["Migration_072_SetReleaseStatus", "MigrateAsync"], ["System.Threading.Tasks", "Lim.Common.DotNET", "Microsoft.Extensions.Logging"], false, false, ["MigrationRevision"], false, false, [], {"_logger": [], "_mongoClient": []}, [], 0, false, false, false, 2, 1.0, [], 228.0, 228, 0.0, 100.0, 1, 0, false, false, false, true, "public", false, ["Lim.Migrator.MongoClientExtensions.UnsetFieldsAsync", "Lim.Migrator.MongoClientExtensions.SetFieldsAsync"], [], false, false, false, false, ["releases", "Baseline.Risk", "Candidate.Risk", "Status", "'DiffCalculated'"], false, 0, 0, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, false], ["Migration_073_ReleaseSideRefType", "Lim.Migrator.Migration_073_ReleaseSideRefType", [], ["Lim.Migrator.IMigration"], "src/Lim.Migrator/Migrations/Migration_073_ReleaseSideRefType.cs", 7, 0, {"_logger": "???.ILogger", "_mongoClient": "Lim.Common.DotNET.IMongoClientAdvanced"}, ["_logger", "_mongoClient"], ["Migration_073_ReleaseSideRefType", "MigrateAsync"], ["System.Threading.Tasks", "Lim.Common.DotNET", "Microsoft.Extensions.Logging"], false, false, ["MigrationRevision"], false, false, [], {"_logger": [], "_mongoClient": []}, [], 0, false, false, false, 2, 1.0, [], 273.0, 273, 0.0, 100.0, 1, 0, false, false, false, true, "public", false, ["Lim.Migrator.MongoClientExtensions.SetFieldsWhereAsync", "Lim.Migrator.MongoClientExtensions.SetFieldsAsync"], [], false, false, false, false, ["releases", "Status", "'Pending'", "'ErrorCandidateNotFound'", "'Baseline.RefType'", "'Branch'", "'Candidate.RefType'"], false, 0, 0, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, false], ["Migration_074_DeleteSensitiveGovernanceRule", "Lim.Migrator.Migration_074_DeleteSensitiveGovernanceRule", [], ["Lim.Migrator.IMigration"], "src/Lim.Migrator/Migrations/Migration_074_DeleteSensitiveGovernanceRule.cs", 8, 0, {"_mongoClient": "Lim.Common.DotNET.IMongoClientAdvanced"}, ["_mongoClient"], ["Migration_074_DeleteSensitiveGovernanceRule", "MigrateAsync"], ["System.Collections.Generic", "System.Threading.Tasks", "Lim.Common.DotNET", "MongoDB.Bson"], false, false, ["MigrationRevision"], false, false, [], {"_mongoClient": []}, [], 0, false, false, false, 2, 1.0, [], 169.5, 169, 0.0, 100.0, 1, 0, false, false, false, true, "public", false, [], ["_mongoClient.DeleteManyAsync<GovernanceRule>"], false, false, false, false, ["When.Type", "Sensitive"], false, 0, 0, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, true], ["Migration_075_ResetAllData", "Lim.Migrator.Migration_075_ResetAllData", [], ["Lim.Migrator.IMigration"], "src/Lim.Migrator/Migrations/Migration_075_ResetAllData.cs", 7, 0, {"_logger": "???.ILogger", "_mongoClient": "Lim.Common.DotNET.IMongoClientAdvanced"}, ["_logger", "_mongoClient"], ["Migration_075_ResetAllData", "MigrateAsync"], ["System.Threading.Tasks", "Lim.Common.DotNET", "Microsoft.Extensions.Logging"], false, false, ["MigrationRevision"], false, false, [], {"_logger": [], "_mongoClient": []}, [], 0, false, false, false, 2, 1.0, [], 809.0, 809, 0.0, 100.0, 1, 0, false, false, false, true, "public", false, ["Lim.Migrator.MongoClientExtensions.SetFieldsAsync", "Lim.Migrator.MongoClientExtensions.UnsetFieldsAsync"], ["_mongoClient.DropCollectionAsync"], false, false, false, false, ["projectProfiles", "repositoryProfiles", "developerProfiles", "developerProjectProfiles", "developerRepositoryProfiles", "repositoryProjectProfiles", "materialChanges", "commits", "issues", "pullRequests", "developerIdentities", "developers", "repositories", "LastPullRequestOrdinalId", "0", "releases", "DeveloperKeys", "projects", "LastIssueOrdinalId", "LastScannedIssueRevision"], false, 0, 0, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, false], ["Migration_076_ClearProfilesFromSensitive", "Lim.Migrator.Migration_076_ClearProfilesFromSensitive", [], ["Lim.Migrator.IMigration"], "src/Lim.Migrator/Migrations/Migration_076_ClearProfilesFromSensitive.cs", 7, 0, {"_logger": "???.ILogger", "_mongoClient": "Lim.Common.DotNET.IMongoClientAdvanced"}, ["_logger", "_mongoClient"], ["Migration_076_ClearProfilesFromSensitive", "MigrateAsync"], ["System.Threading.Tasks", "Lim.Common.DotNET", "Microsoft.Extensions.Logging"], false, false, ["MigrationRevision"], false, false, [], {"_logger": [], "_mongoClient": []}, [], 0, false, false, false, 2, 1.0, [], 253.5, 253, 0.0, 100.0, 1, 0, false, false, false, true, "public", false, ["Lim.Migrator.MongoClientExtensions.UnsetFieldsAsync"], ["_mongoClient.DropCollectionAsync"], false, false, false, false, ["developerProfiles", "repositoryProfiles", "projectProfiles", "developerRepositoryProfiles", "SensitiveAddedCommitsSha"], false, 0, 0, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, false], ["Migration_077_UpdateSecurityChangeTypes", "Lim.Migrator.Migration_077_UpdateSecurityChangeTypes", [], ["Lim.Migrator.IMigration"], "src/Lim.Migrator/Migrations/Migration_077_UpdateSecurityChangeTypes.cs", 8, 0, {"_logger": "???.ILogger", "_mongoClient": "Lim.Common.DotNET.IMongoClientAdvanced"}, ["_logger", "_mongoClient"], ["Migration_077_UpdateSecurityChangeTypes", "MigrateAsync", "MigrateSecurityControls"], ["System.Threading.Tasks", "Infrastructure.Dotnet.Common", "Lim.Common.DotNET", "Microsoft.Extensions.Logging"], false, false, ["MigrationRevision"], false, false, [], {"_logger": [], "_mongoClient": []}, [], 0, false, false, false, 3, 1.0, [], 315.0, 212, 0.0, 66.66666666666667, 1, 0, false, false, false, true, "public", false, ["Lim.Migrator.MongoClientExtensions.FormatKeyValuePair"], ["\"Controls\".EnsureWrappedWithAny", "_logger.LogInformation", "_mongoClient.ExecuteRawAsync"], false, false, false, false, ["commits", "developerProfiles", "developerRepositoryProfiles", "'SecurityExpertise.$[element]'", "General", "Controls", "Running command:\n{command}"], false, 0, 0, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, false], ["Migration_078_RepositoryScanComplete", "Lim.Migrator.Migration_078_RepositoryScanComplete", [], ["Lim.Migrator.IMigration"], "src/Lim.Migrator/Migrations/Migration_078_RepositoryScanComplete.cs", 7, 0, {"_logger": "???.ILogger", "_mongoClient": "Lim.Common.DotNET.IMongoClientAdvanced"}, ["_logger", "_mongoClient"], ["Migration_078_RepositoryScanComplete", "MigrateAsync"], ["System.Threading.Tasks", "Lim.Common.DotNET", "Microsoft.Extensions.Logging"], false, false, ["MigrationRevision"], false, false, [], {"_logger": [], "_mongoClient": []}, [], 0, false, false, false, 2, 1.0, [], 126.5, 126, 0.0, 100.0, 1, 0, false, false, false, true, "public", false, ["Lim.Migrator.MongoClientExtensions.SetFieldsAsync"], [], false, false, false, false, ["repositories", "CommitScanCompleted", "false"], false, 0, 0, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, false], ["Migration_079_DeleteRepositoryProfiles", "Lim.Migrator.Migration_079_DeleteRepositoryProfiles", [], ["Lim.Migrator.IMigration"], "src/Lim.Migrator/Migrations/Migration_079_DeleteRepositoryProfiles.cs", 7, 0, {"_mongoClient": "Lim.Common.DotNET.IMongoClientAdvanced"}, ["_mongoClient"], ["Migration_079_DeleteRepositoryProfiles", "MigrateAsync"], ["System.Threading.Tasks", "Lim.Common.DotNET", "Microsoft.Extensions.Logging"], false, false, ["MigrationRevision"], false, false, [], {"_mongoClient": []}, [], 0, false, false, false, 2, 1.0, [], 58.0, 58, 0.0, 100.0, 1, 0, false, false, false, true, "public", false, [], ["_mongoClient.DropCollectionAsync"], false, false, false, false, ["repositoryProfiles"], false, 0, 0, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, false], ["Migration_080_SecurityExpertise", "Lim.Migrator.Migration_080_SecurityExpertise", [], ["Lim.Migrator.IMigration"], "src/Lim.Migrator/Migrations/Migration_080_SecurityExpertise.cs", 7, 0, {"_logger": "???.ILogger", "_mongoClient": "Lim.Common.DotNET.IMongoClientAdvanced"}, ["_logger", "_mongoClient"], ["Migration_080_SecurityExpertise", "MigrateAsync"], ["System.Threading.Tasks", "Lim.Common.DotNET", "Microsoft.Extensions.Logging"], false, false, ["MigrationRevision"], false, false, [], {"_logger": [], "_mongoClient": []}, [], 0, false, false, false, 2, 1.0, [], 282.0, 282, 0.0, 100.0, 1, 0, false, false, false, true, "public", false, ["Lim.Migrator.MongoClientExtensions.UnsetFieldsAsync"], ["_mongoClient.DropCollectionAsync"], false, false, false, false, ["commits", "JavaSecurityFrameworks", "developerRepositoryProfiles", "HasJavaSecurityFrameworks", "developerProfiles"], false, 0, 0, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, false], ["Migration_081_LabelListToDictionary", "Lim.Migrator.Migration_081_LabelListToDictionary", [], ["Lim.Migrator.IMigration"], "src/Lim.Migrator/Migrations/Migration_081_LabelListToDictionary.cs", 8, 0, {"_logger": "???.ILogger", "_mongoClient": "Lim.Common.DotNET.IMongoClientAdvanced"}, ["_logger", "_mongoClient"], ["Migration_081_LabelListToDictionary", "MigrateAsync"], ["System.Threading.Tasks", "Lim.Common.DotNET", "Microsoft.Extensions.Logging", "MongoDB.Driver"], false, false, ["MigrationRevision"], false, false, [], {"_logger": [], "_mongoClient": []}, [], 0, false, false, false, 2, 1.0, [], 463.5, 463, 0.0, 100.0, 1, 0, false, false, false, true, "public", false, ["Lim.Migrator.MongoClientExtensions.UnsetFieldsAsync"], ["new EmptyPipelineDefinition<Commit>()\n                .AppendStage<Commit, Commit, Commit>", "_mongoClient.UpdateManyAsync<Commit>"], false, false, false, false, ["{$set:\n{\n  \"MaterialChangesLabelsToCount\": {\n        $arrayToObject: {\n            $map: {\n                \"input\": \"$MaterialChangesLabels\",\n                \"as\": \"element\",\n                \"in\": {\n                    \"k\": \"$$element\",\n                    \"v\": 1\n                }\n            }\n        }\n    }\n}}", "commits", "ModuleRootToMaterialChangeLabels"], false, 0, 0, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, true], ["Migration_082_GovernanceRuleNames", "Lim.Migrator.Migration_082_GovernanceRuleNames", [], ["Lim.Migrator.IMigration"], "src/Lim.Migrator/Migrations/Migration_082_GovernanceRuleNames.cs", 10, 0, {"_governanceRulesStorage": "Lim.Common.DotNET.IGovernanceRulesStorage"}, ["_governanceRulesStorage"], ["Migration_082_GovernanceRuleNames", "MigrateAsync", "ChangeRulesAsync", "AreRulesSimilar", "EqualsGivenCaluse", "EqualsWhenClause", "GetDefaultRulesFromSeeds", "CreateRiskAction", "CreateLabelAction", "CreateRuleForAnyRepository"], ["System", "System.Collections.Generic", "System.Linq", "System.Threading.Tasks", "Infrastructure.Dotnet.Common", "Lim.Common.DotNET"], false, false, ["MigrationRevision"], false, false, [], {"_governanceRulesStorage": []}, [], 0, false, false, false, 10, 1.0, [], 1316.3, 243, 50.0, 30.0, 1, 0, false, false, false, true, "public", false, [], ["_governanceRulesStorage.GetGovernanceRulesAsync", "rules.NullOrNone", "string.IsNullOrEmpty", "_governanceRulesStorage.UpdateGovernanceRuleNameAsync", "currentRule.Given.All", "rule.Given.Contains", "rule.Given.All", "currentRule.Given.Contains", "thisRule.When.Intersects", "thisRule.When.Count.Equals", "GovernanceWhenType.Activity.ToString", "DataToApiRelation.Involved.ToString", "DataToApiRelation.Exposed.ToString", "RiskLevel.Low.ToString", "RiskLevel.High.ToString", "RiskLevel.Medium.ToString", "RiskLevel.Critical.ToString", "riskLevel.ToString", "Guid.NewGuid()\n                    .ToString", "Guid.NewGuid"], false, false, false, false, ["In Active Development", "API Missing Input Validation", "Missing input validation", "Exposed Secrets", "Exposed secret added", "API Modifications", "API added", "API significantly changed", "API removed", "Holds PII", "PII added", "PII removed", "PII Involved in API", "PII involved in API", "PII Exposed by API", "PII exposed in API", "Data Model Modifications", "Data model added", "Data model significantly changed", "Data model removed", "External Packages Modifications", "External dependency added", "External dependency version upgraded", "External dependency version downgraded", "Data Store Frameworks Modifications", "Data store framework added", "Data store framework removed", "Logging Frameworks Modifications", "Logging framework added", "Logging framework removed", "Security Control Modifications", "Security controls added", "Security controls significantly changed", "Security controls removed", "Infrastructure Network Policies", "Network policies changed", "Infrastructure Role Policies", "Roles policies changed", "Infrastructure Network Structure", "Network structure changed", "Storage Access Policy", "Storage access policies changed", "Missing Authorization", "Missing authorization"], false, 0, 0, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, false], ["Migration_083_AddMoreInputValidationsWhenTypes", "Lim.Migrator.Migration_083_AddMoreInputValidationsWhenTypes", [], ["Lim.Migrator.IMigration"], "src/Lim.Migrator/Migrations/Migration_083_AddMoreInputValidationsWhenTypes.cs", 8, 0, {"_logger": "???.ILogger", "_mongoClient": "Lim.Common.DotNET.IMongoClientAdvanced"}, ["_logger", "_mongoClient"], ["Migration_083_AddMoreInputValidationsWhenTypes", "MigrateAsync"], ["System.Collections.Generic", "System.Threading.Tasks", "Lim.Common.DotNET", "Microsoft.Extensions.Logging"], false, false, ["MigrationRevision"], false, false, [], {"_logger": [], "_mongoClient": []}, [], 0, false, false, false, 2, 1.0, [], 440.5, 440, 0.0, 100.0, 1, 0, false, false, false, true, "public", false, ["Lim.Migrator.MongoClientExtensions.AddToSetWhereAsync"], [], false, false, false, false, ["governanceRules", "Given.Type", "Repository", "Given.Value", "any", "When.Type", "InputValidation", "When.Value", "Then.Value", "Missing input validation", "Then.Type", "Label", "Then.SubType", "Added", "Then", "{ $each: [\n    {Type: \"Label\", Value: \"Input validation added\", SubType: \"Removed\"},\n    {Type: \"Label\", Value: \"Input validation significantly changed\", SubType: \"Altered\"}\n]}"], false, 0, 0, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, false], ["Migration_084_ClearRepositoryProfiles", "Lim.Migrator.Migration_084_ClearRepositoryProfiles", [], ["Lim.Migrator.IMigration"], "src/Lim.Migrator/Migrations/Migration_084_ClearRepositoryProfilesRiskFactorConstraintTypes.cs", 6, 0, {"_mongoClient": "Lim.Common.DotNET.IMongoClientAdvanced"}, ["_mongoClient"], ["Migration_084_ClearRepositoryProfiles", "MigrateAsync"], ["System.Threading.Tasks", "Lim.Common.DotNET"], false, false, ["MigrationRevision"], false, false, [], {"_mongoClient": []}, [], 0, false, false, false, 2, 1.0, [], 135.0, 135, 0.0, 100.0, 1, 0, false, false, false, true, "public", false, [], ["_mongoClient.DropCollectionAsync"], false, false, false, false, ["projectProfiles", "repositoryProfiles", "releases"], false, 0, 0, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, false], ["Migration_085_NoProjectPrs", "Lim.Migrator.Migration_085_NoProjectPrs", [], ["Lim.Migrator.IMigration"], "src/Lim.Migrator/Migrations/Migration_085_NoProjectPrs.cs", 7, 0, {"_logger": "???.ILogger", "_mongoClient": "Lim.Common.DotNET.IMongoClientAdvanced"}, ["_logger", "_mongoClient"], ["Migration_085_NoProjectPrs", "MigrateAsync"], ["System.Threading.Tasks", "Lim.Common.DotNET", "Microsoft.Extensions.Logging"], false, false, ["MigrationRevision"], false, false, [], {"_logger": [], "_mongoClient": []}, [], 0, false, false, false, 2, 1.0, [], 489.5, 489, 0.0, 100.0, 1, 0, false, false, false, true, "public", false, ["Lim.Migrator.MongoClientExtensions.UnsetFieldsAsync", "Lim.Migrator.MongoClientExtensions.SetFieldsWhereAsync", "Lim.Migrator.MongoClientExtensions.UnsetFieldsWhereAsync"], [], false, false, false, false, ["developerProjectProfiles", "AuthoredPullRequestIds", "ReviewedPullRequestIds", "issues", "Url", "/github_com/", "RelatedPullRequestIdWithRepositoryUrlPairs", "[]", "projects", "/github.com/", "LastIssueOrdinalId", "null", "LastScannedIssueRevision"], false, 0, 0, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, false], ["Migration_086_UnsetProjectPrCount", "Lim.Migrator.Migration_086_UnsetProjectPrCount", [], ["Lim.Migrator.IMigration"], "src/Lim.Migrator/Migrations/Migration_086_UnsetProjectPrCount.cs", 7, 0, {"_logger": "???.ILogger", "_mongoClient": "Lim.Common.DotNET.IMongoClientAdvanced"}, ["_logger", "_mongoClient"], ["Migration_086_UnsetProjectPrCount", "MigrateAsync"], ["System.Threading.Tasks", "Lim.Common.DotNET", "Microsoft.Extensions.Logging"], false, false, ["MigrationRevision"], false, false, [], {"_logger": [], "_mongoClient": []}, [], 0, false, false, false, 2, 1.0, [], 143.0, 143, 0.0, 100.0, 1, 0, false, false, false, true, "public", false, ["Lim.Migrator.MongoClientExtensions.UnsetFieldsAsync"], [], false, false, false, false, ["developerProjectProfiles", "ReviewedPullRequestCount"], false, 0, 0, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, false], ["Migration_087_RenameRepositoryFirstScanField", "Lim.Migrator.Migration_087_RenameRepositoryFirstScanField", [], ["Lim.Migrator.IMigration"], "src/Lim.Migrator/Migrations/Migration_087_RenameRepositoryFirstScanField.cs", 7, 0, {"_logger": "???.ILogger", "_mongoClient": "Lim.Common.DotNET.IMongoClientAdvanced"}, ["_logger", "_mongoClient"], ["Migration_087_RenameRepositoryFirstScanField", "MigrateAsync"], ["System.Threading.Tasks", "Lim.Common.DotNET", "Microsoft.Extensions.Logging"], false, false, ["MigrationRevision"], false, false, [], {"_logger": [], "_mongoClient": []}, [], 0, false, false, false, 2, 1.0, [], 223.5, 223, 0.0, 100.0, 1, 0, false, false, false, true, "public", false, ["Lim.Migrator.MongoClientExtensions.UnsetFieldsAsync", "Lim.Migrator.MongoClientExtensions.SetFieldsAsync"], [], false, false, false, false, ["repositories", "'CommitScanCompleted'", "'DeveloperScanCompleted'", "'false'"], false, 0, 0, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, false], ["Migration_088_VulnerabilityNewStructure", "Lim.Migrator.Migration_088_VulnerabilityNewStructure", [], ["Lim.Migrator.IMigration"], "src/Lim.Migrator/Migrations/Migration_088_VulnerabilityNewStructure.cs", 7, 0, {"_logger": "???.ILogger", "_mongoClient": "Lim.Common.DotNET.IMongoClientAdvanced"}, ["_logger", "_mongoClient"], ["Migration_088_VulnerabilityNewStructure", "MigrateAsync"], ["System.Threading.Tasks", "Lim.Common.DotNET", "Microsoft.Extensions.Logging"], false, false, ["MigrationRevision"], false, false, [], {"_logger": [], "_mongoClient": []}, [], 0, false, false, false, 2, 1.0, [], 175.5, 175, 0.0, 100.0, 1, 0, false, false, false, true, "public", false, ["Lim.Migrator.MongoClientExtensions.SetFieldsAsync"], ["_mongoClient.DropCollectionAsync"], false, false, false, false, ["securityScans", "securityScansProjects", "'LatestScanId'", "null"], false, 0, 0, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, false], ["Migration_089_DeleteRepositoryProfiles", "Lim.Migrator.Migration_089_DeleteRepositoryProfiles", [], ["Lim.Migrator.IMigration"], "src/Lim.Migrator/Migrations/Migration_089_DeleteRepositoryProfiles.cs", 7, 0, {"_mongoClient": "Lim.Common.DotNET.IMongoClientAdvanced"}, ["_mongoClient"], ["Migration_089_DeleteRepositoryProfiles", "MigrateAsync"], ["System.Threading.Tasks", "Lim.Common.DotNET", "Microsoft.Extensions.Logging"], false, false, ["MigrationRevision"], false, false, [], {"_mongoClient": []}, [], 0, false, false, false, 2, 1.0, [], 58.0, 58, 0.0, 100.0, 1, 0, false, false, false, true, "public", false, [], ["_mongoClient.DropCollectionAsync"], false, false, false, false, ["repositoryProfiles"], false, 0, 0, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, false], ["Migration_090_ConsumableNameLower", "Lim.Migrator.Migration_090_ConsumableNameLower", [], ["Lim.Migrator.IMigration"], "src/Lim.Migrator/Migrations/Migration_090_ConsumableNameLower.cs", 7, 0, {"_mongoClient": "Lim.Common.DotNET.IMongoClientAdvanced"}, ["_mongoClient"], ["Migration_090_ConsumableNameLower", "MigrateAsync"], ["System.Threading.Tasks", "Lim.Common.DotNET", "MongoDB.Bson"], false, false, ["MigrationRevision"], false, false, [], {"_mongoClient": []}, [], 0, false, false, false, 2, 1.0, [], 528.0, 528, 0.0, 100.0, 1, 0, false, false, false, true, "public", false, [], ["_mongoClient.GetCollectionAggregate<Repository, BsonDocument>", "aggregate\n                        .AppendStage<BsonDocument>(addFields)\n                        .AppendStage<BsonDocument>", "aggregate\n                        .AppendStage<BsonDocument>", "_mongoClient.GetCollectionAggregate<Project, BsonDocument>", "_mongoClient.GetCollectionAggregate<SecurityScansProject, BsonDocument>"], false, false, false, false, ["{$addFields: {NameLower: { $toLower: \"$Name\" }}}", "{$out: \"repositories\"}", "{$out: \"projects\"}", "{$out: \"securityScansProjects\"}"], false, 0, 0, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, true], ["Migration_091_TechnologyFrameworks", "Lim.Migrator.Migration_091_TechnologyFrameworks", [], ["Lim.Migrator.IMigration"], "src/Lim.Migrator/Migrations/Migration_091_TechnologyFrameworks.cs", 7, 0, {"_logger": "???.ILogger", "_mongoClient": "Lim.Common.DotNET.IMongoClientAdvanced"}, ["_logger", "_mongoClient"], ["Migration_091_TechnologyFrameworks", "MigrateAsync"], ["System.Threading.Tasks", "Lim.Common.DotNET", "Microsoft.Extensions.Logging"], false, false, ["MigrationRevision"], false, false, [], {"_logger": [], "_mongoClient": []}, [], 0, false, false, false, 2, 1.0, [], 708.5, 708, 0.0, 100.0, 1, 0, false, false, false, true, "public", false, ["Lim.Migrator.MongoClientExtensions.UnsetFieldsAsync", "Lim.Migrator.MongoClientExtensions.RawDeleteAsync", "Lim.Migrator.MongoClientExtensions.SetFieldsWhereAsync"], [], false, false, false, false, ["commits", "Components", "repositoryProfiles", "CodeFrameworksByType", "materialChanges", "_t", "ComponentMaterialChange", "governanceRules", "'When.Type'", "LoggingFrameworks", "Then", "[{Type: \"Risk\", Value: \"Low\", SubType: \"Present\"}, {Type: \"Label\", Value: \"Logging framework usage modified\", SubType: \"Modified\"}]", "DbFrameworks", "[{Type: \"Risk\", Value: \"Low\", SubType: \"Present\"}, {Type: \"Label\", Value: \"Data store framework usage modified\", SubType: \"Modified\"}]"], false, 0, 0, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, false], ["Migration_092_SecurityControlsRisk", "Lim.Migrator.Migration_092_SecurityControlsRisk", [], ["Lim.Migrator.IMigration"], "src/Lim.Migrator/Migrations/Migration_092_SecurityControlsRisk.cs", 8, 0, {"_logger": "???.ILogger", "_mongoClient": "Lim.Common.DotNET.IMongoClientAdvanced"}, ["_logger", "_mongoClient"], ["Migration_092_SecurityControlsRisk", "MigrateAsync"], ["System.Collections.Generic", "System.Threading.Tasks", "Lim.Common.DotNET", "Microsoft.Extensions.Logging"], false, false, ["MigrationRevision"], false, false, [], {"_logger": [], "_mongoClient": []}, [], 0, false, false, false, 2, 1.0, [], 293.5, 293, 0.0, 100.0, 1, 0, false, false, false, true, "public", false, ["Lim.Migrator.MongoClientExtensions.AddToSetWhereAsync"], ["_mongoClient.DropCollectionAsync"], false, false, false, false, ["governanceRules", "When.Type", "SecurityControls", "Then.Type", "{$ne: \"Risk\"}", "Then", "{Type: \"Risk\", Value: \"Medium\", SubType: \"Present\"}", "repositoryProfiles"], false, 0, 0, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, false], ["Migration_093_DeleteRepositoryProfiles", "Lim.Migrator.Migration_093_DeleteRepositoryProfiles", [], ["Lim.Migrator.IMigration"], "src/Lim.Migrator/Migrations/Migration_093_DeleteRepositoryProfiles.cs", 7, 0, {"_mongoClient": "Lim.Common.DotNET.IMongoClientAdvanced"}, ["_mongoClient"], ["Migration_093_DeleteRepositoryProfiles", "MigrateAsync"], ["System.Threading.Tasks", "Lim.Common.DotNET", "Microsoft.Extensions.Logging"], false, false, ["MigrationRevision"], false, false, [], {"_mongoClient": []}, [], 0, false, false, false, 2, 1.0, [], 58.0, 58, 0.0, 100.0, 1, 0, false, false, false, true, "public", false, [], ["_mongoClient.DropCollectionAsync"], false, false, false, false, ["repositoryProfiles"], false, 0, 0, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, false], ["Migration_094_DeleteRepositoryProfiles", "Lim.Migrator.Migration_094_DeleteRepositoryProfiles", [], ["Lim.Migrator.IMigration"], "src/Lim.Migrator/Migrations/Migration_094_DeleteRepositoryProfiles.cs", 7, 0, {"_mongoClient": "Lim.Common.DotNET.IMongoClientAdvanced"}, ["_mongoClient"], ["Migration_094_DeleteRepositoryProfiles", "MigrateAsync"], ["System.Threading.Tasks", "Lim.Common.DotNET", "Microsoft.Extensions.Logging"], false, false, ["MigrationRevision"], false, false, [], {"_mongoClient": []}, [], 0, false, false, false, 2, 1.0, [], 58.0, 58, 0.0, 100.0, 1, 0, false, false, false, true, "public", false, [], ["_mongoClient.DropCollectionAsync"], false, false, false, false, ["repositoryProfiles"], false, 0, 0, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, false], ["Migration_095_DeleteRepositoryProfiles", "Lim.Migrator.Migration_095_DeleteRepositoryProfiles", [], ["Lim.Migrator.IMigration"], "src/Lim.Migrator/Migrations/Migration_095_DeleteRepositoryProfiles.cs", 7, 0, {"_mongoClient": "Lim.Common.DotNET.IMongoClientAdvanced"}, ["_mongoClient"], ["Migration_095_DeleteRepositoryProfiles", "MigrateAsync"], ["System.Threading.Tasks", "Lim.Common.DotNET", "Microsoft.Extensions.Logging"], false, false, ["MigrationRevision"], false, false, [], {"_mongoClient": []}, [], 0, false, false, false, 2, 1.0, [], 58.0, 58, 0.0, 100.0, 1, 0, false, false, false, true, "public", false, [], ["_mongoClient.DropCollectionAsync"], false, false, false, false, ["repositoryProfiles"], false, 0, 0, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, false], ["Migration_096_DeleteRepositoryProfiles", "Lim.Migrator.Migration_096_DeleteRepositoryProfiles", [], ["Lim.Migrator.IMigration"], "src/Lim.Migrator/Migrations/Migration_096_DeleteRepositoryProfiles.cs", 7, 0, {"_mongoClient": "Lim.Common.DotNET.IMongoClientAdvanced"}, ["_mongoClient"], ["Migration_096_DeleteRepositoryProfiles", "MigrateAsync"], ["System.Threading.Tasks", "Lim.Common.DotNET", "Microsoft.Extensions.Logging"], false, false, ["MigrationRevision"], false, false, [], {"_mongoClient": []}, [], 0, false, false, false, 2, 1.0, [], 58.0, 58, 0.0, 100.0, 1, 0, false, false, false, true, "public", false, [], ["_mongoClient.DropCollectionAsync"], false, false, false, false, ["repositoryProfiles"], false, 0, 0, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, false], ["Migrator", "Lim.Migrator.Migrator", [], [], "src/Lim.Migrator/Migrator.cs", 15, 0, {}, [], ["Main", "MigrateAllAsync", "MigrateAsync"], ["System", "System.Collections.Generic", "System.Linq", "System.Reflection", "System.Threading.Tasks", "Infrastructure.Dotnet.Common", "JetBrains.Annotations", "Lim.Common.DotNET", "Microsoft.Extensions.Configuration", "Microsoft.Extensions.DependencyInjection", "Microsoft.Extensions.Logging"], false, false, ["UsedImplicitly"], false, false, [], {}, [], 0, false, false, false, 3, 1.0, [], 913.0, 952, 100.0, 33.333333333333336, 0, 0, false, false, false, true, "public", false, ["Lim.Migrator.IMigration.MigrateAsync"], ["LightweightLogger.Get<Migrator>", "LightweightConfiguration.Get", "MongoCredentials.FromConfiguration", "LightweightLogger.Get<MongoClient>", "MigrateAllAsync", "configuration.GetValue<bool>", "logger.LogCritical", "Environment.FailFast", "LightweightDependencyInjection.Get", "services.AddSingleton", "services.AutoRegisterAllImplementations<IMigration>", "revisionStorage.GetRevisionAsync", "logger.LogInformation", "serviceProvider.GetRequiredService<IEnumerable<IMigration>>()\n                .ToDictionary", "serviceProvider.GetRequiredService<IEnumerable<IMigration>>", "migration.GetType()\n                        .GetCustomAttribute<MigrationRevisionAttribute>", "migration.GetType", "migrations.Keys.OrderBy(_ => _)\n                .Where", "migrations.Keys.OrderBy", "targetRevisions.TakeLast", "migration.GetType()\n                    .GetDisplayName", "revisionStorage.SetRevisionAsync"], false, false, false, false, ["App:RunLastOnly", "Migrator failed", "Stored revision: {revision}", "Running migration {migration}", "Setting revision to {revision}"], false, 0, 0, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, false], ["MigrationBarrier", "Lim.MigrationBarrier.MigrationBarrier", [], [], "src/Lim.MigrationBarrier/MigrationBarrier.cs", 11, 0, {}, [], ["Main"], ["System", "System.Threading.Tasks", "Infrastructure.Dotnet.Common", "JetBrains.Annotations", "Lim.Common.DotNET", "Microsoft.Extensions.Configuration", "Microsoft.Extensions.Logging"], false, false, ["UsedImplicitly"], false, false, [], {}, [], 0, false, false, false, 1, 1.0, [], 1016.0, 1016, 100.0, 100.0, 0, 0, false, false, false, true, "public", false, [], ["LightweightLogger.Get<MigrationBarrier>", "LightweightConfiguration.Get", "MongoCredentials.FromConfiguration", "LightweightLogger.Get<MongoClient>", "TimeSpan.FromSeconds", "configuration.GetValue<int>", "revisionStorage.IsUpToDateAsync", "Task.Delay", "logger.LogCritical", "Environment.FailFast"], false, false, false, false, ["App:BusyWaitIntervalInSeconds", "Migrator failed"], false, 0, 0, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, false], ["ExampleBenchmark", "Lim.Performance.ExampleBenchmark", [], [], "tests/Lim.Performance/ExampleBenchmark.cs", 5, 0, {}, [], ["A", "B"], ["BenchmarkDotNet.Attributes"], false, false, ["MemoryDiagnoser"], false, false, [], {}, ["Benchmark"], 0, false, false, false, 2, 1.0, [], 7.0, 7, 0.0, 100.0, 0, 0, false, false, false, false, "public", false, [], [], false, false, false, false, [], false, 0, 0, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, false], ["Program", "Lim.Performance.Program", [], [], "tests/Lim.Performance/Program.cs", 8, 0, {}, [], ["Main"], ["BenchmarkDotNet.Configs", "BenchmarkDotNet.Jobs", "BenchmarkDotNet.Running", "BenchmarkDotNet.Toolchains.InProcess.Emit"], false, false, [], false, false, [], {}, [], 0, false, false, false, 1, 1.0, [], 225.0, 225, 100.0, 100.0, 0, 0, false, false, true, false, "public", false, [], ["ManualConfig.Create", "config.Add", "Job.ShortRun.With", "BenchmarkRunner.Run<ExampleBenchmark>"], false, false, false, false, [], false, 0, 0, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, false], ["BrowserSessionExtensions", "Lim.Sanity.BrowserSessionExtensions", [], [], "tests/Lim.Sanity/BrowserSessionExtensions.cs", 7, 0, {}, [], ["AssertState"], ["System", "Coypu", "NUnit.Framework"], false, false, [], false, false, [], {}, [], 0, false, false, false, 2, 1.0, [], 256.5, 256, 100.0, 100.0, 0, 0, false, false, true, false, "public", false, [], ["session.FindState", "TimeSpan.FromSeconds", "Assert.Fail", "failureMessage"], false, false, false, false, [], false, 0, 0, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, false], ["ConfigurationSanity", "Lim.Sanity.ConfigurationSanity", ["Lim.Sanity.Sanity"], [], "tests/Lim.Sanity/ConfigurationSanity.cs", 5, 0, {"_mongoClient": "Lim.Common.DotNET.MongoClient", "Secrets": "Lim.Sanity.TestSecretsManager", "Configuration": "???.IConfiguration"}, ["_mongoClient", "Secrets", "ApiiroPassword", "SessionConfiguration"], ["TestAddServer", "TestAddAzureDevOpsServer", "TestAddAzureDevOpsServices", "TestAddAzureDevOpsServices_VisualStudioUrl", "TestAddBitbucketServer", "TestAddGithub", "TestAddGithubEnterprise", "CheckLimApiIsUp", "ClearDb", "ApiiroPassword", "SessionConfiguration", "GetLoggedInSession", "AddServer"], ["NUnit.Framework"], false, false, ["TestFixture", "Category"], false, false, [], {"_mongoClient": [], "Secrets": [], "Configuration": []}, ["Test", "OneTimeSetUp"], 2, false, false, false, 12, 0.8571428571428571, [], 348.5, 299, 7.142857142857143, 57.142857142857146, 0, 0, false, false, false, true, "public", false, ["Lim.Sanity.Sanity.GetLoggedInSession", "Lim.Sanity.Sanity.AddServer", "Lim.Sanity.TestSecretsManager.Load", "Lim.Sanity.SidebarDriver.GetUrl", "Lim.Sanity.BrowserSessionExtensions.AssertState", "Lim.Sanity.SidebarDriver.NavigateTo", "Lim.Sanity.ConfigurationPageDriver.ClickConnectTab", "Lim.Sanity.ConfigurationPageDriver.AddServer", "Lim.Sanity.ConfigurationPageDriver.ClickManageTab", "Lim.Sanity.ConfigurationPageDriver.AssertServersContain"], ["client.ExecuteAsync", "Assert.True", "new ConfigurationBuilder()\n                .AddAppSettings()\n                .Build", "new ConfigurationBuilder()\n                .AddAppSettings", "MongoCredentials.FromConfiguration", "LightweightLogger.Get<MongoClient>", "_mongoClient.DropDatabaseAsync", "Configuration.GetValueWithEnv", "browser.Visit", "browser.FillIn(\"Password\", new Options {Timeout = (10).Seconds()})\n                .With", "browser.FillIn", "TimeSpan.FromSeconds", "browser.ClickButton", "browser.FindCss"], false, false, false, false, ["Sanity", "https://tfs.apiiro.com/Test/", "AzureDevops", "igal", "AzureServerToken", "https://tfs.apiiro.com/Test", "https://dev.azure.com/apiiro", "AzureToken", "https://apiiro.visualstudio.com", "https://bitbucket.apiiro.com:8443", "Bitbucket", "test1", "BitbucketServerToken", "https://github.com/apiirolab", "Github", "ApiiroAutomation", "GitHubToken", "https://35.224.32.9/test", "lim", "GitHubEnterpriseToken"], false, 2, 0, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, false], ["CustomChromeDriver", "Lim.Sanity.CustomChromeDriver", ["???.SeleniumWebDriver"], [], "tests/Lim.Sanity/CustomChromeDriver.cs", 8, 0, {}, [], ["CustomChromeDriver", "CustomProfile"], ["Coypu.Drivers", "Coypu.Drivers.Selenium", "OpenQA.Selenium.Chrome", "OpenQA.Selenium.Remote"], false, false, [], false, false, [], {}, [], 0, false, false, false, 2, 1.0, [], 312.5, 312, 50.0, 50.0, 1, 0, false, false, false, false, "public", false, ["Lim.Sanity.CustomChromeDriver.CustomProfile"], ["chromeOptions.AddArgument"], false, false, false, false, ["--headless", "--no-sandbox", "--disable-gpu", "--ignore-certificate-errors", "--window-size=1920,1080"], false, 0, 0, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, false], ["DemoSanity", "Lim.Sanity.DemoSanity", ["Lim.Sanity.Sanity"], [], "tests/Lim.Sanity/DemoSanity.cs", 10, 0, {"_mongoClient": "Lim.Common.DotNET.MongoClient", "Secrets": "Lim.Sanity.TestSecretsManager", "Configuration": "???.IConfiguration"}, ["_mongoClient", "Secrets", "ApiiroPassword", "SessionConfiguration"], ["TurnOnDemo", "TurnOffDemo", "SetDemo", "TestDemoGovernanceEditing", "TestDemoWorkflowsDoesNotCrash", "CheckLimApiIsUp", "ClearDb", "ApiiroPassword", "SessionConfiguration", "GetLoggedInSession", "AddServer"], ["System", "System.Linq", "System.Threading.Tasks", "Coypu", "Lim.Common.DotNET", "NUnit.Framework"], false, false, ["TestFixture", "Category"], false, false, [], {"_mongoClient": [], "Secrets": [], "Configuration": []}, ["OneTimeSetUp", "OneTimeTearDown", "Test"], 2, false, false, false, 10, 0.8333333333333334, [], 457.6666666666667, 271, 8.333333333333334, 50.0, 0, 0, false, false, false, true, "public", false, ["Lim.Sanity.Sanity.GetLoggedInSession", "Lim.Sanity.GovernancePageDriver.GetRulesCount", "Lim.Sanity.GovernancePageDriver.NewRule", "Lim.Sanity.GovernanceRuleEditorDriver.SetName", "Lim.Sanity.GovernanceRuleEditorDriver.SetGivenType", "Lim.Sanity.GovernanceRuleEditorDriver.Create", "Lim.Sanity.BrowserSessionExtensions.AssertState", "Lim.Sanity.GovernancePageDriver.GetRuleNames", "Lim.Sanity.GovernancePageDriver.GetRuleDetails", "Lim.Sanity.GovernancePageDriver.EditRule", "Lim.Sanity.GovernanceRuleEditorDriver.Save", "Lim.Sanity.GovernancePageDriver.RemoveRule", "Lim.Sanity.TestSecretsManager.Load", "Lim.Sanity.SidebarDriver.GetUrl", "Lim.Sanity.SidebarDriver.NavigateTo", "Lim.Sanity.ConfigurationPageDriver.ClickConnectTab", "Lim.Sanity.ConfigurationPageDriver.AddServer", "Lim.Sanity.ConfigurationPageDriver.ClickManageTab", "Lim.Sanity.ConfigurationPageDriver.AssertServersContain"], ["Task.Delay", "browser.Driver.ExecuteScript", "Assert.True", "browser.HasContent", "TimeSpan.FromSeconds", "governancePage.GetRuleNames()\n                .Last", "Assert.AreEqual", "Assert.False", "governancePage.GetRuleNames()\n                    .Contains", "client.ExecuteAsync", "new ConfigurationBuilder()\n                .AddAppSettings()\n                .Build", "new ConfigurationBuilder()\n                .AddAppSettings", "MongoCredentials.FromConfiguration", "LightweightLogger.Get<MongoClient>", "_mongoClient.DropDatabaseAsync", "Configuration.GetValueWithEnv", "browser.Visit", "browser.FillIn(\"Password\", new Options {Timeout = (10).Seconds()})\n                .With", "browser.FillIn", "browser.ClickButton", "browser.FindCss"], false, false, false, false, ["Sanity", "var xhr = new XMLHttpRequest(); ", "xhr.send();", "Governance", "Demo governance page failed to load", "Demo rule", "Workflows"], false, 2, 0, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, false], ["GovernanceSanity", "Lim.Sanity.GovernanceSanity", ["Lim.Sanity.Sanity"], [], "tests/Lim.Sanity/GovernanceSanity.cs", 9, 0, {"_mongoClient": "Lim.Common.DotNET.MongoClient", "Secrets": "Lim.Sanity.TestSecretsManager", "Configuration": "???.IConfiguration"}, ["_mongoClient", "Secrets", "ApiiroPassword", "SessionConfiguration"], ["TestApiClassification", "TestCompoundGovernanceEditing", "CheckLimApiIsUp", "ClearDb", "ApiiroPassword", "SessionConfiguration", "GetLoggedInSession", "AddServer"], ["System", "System.Linq", "Coypu", "Lim.Common.DotNET", "NUnit.Framework"], false, false, ["TestFixture", "Category"], false, false, [], {"_mongoClient": [], "Secrets": [], "Configuration": []}, ["Test", "OneTimeSetUp"], 2, false, false, false, 7, 0.7777777777777778, [], 986.2222222222222, 515, 11.11111111111111, 44.44444444444444, 0, 0, false, false, false, true, "public", false, ["Lim.Sanity.Sanity.GetLoggedInSession", "Lim.Sanity.Sanity.AddServer", "Lim.Sanity.BrowserSessionExtensions.AssertState", "Lim.Sanity.ConfigurationPageDriver.ScrollToRepositoriesTable", "Lim.Sanity.ConfigurationPageDriver.SearchRepositoryByColumn", "Lim.Sanity.ConfigurationPageDriver.MonitorRepository", "Lim.Sanity.SidebarDriver.NavigateTo", "Lim.Sanity.GovernancePageDriver.NewRule", "Lim.Sanity.GovernanceRuleEditorDriver.SetName", "Lim.Sanity.GovernanceRuleEditorDriver.SetWhenValue", "Lim.Sanity.GovernanceRuleEditorDriver.Create", "Lim.Sanity.GovernancePageDriver.GetRulesCount", "Lim.Sanity.GovernanceRuleEditorDriver.SetWhenType", "Lim.Sanity.GovernanceRuleEditorDriver.AddWhen", "Lim.Sanity.GovernancePageDriver.GetRuleNames", "Lim.Sanity.GovernancePageDriver.GetRuleDetails", "Lim.Sanity.GovernancePageDriver.EditRule", "Lim.Sanity.GovernanceRuleEditorDriver.SetGivenType", "Lim.Sanity.GovernanceRuleEditorDriver.Save", "Lim.Sanity.GovernancePageDriver.RemoveRule", "Lim.Sanity.TestSecretsManager.Load", "Lim.Sanity.SidebarDriver.GetUrl", "Lim.Sanity.ConfigurationPageDriver.ClickConnectTab", "Lim.Sanity.ConfigurationPageDriver.AddServer", "Lim.Sanity.ConfigurationPageDriver.ClickManageTab", "Lim.Sanity.ConfigurationPageDriver.AssertServersContain"], ["TimeSpan.FromSeconds", "ruleNames.Last", "Assert.AreEqual", "ApiClassification.InternetFacing.ToString", "Assert.True", "browser.HasContent", "governancePage.GetRuleNames()\n                          .Contains", "client.ExecuteAsync", "new ConfigurationBuilder()\n                .AddAppSettings()\n                .Build", "new ConfigurationBuilder()\n                .AddAppSettings", "MongoCredentials.FromConfiguration", "LightweightLogger.Get<MongoClient>", "_mongoClient.DropDatabaseAsync", "Configuration.GetValueWithEnv", "browser.Visit", "browser.FillIn(\"Password\", new Options {Timeout = (10).Seconds()})\n                .With", "browser.FillIn", "browser.ClickButton", "browser.FindCss"], false, false, false, false, ["Sanity", "Bitbucket", "https://bitbucket.apiiro.com:8443", "test1", "BitbucketServerToken", "Failed to populate repositories", "Name", "heacth", "Tieqiang-dc-heacth", "Internet facing APIs", "test/path.txt", "Internet facing APIs without authorization", "Governance", "Governance page failed to load", "New rule name"], false, 2, 0, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, false], ["LoginSanity", "Lim.Sanity.LoginSanity", ["Lim.Sanity.Sanity"], [], "tests/Lim.Sanity/LoginSanity.cs", 7, 0, {"_mongoClient": "Lim.Common.DotNET.MongoClient", "Secrets": "Lim.Sanity.TestSecretsManager", "Configuration": "???.IConfiguration"}, ["_mongoClient", "Secrets", "ApiiroPassword", "SessionConfiguration"], ["TestSuccessfulLogin", "TestWrongPassword", "CheckLimApiIsUp", "ClearDb", "ApiiroPassword", "SessionConfiguration", "GetLoggedInSession", "AddServer"], ["System", "Coypu", "NUnit.Framework"], false, false, ["TestFixture", "Category"], false, false, [], {"_mongoClient": [], "Secrets": [], "Configuration": []}, ["Test", "OneTimeSetUp"], 2, false, false, false, 7, 0.7777777777777778, [], 371.44444444444446, 341, 11.11111111111111, 44.44444444444444, 0, 0, false, false, false, true, "public", false, ["Lim.Sanity.Sanity.GetLoggedInSession", "Lim.Sanity.BrowserSessionExtensions.AssertState", "Lim.Sanity.TestSecretsManager.Load", "Lim.Sanity.SidebarDriver.GetUrl", "Lim.Sanity.SidebarDriver.NavigateTo", "Lim.Sanity.ConfigurationPageDriver.ClickConnectTab", "Lim.Sanity.ConfigurationPageDriver.AddServer", "Lim.Sanity.ConfigurationPageDriver.ClickManageTab", "Lim.Sanity.ConfigurationPageDriver.AssertServersContain"], ["browser.FindCss", "TimeSpan.FromSeconds", "browser.HasContent", "client.ExecuteAsync", "Assert.True", "new ConfigurationBuilder()\n                .AddAppSettings()\n                .Build", "new ConfigurationBuilder()\n                .AddAppSettings", "MongoCredentials.FromConfiguration", "LightweightLogger.Get<MongoClient>", "_mongoClient.DropDatabaseAsync", "Configuration.GetValueWithEnv", "browser.Visit", "browser.FillIn(\"Password\", new Options {Timeout = (10).Seconds()})\n                .With", "browser.FillIn", "browser.ClickButton"], false, false, false, false, ["Sanity", "a", "Admin", "1234", "Sign in failed", "Didn't find sign in failure error message"], false, 2, 0, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, false], ["BaseDriver", "Lim.Sanity.BaseDriver", [], [], "tests/Lim.Sanity/PageDrivers/BaseDriver.cs", 7, 0, {"TableCellMarker": "string", "Browser": "???.BrowserSession"}, ["Browser"], ["BaseDriver", "WaitForPageToLoad"], ["System", "Coypu", "Infrastructure.Dotnet.Common"], false, false, [], false, false, [], {"TableCellMarker": [], "Browser": []}, [], 0, false, false, false, 2, 1.0, [], 151.0, 151, 0.0, 0.0, 1, 0, false, true, false, false, "public", false, ["Lim.Sanity.BrowserSessionExtensions.AssertState"], ["Browser.FindAllCss(\"[data-test-marker='page-loading']\")\n                    .None", "Browser.FindAllCss", "TimeSpan.FromSeconds"], false, false, false, false, ["table-cell", "[data-test-marker='page-loading']", "Page load timeout"], false, 0, 0, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, false], ["ConfigurationPageDriver", "Lim.Sanity.ConfigurationPageDriver", ["Lim.Sanity.BaseDriver"], [], "tests/Lim.Sanity/PageDrivers/ConfigurationPageDriver.cs", 10, 0, {"TableCellMarker": "string", "Browser": "???.BrowserSession"}, ["Browser"], ["ConfigurationPageDriver", "AnyRepositoriesShown", "ClickConnectTab", "ClickManageTab", "AddServer", "AssertServersContain", "SearchRepositoryByColumn", "MonitorRepository", "ScrollToRepositoriesTable", "BaseDriver", "WaitForPageToLoad"], ["System", "System.Collections.Generic", "System.Linq", "Coypu", "Infrastructure.Dotnet.Common", "OpenQA.Selenium"], false, false, [], false, false, [], {"TableCellMarker": [], "Browser": []}, [], 1, false, false, false, 10, 0.9090909090909091, [], 473.90909090909093, 270, 0.0, 81.81818181818181, 2, 0, false, false, false, false, "public", false, ["Lim.Sanity.BrowserSessionExtensions.AssertState", "Lim.Sanity.BaseDriver.WaitForPageToLoad"], ["Browser.FindAllCss(\".repositoryNameTestMarker\")\n            .Any", "Browser.FindAllCss", "Browser.ClickLink", "Browser.Location.ToString()\n                        .EndsWith", "Browser.Location.ToString", "TimeSpan.FromSeconds", "Browser.AssertState", "Browser.Location.ToString()\n                            .EndsWith", "Browser.FindCss", "connectorCard.FindButton", "connect.Exists", "connect.Click", "connectorCard.FindButton(\"Add Another\")\n                        .Click", "Browser.FillIn(\"url\")\n                .With", "Browser.FillIn", "Browser.FillIn(\"username\")\n                .With", "Browser.FillIn(\"password\")\n                .With", "modal.FindButton", "Browser.RetryUntilTimeout", "connectButton.Click", "Browser.FindAllCss(\".modal\")\n                    .None", "Browser.FindAllCss(\".modal .alert-danger\")\n                        .FirstOrDefault", "string.IsNullOrEmpty", "Browser.FindAllCss(\".serverTestMarker\")\n                                .Select(server => server.Text)\n                                .ToList", "Browser.FindAllCss(\".serverTestMarker\")\n                                .Select", "serversList.Invoke()\n                    .Contains", "serversList.Invoke", "serversList.Invoke().JoinToString", "Browser.FindCss($\"[data-test-marker='filter {columnName}']\")\n                .Click", "Browser.FillIn(\"Name\")\n                .With", "Browser.FindXPath", "monitoringToggle.Click", "Browser.ExecuteScript", "Browser.FindAllCss(\"[data-test-marker='page-loading']\")\n                    .None"], false, false, false, false, [".repositoryNameTestMarker", "Connect", "/connect", "Could not navigate to connect tab", "Manage", "/manage", "Could not navigate to manage tab", "Add Another", "url", "username", "password", ".modal", "Connect button was disabled", ".modal .alert-danger", "modal remained open", ".serverTestMarker", "Name", "data-value", "false", "var panes = document.getElementsByClassName('tab-pane'); panes[panes.length-1].scrollIntoView()"], false, 1, 0, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, false], ["GovernancePageDriver", "Lim.Sanity.GovernancePageDriver", ["Lim.Sanity.BaseDriver"], [], "tests/Lim.Sanity/PageDrivers/GovernancePageDriver.cs", 17, 0, {"RuleMarker": "string", "RuleNameMarker": "string", "RuleGivenMarker": "string", "RuleWhenMarker": "string", "RuleThenMarker": "string", "RulePortionMarker": "string", "RulePortionTypeMarker": "string", "RulePortionValueMarker": "string", "RuleModifiersMarker": "string", "TableCellMarker": "string", "Browser": "???.BrowserSession"}, ["Browser"], ["GovernancePageDriver", "NewRule", "EditRule", "RemoveRule", "GetRulesCount", "GetRuleNames", "GetRuleDetails", "ParsePortion", "ClickModifiersButton", "RetryOnStaleObject", "BaseDriver", "WaitForPageToLoad"], ["System", "System.Collections.Generic", "System.Linq", "Coypu", "Infrastructure.Dotnet.Common", "Lim.Common.DotNET", "Polly"], false, false, [], false, false, [], {"RuleMarker": [], "RuleNameMarker": [], "RuleGivenMarker": [], "RuleWhenMarker": [], "RuleThenMarker": [], "RulePortionMarker": [], "RulePortionTypeMarker": [], "RulePortionValueMarker": [], "RuleModifiersMarker": [], "TableCellMarker": [], "Browser": []}, [], 0, false, false, false, 12, 1.0, [], 436.3333333333333, 264, 0.0, 58.333333333333336, 2, 0, false, false, false, false, "public", false, ["Lim.Sanity.BaseDriver.WaitForPageToLoad", "Lim.Sanity.BrowserSessionExtensions.AssertState"], ["Browser.FindLink", "createButton.Click", "Browser.FindButton", "definitionButton.Click", "Browser.FindCss", "TimeSpan.FromSeconds", "Browser.ClickButton", "Browser.FindAllCss(RuleMarker)\n                          .Any", "Browser.FindAllCss", "Browser.HasContent", "Browser.FindAllCss(RuleMarker)\n                .Count", "Browser.FindAllCss(RuleNameMarker)\n                        .Select(rule => rule.Text)\n                        .ToList", "Browser.FindAllCss(RuleNameMarker)\n                        .Select", "RetryOnStaleObject", "Browser.FindAllCss(\n                            RuleMarker,\n                            _ => true,\n                            new Options {Timeout = (5).Seconds()}\n                        )\n                        .First", "ruleElement.FindCss", "ParsePortion", "ruleGiven.Select(\n                                given =>\n                                    new RulePortionWithProperties<GovernanceGivenType>\n                                    {\n                                        Type = EnumUtils.FromString<GovernanceGivenType>(given.Type),\n                                        Value = given.Value\n                                    }\n                            )\n                            .ToList", "ruleGiven.Select", "EnumUtils.FromString<GovernanceGivenType>", "ruleWhen.Select(\n                                when =>\n                                    new RulePortionWithProperties<GovernanceWhenType>\n                                    {\n                                        Type = EnumUtils.FromString<GovernanceWhenType>(when.Type),\n                                        Value = when.Value\n                                    }\n                            )\n                            .ToList", "ruleWhen.Select", "EnumUtils.FromString<GovernanceWhenType>", "ruleThen.Select(\n                                then =>\n                                    new RulePortionWithSubType<GovernanceThenType, GovernanceThenSubType>\n                                    {\n                                        Type = EnumUtils.FromString<GovernanceThenType>(then.Type),\n                                        Value = then.Value\n                                    }\n                            )\n                            .ToList", "ruleThen.Select", "EnumUtils.FromString<GovernanceThenType>", "rule.FindCss(segmentSelector)\n                .FindAllCss(RulePortionMarker)\n                .Select(\n                    portion =>\n                    (\n                        portion.FindCss(RulePortionTypeMarker)[\"data-value\"],\n                        portion.FindCss(RulePortionValueMarker)[\"data-value\"]\n                    )\n                )\n                .ToList", "rule.FindCss(segmentSelector)\n                .FindAllCss(RulePortionMarker)\n                .Select", "rule.FindCss(segmentSelector)\n                .FindAllCss", "rule.FindCss", "portion.FindCss", "Browser.FindXPath", "ruleModifiers.Click", "Policy.Handle<StaleElementException>()\n                .Retry(10)\n                .Execute", "Policy.Handle<StaleElementException>()\n                .Retry", "Policy.Handle<StaleElementException>", "Browser.FindAllCss(\"[data-test-marker='page-loading']\")\n                    .None"], false, false, false, false, ["[data-test-marker=\"rule\"]", "[data-test-marker=\"rule-name\"]", ".ruleGivenTestMarker", ".ruleWhenTestMarker", ".ruleThenTestMarker", "[data-test-marker=\"rule-portion\"]", "[data-test-marker=\"rule-portion-type\"]", "[data-test-marker=\"rule-portion-value\"]", "ruleModifiersTestMarker", "Create New", "Definition", "Rule", ".modal-title", "Edit", "Remove", "Confirm", "No rules", "Failed to load rules page", "data-value"], false, 0, 0, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, false], ["GovernanceRuleEditorDriver", "Lim.Sanity.GovernanceRuleEditorDriver", ["Lim.Sanity.BaseDriver"], [], "tests/Lim.Sanity/PageDrivers/GovernanceRuleEditorDriver.cs", 9, 0, {"AddWhenMarker": "string", "_ruleGivenTypeMarker": "string", "_ruleWhenTypeMarker": "string", "_ruleWhenValueMarker": "string", "TableCellMarker": "string", "Browser": "???.BrowserSession"}, ["_ruleGivenTypeMarker", "_ruleWhenTypeMarker", "_ruleWhenValueMarker", "Browser"], ["GovernanceRuleEditorDriver", "SetName", "SetGivenType", "SetWhenType", "SetWhenValue", "AddWhen", "Save", "Create", "SelectOptionMarker", "BaseDriver", "WaitForPageToLoad"], ["System", "System.Linq", "Coypu", "Infrastructure.Dotnet.Common", "Lim.Common.DotNET"], false, false, [], false, false, [], {"AddWhenMarker": [], "_ruleGivenTypeMarker": [], "_ruleWhenTypeMarker": [], "_ruleWhenValueMarker": [], "TableCellMarker": [], "Browser": []}, [], 0, false, false, false, 11, 1.0, [], 167.54545454545453, 109, 9.090909090909092, 72.72727272727273, 2, 0, false, false, false, false, "public", false, ["Lim.Sanity.BrowserSessionExtensions.AssertState"], ["Browser.FillIn(\"ruleName\", new Options {Timeout = (2).Seconds()})\n                .With", "Browser.FillIn", "TimeSpan.FromSeconds", "Browser.FindCss(_ruleGivenTypeMarker)\n                .Click", "Browser.FindCss", "Browser.FindCss(SelectOptionMarker(type.ToString()))\n                .Click", "type.ToString", "Browser.FindAllCss(_ruleWhenTypeMarker)\n                .ToList()[index]\n                .Click", "Browser.FindAllCss(_ruleWhenTypeMarker)\n                .ToList", "Browser.FindAllCss", "Browser.FindCss(_ruleWhenValueMarker)\n                .FillInWith", "Browser.FindCss(AddWhenMarker)\n                .Click", "Browser.FindButton", "saveButton.Click", "createButton.Click", "Browser.FindAllCss(\".modal\")\n                    .None", "Browser.FindAllCss(\".modal .alert-danger\")\n                        .FirstOrDefault", "string.IsNullOrEmpty", "Browser.FindAllCss(\"[data-test-marker='page-loading']\")\n                    .None"], false, false, false, false, [".ruleWhenTestMarker [data-test-marker=\"addOption\"]", "ruleName", "Save", "Create", ".modal", ".modal .alert-danger", "modal remained open"], false, 0, 0, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, false], ["SidebarDriver", "Lim.Sanity.SidebarDriver", ["Lim.Sanity.BaseDriver"], [], "tests/Lim.Sanity/PageDrivers/SidebarDriver.cs", 6, 0, {"TableCellMarker": "string", "Browser": "???.BrowserSession"}, ["Browser"], ["SidebarDriver", "NavigateTo", "GetUrl", "BaseDriver", "WaitForPageToLoad"], ["System", "Coypu"], false, false, [], false, false, [], {"TableCellMarker": [], "Browser": []}, [], 0, false, false, false, 5, 1.0, [], 105.6, 36, 20.0, 60.0, 2, 0, false, false, false, false, "public", false, ["Lim.Sanity.BrowserSessionExtensions.AssertState"], ["Browser.FindId", "TimeSpan.FromSeconds", "sidebar.ClickLink", "tab.ToString", "$\"/{tab}\".ToLower", "Browser.FindAllCss(\"[data-test-marker='page-loading']\")\n                    .None", "Browser.FindAllCss"], false, false, false, false, ["sidebar"], false, 0, 0, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, false], ["Sanity", "Lim.Sanity.Sanity", [], [], "tests/Lim.Sanity/Sanity.cs", 13, 0, {"_mongoClient": "Lim.Common.DotNET.MongoClient", "Secrets": "Lim.Sanity.TestSecretsManager", "Configuration": "???.IConfiguration"}, ["_mongoClient", "Secrets", "ApiiroPassword", "SessionConfiguration"], ["CheckLimApiIsUp", "ClearDb", "ApiiroPassword", "SessionConfiguration", "GetLoggedInSession", "AddServer"], ["System", "System.Threading.Tasks", "Coypu", "Coypu.Drivers", "Infrastructure.Dotnet.Common", "Lim.Common.DotNET", "Microsoft.Extensions.Configuration", "NUnit.Framework", "RestSharp"], false, false, ["TestFixture", "Category"], false, false, [], {"_mongoClient": [], "Secrets": [], "Configuration": []}, ["OneTimeSetUp"], 2, false, false, false, 5, 0.7142857142857143, [], 384.7142857142857, 341, 14.285714285714286, 28.571428571428573, 0, 0, false, false, false, true, "public", false, ["Lim.Sanity.TestSecretsManager.Load", "Lim.Sanity.SidebarDriver.GetUrl", "Lim.Sanity.BrowserSessionExtensions.AssertState", "Lim.Sanity.SidebarDriver.NavigateTo", "Lim.Sanity.ConfigurationPageDriver.ClickConnectTab", "Lim.Sanity.ConfigurationPageDriver.AddServer", "Lim.Sanity.ConfigurationPageDriver.ClickManageTab", "Lim.Sanity.ConfigurationPageDriver.AssertServersContain"], ["client.ExecuteAsync", "Assert.True", "new ConfigurationBuilder()\n                .AddAppSettings()\n                .Build", "new ConfigurationBuilder()\n                .AddAppSettings", "MongoCredentials.FromConfiguration", "LightweightLogger.Get<MongoClient>", "_mongoClient.DropDatabaseAsync", "Configuration.GetValueWithEnv", "browser.Visit", "browser.FillIn(\"Password\", new Options {Timeout = (10).Seconds()})\n                .With", "browser.FillIn", "TimeSpan.FromSeconds", "browser.ClickButton", "browser.FindCss", "new ConfigurationBuilder()\n            .AddAppSettings()\n            .AddEnvironmentVariables()\n            .Build", "new ConfigurationBuilder()\n            .AddAppSettings()\n            .AddEnvironmentVariables", "new ConfigurationBuilder()\n            .AddAppSettings"], false, false, false, false, ["Sanity", "localhost", "Session:AdminPassword", "AdminPassword", "App:Session:Host", "App:Session:Port", "Password", "Sign In", "[data-test-marker='circle']", "Admin", "data-value", "Login failed"], false, 2, 0, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, false], ["TestSecretsManager", "Lim.Sanity.TestSecretsManager", [], [], "tests/Lim.Sanity/TestSecretsManager.cs", 10, 0, {"SecretsFile": "string", "_namesToSecrets": "System.Collections.Generic.IReadOnlyDictionary<string, string>"}, ["_namesToSecrets"], ["TestSecretsManager", "Load"], ["System", "System.Collections.Generic", "System.IO", "Infrastructure.Dotnet.Common", "Microsoft.Extensions.Logging", "Moq"], false, false, [], false, false, [], {"SecretsFile": [], "_namesToSecrets": []}, [], 0, false, false, false, 2, 1.0, [], 364.5, 364, 50.0, 50.0, 1, 0, false, false, false, false, "public", false, [], ["Directory.GetCurrentDirectory", "directory.Substring", "directory.IndexOf", "fileSystem.FileExists", "fileSystem.ReadJson(fullPath)\n                    .ToObject<Dictionary<string, string>>", "fileSystem.ReadJson"], false, false, false, false, ["testSecrets.json", "/bin"], false, 0, 0, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, false], ["DeveloperIdentityProvider", "Lim.GitRestApi.DeveloperIdentityProvider", [], ["Lim.GitRestApi.IDeveloperIdentityProvider"], "src/Lim.GitRestApi/DeveloperIdentityProvider.cs", 13, 0, {"IdentityMinimalLength": "int", "_developerIdentityStorage": "Lim.Common.DotNET.IDeveloperIdentityStorage", "_developersCache": "???.IAsyncCache<string, Developer>", "_developersStorage": "Lim.Common.DotNET.IDevelopersStorage", "_identitiesCache": "???.IAsyncCache<string, DeveloperIdentity>", "_identitiesExpanders": "System.Collections.Generic.IDictionary<Provider, IIdentitiesExpander>", "_identitiesStripedAsyncMultiLock": "???.StripedAsyncMultiLock<string>", "_logger": "???.ILogger<DeveloperIdentityProvider>"}, ["_developerIdentityStorage", "_developersCache", "_developersStorage", "_identitiesCache", "_identitiesExpanders", "_identitiesStripedAsyncMultiLock", "_logger"], ["DeveloperIdentityProvider", "MergeIdentitiesDevelopersAsync", "GetOrCreateDeveloperAsync", "GetDeveloperByKeyAsync", "MergeDevelopersAsync", "GetRelatedIdentitiesAsync", "FillWithStoredDeveloperIdentitiesAsync", "CreateDeveloperAsync", "SyncIdentitiesAsync", "ExpandIdentitiesAsync"], ["System", "System.Collections.Generic", "System.Linq", "System.Threading.Tasks", "Dasync.Collections", "Infrastructure.Dotnet.Common", "Lim.Common.DotNET", "Microsoft.Extensions.Logging", "Microsoft.VisualStudio.Services.Common"], false, false, [], false, false, [], {"IdentityMinimalLength": [], "_developerIdentityStorage": [], "_developersCache": [], "_developersStorage": [], "_identitiesCache": [], "_identitiesExpanders": [], "_identitiesStripedAsyncMultiLock": [], "_logger": []}, [], 0, false, false, false, 10, 1.0, [], 913.5, 452, 0.0, 30.0, 1, 0, false, false, false, true, "public", false, ["Lim.GitRestApi.IIdentitiesExpander.ExpandIdentitiesAsync"], ["identities\n                .GroupBy(_ => _.DeveloperKey)\n                .ToList", "identities\n                .GroupBy", "identitiesByDeveloperKeyGroups.First", "_logger.LogInformation", "identities.Select(_ => _.Identity)\n                            .Distinct()\n                            .JoinToString", "identities.Select(_ => _.Identity)\n                            .Distinct", "identities.Select", "_logger.LogDebug", "identities.Select(_ => _.Identity)\n                        .Distinct()\n                        .JoinToString", "identities.Select(_ => _.Identity)\n                        .Distinct", "identitiesByDeveloperKeyGroups\n                .OrderByDescending(_ => _.Count())\n                .First", "identitiesByDeveloperKeyGroups\n                .OrderByDescending", "_.Count", "identitiesByDeveloperKeyGroups.FirstOrDefault", "identitiesGroupWithoutDeveloperKey.ForEach", "identitiesGroupWithoutDeveloperKey.ToList", "identities.Select(_ => _.Identity)\n                        .JoinToString", "identitiesByDeveloperKeyGroups.Where", "Task.WhenAll", "_developersStorage.SyncDeveloperAsync", "_developersCache.PutAsync", "developerIdentities\n                .Where(developerIdentity => !string.IsNullOrWhiteSpace(developerIdentity.Identity))\n                .Where(developerIdentity => developerIdentity.Identity.Length >= IdentityMinimalLength)\n                .ToList", "developerIdentities\n                .Where(developerIdentity => !string.IsNullOrWhiteSpace(developerIdentity.Identity))\n                .Where", "developerIdentities\n                .Where", "string.IsNullOrWhiteSpace", "developerIdentities.None", "developerIdentities\n                .Concat(await GetRelatedIdentitiesAsync(developerIdentities))\n                .ToHashSet", "developerIdentities\n                .Concat", "_identitiesStripedAsyncMultiLock.MultiLockAsync", "developerIdentities\n                    .SelectDevelopersKeys()\n                    .Concat(developerIdentities.Select(_ => _.Identity))\n                    .WhereNotNull()\n                    .ToHashSet", "developerIdentities\n                    .SelectDevelopersKeys()\n                    .Concat(developerIdentities.Select(_ => _.Identity))\n                    .WhereNotNull", "developerIdentities\n                    .SelectDevelopersKeys()\n                    .Concat", "developerIdentities\n                    .SelectDevelopersKeys", "developerIdentities.Select", "mergedDeveloper.AddAdditionalInformation", "_developersCache.TryGetAsync", "_developersStorage.GetDeveloperByKeyAsync", "_developerIdentityStorage.GetDeveloperIdentitiesByDeveloperKeyAsync", "identitiesToMerge.Any", "identitiesToMerge.Select(_ => _.Identity)\n                        .JoinToString", "identitiesToMerge.Select", "identitiesToMerge.ForEach", "mainDeveloper.AddAdditionalInformation", "_developersStorage.TryDeleteDeveloperAsync", "_developersCache.RemoveAsync", "(await _developerIdentityStorage.GetRelatedDeveloperIdentitiesByIdentitiesAsync(\n                    developerIdentities.Select(_ => _.Identity)\n                        .ToList()\n                ))\n                .Where(developerIdentity => !developerIdentities.Contains(developerIdentity))\n                .ToHashSet", "(await _developerIdentityStorage.GetRelatedDeveloperIdentitiesByIdentitiesAsync(\n                    developerIdentities.Select(_ => _.Identity)\n                        .ToList()\n                ))\n                .Where", "_developerIdentityStorage.GetRelatedDeveloperIdentitiesByIdentitiesAsync", "developerIdentities.Select(_ => _.Identity)\n                        .ToList", "developerIdentities.Contains", "(await developerIdentities.SelectParallelAsync(\n                async developerIdentity =>\n                {\n                    var cachedIdentity = await _identitiesCache.GetOrAddAsync(developerIdentity.Key, async () => await _developerIdentityStorage.GetDeveloperIdentityByKeyAsync(developerIdentity.Key));\n                    return cachedIdentity ?? developerIdentity;\n                }\n            )).ToList", "developerIdentities.SelectParallelAsync", "_identitiesCache.GetOrAddAsync", "_developerIdentityStorage.GetDeveloperIdentityByKeyAsync", "identities.Select(_ => _.Identity)\n                    .JoinToString", "identities.ForEach", "identities.ParallelForEachAsync", "_identitiesCache.PutAsync", "_identitiesExpanders.TryGetValue", "identitiesCacheBuilder", "TimeSpan.FromDays", "developersCacheBuilder"], false, false, false, false, ["Can't find Developer for developerKey: {DeveloperKey}, identities: {Identities}", "Identities already exist for Developer: {DeveloperKey}, identities: {Identities}", "Can't find Developer for mainDeveloperKey: {MainDeveloperKey}, identities: {Identities}", "Merging identities from Developer: {DeveloperKeyToMerge}, to an existing Developer: {MainDeveloperKey}, identities to be merged: {Identities}", "Creating new Developer with key: {DeveloperKey}, for identities: {Identities}"], false, 0, 0, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, false], ["AzureDevopsDeveloperIdentityTransformer", "Lim.GitRestApi.AzureDevopsDeveloperIdentityTransformer", [], ["Lim.GitRestApi.IAzureDevopsDeveloperIdentityTransformer"], "src/Lim.GitRestApi/Providers/AzureDevops/AzureDevopsDeveloperIdentityTransformer.cs", 9, 0, {"_developerIdentityProvider": "Lim.GitRestApi.IDeveloperIdentityProvider"}, ["_developerIdentityProvider"], ["AzureDevopsDeveloperIdentityTransformer", "GetDeveloperIdentityAsync", "Transform", "IdentityAvatarUrl"], ["System.Collections.Generic", "System.Linq", "System.Threading.Tasks", "Lim.Common.DotNET", "Microsoft.VisualStudio.Services.WebApi"], false, false, [], false, false, [], {"_developerIdentityProvider": []}, [], 0, false, false, false, 4, 1.0, [], 566.75, 509, 50.0, 50.0, 1, 0, false, false, false, true, "public", false, ["Lim.GitRestApi.IDeveloperIdentityProvider.GetOrCreateDeveloperAsync"], ["developerIdentities.FirstOrDefault", "string.IsNullOrWhiteSpace", "identities.Add", ".GetValueOrDefault", "string.IsNullOrEmpty", "avatarUrl.Contains"], false, false, false, false, ["AzureDevopsDisplayName", "AzureDevopsDescriptor", "AzureDevopsAvatarUrl", "avatar", "", "size="], false, 0, 0, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, false], ["AzureEntitiesExtensions", "Lim.GitRestApi.AzureEntitiesExtensions", [], [], "src/Lim.GitRestApi/Providers/AzureDevops/AzureDevopsProvider.cs", 16, 0, {}, [], ["GetFieldValueOrDefault", "GetDescription"], ["System", "System.Collections.Generic", "System.Linq", "System.Threading.Tasks", "Infrastructure.Dotnet.Common", "JetBrains.Annotations", "Lim.Common.DotNET", "Microsoft.Extensions.Logging", "Microsoft.TeamFoundation.SourceControl.WebApi", "Microsoft.TeamFoundation.WorkItemTracking.WebApi.Models", "Microsoft.VisualStudio.Services.WebApi", "Lim.Common.DotNET.Comment"], false, false, [], false, false, [], {}, [], 0, false, false, false, 2, 1.0, [], 212.5, 212, 100.0, 100.0, 0, 0, true, false, true, false, "internal", false, [], ["workItem.Fields.TryGetValue", "nameof"], false, false, false, false, [], false, 0, 0, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, false], ["AzureDevopsProvider", "Lim.GitRestApi.AzureDevopsProvider", [], ["Lim.GitRestApi.IRepositoriesProvider", "Lim.GitRestApi.IProjectsProvider"], "src/Lim.GitRestApi/Providers/AzureDevops/AzureDevopsProvider.cs", 29, 0, {"_developerIdentityTransformer": "Lim.GitRestApi.IAzureDevopsDeveloperIdentityTransformer", "_logger": "???.ILogger<AzureDevopsProvider>", "_projectsStorage": "Lim.Common.DotNET.IProjectsStorage", "_restApi": "Lim.GitRestApi.IAzureDevopsRestApi"}, ["_developerIdentityTransformer", "_logger", "_projectsStorage", "_restApi"], ["AzureDevopsProvider", "Lim.GitRestApi.ITypedConsumableProvider<Lim.Common.DotNET.Project>.GetConsumablesAsync", "GetActivityFactorAsync", "GetIssuesAsync", "GetIssueAsync", "CreateIssueAsync", "IsUserProjectMemberAsync", "NormalizedUrl", "VerifyConnectionAsync", "Lim.GitRestApi.ITypedConsumableProvider<Lim.Common.DotNET.Repository>.GetConsumablesAsync", "GetRepositoryAsync", "GetPullRequestsAsync", "GetRepositoryFilePathsAsync", "GetPullRequestMutableDetails", "GetRepositoryBranchesAsync", "BuildUrl", "GetRepositoryTagsAsync", "TransformRepository", "GetPullRequestCommentsAsync", "GetReviewerIdentitiesKeysAsync", "GetDeveloperIdentityKey", "ExtractIdentitiesFor", "TransformIssueRevisionsAsync", "GetRepositoriesAsync", "GetRepositoryActivityFactorAsync", "GetRepositoryLanguagesAsync", "GetVulnerabilitiesCountAsync", "GetProjectsAsync", "GetProjectActivityFactorAsync"], ["System", "System.Collections.Generic", "System.Linq", "System.Threading.Tasks", "Infrastructure.Dotnet.Common", "JetBrains.Annotations", "Lim.Common.DotNET", "Microsoft.Extensions.Logging", "Microsoft.TeamFoundation.SourceControl.WebApi", "Microsoft.TeamFoundation.WorkItemTracking.WebApi.Models", "Microsoft.VisualStudio.Services.WebApi", "Lim.Common.DotNET.Comment"], false, false, ["UsedImplicitly"], false, false, [], {"_developerIdentityTransformer": [], "_logger": [], "_projectsStorage": [], "_restApi": []}, [], 0, false, false, false, 30, 1.0, [], 540.9, 141, 3.3333333333333335, 53.333333333333336, 1, 0, false, false, false, true, "public", false, ["Lim.GitRestApi.IIssuesRestApi<TeamProjectReference, WorkItem, Microsoft.TeamFoundation.WorkItemTracking.WebApi.Models.Comment>.GetProjectsAsync", "Lim.GitRestApi.IAzureDevopsRestApi.GetProjectLastUpdateTimeAsync", "Lim.GitRestApi.IIssuesRestApi<TeamProjectReference, WorkItem, Microsoft.TeamFoundation.WorkItemTracking.WebApi.Models.Comment>.GetIssuesAsync", "Lim.GitRestApi.IIssuesRestApi<TeamProjectReference, WorkItem, Microsoft.TeamFoundation.WorkItemTracking.WebApi.Models.Comment>.CreateIssueAsync", "Lim.GitRestApi.IIssuesRestApi<TeamProjectReference, WorkItem, Microsoft.TeamFoundation.WorkItemTracking.WebApi.Models.Comment>.IsUserProjectMemberAsync", "Lim.GitRestApi.IConsumableRestApi.VerifyConnectionAsync", "Lim.GitRestApi.IGitRestApi<GitRepository, GitPullRequest, GraphUser, Microsoft.TeamFoundation.SourceControl.WebApi.Comment>.GetRepositoriesAsync", "Lim.GitRestApi.IGitRestApi<GitRepository, GitPullRequest, GraphUser, Microsoft.TeamFoundation.SourceControl.WebApi.Comment>.GetRepositoryAsync", "Lim.GitRestApi.IGitRestApi<GitRepository, GitPullRequest, GraphUser, Microsoft.TeamFoundation.SourceControl.WebApi.Comment>.GetPullRequestsAsync", "Lim.GitRestApi.IAzureDevopsRestApi.GetRepositoryPushesAsync", "Lim.GitRestApi.IAzureDevopsRestApi.GetRepositoryFilesAsync", "Lim.GitRestApi.IGitRestApi<GitRepository, GitPullRequest, GraphUser, Microsoft.TeamFoundation.SourceControl.WebApi.Comment>.GetPullRequestAsync", "Lim.GitRestApi.IGitRestApi<GitRepository, GitPullRequest, GraphUser, Microsoft.TeamFoundation.SourceControl.WebApi.Comment>.GetRepositoryBranchesAsync", "Lim.GitRestApi.IGitRestApi<GitRepository, GitPullRequest, GraphUser, Microsoft.TeamFoundation.SourceControl.WebApi.Comment>.GetRepositoryTagsAsync", "Lim.GitRestApi.IGitRestApi<GitRepository, GitPullRequest, GraphUser, Microsoft.TeamFoundation.SourceControl.WebApi.Comment>.GetPullRequestCommentsAsync", "Lim.GitRestApi.IDeveloperIdentityTransformer<IdentityRef>.GetDeveloperIdentityAsync", "Lim.GitRestApi.AzureEntitiesExtensions.GetFieldValueOrDefault", "Lim.GitRestApi.AzureEntitiesExtensions.GetDescription", "Lim.GitRestApi.ITypedConsumableProvider<Lim.Common.DotNET.Repository>.GetConsumablesAsync", "Lim.GitRestApi.ITypedConsumableProvider<Lim.Common.DotNET.Repository>.GetActivityFactorAsync", "Lim.GitRestApi.ITypedConsumableProvider<Lim.Common.DotNET.Project>.GetConsumablesAsync", "Lim.GitRestApi.ITypedConsumableProvider<Lim.Common.DotNET.Project>.GetActivityFactorAsync"], ["(await (await _restApi.GetProjectsAsync(server))\n                    .SelectAsync(\n                        async project =>\n                        {\n                            var issueTypes = (await _restApi.GetIssueTypesAsync(server, project.Id.ToString()))\n                                .Where(type => !type.IsDisabled)\n                                .Select(type => new IssueType(type.Name, type.Name) {Description = type.Description})\n                                .ToHashSet();\n\n                            var defaultIssueTypeId = IssueType.GuessDefault(issueTypes)\n                                ?.Id;\n\n                            return new Project\n                            {\n                                Id = project.Id.ToString(),\n                                Name = project.Name,\n                                ServerUrl = server.Url,\n                                Url = project.Url,\n                                IssueTypes = issueTypes,\n                                DefaultIssueTypeId = defaultIssueTypeId\n                            };\n                        }\n                    ))\n                .ToList", "(await _restApi.GetProjectsAsync(server))\n                    .SelectAsync", "(await _restApi.GetIssueTypesAsync(server, project.Id.ToString()))\n                                .Where(type => !type.IsDisabled)\n                                .Select(type => new IssueType(type.Name, type.Name) {Description = type.Description})\n                                .ToHashSet", "(await _restApi.GetIssueTypesAsync(server, project.Id.ToString()))\n                                .Where(type => !type.IsDisabled)\n                                .Select", "(await _restApi.GetIssueTypesAsync(server, project.Id.ToString()))\n                                .Where", "_restApi.GetIssueTypesAsync", "project.Id.ToString", "IssueType.GuessDefault", "(DateTime.UtcNow - await _restApi.GetProjectLastUpdateTimeAsync(consumable)).TotalDays.Round", "(await _restApi.GetIssuesAsync(\n                    project,\n                    fromIssueOrdinalId,\n                    pageSize\n                ))\n                .GroupBy", "itemRevisions.ToList", "revisions.Add", "revisions.Any", "revisions.Max", "_projectsStorage.SetFieldAsync", "Task.FromResult<Issue>", "TransformIssueRevisionsAsync", "url.TrimEnd", "UrlUtils.ToOneSegment(url)\n                    .TrimEnd", "UrlUtils.ToOneSegment", "(await _restApi.GetRepositoriesAsync(server))\n                .Select(\n                    repository => TransformRepository(server, repository)\n                )\n                .ToList", "(await _restApi.GetRepositoriesAsync(server))\n                .Select", "TransformRepository", "GetDeveloperIdentityKey", "GetPullRequestCommentsAsync", "GetReviewerIdentitiesKeysAsync", "_restApi.GetPullRequestIssueKeys", "issuesKeys.None", "_restApi.GetIssuesProjectsKeys", "(await _restApi.GetPullRequestCommitsAsync(repository, pullRequest.PullRequestId)).Select(commit => commit.CommitId)\n                    .ToHashSet", "(await _restApi.GetPullRequestCommitsAsync(repository, pullRequest.PullRequestId)).Select", "_restApi.GetPullRequestCommitsAsync", "containedCommitsSha.AddIfNotNullOrEmpty", "GitConventions.RefToBranchName", "comments.ToList", "(await _restApi.GetRepositoryFilesAsync(repository))\n                .Where(item => !item.IsFolder)\n                .Select(item => item.Path)\n                .ToList", "(await _restApi.GetRepositoryFilesAsync(repository))\n                .Where(item => !item.IsFolder)\n                .Select", "(await _restApi.GetRepositoryFilesAsync(repository))\n                .Where", "Uri.EscapeDataString", "repository.WebUrl.OrIfEmpty", "repository.Id.ToString", "GitConventions.NormalizeBranchName", "repository.ProjectReference.Id.ToString", "(await _restApi.GetPullRequestCommentsAsync(repository, pullRequestId))\n                .SelectAsync", "(await pullRequest.Reviewers.SelectParallelAsync(reviewer => GetDeveloperIdentityKey(repository, reviewer)))\n                .Concat(comments.Select(comment => comment.AuthorIdentityKey))\n                .Distinct()\n                .Compact()\n                .Where(developerIdentityKey => developerIdentityKey != authorIdentityKey)\n                .ToHashSet", "(await pullRequest.Reviewers.SelectParallelAsync(reviewer => GetDeveloperIdentityKey(repository, reviewer)))\n                .Concat(comments.Select(comment => comment.AuthorIdentityKey))\n                .Distinct()\n                .Compact()\n                .Where", "(await pullRequest.Reviewers.SelectParallelAsync(reviewer => GetDeveloperIdentityKey(repository, reviewer)))\n                .Concat(comments.Select(comment => comment.AuthorIdentityKey))\n                .Distinct()\n                .Compact", "(await pullRequest.Reviewers.SelectParallelAsync(reviewer => GetDeveloperIdentityKey(repository, reviewer)))\n                .Concat(comments.Select(comment => comment.AuthorIdentityKey))\n                .Distinct", "(await pullRequest.Reviewers.SelectParallelAsync(reviewer => GetDeveloperIdentityKey(repository, reviewer)))\n                .Concat", "pullRequest.Reviewers.SelectParallelAsync", "comments.Select", "keys.SelectMany(key => workItemRevisions.Select(item => item.GetFieldValueOrDefault<IdentityRef>(key)))\n                .Where", "keys.SelectMany", "workItemRevisions.Select", "string.IsNullOrEmpty", "workItemRevisions.OrderByDescending(item => item.GetFieldValueOrDefault(AzureDevopsKeys.ChangedDate, DateTime.Now))\n                .First", "workItemRevisions.OrderByDescending", "_logger.LogError", "(await ExtractIdentitiesFor(workItemRevisions, AzureDevopsKeys.AssignedTo)\n                        .DistinctBy(identityRef => identityRef.Id)\n                        .SelectAsync(async identityRef => await GetDeveloperIdentityKey(project, identityRef)))\n                    .Compact()\n                    .ToHashSet", "(await ExtractIdentitiesFor(workItemRevisions, AzureDevopsKeys.AssignedTo)\n                        .DistinctBy(identityRef => identityRef.Id)\n                        .SelectAsync(async identityRef => await GetDeveloperIdentityKey(project, identityRef)))\n                    .Compact", "ExtractIdentitiesFor(workItemRevisions, AzureDevopsKeys.AssignedTo)\n                        .DistinctBy(identityRef => identityRef.Id)\n                        .SelectAsync", "ExtractIdentitiesFor(workItemRevisions, AzureDevopsKeys.AssignedTo)\n                        .DistinctBy", "(\n                        await ExtractIdentitiesFor(\n                                workItemRevisions,\n                                AzureDevopsKeys.AssignedTo,\n                                AzureDevopsKeys.ActivatedBy,\n                                AzureDevopsKeys.ChangedBy,\n                                AzureDevopsKeys.ResolvedBy,\n                                AzureDevopsKeys.ClosedBy,\n                                AzureDevopsKeys.AuthorizedAs\n                            )\n                            .DistinctBy(identityRef => identityRef.Id)\n                            .Where(identityRef => identityRef.Id != createdBy?.Id)\n                            .SelectAsync(async identityRef => (DeveloperIdentityKey: await GetDeveloperIdentityKey(project, identityRef), OriginalId: identityRef.Id))\n                    )\n                    .Where(tuple => !string.IsNullOrEmpty(tuple.DeveloperIdentityKey))\n                    .ToDictionary", "(\n                        await ExtractIdentitiesFor(\n                                workItemRevisions,\n                                AzureDevopsKeys.AssignedTo,\n                                AzureDevopsKeys.ActivatedBy,\n                                AzureDevopsKeys.ChangedBy,\n                                AzureDevopsKeys.ResolvedBy,\n                                AzureDevopsKeys.ClosedBy,\n                                AzureDevopsKeys.AuthorizedAs\n                            )\n                            .DistinctBy(identityRef => identityRef.Id)\n                            .Where(identityRef => identityRef.Id != createdBy?.Id)\n                            .SelectAsync(async identityRef => (DeveloperIdentityKey: await GetDeveloperIdentityKey(project, identityRef), OriginalId: identityRef.Id))\n                    )\n                    .Where", "ExtractIdentitiesFor(\n                                workItemRevisions,\n                                AzureDevopsKeys.AssignedTo,\n                                AzureDevopsKeys.ActivatedBy,\n                                AzureDevopsKeys.ChangedBy,\n                                AzureDevopsKeys.ResolvedBy,\n                                AzureDevopsKeys.ClosedBy,\n                                AzureDevopsKeys.AuthorizedAs\n                            )\n                            .DistinctBy(identityRef => identityRef.Id)\n                            .Where(identityRef => identityRef.Id != createdBy?.Id)\n                            .SelectAsync", "ExtractIdentitiesFor(\n                                workItemRevisions,\n                                AzureDevopsKeys.AssignedTo,\n                                AzureDevopsKeys.ActivatedBy,\n                                AzureDevopsKeys.ChangedBy,\n                                AzureDevopsKeys.ResolvedBy,\n                                AzureDevopsKeys.ClosedBy,\n                                AzureDevopsKeys.AuthorizedAs\n                            )\n                            .DistinctBy(identityRef => identityRef.Id)\n                            .Where", "ExtractIdentitiesFor(\n                                workItemRevisions,\n                                AzureDevopsKeys.AssignedTo,\n                                AzureDevopsKeys.ActivatedBy,\n                                AzureDevopsKeys.ChangedBy,\n                                AzureDevopsKeys.ResolvedBy,\n                                AzureDevopsKeys.ClosedBy,\n                                AzureDevopsKeys.AuthorizedAs\n                            )\n                            .DistinctBy", "workItemRevisions\n                .Where(item => item.Fields.ContainsKey(\"System.History\"))\n                .Select", "workItemRevisions\n                .Where", "item.Fields.ContainsKey", "participantIdentitiesKeysByOriginalId.TryGetValue", "item.GetFieldValueOrDefault(\"System.ChangedDate\", DateTime.Now)\n                                .ToUniversalTime", "lastWorkItem.Fields.Keys.Where(key => key.StartsWith(\"Microsoft.VSTS.TCM.\"))\n                .ToDictionary", "lastWorkItem.Fields.Keys.Where", "key.StartsWith", "key.Split(\".\")\n                        .Last", "key.Split", ".ToString", "lastWorkItem.Id.ToString", "lastWorkItem.Id.GetValueOrDefault", "lastWorkItem.GetFieldValueOrDefault(\"System.Tags\", \"\")\n                        .Split(\"; \")\n                        .ToHashSet", "lastWorkItem.GetFieldValueOrDefault(\"System.Tags\", \"\")\n                        .Split", "lastWorkItem.GetFieldValueOrDefault(\"System.CreatedDate\", DateTime.Now)\n                        .ToUniversalTime", "participantIdentitiesKeysByOriginalId.Values.ToHashSet", "assigneesIdentitiesKeys.ToHashSet", "IssuesConstants.ClosedItemsStates.Contains", "Task.FromResult"], false, false, false, false, ["/", "&line=", "&lineEnd=", "&lineStartColumn=1&lineEndColumn=1&lineStyle=plain", "", "Can't extract author for issues {} in project {}", "Can't extract assignees for issues {} in project {}", "Can't extract participants for issues {} in project {}", "System.History", "System.ChangedBy", "System.ChangedDate", "Microsoft.VSTS.TCM.", ".", "WorkItemType", "createdBy", "System.Tags", "; ", "System.CreatedDate", "System.State"], false, 0, 0, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, false], ["AzureDevopsKeys", "Lim.GitRestApi.AzureDevopsKeys", [], [], "src/Lim.GitRestApi/Providers/AzureDevops/AzureDevopsProvider.cs", 423, 0, {"WorkItemType": "string", "CreatedBy": "string", "AssignedTo": "string", "ActivatedBy": "string", "ChangedBy": "string", "ResolvedBy": "string", "ClosedBy": "string", "AuthorizedAs": "string", "ChangedDate": "string", "Description": "string", "Title": "string", "Tags": "string"}, [], [], ["System", "System.Collections.Generic", "System.Linq", "System.Threading.Tasks", "Infrastructure.Dotnet.Common", "JetBrains.Annotations", "Lim.Common.DotNET", "Microsoft.Extensions.Logging", "Microsoft.TeamFoundation.SourceControl.WebApi", "Microsoft.TeamFoundation.WorkItemTracking.WebApi.Models", "Microsoft.VisualStudio.Services.WebApi", "Lim.Common.DotNET.Comment"], false, false, [], false, false, [], {"WorkItemType": [], "CreatedBy": [], "AssignedTo": [], "ActivatedBy": [], "ChangedBy": [], "ResolvedBy": [], "ClosedBy": [], "AuthorizedAs": [], "ChangedDate": [], "Description": [], "Title": [], "Tags": []}, [], 0, false, false, false, 0, 0.0, [], 0.0, 0, 0.0, 0.0, 0, 0, false, false, true, false, "public", false, [], [], false, false, false, false, ["System.WorkItemType", "System.CreatedBy", "System.AssignedTo", "System.ActivatedBy", "System.ChangedBy", "System.ResolvedBy", "System.ClosedBy", "System.AuthorizedAs", "System.ChangedDate", "System.Description", "System.Title", "System.Tags"], false, 0, 0, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, false], ["AzureDevopsRestApi", "Lim.GitRestApi.AzureDevopsRestApi", [], ["Lim.GitRestApi.IAzureDevopsRestApi"], "src/Lim.GitRestApi/Providers/AzureDevops/AzureDevopsRestApi.cs", 26, 0, {"AzureHost": "string", "VisualStudioHost": "string", "_configureUntrustedCertificatePolicy": "???.IConfigureUntrustedCertificatePolicy", "_logger": "???.ILogger<AzureDevopsRestApi>", "_serverRestApiBarrier": "Lim.GitRestApi.ServerRestApiBarrier", "_usersByEmailByServerCache": "???.IAsyncCache<string, IReadOnlyDictionary<string, GraphUser>>"}, ["_configureUntrustedCertificatePolicy", "_logger", "_serverRestApiBarrier", "_usersByEmailByServerCache"], ["AzureDevopsRestApi", "VerifyConnectionAsync", "GetRepositoriesAsync", "GetRepositoryAsync", "GetPullRequestsAsync", "GetPullRequestCommitsAsync", "GetPullRequestAsync", "GetPullRequestCommentsAsync", "GetPullRequestIssueKeys", "GetRepositoryBranchesAsync", "GetRepositoryTagsAsync", "GetIssueCommentsAsync", "GetUserAsync", "GetRepositoryPushesAsync", "GetRepositoryFilesAsync", "CreateIssueAsync", "IsUserProjectMemberAsync", "GetIssueTypesAsync", "GetIssuesProjectsKeys", "GetProjectLastUpdateTimeAsync", "GetProjectsAsync", "GetIssuesAsync", "GetIssueAsync", "GetUsersByIdentityAsync", "ExecuteAsync", "GetAllPages"], ["System", "System.Collections.Generic", "System.ComponentModel", "System.Linq", "System.Net.Http", "System.Threading.Tasks", "Infrastructure.Dotnet.Common", "JetBrains.Annotations", "Lim.Common.DotNET", "Microsoft.Extensions.Configuration", "Microsoft.Extensions.Logging", "Microsoft.TeamFoundation.Core.WebApi", "Microsoft.TeamFoundation.SourceControl.WebApi", "Microsoft.TeamFoundation.WorkItemTracking.WebApi", "Microsoft.TeamFoundation.WorkItemTracking.WebApi.Models", "Microsoft.VisualStudio.Services.Common", "Microsoft.VisualStudio.Services.Graph.Client", "Microsoft.VisualStudio.Services.WebApi", "Microsoft.VisualStudio.Services.WebApi.Patch", "Microsoft.VisualStudio.Services.WebApi.Patch.Json", "Microsoft.TeamFoundation.SourceControl.WebApi.Comment", "Microsoft.TeamFoundation.WorkItemTracking.WebApi.Models.Comment"], false, false, ["UsedImplicitly"], false, false, [], {"AzureHost": [], "VisualStudioHost": [], "_configureUntrustedCertificatePolicy": [], "_logger": [], "_serverRestApiBarrier": [], "_usersByEmailByServerCache": []}, [], 0, false, false, false, 29, 1.0, [], 608.8620689655172, 297, 10.344827586206897, 79.3103448275862, 1, 0, false, false, false, true, "public", false, ["Lim.GitRestApi.GitConventions.BranchNameToRef", "Lim.GitRestApi.ServerRestApiBarrier.BoundedExecuteAsync"], ["UrlUtils.GetHost", "UrlUtils.GetSegments(server.Url)\n                    .ToList", "UrlUtils.GetSegments", "segments.JoinToString", "_logger.LogInformation", "host.EndsWith", "client.GetProjects", "exception.ToStringShort", "gitClient.GetRepositoriesAsync", "gitClient.GetRepositoryAsync", "ExecuteAsync<GitHttpClient, List<GitPullRequest>>", "gitClient.GetPullRequestsAsync", "pullRequests.None", "relevantPullRequests.InsertRange", "pullRequests.Where(request => request.PullRequestId > fromPullRequestOrdinalId)\n                                .Reverse", "pullRequests.Where", "pullRequests.Last", "gitClient.GetPullRequestCommitsAsync", "gitClient.GetPullRequestAsync", "ExecuteAsync<GitHttpClient, IReadOnlyCollection<PullRequestComment>>", "gitClient.GetThreadsAsync", "comments.AddRange", "(await gitClient.GetCommentsAsync(\n                                repository.ProjectId,\n                                repository.Id,\n                                pullRequestId,\n                                thread.Id\n                            ))\n                            .Where", "gitClient.GetCommentsAsync", "(await gitClient.GetPullRequestWorkItemRefsAsync(\n                        repository.ProjectId,\n                        repository.Id,\n                        pullRequestId\n                    ))\n                    .Select(resourceRef => resourceRef.Id)\n                    .ToList", "(await gitClient.GetPullRequestWorkItemRefsAsync(\n                        repository.ProjectId,\n                        repository.Id,\n                        pullRequestId\n                    ))\n                    .Select", "gitClient.GetPullRequestWorkItemRefsAsync", "(await client.GetBranchesAsync(\n                        repository.ProjectId,\n                        repository.Id\n                    ))\n                    .FindAll(\n                        branch => query == null || branch.Name.ToLower()\n                            .Contains(query.ToLower())\n                    )\n                    .Select(\n                        branch => new GitBranch\n                        {\n                            Name = branch.Name,\n                            HeadSha = branch.Commit.CommitId\n                        }\n                    )\n                    .ToList", "(await client.GetBranchesAsync(\n                        repository.ProjectId,\n                        repository.Id\n                    ))\n                    .FindAll(\n                        branch => query == null || branch.Name.ToLower()\n                            .Contains(query.ToLower())\n                    )\n                    .Select", "(await client.GetBranchesAsync(\n                        repository.ProjectId,\n                        repository.Id\n                    ))\n                    .FindAll", "client.GetBranchesAsync", "branch.Name.ToLower()\n                            .Contains", "branch.Name.ToLower", "query.ToLower", "(await\n                        (await client.GetTagRefsAsync(new Guid(repository.Id)))\n                        .FindAll(\n                            tag => query == null || tag.Name.ToLower()\n                                .Contains(query.ToLower())\n                        )\n                        .SelectAsync(\n                            async tagRef =>\n                            {\n                                var tag = await client.GetAnnotatedTagAsync(\n                                    repository.ProjectId,\n                                    repository.Id,\n                                    tagRef.ObjectId\n                                );\n\n                                return new GitTag\n                                {\n                                    Name = tag.Name,\n                                    HeadSha = tag.TaggedObject.ObjectId\n                                };\n                            }\n                        )\n                    )\n                    .ToList", "(await client.GetTagRefsAsync(new Guid(repository.Id)))\n                        .FindAll(\n                            tag => query == null || tag.Name.ToLower()\n                                .Contains(query.ToLower())\n                        )\n                        .SelectAsync", "(await client.GetTagRefsAsync(new Guid(repository.Id)))\n                        .FindAll", "client.GetTagRefsAsync", "tag.Name.ToLower()\n                                .Contains", "tag.Name.ToLower", "client.GetAnnotatedTagAsync", ".GetValueOrDefault", "client.GetPushesAsync", "ExecuteAsync<WorkItemTrackingHttpClient, WorkItem>", "issueProperties.Labels.JoinToString", "client.CreateWorkItemAsync", "client.GetWorkItemTypesAsync", "(await client.GetWorkItemsAsync(issueIds.Select(int.Parse)))\n                    .ToDictionaryGrouped", "client.GetWorkItemsAsync", "issueIds.Select", "item.GetFieldValueOrDefault<string>", "item.Id.ToString", "client.GetProject", "(await client.GetProjects()).ToList", "ExecuteAsync<WorkItemTrackingHttpClient, IReadOnlyCollection<WorkItem>>", "client.ReadReportingRevisionsGetAsync", ".AddSeconds", "response.Values.ToList", "workItems.None", "Array.Empty<WorkItem>", "workItems.Where(item => item.GetFieldValueOrDefault(\"System.ChangedDate\", DateTime.UtcNow) > project.LastScannedIssueRevision.Value)\n                                .ToList", "workItems.Where", "item.GetFieldValueOrDefault", "client.GetWorkItemAsync", "int.Parse", "_usersByEmailByServerCache.GetOrAddAsync", "ExecuteAsync<GraphHttpClient, IReadOnlyCollection<GraphUser>>", "GetAllPages", "graphClient.ListUsersAsync", ".FirstOrDefault", "result.PutIfKeyNotNullOrEmpty", "GetAllPages(\n                        continuationToken =>\n                            gitClient.GetItemsPagedAsync(\n                                project,\n                                repositoryId,\n                                \"/\",\n                                1000,\n                                continuationToken\n                            )\n                    )\n                    .ToListAsync", "gitClient.GetItemsPagedAsync", "exception.Message.Contains", "ExecuteAsync", "UrlUtils.CutLastSegment", "vssConnection.ConnectAsync", "vssConnection.GetClientAsync<THttpClient>", "asyncFunc", "GetAllPages<TItem>", "worker", "list.AddRange", "cacheBuilder", "TimeSpan.FromDays"], false, false, false, false, ["dev.azure.com", "visualstudio.com", "/", "Failed to connect to Azure Devops at {url}", "; ", "System.TeamProject", "System.ChangedDate", "Cannot find any branch"], false, 0, 0, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, false], ["BitbucketCloudClientExt", "Lim.GitRestApi.BitbucketCloudClientExt", ["Bitbucket.Cloud.Net.BitbucketCloudClient"], [], "src/Lim.GitRestApi/Providers/Bitbucket/Cloud/BitbucketCloudClientExt.cs", 16, 0, {}, [], ["BitbucketCloudClientExt", "GetWorkspaceRepositoriesAsync", "GetRepositoryPullRequestsAsync", "GetRepositoryPullRequestsCountAsync", "GetRepositoryPullRequestAsync", "GetRepositorySourceAsync", "GetStreamedResultsAsync"], ["System", "System.Collections.Generic", "System.Linq", "System.Threading.Tasks", "Bitbucket.Cloud.Net", "Bitbucket.Cloud.Net.Common.Authentication", "Bitbucket.Cloud.Net.Common.Models", "Flurl", "Flurl.Http", "Infrastructure.Dotnet.Common", "JetBrains.Annotations", "Bitbucket.Cloud.Net.Models.v2"], false, false, [], false, false, [], {}, [], 0, false, false, false, 7, 1.0, [], 322.42857142857144, 250, 0.0, 85.71428571428571, 1, 0, false, false, false, true, "public", false, [], ["GetStreamedResultsAsync<BitbucketCloudModels.Repository>", "GetBaseUrl", "GetStreamedResultsAsync<PullRequestFull>", "GetBaseUrl($\"2.0/repositories/{workspaceId}/{repositorySlug}/pullrequests\")\n                    .SetQueryParams", "GetBaseUrl($\"2.0/repositories/{workspaceId}/{repositorySlug}/pullrequests\")\n                .SetQueryParams(new {fields = \"size\", q = filter})\n                .GetJsonAsync<PagedResults<BitbucketCloudModels.PullRequest>>", "GetBaseUrl($\"2.0/repositories/{workspaceId}/{repositorySlug}/pullrequests\")\n                .SetQueryParams", "GetBaseUrl($\"2.0/repositories/{workspaceId}/{repoSlug}/pullrequests/{pullRequestId}\")\n                .GetJsonAsync<PullRequestFull>()\n                .ConfigureAwait", "GetBaseUrl($\"2.0/repositories/{workspaceId}/{repoSlug}/pullrequests/{pullRequestId}\")\n                .GetJsonAsync<PullRequestFull>", "(fields ?? Enumerable.Empty<string>()).Select", "Enumerable.Empty<string>", "GetStreamedResultsAsync<BitbucketCloudModels.Source>", "GetBaseUrl($\"2.0/repositories/{workspaceId}/{repoSlug}/src/{sourceRef}/\")\n                    .SetQueryParams", "fields.JoinToString", "request.GetJsonAsync<PagedResults<TResult>>", "results.AddRange", "GetBaseUrl(nextUri.AbsolutePath)\n                    .SetQueryParams", "Url.ParseQueryParams"], false, false, false, false, ["q", "sort", "size", "next"], false, 0, 0, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, false], ["PullRequestFull", "Lim.GitRestApi.PullRequestFull", ["???.BitbucketCloudModels.PullRequest"], [], "src/Lim.GitRestApi/Providers/Bitbucket/Cloud/BitbucketCloudClientExt.cs", 108, 0, {}, ["Author", "Reviewers", "Participants"], ["Author", "Reviewers", "Participants"], ["System", "System.Collections.Generic", "System.Linq", "System.Threading.Tasks", "Bitbucket.Cloud.Net", "Bitbucket.Cloud.Net.Common.Authentication", "Bitbucket.Cloud.Net.Common.Models", "Flurl", "Flurl.Http", "Infrastructure.Dotnet.Common", "JetBrains.Annotations", "Bitbucket.Cloud.Net.Models.v2"], false, false, ["UsedImplicitly"], false, false, [], {}, [], 3, false, false, false, 0, 0.0, [], 0.0, 0, 0.0, 100.0, 0, 0, false, false, false, false, "public", false, [], [], false, false, false, false, [], false, 3, 3, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, false], ["PullRequestParticipant", "Lim.GitRestApi.PullRequestParticipant", [], [], "src/Lim.GitRestApi/Providers/Bitbucket/Cloud/BitbucketCloudClientExt.cs", 118, 0, {}, ["User", "ParticipatedOn", "Role"], ["User", "ParticipatedOn", "Role", "Approved"], ["System", "System.Collections.Generic", "System.Linq", "System.Threading.Tasks", "Bitbucket.Cloud.Net", "Bitbucket.Cloud.Net.Common.Authentication", "Bitbucket.Cloud.Net.Common.Models", "Flurl", "Flurl.Http", "Infrastructure.Dotnet.Common", "JetBrains.Annotations", "Bitbucket.Cloud.Net.Models.v2"], false, false, ["UsedImplicitly"], false, false, [], {}, [], 4, false, false, false, 0, 0.0, [], 0.0, 0, 0.0, 100.0, 0, 0, false, false, false, false, "public", false, [], [], false, false, false, false, [], false, 4, 4, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, false], ["BitbucketCloudDeveloperIdentityTransformer", "Lim.GitRestApi.BitbucketCloudDeveloperIdentityTransformer", [], ["Lim.GitRestApi.IBitbucketCloudDeveloperIdentityTransformer"], "src/Lim.GitRestApi/Providers/Bitbucket/Cloud/BitbucketCloudDeveloperIdentityTransformer.cs", 9, 0, {"_developerIdentityProvider": "Lim.GitRestApi.IDeveloperIdentityProvider"}, ["_developerIdentityProvider"], ["BitbucketCloudDeveloperIdentityTransformer", "GetDeveloperIdentityAsync", "Transform"], ["System.Collections.Generic", "System.Linq", "System.Threading.Tasks", "Lim.Common.DotNET", "Bitbucket.Cloud.Net.Models.v2"], false, false, [], false, false, [], {"_developerIdentityProvider": []}, [], 0, false, false, false, 3, 1.0, [], 510.3333333333333, 639, 0.0, 66.66666666666667, 1, 0, false, false, false, true, "public", false, ["Lim.GitRestApi.IDeveloperIdentityProvider.GetOrCreateDeveloperAsync"], ["identities.FirstOrDefault", "string.IsNullOrWhiteSpace", "user.Uuid.ToString", "identities.Add"], false, false, false, false, ["BitbucketDisplayName", "BitbucketNickname", "BitbucketAvatarUrl"], false, 0, 0, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, false], ["BitbucketCloudProvider", "Lim.GitRestApi.BitbucketCloudProvider", [], ["Lim.GitRestApi.IRepositoriesProvider"], "src/Lim.GitRestApi/Providers/Bitbucket/Cloud/BitbucketCloudProvider.cs", 14, 0, {"_developerIdentityTransformer": "Lim.GitRestApi.IBitbucketCloudDeveloperIdentityTransformer", "_restApi": "Lim.GitRestApi.IBitbucketCloudRestApi"}, ["_developerIdentityTransformer", "_restApi"], ["BitbucketCloudProvider", "NormalizedUrl", "VerifyConnectionAsync", "GetConsumablesAsync", "GetRepositoryAsync", "GetPullRequestsAsync", "GetPullRequestMutableDetails", "GetRepositoryBranchesAsync", "GetRepositoryTagsAsync", "GetActivityFactorAsync", "GetRepositoryFilePathsAsync", "BuildUrl", "TransformRepository", "GetPullRequestCommentsAsync", "GetPullRequestReviewerIdentitiesKeysAsync", "GetUserIdentityKeyAsync", "GetRepositoriesAsync", "GetRepositoryActivityFactorAsync", "GetRepositoryLanguagesAsync", "GetVulnerabilitiesCountAsync"], ["System.Collections.Generic", "System.Linq", "System.Threading.Tasks", "Bitbucket.Cloud.Net.Models.v2", "Infrastructure.Dotnet.Common", "Lim.Common.DotNET", "Bitbucket.Cloud.Net.Models.v2.Repository", "Lim.Common.DotNET.Comment", "Lim.Common.DotNET.PullRequest", "Lim.Common.DotNET.Repository"], false, false, [], false, false, [], {"_developerIdentityTransformer": [], "_restApi": []}, [], 0, false, false, false, 20, 1.0, [], 264.5, 84, 5.0, 60.0, 1, 0, false, false, false, true, "public", false, ["Lim.GitRestApi.IConsumableRestApi.VerifyConnectionAsync", "Lim.GitRestApi.IGitRestApi<Bitbucket.Cloud.Net.Models.v2.Repository, Lim.GitRestApi.PullRequestFull, Bitbucket.Cloud.Net.Models.v2.User, Bitbucket.Cloud.Net.Models.v2.Comment>.GetRepositoriesAsync", "Lim.GitRestApi.IGitRestApi<Bitbucket.Cloud.Net.Models.v2.Repository, Lim.GitRestApi.PullRequestFull, Bitbucket.Cloud.Net.Models.v2.User, Bitbucket.Cloud.Net.Models.v2.Comment>.GetRepositoryAsync", "Lim.GitRestApi.IGitRestApi<Bitbucket.Cloud.Net.Models.v2.Repository, Lim.GitRestApi.PullRequestFull, Bitbucket.Cloud.Net.Models.v2.User, Bitbucket.Cloud.Net.Models.v2.Comment>.GetPullRequestsAsync", "Lim.GitRestApi.IBitbucketCloudRestApi.GetPullRequestCommitsAsync", "Lim.GitRestApi.IGitRestApi<Bitbucket.Cloud.Net.Models.v2.Repository, Lim.GitRestApi.PullRequestFull, Bitbucket.Cloud.Net.Models.v2.User, Bitbucket.Cloud.Net.Models.v2.Comment>.GetPullRequestAsync", "Lim.GitRestApi.IGitRestApi<Bitbucket.Cloud.Net.Models.v2.Repository, Lim.GitRestApi.PullRequestFull, Bitbucket.Cloud.Net.Models.v2.User, Bitbucket.Cloud.Net.Models.v2.Comment>.GetRepositoryBranchesAsync", "Lim.GitRestApi.IGitRestApi<Bitbucket.Cloud.Net.Models.v2.Repository, Lim.GitRestApi.PullRequestFull, Bitbucket.Cloud.Net.Models.v2.User, Bitbucket.Cloud.Net.Models.v2.Comment>.GetRepositoryTagsAsync", "Lim.GitRestApi.IBitbucketCloudRestApi.GetRepositoryPullRequestsCount", "Lim.GitRestApi.IBitbucketCloudRestApi.GetRepositoryFilePathsAsync", "Lim.GitRestApi.GitConventions.NormalizeBranchName", "Lim.GitRestApi.IGitRestApi<Bitbucket.Cloud.Net.Models.v2.Repository, Lim.GitRestApi.PullRequestFull, Bitbucket.Cloud.Net.Models.v2.User, Bitbucket.Cloud.Net.Models.v2.Comment>.GetPullRequestCommentsAsync", "Lim.GitRestApi.IDeveloperIdentityTransformer<Bitbucket.Cloud.Net.Models.v2.User>.GetDeveloperIdentityAsync", "Lim.GitRestApi.ITypedConsumableProvider<Lim.Common.DotNET.Repository>.GetConsumablesAsync", "Lim.GitRestApi.ITypedConsumableProvider<Lim.Common.DotNET.Repository>.GetActivityFactorAsync"], ["UrlUtils.ToOneSegment(url)\n                .TrimEnd", "UrlUtils.ToOneSegment", "(await _restApi.GetRepositoriesAsync(server)).Select(\n                    repo => TransformRepository(server, repo)\n                )\n                .ToList", "(await _restApi.GetRepositoriesAsync(server)).Select", "(await _restApi.GetPullRequestCommitsAsync(repository, pullRequest.Id)).Select(commit => commit.Hash)\n                    .ToHashSet", "(await _restApi.GetPullRequestCommitsAsync(repository, pullRequest.Id)).Select", "TaskUtils.WhenAll", "GetPullRequestReviewerIdentitiesKeysAsync", "repo.Links.Clone\n                    .FirstOrDefault", "(await _restApi.GetPullRequestCommentsAsync(repository, pullRequestId))\n                .Where(comment => comment.CreatedOn.HasValue)\n                .SelectParallelAsync(\n                    async comment => new Comment\n                    {\n                        AuthorIdentityKey = await GetUserIdentityKeyAsync(comment.User, repository.Server),\n                        Content = comment.Content.Raw,\n                        CreationTime = comment.CreatedOn.Value\n                    }\n                )\n                .ToListAsync", "(await _restApi.GetPullRequestCommentsAsync(repository, pullRequestId))\n                .Where(comment => comment.CreatedOn.HasValue)\n                .SelectParallelAsync", "(await _restApi.GetPullRequestCommentsAsync(repository, pullRequestId))\n                .Where", "GetUserIdentityKeyAsync", "(pullRequest.Participants ?? Enumerable.Empty<PullRequestParticipant>())\n                    .SelectParallelAsync", "Enumerable.Empty<PullRequestParticipant>", "Task.FromResult"], false, false, false, false, ["#", "", "http", "https"], false, 0, 0, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, false], ["BitbucketCloudRestApi", "Lim.GitRestApi.BitbucketCloudRestApi", [], ["Lim.GitRestApi.IBitbucketCloudRestApi"], "src/Lim.GitRestApi/Providers/Bitbucket/Cloud/BitbucketCloudRestApi.cs", 15, 0, {"_configureUntrustedCertificatePolicy": "???.IConfigureUntrustedCertificatePolicy", "_logger": "???.ILogger<BitbucketServerRestApi>", "_serverRestApiBarrier": "Lim.GitRestApi.ServerRestApiBarrier"}, ["_configureUntrustedCertificatePolicy", "_logger", "_serverRestApiBarrier"], ["BitbucketCloudRestApi", "VerifyConnectionAsync", "GetRepositoriesAsync", "GetRepositoryAsync", "GetPullRequestsAsync", "GetPullRequestAsync", "GetPullRequestCommentsAsync", "GetPullRequestCommitsAsync", "GetPullRequestIssueKeys", "GetRepositoryBranchesAsync", "GetRepositoryTagsAsync", "GetUserAsync", "GetRepositoryPullRequestsCount", "GetRepositoryFilePathsAsync", "WorkspaceFromServer", "ApiUrl", "ExecuteAsync"], ["System", "System.Collections.Generic", "System.Linq", "System.Threading.Tasks", "Bitbucket.Cloud.Net.Common.Authentication", "Flurl.Http", "Infrastructure.Dotnet.Common", "Lim.Common.DotNET", "Microsoft.Extensions.Configuration", "Microsoft.Extensions.Logging", "Bitbucket.Cloud.Net.Models.v2"], false, false, [], false, false, [], {"_configureUntrustedCertificatePolicy": [], "_logger": [], "_serverRestApiBarrier": []}, [], 0, false, false, false, 17, 1.0, [], 391.11764705882354, 395, 0.0, 82.3529411764706, 1, 0, false, false, false, true, "public", false, ["Lim.GitRestApi.BitbucketCloudClientExt.GetWorkspaceRepositoriesAsync", "Lim.GitRestApi.BitbucketCloudClientExt.GetRepositoryPullRequestsAsync", "Lim.GitRestApi.BitbucketCloudClientExt.GetRepositoryPullRequestAsync", "Lim.GitRestApi.BitbucketCloudClientExt.GetRepositoryPullRequestsCountAsync", "Lim.GitRestApi.BitbucketCloudClientExt.GetRepositorySourceAsync", "Lim.GitRestApi.ServerRestApiBarrier.BoundedExecuteAsync"], ["client.GetWorkspaceRepositoriesAsync", "_logger.LogInformation", "exception.ToStringShort", "ExecuteAsync", "client.GetWorkspaceRepositoriesAsync(WorkspaceFromServer(server))\n                    .ToListAsync", "client.GetRepositoryAsync", "ExecuteAsync(\n                    repository.Server,\n                    client => client\n                        .GetRepositoryPullRequestsAsync(\n                            WorkspaceFromServer(repository.Server),\n                            repository.Id,\n                            // explicit filter overrides default behavior of returning only open pullrequests\n                            $\"destination.branch.name=\\\"{branch}\\\" AND id > {fromPullRequestOrdinalId}\",\n                            \"id\"\n                        )\n                )\n                .ToListAsync", "pullRequestId.ToString", "client.GetRepositoryPullRequestCommentsAsync(\n                            WorkspaceFromServer(repository.Server),\n                            repository.Id,\n                            pullRequestId.ToString()\n                        )\n                        .ToListAsync", "client.GetRepositoryPullRequestCommentsAsync", "ExecuteAsync(\n                    repository.Server,\n                    client =>\n                        client.GetRepositoryPullRequestCommitsAsync(\n                            WorkspaceFromServer(repository.Server),\n                            repository.Id,\n                            pullRequestId.ToString()\n                        )\n                )\n                .ToListAsync", "client.GetRepositoryPullRequestCommitsAsync", "(await client.GetRepositoryBranchesAsync(\n                        WorkspaceFromServer(repository.Server),\n                        repository.Id,\n                        q: $\"name~\\\"{query}\\\"\"\n                    ))\n                    .Select(\n                        branch => new GitBranch\n                        {\n                            Name = branch.Name,\n                            HeadSha = branch.Target.Hash\n                        }\n                    )\n                    .ToList", "(await client.GetRepositoryBranchesAsync(\n                        WorkspaceFromServer(repository.Server),\n                        repository.Id,\n                        q: $\"name~\\\"{query}\\\"\"\n                    ))\n                    .Select", "client.GetRepositoryBranchesAsync", "(await client.GetRepositoryTagsAsync(\n                        WorkspaceFromServer(repository.Server),\n                        repository.Id,\n                        q: $\"name~\\\"{query}\\\"\"\n                    ))\n                    .Select(\n                        tag => new GitTag\n                        {\n                            Name = tag.Name,\n                            HeadSha = tag.Target.Hash\n                        }\n                    )\n                    .ToList", "(await client.GetRepositoryTagsAsync(\n                        WorkspaceFromServer(repository.Server),\n                        repository.Id,\n                        q: $\"name~\\\"{query}\\\"\"\n                    ))\n                    .Select", "client.GetRepositoryTagsAsync", "client.GetUserByNameAsync", ".Select(src => src.Path)\n                .ToList", ".Select", "Array.Empty<string>", "UrlUtils.GetSegments(server.Url)\n                .First", "UrlUtils.GetSegments", "host.StartsWith", "host.Substring", "_configureUntrustedCertificatePolicy.SetUntrustedCertificatePolicyFor", "asyncFunc", "flurlHttpException.Message.Contains"], false, false, false, false, ["Not found", "Failed to connect to bitbucket cloud at {url}", "id", "Bitbucket Cloud API does not support links between pull requests and issues.", "", "path", "type=\"commit_file\"", "www.", "api.", "404"], false, 0, 0, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, false], ["BitbucketServerDeveloperIdentityTransformer", "Lim.GitRestApi.BitbucketServerDeveloperIdentityTransformer", [], ["Lim.GitRestApi.IBitbucketServerDeveloperIdentityTransformer"], "src/Lim.GitRestApi/Providers/Bitbucket/Server/BitbucketServerDeveloperIdentityTransformer.cs", 10, 0, {"_developerIdentityProvider": "Lim.GitRestApi.IDeveloperIdentityProvider"}, ["_developerIdentityProvider"], ["BitbucketServerDeveloperIdentityTransformer", "GetDeveloperIdentityAsync", "Transform"], ["System.Collections.Generic", "System.Linq", "System.Threading.Tasks", "Bitbucket.Net.Models.Core.Users", "Lim.Common.DotNET", "Bitbucket.Net.Models.Core.Users.Identity"], false, false, [], false, false, [], {"_developerIdentityProvider": []}, [], 0, false, false, false, 3, 1.0, [], 627.6666666666666, 571, 0.0, 66.66666666666667, 1, 0, false, false, false, true, "public", false, ["Lim.GitRestApi.IDeveloperIdentityProvider.GetOrCreateDeveloperAsync", "Lim.GitRestApi.GitConventions.UsernameFromEmail"], ["identities.FirstOrDefault", "string.IsNullOrWhiteSpace", "identities.Add"], false, false, false, false, ["BitbucketDisplayName", "BitbucketAvatarUrl"], false, 0, 0, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, false], ["BitbucketServerProvider", "Lim.GitRestApi.BitbucketServerProvider", [], ["Lim.GitRestApi.IRepositoriesProvider"], "src/Lim.GitRestApi/Providers/Bitbucket/Server/BitbucketServerProvider.cs", 11, 0, {"_developerIdentityTransformer": "Lim.GitRestApi.IBitbucketServerDeveloperIdentityTransformer", "_restApi": "Lim.GitRestApi.IBitbucketServerRestApi"}, ["_developerIdentityTransformer", "_restApi"], ["BitbucketServerProvider", "NormalizedUrl", "VerifyConnectionAsync", "GetConsumablesAsync", "GetRepositoryAsync", "GetPullRequestsAsync", "GetActivityFactorAsync", "GetRepositoryFilePathsAsync", "GetPullRequestMutableDetails", "GetRepositoryBranchesAsync", "GetRepositoryTagsAsync", "BuildUrl", "TransformRepository", "GetCommentsAsync", "GetReviewerIdentitiesKeysAsync", "GetRepositoriesAsync", "GetRepositoryActivityFactorAsync", "GetRepositoryLanguagesAsync", "GetVulnerabilitiesCountAsync"], ["System.Collections.Generic", "System.Linq", "System.Threading.Tasks", "Infrastructure.Dotnet.Common", "JetBrains.Annotations", "Lim.Common.DotNET", "Bitbucket.Net.Models.Core.Projects"], false, false, ["UsedImplicitly"], false, false, [], {"_developerIdentityTransformer": [], "_restApi": []}, [], 0, false, false, false, 19, 1.0, [], 350.57894736842104, 100, 0.0, 63.1578947368421, 1, 0, false, false, false, true, "public", false, ["Lim.GitRestApi.IConsumableRestApi.VerifyConnectionAsync", "Lim.GitRestApi.IGitRestApi<Bitbucket.Net.Models.Core.Projects.Repository, Bitbucket.Net.Models.Core.Projects.PullRequest, Bitbucket.Net.Models.Core.Users.User, Bitbucket.Net.Models.Core.Projects.Comment>.GetRepositoriesAsync", "Lim.GitRestApi.IGitRestApi<Bitbucket.Net.Models.Core.Projects.Repository, Bitbucket.Net.Models.Core.Projects.PullRequest, Bitbucket.Net.Models.Core.Users.User, Bitbucket.Net.Models.Core.Projects.Comment>.GetRepositoryAsync", "Lim.GitRestApi.IGitRestApi<Bitbucket.Net.Models.Core.Projects.Repository, Bitbucket.Net.Models.Core.Projects.PullRequest, Bitbucket.Net.Models.Core.Users.User, Bitbucket.Net.Models.Core.Projects.Comment>.GetPullRequestsAsync", "Lim.GitRestApi.IDeveloperIdentityTransformer<Bitbucket.Net.Models.Core.Users.User>.GetDeveloperIdentityAsync", "Lim.GitRestApi.IGitRestApi<Bitbucket.Net.Models.Core.Projects.Repository, Bitbucket.Net.Models.Core.Projects.PullRequest, Bitbucket.Net.Models.Core.Users.User, Bitbucket.Net.Models.Core.Projects.Comment>.GetPullRequestIssueKeys", "Lim.GitRestApi.IBitbucketServerRestApi.GetPullRequestCommitsAsync", "Lim.GitRestApi.IBitbucketServerRestApi.GetPullRequestActivitiesAsync", "Lim.GitRestApi.GitConventions.RefToBranchName", "Lim.GitRestApi.IBitbucketServerRestApi.GetRepositoryParticipantsAsync", "Lim.GitRestApi.IBitbucketServerRestApi.GetRepositoryFilePathsAsync", "Lim.GitRestApi.IGitRestApi<Bitbucket.Net.Models.Core.Projects.Repository, Bitbucket.Net.Models.Core.Projects.PullRequest, Bitbucket.Net.Models.Core.Users.User, Bitbucket.Net.Models.Core.Projects.Comment>.GetPullRequestAsync", "Lim.GitRestApi.IGitRestApi<Bitbucket.Net.Models.Core.Projects.Repository, Bitbucket.Net.Models.Core.Projects.PullRequest, Bitbucket.Net.Models.Core.Users.User, Bitbucket.Net.Models.Core.Projects.Comment>.GetRepositoryBranchesAsync", "Lim.GitRestApi.IGitRestApi<Bitbucket.Net.Models.Core.Projects.Repository, Bitbucket.Net.Models.Core.Projects.PullRequest, Bitbucket.Net.Models.Core.Users.User, Bitbucket.Net.Models.Core.Projects.Comment>.GetRepositoryTagsAsync", "Lim.GitRestApi.GitConventions.NormalizeBranchName", "Lim.GitRestApi.IBitbucketServerRestApi.GetDefaultBranchAsync", "Lim.GitRestApi.IGitRestApi<Bitbucket.Net.Models.Core.Projects.Repository, Bitbucket.Net.Models.Core.Projects.PullRequest, Bitbucket.Net.Models.Core.Users.User, Bitbucket.Net.Models.Core.Projects.Comment>.GetPullRequestCommentsAsync", "Lim.GitRestApi.ITypedConsumableProvider<Lim.Common.DotNET.Repository>.GetConsumablesAsync", "Lim.GitRestApi.ITypedConsumableProvider<Lim.Common.DotNET.Repository>.GetActivityFactorAsync"], ["url.TrimEnd", "(await _restApi.GetRepositoriesAsync(server))\n                .SelectParallelAsync(\n                    async repository =>\n                        await TransformRepository(server, repository)\n                )\n                .ToListAsync", "(await _restApi.GetRepositoriesAsync(server))\n                .SelectParallelAsync", "TransformRepository", "issueKeys.ToDictionaryGrouped", "(await _restApi.GetPullRequestCommitsAsync(repository, pullRequest.Id)).Select(commit => commit.Id)\n                    .ToHashSet", "(await _restApi.GetPullRequestCommitsAsync(repository, pullRequest.Id)).Select", "pullRequestCommits.AddRange", "(await _restApi.GetPullRequestActivitiesAsync(repository, pullRequest.Id)).Select(activity => activity.Commit)\n                    .WhereNotNull()\n                    .Select", "(await _restApi.GetPullRequestActivitiesAsync(repository, pullRequest.Id)).Select(activity => activity.Commit)\n                    .WhereNotNull", "(await _restApi.GetPullRequestActivitiesAsync(repository, pullRequest.Id)).Select", "comments.ToList", "_restApi.GetRepositoryFilePathsAsync(repository)\n                .ToListAsync", "repository.Links.Clone.First", "link.Name.Equals", "(await _restApi.GetPullRequestCommentsAsync(repository, pullRequestId))\n                .SelectAsync", "_developerIdentityTransformer.GetDeveloperIdentityAsync", "(await pullRequest.Reviewers.SelectParallelAsync(\n                    async reviewer =>\n                        (await _developerIdentityTransformer.GetDeveloperIdentityAsync(reviewer.User, repository.Server))?.Key\n                ))\n                .Concat(comments.Select(comment => comment.AuthorIdentityKey))\n                .Compact()\n                .Distinct()\n                .Where(developerIdentityKey => developerIdentityKey != authorIdentityKey)\n                .ToHashSet", "(await pullRequest.Reviewers.SelectParallelAsync(\n                    async reviewer =>\n                        (await _developerIdentityTransformer.GetDeveloperIdentityAsync(reviewer.User, repository.Server))?.Key\n                ))\n                .Concat(comments.Select(comment => comment.AuthorIdentityKey))\n                .Compact()\n                .Distinct()\n                .Where", "(await pullRequest.Reviewers.SelectParallelAsync(\n                    async reviewer =>\n                        (await _developerIdentityTransformer.GetDeveloperIdentityAsync(reviewer.User, repository.Server))?.Key\n                ))\n                .Concat(comments.Select(comment => comment.AuthorIdentityKey))\n                .Compact()\n                .Distinct", "(await pullRequest.Reviewers.SelectParallelAsync(\n                    async reviewer =>\n                        (await _developerIdentityTransformer.GetDeveloperIdentityAsync(reviewer.User, repository.Server))?.Key\n                ))\n                .Concat(comments.Select(comment => comment.AuthorIdentityKey))\n                .Compact", "(await pullRequest.Reviewers.SelectParallelAsync(\n                    async reviewer =>\n                        (await _developerIdentityTransformer.GetDeveloperIdentityAsync(reviewer.User, repository.Server))?.Key\n                ))\n                .Concat", "pullRequest.Reviewers.SelectParallelAsync", "comments.Select", "Task.FromResult"], false, false, false, false, ["#", "", "http"], false, 0, 0, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, false], ["BitbucketServerRestApi", "Lim.GitRestApi.BitbucketServerRestApi", [], ["Lim.GitRestApi.IBitbucketServerRestApi"], "src/Lim.GitRestApi/Providers/Bitbucket/Server/BitbucketServerRestApi.cs", 23, 0, {"_configureUntrustedCertificatePolicy": "???.IConfigureUntrustedCertificatePolicy", "_logger": "???.ILogger<BitbucketServerRestApi>", "_serverRestApiBarrier": "Lim.GitRestApi.ServerRestApiBarrier"}, ["_configureUntrustedCertificatePolicy", "_logger", "_serverRestApiBarrier"], ["BitbucketServerRestApi", "VerifyConnectionAsync", "GetRepositoriesAsync", "GetRepositoryAsync", "GetPullRequestsAsync", "GetPullRequestCommitsAsync", "GetPullRequestActivitiesAsync", "GetPullRequestAsync", "GetPullRequestCommentsAsync", "GetUserAsync", "GetDefaultBranchAsync", "GetRepositoryParticipantsAsync", "GetRepositoryFilePathsAsync", "GetPullRequestIssueKeys", "GetRepositoryBranchesAsync", "GetRepositoryTagsAsync", "ExecuteAsync"], ["System", "System.Collections.Generic", "System.Linq", "System.Threading.Tasks", "Bitbucket.Net", "Bitbucket.Net.Models.Core.Projects", "Bitbucket.Net.Models.Core.Users", "Flurl.Http", "Infrastructure.Dotnet.Common", "JetBrains.Annotations", "Lim.Common.DotNET", "Microsoft.Extensions.Configuration", "Microsoft.Extensions.Logging", "Bitbucket.Net.Models.Core.Projects.Repository", "Bitbucket.Net.Models.Core.Projects.PullRequest", "Bitbucket.Net.Models.Core.Projects.Comment", "Bitbucket.Net.Models.Core.Projects.Commit", "Bitbucket.Net.Models.Core.Projects.Branch", "Lim.Common.DotNET.Repository"], false, false, ["UsedImplicitly"], false, false, [], {"_configureUntrustedCertificatePolicy": [], "_logger": [], "_serverRestApiBarrier": []}, [], 0, false, false, false, 17, 1.0, [], 399.3529411764706, 327, 0.0, 94.11764705882354, 1, 0, false, false, false, true, "public", false, ["Lim.GitRestApi.GitConventions.BranchNameToRef", "Lim.GitRestApi.ServerRestApiBarrier.BoundedExecuteAsync"], ["ExecuteAsync", "client.GetGroupNamesAsync(limit: 1)\n                        .ToListAsync", "client.GetGroupNamesAsync", "_logger.LogInformation", "exception.ToStringShort", "client.GetRepositoriesAsync()\n                    .ToListAsync", "client.GetRepositoriesAsync", "client.GetProjectRepositoryAsync", "client.GetPullRequestsAsync(\n                        repository.ProjectId,\n                        repository.Id,\n                        order: PullRequestOrders.Oldest,\n                        branchId: GitConventions.BranchNameToRef(branch),\n                        state: PullRequestStates.All,\n                        start: fromPullRequestOrdinalId,\n                        limit: pageSize\n                    )\n                    .ToListAsync", "client.GetPullRequestsAsync", "client.GetPullRequestCommitsAsync(\n                        repository.ProjectId,\n                        repository.Id,\n                        pullRequestId\n                    )\n                    .ToListAsync", "client.GetPullRequestCommitsAsync", "client.GetPullRequestActivitiesAsync(\n                        repository.ProjectId,\n                        repository.Id,\n                        pullRequestId\n                    )\n                    .ToListAsync", "client.GetPullRequestActivitiesAsync", "client.GetPullRequestAsync", "(await client.GetPullRequestActivitiesAsync(\n                            repository.ProjectId,\n                            repository.Id,\n                            pullRequestId\n                        )\n                        .ToListAsync()).Select(activity => activity.Comment)\n                    .WhereNotNull()\n                    .ToList", "(await client.GetPullRequestActivitiesAsync(\n                            repository.ProjectId,\n                            repository.Id,\n                            pullRequestId\n                        )\n                        .ToListAsync()).Select(activity => activity.Comment)\n                    .WhereNotNull", "(await client.GetPullRequestActivitiesAsync(\n                            repository.ProjectId,\n                            repository.Id,\n                            pullRequestId\n                        )\n                        .ToListAsync()).Select", "client.GetPullRequestActivitiesAsync(\n                            repository.ProjectId,\n                            repository.Id,\n                            pullRequestId\n                        )\n                        .ToListAsync", "(await client.GetUsersAsync(\n                    identityString,\n                    maxPages: 1,\n                    avatarSize: 64\n                )).FirstOrDefault", "client.GetUsersAsync", "client.GetDefaultBranchAsync", "flurlHttpException.Message.Contains", "client.GetRepositoryParticipantsAsync(repository.ProjectId, repository.Id)\n                    .ToListAsync", "client.GetRepositoryParticipantsAsync", "client.GetRepositoryFilesAsync(repository.ProjectId, repository.Id)\n                    .ToListAsync", "client.GetRepositoryFilesAsync", "Array.Empty<string>", "(await client.GetJiraIssuesAsync(\n                        repository.ProjectId,\n                        repository.Id,\n                        pullRequestId\n                    ))\n                    .Select(keyedUrl => keyedUrl.Key)\n                    .ToList", "(await client.GetJiraIssuesAsync(\n                        repository.ProjectId,\n                        repository.Id,\n                        pullRequestId\n                    ))\n                    .Select", "client.GetJiraIssuesAsync", "(await client.GetBranchesAsync(\n                        repository.ProjectId,\n                        repository.Id,\n                        filterText: query\n                    ))\n                    .Select(\n                        branch => new GitBranch\n                        {\n                            Name = branch.DisplayId,\n                            HeadSha = branch.LatestCommit\n                        }\n                    )\n                    .ToList", "(await client.GetBranchesAsync(\n                        repository.ProjectId,\n                        repository.Id,\n                        filterText: query\n                    ))\n                    .Select", "client.GetBranchesAsync", "(await client.GetProjectRepositoryTagsAsync(\n                        repository.ProjectId,\n                        repository.Id,\n                        query,\n                        BranchOrderBy.Alphabetical\n                    ))\n                    .Select(\n                        tag => new GitTag\n                        {\n                            Name = tag.DisplayId,\n                            HeadSha = tag.LatestCommit\n                        }\n                    )\n                    .ToList", "(await client.GetProjectRepositoryTagsAsync(\n                        repository.ProjectId,\n                        repository.Id,\n                        query,\n                        BranchOrderBy.Alphabetical\n                    ))\n                    .Select", "client.GetProjectRepositoryTagsAsync", "_configureUntrustedCertificatePolicy.AllowUntrustedCertificate.GetValueOrDefault", "asyncFunc"], false, false, false, false, ["Not found", "Failed to connect to bitbucket server at {url}", "404"], false, 0, 0, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, false], ["CheckmarxProjectsRestApi", "Lim.GitRestApi.CheckmarxProjectsRestApi", [], ["Lim.GitRestApi.Checkmarx.ICheckmarxProjectsRestApi"], "src/Lim.GitRestApi/Providers/Checkmarx/CheckmarxProjectsRestApi.cs", 15, 0, {"ClientSecret": "string", "QueryKey": "string", "SourceFileNameKey": "string", "LineKey": "string", "DestinationFileNameKey": "string", "DestinationLineKey": "string", "ResultSeverityKey": "string", "_accessTokensByUrl": "System.Collections.Generic.Dictionary<string, (string AccessToken, DateTime tokenExpirationTime)>", "_logger": "???.ILogger<CheckmarxProjectsRestApi>", "_stripedAsyncLock": "???.StripedAsyncLock<string>"}, ["_accessTokensByUrl", "_logger", "_stripedAsyncLock"], ["CheckmarxProjectsRestApi", "VerifyConnectionAsync", "GetProjectsAsync", "GetProjectFinishedScansAsync", "GetGitLinkAsync", "GetScansVulnerabilitiesReportAsync", "ConnectAsync", "GetAccessTokenAsync", "GenerateReportForScanAsync", "ValidateCheckmarxCsvHeaders", "TransformCheckmarxVulnerabilityToVulnerabilityType", "ExtractVulnerabilitiesFromCheckmarxCsvReport", "CheckmarxGetScanReportVulnerabilitiesAsync", "CheckmarxWaitForScanReportAsync", "ExecuteRequestAsync"], ["System", "System.Collections.Generic", "System.Linq", "System.Threading.Tasks", "AsyncUtilities", "Flurl.Util", "Infrastructure.Dotnet.Common", "Lim.Common.DotNET", "Lim.GitRestApi.Checkmarx", "Microsoft.Extensions.Logging", "RestSharp"], false, false, [], false, false, [], {"ClientSecret": [], "QueryKey": [], "SourceFileNameKey": [], "LineKey": [], "DestinationFileNameKey": [], "DestinationLineKey": [], "ResultSeverityKey": [], "_accessTokensByUrl": [], "_logger": [], "_stripedAsyncLock": []}, [], 0, false, false, false, 15, 1.0, [], 863.8, 656, 13.333333333333334, 46.666666666666664, 1, 0, false, false, false, true, "public", false, [], ["response.Content.Contains", "ExecuteRequestAsync", "response.FromJson<List<CheckmarxProject>>", "response.FromJson<List<CheckmarxScan>>", "scans.Where(scan => scan.CheckmarxScanStatus.Name == \"Finished\")\n                .ToList", "scans.Where", "project.SourceSettingsLink.Type.ToLower()\n                .Equals", "project.SourceSettingsLink.Type.ToLower", "response.FromJson<CheckmarxGitReference>", ".Split('@')\n                .LastOrDefault", ".Split", "CheckmarxGetScanReportVulnerabilitiesAsync(server, scanReportId.Value)\n                .ToListAsync", "request.AddHeader", "request.AddParameter", "response.FromJson<CheckmarxConnectionData>", "DateTime.Now.AddSeconds", "_stripedAsyncLock.LockAsync", "_accessTokensByUrl.GetValueOrDefault", "scan.Id.ToString", "response.FromJson<CheckmarxScanReportRequestResponse>", "CheckmarxWaitForScanReportAsync", "headersLineItems\n                .FindIndex", "item.RemoveBomIfPresent()\n                        .StripQuotes", "item.RemoveBomIfPresent", "headersLineItems.FindIndex", "item.StripQuotes", "item\n                    .StripQuotes", "item\n                        .StripQuotes", "new HashSet<int>\n            {\n                queryIndex,\n                sourceFileNameIndex,\n                lineIndex,\n                destinationFileNameIndex,\n                destinationLineIndex,\n                resultSeverityIndex\n            }.All", "EnumUtils.TryFromString<VulnerabilitiesSupportedTypes>", "checkmarxVulnerabilityType\n                    .StripQuotes()\n                    .RemoveAllWhitespaces", "checkmarxVulnerabilityType\n                    .StripQuotes", "vulnerabilityType.GetValueOrDefault", "EnumUtils.GetValues<VulnerabilitiesSupportedTypes>()\n                .Where(\n                    type =>\n                    {\n                        var checkmarxDescriptionAttribute = type.GetCustomAttribute<VulnerabilitiesSupportedTypes, CheckmarxDescriptionAttribute>();\n                        return checkmarxDescriptionAttribute != null && checkmarxDescriptionAttribute.CheckmarxDescription.Equals(checkmarxVulnerabilityType, StringComparison.OrdinalIgnoreCase);\n                    }\n                )\n                .ToList", "EnumUtils.GetValues<VulnerabilitiesSupportedTypes>()\n                .Where", "EnumUtils.GetValues<VulnerabilitiesSupportedTypes>", "type.GetCustomAttribute<VulnerabilitiesSupportedTypes, CheckmarxDescriptionAttribute>", "checkmarxDescriptionAttribute.CheckmarxDescription.Equals", "_logger.LogInformation", "suspectedTypes.First", "csvContent.Split(\"\\r\\n\")\n                .Select(line => line.Split(\",\"))\n                .ToList", "csvContent.Split(\"\\r\\n\")\n                .Select", "csvContent.Split", "line.Split", "lines.FirstOrDefault", "_logger.LogError", "lines.Skip(1)\n                .SkipLast(1)\n                .Where(\n                    lineItems => lineItems[resultSeverityIndex]\n                        .StripQuotes() == \"High\"\n                )\n                .Select(\n                    lineItems => new Vulnerability\n                    {\n                        Type = TransformCheckmarxVulnerabilityToVulnerabilityType(\n                            lineItems[queryIndex]\n                                .StripQuotes()\n                        ),\n                        CodeReferences = new HashSet<CodeReference>\n                        {\n                            new CodeReference(\n                                lineItems[sourceFileNameIndex]\n                                    .StripQuotes(),\n                                int.Parse(\n                                    lineItems[lineIndex]\n                                        .StripQuotes()\n                                ),\n                                int.Parse(\n                                    lineItems[lineIndex]\n                                        .StripQuotes()\n                                )\n                            ),\n                            new CodeReference(\n                                lineItems[destinationFileNameIndex]\n                                    .StripQuotes(),\n                                int.Parse(\n                                    lineItems[destinationLineIndex]\n                                        .StripQuotes()\n                                ),\n                                int.Parse(\n                                    lineItems[destinationLineIndex]\n                                        .StripQuotes()\n                                )\n                            )\n                        }\n                    }\n                )\n                .ToList", "lines.Skip(1)\n                .SkipLast(1)\n                .Where(\n                    lineItems => lineItems[resultSeverityIndex]\n                        .StripQuotes() == \"High\"\n                )\n                .Select", "lines.Skip(1)\n                .SkipLast(1)\n                .Where", "lines.Skip(1)\n                .SkipLast", "lines.Skip", "lineItems[resultSeverityIndex]\n                        .StripQuotes", "TransformCheckmarxVulnerabilityToVulnerabilityType", "lineItems[queryIndex]\n                                .StripQuotes", "lineItems[sourceFileNameIndex]\n                                    .StripQuotes", "int.Parse", "lineItems[lineIndex]\n                                        .StripQuotes", "lineItems[destinationFileNameIndex]\n                                    .StripQuotes", "lineItems[destinationLineIndex]\n                                        .StripQuotes", "ExtractVulnerabilitiesFromCheckmarxCsvReport(csvContent)\n                .ToList", "ExtractVulnerabilitiesFromCheckmarxCsvReport", "restResponse.FromJson<CheckmarxReportStatusResponse>", "Task.Delay", "TimeSpan.FromSeconds", "string.IsNullOrEmpty", "client.SafeExecuteTaskAsync"], false, false, false, false, ["014DF517-39D1-4453-B7B3-9930C563627C", "Query", "SrcFileName", "Line", "DestFileName", "DestLine", "Result Severity", "invalid_username_or_password", "Finished", "git", "Content-Type", "application/x-www-form-urlencoded", "username", "password", "grant_type", "scope", "access_control_api sast_api", "client_id", "resource_owner_sast_client", "client_secret", "application/json;v=1.0", "reportType", "CSV", "scanId", "Unknown Checkmarx vulnerability type recognised: {type}", "\r\n", ",", "Checkmarx scan report csv does not conform to expected scheme {csv}", "High", "Created", "", "Authorization", "Accept"], false, 0, 0, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, false], ["CheckmarxProvider", "Lim.GitRestApi.CheckmarxProvider", [], ["Lim.GitRestApi.ISecurityScansProvider"], "src/Lim.GitRestApi/Providers/Checkmarx/CheckmarxProvider.cs", 12, 0, {"_logger": "???.ILogger<CheckmarxProvider>", "_securityScansProjectsRestApi": "Lim.GitRestApi.Checkmarx.ICheckmarxProjectsRestApi"}, ["_logger", "_securityScansProjectsRestApi"], ["CheckmarxProvider", "NormalizedUrl", "VerifyConnectionAsync", "GetConsumablesAsync", "GetActivityFactorAsync", "GetLatestSecurityScans", "GetNewSecurityScans", "TransformCheckmarxScan"], ["System", "System.Collections.Generic", "System.Linq", "System.Threading.Tasks", "Infrastructure.Dotnet.Common", "Lim.Common.DotNET", "Lim.GitRestApi.Checkmarx", "Microsoft.Extensions.Logging"], false, false, [], false, false, [], {"_logger": [], "_securityScansProjectsRestApi": []}, [], 0, false, false, false, 8, 1.0, [], 330.375, 212, 0.0, 87.5, 1, 0, false, false, false, true, "public", false, ["Lim.GitRestApi.IConsumableRestApi.VerifyConnectionAsync", "Lim.GitRestApi.ISecurityScansProjectsRestApi<Lim.GitRestApi.Checkmarx.CheckmarxProject, Lim.GitRestApi.Checkmarx.CheckmarxScan>.GetProjectsAsync", "Lim.GitRestApi.ISecurityScansProjectsRestApi<Lim.GitRestApi.Checkmarx.CheckmarxProject, Lim.GitRestApi.Checkmarx.CheckmarxScan>.GetProjectFinishedScansAsync", "Lim.GitRestApi.Checkmarx.ICheckmarxProjectsRestApi.GetScansVulnerabilitiesReportAsync"], ["url.TrimEnd", "(await _securityScansProjectsRestApi.GetProjectsAsync(server))\n                .SelectAsync", "_securityScansProjectsRestApi.GetGitLinkAsync", "project.Id.ToString", "Task.FromResult", "(await _securityScansProjectsRestApi.GetProjectFinishedScansAsync(securityScansProject))\n                .MaxBy", "TransformCheckmarxScan", "checkmarxScans.None", "Array.Empty<SecurityScan>", "_logger.LogDebug", "checkmarxScans.Count", "securityScansProject.LatestScanId.GetValueOrDefault", "checkmarxScans\n                .Where(scan => scan.Id > securityScansProject.LatestScanId.GetValueOrDefault())\n                .SelectAsync", "checkmarxScans\n                .Where", "_securityScansProjectsRestApi.GetScansVulnerabilitiesReportAsync(securityScansProject.Server, checkmarxScan)\n                    .ToListAsync"], false, false, false, false, [], false, 0, 0, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, false], ["CheckmarxConnectionData", "Lim.GitRestApi.Checkmarx.CheckmarxConnectionData", [], [], "src/Lim.GitRestApi/Providers/Checkmarx/CheckmarxRestApiClasses.cs", 6, 0, {}, ["AccessToken", "ExpiresIn", "TokenType"], ["AccessToken", "ExpiresIn", "TokenType"], ["System", "Newtonsoft.Json"], false, false, [], false, false, [], {}, ["JsonProperty"], 3, false, false, false, 0, 0.0, [], 0.0, 0, 0.0, 100.0, 0, 0, false, false, false, false, "public", false, [], [], false, false, false, false, ["access_token", "expires_in", "token_type"], false, 3, 3, [], false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, 0, 0, false], ["CheckmarxProject", "Lim.GitRestApi.Checkmarx.CheckmarxProject", [], [], "src/Lim.GitRestApi/Providers/Checkmarx/CheckmarxRestApiClasses.cs", 18, 0, {}, ["Id", "TeamId", "Name", "SourceSettingsLink"], ["Id", "TeamId", "Name", "IsPublic", "SourceSettingsLink"], ["System", "Newtonsoft.Json"], false, false, [], false, false, [], {}, ["JsonProperty"], 5, false, false, false, 0, 0.0, [], 0.0, 0, 0.0, 100.0, 0, 0, false, false, false, false, "public", false, [], [], false, false, false, false, ["id", "teamId", "name", "isPublic", "sourceSettingsLink"], false, 5, 5, [], false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, 0, 0, false], ["CheckmarxSourceSettingsLink", "Lim.GitRestApi.Checkmarx.CheckmarxSourceSettingsLink", [], [], "src/Lim.GitRestApi/Providers/Checkmarx/CheckmarxRestApiClasses.cs", 36, 0, {}, ["Type", "Rel", "Uri"], ["Type", "Rel", "Uri"], ["System", "Newtonsoft.Json"], false, false, [], false, false, [], {}, ["JsonProperty"], 3, false, false, false, 0, 0.0, [], 0.0, 0, 0.0, 100.0, 0, 0, false, false, false, false, "public", false, [], [], false, false, false, false, ["type", "rel", "uri"], false, 3, 3, [], false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, 0, 0, false], ["CheckmarxGitReference", "Lim.GitRestApi.Checkmarx.CheckmarxGitReference", [], [], "src/Lim.GitRestApi/Providers/Checkmarx/CheckmarxRestApiClasses.cs", 48, 0, {}, ["Url", "Branch"], ["Url", "Branch", "UseSsh"], ["System", "Newtonsoft.Json"], false, false, [], false, false, [], {}, ["JsonProperty"], 3, false, false, false, 0, 0.0, [], 0.0, 0, 0.0, 100.0, 0, 0, false, false, false, false, "public", false, [], [], false, false, false, false, ["url", "branch", "useSsh"], false, 3, 3, [], false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, 0, 0, false], ["Project", "Lim.GitRestApi.Checkmarx.Project", [], [], "src/Lim.GitRestApi/Providers/Checkmarx/CheckmarxRestApiClasses.cs", 60, 0, {}, ["Id", "Name", "Link"], ["Id", "Name", "Link"], ["System", "Newtonsoft.Json"], false, false, [], false, false, [], {}, ["JsonProperty"], 3, false, false, false, 0, 0.0, [], 0.0, 0, 0.0, 100.0, 0, 0, false, false, false, false, "public", false, [], [], false, false, false, false, ["id", "name", "link"], false, 3, 3, [], false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, 0, 0, false], ["CheckmarxScanStatusDetails", "Lim.GitRestApi.Checkmarx.CheckmarxScanStatusDetails", [], [], "src/Lim.GitRestApi/Providers/Checkmarx/CheckmarxRestApiClasses.cs", 72, 0, {}, ["Stage", "Step"], ["Stage", "Step"], ["System", "Newtonsoft.Json"], false, false, [], false, false, [], {}, ["JsonProperty"], 2, false, false, false, 0, 0.0, [], 0.0, 0, 0.0, 100.0, 0, 0, false, false, false, false, "public", false, [], [], false, false, false, false, ["stage", "step"], false, 2, 2, [], false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, 0, 0, false], ["CheckmarxScanStatus", "Lim.GitRestApi.Checkmarx.CheckmarxScanStatus", [], [], "src/Lim.GitRestApi/Providers/Checkmarx/CheckmarxRestApiClasses.cs", 81, 0, {}, ["Id", "Name", "CheckmarxScanStatusDetails"], ["Id", "Name", "CheckmarxScanStatusDetails"], ["System", "Newtonsoft.Json"], false, false, [], false, false, [], {}, ["JsonProperty"], 3, false, false, false, 0, 0.0, [], 0.0, 0, 0.0, 100.0, 0, 0, false, false, false, false, "public", false, [], [], false, false, false, false, ["id", "name", "details"], false, 3, 3, [], false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, 0, 0, false], ["CheckmarxScanType", "Lim.GitRestApi.Checkmarx.CheckmarxScanType", [], [], "src/Lim.GitRestApi/Providers/Checkmarx/CheckmarxRestApiClasses.cs", 93, 0, {}, ["Id", "Value"], ["Id", "Value"], ["System", "Newtonsoft.Json"], false, false, [], false, false, [], {}, ["JsonProperty"], 2, false, false, false, 0, 0.0, [], 0.0, 0, 0.0, 100.0, 0, 0, false, false, false, false, "public", false, [], [], false, false, false, false, ["id", "value"], false, 2, 2, [], false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, 0, 0, false], ["CheckmarxScanDateAndTime", "Lim.GitRestApi.Checkmarx.CheckmarxScanDateAndTime", [], [], "src/Lim.GitRestApi/Providers/Checkmarx/CheckmarxRestApiClasses.cs", 102, 0, {}, ["StartedOn"], ["StartedOn"], ["System", "Newtonsoft.Json"], false, false, [], false, false, [], {}, ["JsonProperty"], 1, false, false, false, 0, 0.0, [], 0.0, 0, 0.0, 100.0, 0, 0, false, false, false, false, "public", false, [], [], false, false, false, false, ["startedOn"], false, 1, 1, [], false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, 0, 0, false], ["CheckmarxResultsStatistics", "Lim.GitRestApi.Checkmarx.CheckmarxResultsStatistics", [], [], "src/Lim.GitRestApi/Providers/Checkmarx/CheckmarxRestApiClasses.cs", 108, 0, {}, ["Link"], ["Link"], ["System", "Newtonsoft.Json"], false, false, [], false, false, [], {}, ["JsonProperty"], 1, false, false, false, 0, 0.0, [], 0.0, 0, 0.0, 100.0, 0, 0, false, false, false, false, "public", false, [], [], false, false, false, false, ["link"], false, 1, 1, [], false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, 0, 0, false], ["ScanState", "Lim.GitRestApi.Checkmarx.ScanState", [], [], "src/Lim.GitRestApi/Providers/Checkmarx/CheckmarxRestApiClasses.cs", 114, 0, {}, ["Path", "SourceId", "FilesCount", "LinesOfCode", "FailedLinesOfCode", "CxVersion"], ["Path", "SourceId", "FilesCount", "LinesOfCode", "FailedLinesOfCode", "CxVersion"], ["System", "Newtonsoft.Json"], false, false, [], false, false, [], {}, ["JsonProperty"], 6, false, false, false, 0, 0.0, [], 0.0, 0, 0.0, 100.0, 0, 0, false, false, false, false, "public", false, [], [], false, false, false, false, ["path", "sourceId", "filesCount", "linesOfCode", "failedLinesOfCode", "cxVersion"], false, 6, 6, [], false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, 0, 0, false], ["CheckmarxScan", "Lim.GitRestApi.Checkmarx.CheckmarxScan", [], [], "src/Lim.GitRestApi/Providers/Checkmarx/CheckmarxRestApiClasses.cs", 135, 0, {}, ["Id", "Project", "CheckmarxScanStatus", "CheckmarxScanType", "Comment", "CheckmarxScanDateAndTime", "CheckmarxResultsStatistics", "ScanState", "Owner", "Origin", "InitiatorName", "OwningTeamId", "ScanRisk", "ScanRiskSeverity", "PartialScanReasons"], ["Id", "Project", "CheckmarxScanStatus", "CheckmarxScanType", "Comment", "CheckmarxScanDateAndTime", "CheckmarxResultsStatistics", "ScanState", "Owner", "Origin", "InitiatorName", "OwningTeamId", "IsPublic", "IsLocked", "IsIncremental", "ScanRisk", "ScanRiskSeverity", "PartialScanReasons"], ["System", "Newtonsoft.Json"], false, false, [], false, false, [], {}, ["JsonProperty"], 18, false, false, false, 0, 0.0, [], 0.0, 0, 0.0, 100.0, 0, 0, false, false, false, false, "public", false, [], [], false, false, false, false, ["id", "project", "status", "scanType", "comment", "dateAndTime", "resultsStatistics", "scanState", "owner", "origin", "initiatorName", "owningTeamId", "isPublic", "isLocked", "isIncremental", "scanRisk", "scanRiskSeverity", "partialScanReasons"], false, 18, 18, [], false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, 0, 0, false], ["CheckmarxScanReportRequestResponse", "Lim.GitRestApi.Checkmarx.CheckmarxScanReportRequestResponse", [], [], "src/Lim.GitRestApi/Providers/Checkmarx/CheckmarxRestApiClasses.cs", 192, 0, {}, ["ReportId"], ["ReportId"], ["System", "Newtonsoft.Json"], false, false, [], false, false, [], {}, ["JsonProperty"], 1, false, false, false, 0, 0.0, [], 0.0, 0, 0.0, 100.0, 0, 0, false, false, false, false, "public", false, [], [], false, false, false, false, ["reportId"], false, 1, 1, [], false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, 0, 0, false], ["CheckmarxReportStatusResponse", "Lim.GitRestApi.Checkmarx.CheckmarxReportStatusResponse", [], [], "src/Lim.GitRestApi/Providers/Checkmarx/CheckmarxRestApiClasses.cs", 198, 0, {}, ["Status"], ["Status"], ["System", "Newtonsoft.Json"], false, false, [], false, false, [], {}, ["JsonProperty"], 1, false, false, false, 0, 0.0, [], 0.0, 0, 0.0, 100.0, 0, 0, false, false, false, false, "public", false, [], [], false, false, false, false, ["status"], false, 1, 1, [], false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, 0, 0, false], ["CheckmarxReportStatus", "Lim.GitRestApi.Checkmarx.CheckmarxReportStatus", [], [], "src/Lim.GitRestApi/Providers/Checkmarx/CheckmarxRestApiClasses.cs", 204, 0, {}, ["Value", "Id"], ["Value", "Id"], ["System", "Newtonsoft.Json"], false, false, [], false, false, [], {}, ["JsonProperty"], 2, false, false, false, 0, 0.0, [], 0.0, 0, 0.0, 100.0, 0, 0, false, false, false, false, "public", false, [], [], false, false, false, false, ["value", "id"], false, 2, 2, [], false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, 0, 0, false], ["GitConventions", "Lim.GitRestApi.GitConventions", [], [], "src/Lim.GitRestApi/Providers/GitConventions.cs", 5, 0, {"RefPrefix": "string", "OriginPrefix": "string", "UpstreamPrefix": "string", "DefaultBranchName": "string"}, [], ["NormalizeBranchName", "RefToBranchName", "BranchNameToRef", "UsernameFromEmail"], ["Infrastructure.Dotnet.Common"], false, false, [], false, false, [], {"RefPrefix": [], "OriginPrefix": [], "UpstreamPrefix": [], "DefaultBranchName": []}, [], 0, false, false, false, 4, 1.0, [], 146.5, 142, 100.0, 100.0, 0, 0, false, false, true, false, "public", false, [], ["string.IsNullOrEmpty", "branchName.RemoveAll", "refName.RemoveAll", "email.Split"], false, false, false, false, ["refs/heads/", "origin/", "upstream/", "master"], false, 0, 0, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, false], ["GithubConstants", "Lim.GitRestApi.GithubConstants", [], [], "src/Lim.GitRestApi/Providers/Github/GithubConsts.cs", 6, 0, {"GithubLegalUsernamePattern": "string", "GithubNoreplyDomain": "string", "GithubUsernamePattern": "string", "GithubUsernameRegex": "System.Text.RegularExpressions.Regex", "GithubEmailPattern": "string", "GithubNoreplyEmailRegex": "System.Text.RegularExpressions.Regex"}, [], [], ["System.Text.RegularExpressions", "Lim.Common.DotNET"], false, false, [], false, false, [], {"GithubLegalUsernamePattern": [], "GithubNoreplyDomain": [], "GithubUsernamePattern": [], "GithubUsernameRegex": [], "GithubEmailPattern": [], "GithubNoreplyEmailRegex": []}, [], 0, false, false, false, 0, 0.0, [], 0.0, 0, 0.0, 0.0, 0, 0, false, false, true, false, "public", false, [], ["RegexUtils.GetCompiledRegex", "GithubNoreplyDomain.Replace"], false, false, false, false, ["[A-Za-z0-9-]+", "users.noreply.github.com", ".", "\\."], false, 0, 0, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, false], ["GithubDeveloperIdentityTransformer", "Lim.GitRestApi.GithubDeveloperIdentityTransformer", [], ["Lim.GitRestApi.IGithubDeveloperIdentityTransformer"], "src/Lim.GitRestApi/Providers/Github/GithubDeveloperIdentityTransformer.cs", 9, 0, {"_developerIdentityProvider": "Lim.GitRestApi.IDeveloperIdentityProvider"}, ["_developerIdentityProvider"], ["GithubDeveloperIdentityTransformer", "GetDeveloperIdentityAsync"], ["System.Collections.Generic", "System.Linq", "System.Threading.Tasks", "Lim.Common.DotNET", "Octokit"], false, false, [], false, false, [], {"_developerIdentityProvider": []}, [], 0, false, false, false, 2, 1.0, [], 385.0, 385, 0.0, 100.0, 1, 0, false, false, false, true, "public", false, ["Lim.GitRestApi.GithubIdentityUtil.Transform", "Lim.GitRestApi.IDeveloperIdentityProvider.GetOrCreateDeveloperAsync"], ["identities.FirstOrDefault"], false, false, false, false, ["GithubCompany", "GithubDisplayName", "GithubDescription", "GithubAvatarUrl"], false, 0, 0, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, false], ["GithubGraphqlQueries", "Lim.GitRestApi.GithubGraphqlQueries", [], [], "src/Lim.GitRestApi/Providers/Github/GithubGraphqlQueries.cs", 3, 0, {"VulnerabilitiesDetails": "string", "TotalIssuesCount": "string", "GetRefs": "string"}, [], [], [], false, false, [], false, false, [], {"VulnerabilitiesDetails": [], "TotalIssuesCount": [], "GetRefs": []}, [], 0, false, false, false, 0, 0.0, [], 0.0, 0, 0.0, 0.0, 0, 0, false, false, true, false, "public", false, [], [], false, false, false, false, ["\nquery($owner: String!, $repository_name: String!, $next_cursor: String) {\n\trepository(owner: $owner, name: $repository_name) {\n\t\tname\n\t\tisArchived\n\t\tvulnerabilityAlerts(first: 100, after: $next_cursor) {\n\t\t\ttotalCount\n\t\t\tpageInfo {\n\t\t\t\thasNextPage\n\t\t\t\thasPreviousPage\n\t\t\t\tstartCursor\n\t\t\t\tendCursor\n\t\t\t}\n\t\t\tnodes {\n\t\t\t\tcreatedAt\n\t\t\t\tvulnerableRequirements\n\t\t\t\tdismissedAt\n\t\t\t\tdismissReason\n\t\t\t\tsecurityVulnerability {\n\t\t\t\t\tadvisory {\n\t\t\t\t\t\tdescription\n\t\t\t\t\t\tidentifiers {\n\t\t\t\t\t\t\tvalue\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tseverity\n\t\t\t\t\tpackage {\n\t\t\t\t\t\tecosystem\n\t\t\t\t\t\tname\n\t\t\t\t\t}\n\t\t\t\t\tupdatedAt\n\t\t\t\t\tvulnerableVersionRange\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n", "\nquery($owner: String!, $repository_name: String!) { \n  repository(owner: $owner, name: $repository_name) { \n    issues {\n      totalCount\n    }\n  }\n}\n", "\nquery($owner: String!, $repository_name: String!, $ref_type: String!, $count: Int!, $query: String) {\n  repository(owner: $owner, name: $repository_name) {\n    refs(first: $count, refPrefix: $ref_type, query: $query) {\n      edges {\n        node {\n          name\n          target {\n            oid\n            commitResourcePath\n          }\n        }\n      }\n    }\n  }\n}\n"], false, 0, 0, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, false], ["GithubIdentitiesExpander", "Lim.GitRestApi.GithubIdentitiesExpander", [], ["Lim.GitRestApi.IIdentitiesExpander"], "src/Lim.GitRestApi/Providers/Github/GithubIdentitiesExpander.cs", 11, 0, {"_logger": "???.ILogger<GithubIdentitiesExpander>", "_restApi": "Lim.GitRestApi.IGithubRestApi"}, ["_logger", "_restApi"], ["GithubIdentitiesExpander", "ExpandIdentitiesAsync", "TryGetUserAsync", "TryGetUserByIdAsync", "TryGetUserByUsernameAsync"], ["System", "System.Collections.Generic", "System.Linq", "System.Threading.Tasks", "Infrastructure.Dotnet.Common", "Lim.Common.DotNET", "Microsoft.Extensions.Logging"], false, false, [], false, false, [], {"_logger": [], "_restApi": []}, [], 0, false, false, false, 5, 1.0, [], 579.8, 377, 0.0, 40.0, 1, 0, false, false, false, true, "public", false, ["Lim.GitRestApi.GithubIdentityUtil.ExtractAdditionalIdentitiesFromEmail", "Lim.GitRestApi.IGithubRestApi.GetUserAsync", "Lim.GitRestApi.IGitRestApi<Octokit.Repository, (Octokit.PullRequest PullRequest, int OrdinalId), User, PullRequestReviewComment>.GetUserAsync"], ["developerIdentity.Identity.EndsWith", "GithubIdentityUtil.ExtractAdditionalIdentitiesFromEmail(developerIdentity.Identity, server)\n                            .ToList", "expandedIdentities.AddRange", "exception.IsOrWrapping<ProviderConnectionException>", "_logger.LogError", "expandedIdentities.Select(_ => _.Identity).JoinToString", "expandedIdentities.Select", "int.TryParse", "identities.AddRange", "GithubIdentityUtil.Transform", "GithubConstants.GithubUsernameRegex.Match"], false, false, false, false, [], false, 0, 0, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, false], ["GithubIdentityUtil", "Lim.GitRestApi.GithubIdentityUtil", [], [], "src/Lim.GitRestApi/Providers/Github/GithubIdentityUtil.cs", 8, 0, {}, [], ["Transform", "ExtractAdditionalIdentitiesFromEmail"], ["System.Collections.Generic", "Infrastructure.Dotnet.Common", "Lim.Common.DotNET", "Octokit"], false, false, [], false, false, [], {}, [], 0, false, false, false, 2, 1.0, [], 1513.5, 1513, 100.0, 100.0, 0, 0, false, false, true, false, "public", false, ["Lim.GitRestApi.GitConventions.UsernameFromEmail"], ["ExtractAdditionalIdentitiesFromEmail", "account.Name.OrIfEmpty(\"\")\n                .Contains", "account.Name.OrIfEmpty", "account.Name.Replace", "string.IsNullOrWhiteSpace", "identities.Add", "account.Id.ToString", "string.IsNullOrEmpty", "GithubConstants.GithubNoreplyEmailRegex.Match"], false, false, false, false, ["", " ", "id", "username"], false, 0, 0, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, false], ["GithubProvider", "Lim.GitRestApi.GithubProvider", [], ["Lim.GitRestApi.IRepositoriesProvider", "Lim.GitRestApi.IProjectsProvider"], "src/Lim.GitRestApi/Providers/Github/GithubProvider.cs", 19, 0, {"_developerIdentityTransformer": "Lim.GitRestApi.IGithubDeveloperIdentityTransformer", "_restApi": "Lim.GitRestApi.IGithubRestApi", "_vulnerabilitiesCountCache": "???.IAsyncCache<string, Dictionary<RiskLevel, int>>"}, ["_developerIdentityTransformer", "_restApi", "_vulnerabilitiesCountCache"], ["GithubProvider", "Lim.GitRestApi.ITypedConsumableProvider<Lim.Common.DotNET.Project>.GetConsumablesAsync", "GetActivityFactorAsync", "GetIssuesAsync", "GetIssueAsync", "CreateIssueAsync", "IsUserProjectMemberAsync", "NormalizedUrl", "VerifyConnectionAsync", "Lim.GitRestApi.ITypedConsumableProvider<Lim.Common.DotNET.Repository>.GetConsumablesAsync", "GetRepositoryAsync", "GetPullRequestsAsync", "GetRepositoryLanguagesAsync", "GetPullRequestMutableDetails", "GetVulnerabilitiesCountAsync", "GetRepositoryBranchesAsync", "GetRepositoryTagsAsync", "BuildUrl", "RepositoryHasIssuesAsync", "TransformRepository", "GetPullRequestIssues", "GetPullRequestCommentsAsync", "GetIssueCommentsAsync", "GetReviewerIdentitiesKeysAsync", "TransformIssueAsync", "GetDeveloperIdentityKeyAsync", "GetRepositoriesAsync", "GetRepositoryActivityFactorAsync", "GetRepositoryFilePathsAsync", "GetProjectsAsync", "GetProjectActivityFactorAsync"], ["System", "System.Collections.Generic", "System.Linq", "System.Threading.Tasks", "Infrastructure.Dotnet.Common", "JetBrains.Annotations", "Lim.Common.DotNET", "Octokit", "Octokit.PullRequest", "Lim.Common.DotNET.GitTag", "Lim.Common.DotNET.Issue", "Lim.Common.DotNET.Language", "Lim.Common.DotNET.Project", "Lim.Common.DotNET.PullRequest", "Lim.Common.DotNET.Repository"], false, false, ["UsedImplicitly"], false, false, [], {"_developerIdentityTransformer": [], "_restApi": [], "_vulnerabilitiesCountCache": []}, [], 0, false, false, false, 32, 1.0, [], 391.25, 148, 6.25, 53.125, 1, 0, false, false, false, true, "public", false, ["Lim.GitRestApi.IIssuesRestApi<Octokit.Repository, Octokit.Issue, IssueComment>.GetProjectsAsync", "Lim.GitRestApi.IGithubRestApi.GetProjectContributorsAsync", "Lim.GitRestApi.IIssuesRestApi<Octokit.Repository, Octokit.Issue, IssueComment>.GetIssuesAsync", "Lim.GitRestApi.IIssuesRestApi<Octokit.Repository, Octokit.Issue, IssueComment>.GetIssueAsync", "Lim.GitRestApi.IIssuesRestApi<Octokit.Repository, Octokit.Issue, IssueComment>.CreateIssueAsync", "Lim.GitRestApi.IIssuesRestApi<Octokit.Repository, Octokit.Issue, IssueComment>.IsUserProjectMemberAsync", "Lim.GitRestApi.IConsumableRestApi.VerifyConnectionAsync", "Lim.GitRestApi.IGitRestApi<Octokit.Repository, (Octokit.PullRequest PullRequest, int OrdinalId), User, PullRequestReviewComment>.GetRepositoriesAsync", "Lim.GitRestApi.IGitRestApi<Octokit.Repository, (Octokit.PullRequest PullRequest, int OrdinalId), User, PullRequestReviewComment>.GetRepositoryAsync", "Lim.GitRestApi.IGitRestApi<Octokit.Repository, (Octokit.PullRequest PullRequest, int OrdinalId), User, PullRequestReviewComment>.GetPullRequestsAsync", "Lim.GitRestApi.GithubApiExtensions.IsOpen", "Lim.GitRestApi.IGithubRestApi.GetRepositoryContributorsAsync", "Lim.GitRestApi.IGithubRestApi.GetLanguagesAsync", "Lim.GitRestApi.IGitRestApi<Octokit.Repository, (Octokit.PullRequest PullRequest, int OrdinalId), User, PullRequestReviewComment>.GetPullRequestAsync", "Lim.GitRestApi.IGithubRestApi.GetVulnerabilitiesCountAsync", "Lim.GitRestApi.IGitRestApi<Octokit.Repository, (Octokit.PullRequest PullRequest, int OrdinalId), User, PullRequestReviewComment>.GetRepositoryBranchesAsync", "Lim.GitRestApi.IGitRestApi<Octokit.Repository, (Octokit.PullRequest PullRequest, int OrdinalId), User, PullRequestReviewComment>.GetRepositoryTagsAsync", "Lim.GitRestApi.IIssuesRestApi<Octokit.Repository, Octokit.Issue, IssueComment>.GetIssueCommentsAsync", "Lim.GitRestApi.IDeveloperIdentityTransformer<Account>.GetDeveloperIdentityAsync", "Lim.GitRestApi.ITypedConsumableProvider<Lim.Common.DotNET.Repository>.GetConsumablesAsync", "Lim.GitRestApi.ITypedConsumableProvider<Lim.Common.DotNET.Repository>.GetActivityFactorAsync", "Lim.GitRestApi.ITypedConsumableProvider<Lim.Common.DotNET.Project>.GetConsumablesAsync", "Lim.GitRestApi.ITypedConsumableProvider<Lim.Common.DotNET.Project>.GetActivityFactorAsync"], ["(await (await _restApi.GetProjectsAsync(server)).WhereAsync(repository => RepositoryHasIssuesAsync(server, repository)))\n                .Select(\n                    repository => new Project\n                    {\n                        Id = repository.Name,\n                        Name = repository.Name,\n                        ServerUrl = server.Url,\n                        Url = repository.HtmlUrl\n                    }\n                )\n                .ToList", "(await (await _restApi.GetProjectsAsync(server)).WhereAsync(repository => RepositoryHasIssuesAsync(server, repository)))\n                .Select", "(await _restApi.GetProjectsAsync(server)).WhereAsync", "RepositoryHasIssuesAsync", "TransformIssueAsync", "url.TrimEnd", "UrlUtils.ToOneSegment(url)\n                    .TrimEnd", "UrlUtils.ToOneSegment", "(await _restApi.GetRepositoriesAsync(server))\n                .Select(\n                    repository => TransformRepository(server, repository)\n                )\n                .ToList", "(await _restApi.GetRepositoriesAsync(server))\n                .Select", "TransformRepository", "GetDeveloperIdentityKeyAsync", "GetPullRequestCommentsAsync", "GetReviewerIdentitiesKeysAsync", "containedCommitsSha.AddIfNotNullOrEmpty", "containedCommitsSha.AddRange", "(await _restApi.GetPullRequestCommitsAsync(repository, pullRequest.Number)).Select", "_restApi.GetPullRequestCommitsAsync", "comments.ToList", "(await _restApi.GetLanguagesAsync(repository))\n                .Select(repositoryLanguage => repositoryLanguage.Name)\n                .Select(\n                    languageName => languageName switch\n                    {\n                        \"C#\" => nameof(Language.CSharp),\n                        \"C++\" => nameof(Language.CPlusPlus),\n                        \"Visual Basic .NET\" => nameof(Language.VisualBasic),\n                        \"Objective-C\" => nameof(Language.ObjectiveC),\n                        _ => languageName\n                    }\n                )\n                .Select(EnumUtils.TryFromString<Language>)\n                .WhereHasValue()\n                .ToHashSet", "(await _restApi.GetLanguagesAsync(repository))\n                .Select(repositoryLanguage => repositoryLanguage.Name)\n                .Select(\n                    languageName => languageName switch\n                    {\n                        \"C#\" => nameof(Language.CSharp),\n                        \"C++\" => nameof(Language.CPlusPlus),\n                        \"Visual Basic .NET\" => nameof(Language.VisualBasic),\n                        \"Objective-C\" => nameof(Language.ObjectiveC),\n                        _ => languageName\n                    }\n                )\n                .Select(EnumUtils.TryFromString<Language>)\n                .WhereHasValue", "(await _restApi.GetLanguagesAsync(repository))\n                .Select(repositoryLanguage => repositoryLanguage.Name)\n                .Select(\n                    languageName => languageName switch\n                    {\n                        \"C#\" => nameof(Language.CSharp),\n                        \"C++\" => nameof(Language.CPlusPlus),\n                        \"Visual Basic .NET\" => nameof(Language.VisualBasic),\n                        \"Objective-C\" => nameof(Language.ObjectiveC),\n                        _ => languageName\n                    }\n                )\n                .Select", "(await _restApi.GetLanguagesAsync(repository))\n                .Select(repositoryLanguage => repositoryLanguage.Name)\n                .Select", "(await _restApi.GetLanguagesAsync(repository))\n                .Select", "nameof", "_vulnerabilitiesCountCache.GetOrAddAsync", "_restApi.GetTotalIssueCountAsync", "GitConventions.NormalizeBranchName", "JiraIssueKeyUtil.ExtractIssueKeys", "jiraIssuesKeys.Any", "jiraIssuesKeys.ToDictionaryGrouped", "(await (await _restApi.GetPullRequestCommentsAsync(repository, pullRequest.Number))\n                    .SelectAsync(\n                        async comment => new Comment\n                        {\n                            AuthorIdentityKey = await GetDeveloperIdentityKeyAsync(comment.User, repository.Server),\n                            Content = comment.Body,\n                            CreationTime = comment.CreatedAt.DateTime\n                        }\n                    )).Prepend(\n                    new Comment\n                    {\n                        AuthorIdentityKey = authorIdentityKey,\n                        Content = pullRequest.Body,\n                        CreationTime = pullRequest.CreatedAt.DateTime\n                    }\n                )\n                .ToList", "(await (await _restApi.GetPullRequestCommentsAsync(repository, pullRequest.Number))\n                    .SelectAsync(\n                        async comment => new Comment\n                        {\n                            AuthorIdentityKey = await GetDeveloperIdentityKeyAsync(comment.User, repository.Server),\n                            Content = comment.Body,\n                            CreationTime = comment.CreatedAt.DateTime\n                        }\n                    )).Prepend", "(await _restApi.GetPullRequestCommentsAsync(repository, pullRequest.Number))\n                    .SelectAsync", "_restApi.GetPullRequestCommentsAsync", "(await _restApi.GetIssueCommentsAsync(project, issueId))\n                .SelectAsync", "(\n                    await (await _restApi.GetPullRequestReviewsAsync(repository, pullRequest.Number))\n                        .SelectAsync(pullRequestReview => GetDeveloperIdentityKeyAsync(pullRequestReview.User, repository.Server))\n                )\n                .Concat(comments.Select(comment => comment.AuthorIdentityKey))\n                .Compact()\n                .Distinct()\n                .Where(developerIdentityKey => developerIdentityKey != authorIdentityKey)\n                .ToHashSet", "(\n                    await (await _restApi.GetPullRequestReviewsAsync(repository, pullRequest.Number))\n                        .SelectAsync(pullRequestReview => GetDeveloperIdentityKeyAsync(pullRequestReview.User, repository.Server))\n                )\n                .Concat(comments.Select(comment => comment.AuthorIdentityKey))\n                .Compact()\n                .Distinct()\n                .Where", "(\n                    await (await _restApi.GetPullRequestReviewsAsync(repository, pullRequest.Number))\n                        .SelectAsync(pullRequestReview => GetDeveloperIdentityKeyAsync(pullRequestReview.User, repository.Server))\n                )\n                .Concat(comments.Select(comment => comment.AuthorIdentityKey))\n                .Compact()\n                .Distinct", "(\n                    await (await _restApi.GetPullRequestReviewsAsync(repository, pullRequest.Number))\n                        .SelectAsync(pullRequestReview => GetDeveloperIdentityKeyAsync(pullRequestReview.User, repository.Server))\n                )\n                .Concat(comments.Select(comment => comment.AuthorIdentityKey))\n                .Compact", "(\n                    await (await _restApi.GetPullRequestReviewsAsync(repository, pullRequest.Number))\n                        .SelectAsync(pullRequestReview => GetDeveloperIdentityKeyAsync(pullRequestReview.User, repository.Server))\n                )\n                .Concat", "(await _restApi.GetPullRequestReviewsAsync(repository, pullRequest.Number))\n                        .SelectAsync", "_restApi.GetPullRequestReviewsAsync", "comments.Select", "participantIdentitiesKeys.Add", "_restApi.GetIssueTimelineAsync", "(await issueTimeLine\n                    .Where(item => item.Event == EventInfoState.Assigned)\n                    .Select(item => item.Actor)\n                    .Distinct()\n                    .SelectAsync(async actor => await GetDeveloperIdentityKeyAsync(actor, project.Server)))\n                .Compact()\n                .ToHashSet", "(await issueTimeLine\n                    .Where(item => item.Event == EventInfoState.Assigned)\n                    .Select(item => item.Actor)\n                    .Distinct()\n                    .SelectAsync(async actor => await GetDeveloperIdentityKeyAsync(actor, project.Server)))\n                .Compact", "issueTimeLine\n                    .Where(item => item.Event == EventInfoState.Assigned)\n                    .Select(item => item.Actor)\n                    .Distinct()\n                    .SelectAsync", "issueTimeLine\n                    .Where(item => item.Event == EventInfoState.Assigned)\n                    .Select(item => item.Actor)\n                    .Distinct", "issueTimeLine\n                    .Where(item => item.Event == EventInfoState.Assigned)\n                    .Select", "issueTimeLine\n                    .Where", "GetIssueCommentsAsync", "issue.Number.ToString", "participantIdentitiesKeys.AddRange", "comments.Select(comment => comment.AuthorIdentityKey)\n                    .Where", "issueTimeLine.Where(timelineEvent => timelineEvent.Event == EventInfoState.Crossreferenced && timelineEvent.Source != null)\n                .Select(timelineEvent => timelineEvent.Source.Issue)\n                .ToList", "issueTimeLine.Where(timelineEvent => timelineEvent.Event == EventInfoState.Crossreferenced && timelineEvent.Source != null)\n                .Select", "issueTimeLine.Where", "crossReferences\n                .Where(crossReference => crossReference.HtmlUrl.Contains(\"pull\"))\n                .Select(pr => new KeyValuePair<string, string>(pr.Repository.HtmlUrl, pr.Number.ToString()))\n                .ToHashSet", "crossReferences\n                .Where(crossReference => crossReference.HtmlUrl.Contains(\"pull\"))\n                .Select", "crossReferences\n                .Where", "crossReference.HtmlUrl.Contains", "pr.Number.ToString", "issue.Labels\n                    .Select(label => label.Name)\n                    .ToHashSet", "issue.Labels\n                    .Select", "participantIdentitiesKeys.Compact", "Task.FromResult", "vulnerabilitiesCountCacheBuilder", "TimeSpan.FromHours"], false, false, false, false, ["C#", "C++", "Visual Basic .NET", "Objective-C", "#L", "", "pull"], false, 0, 0, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, false], ["GithubApiExtensions", "Lim.GitRestApi.GithubApiExtensions", [], [], "src/Lim.GitRestApi/Providers/Github/GithubRestApi.cs", 25, 0, {}, [], ["GetUserAsync", "GraphqlAsync", "IsOpen"], ["System", "System.Collections.Generic", "System.Linq", "System.Net", "System.Net.Http", "System.Threading.Tasks", "Infrastructure.Dotnet.Common", "JetBrains.Annotations", "Lim.Common.DotNET", "Microsoft.Extensions.Configuration", "Microsoft.Extensions.Logging", "Microsoft.VisualStudio.Services.Common", "Newtonsoft.Json.Linq", "Octokit", "Octokit.Internal", "RestSharp", "Lim.Common.DotNET.GitTag", "Octokit.Issue", "Lim.Common.DotNET.Project", "Octokit.PullRequest", "Lim.Common.DotNET.Repository"], false, false, ["UsedImplicitly"], false, false, [], {}, [], 0, false, false, false, 3, 1.0, [], 477.0, 127, 100.0, 100.0, 0, 0, false, false, true, true, "public", false, [], ["client.Connection.Get<User>", "TimeSpan.FromSeconds", "request.AddHeader", "request.AddJsonBody", "restClient.SafeExecuteTaskAsync", "response.FormatErrorResponse", "response.AsJObject", "jObject.ContainsKey", "jObject![\"errors\"]\n                !.Any", "errorToken![\"type\"]\n                    !.Value<string>", "jObject.ToString"], false, false, false, false, ["/graphql", "Authorization", "Accept", "application/vnd.github.vixen-preview+json", "graphql", "errors", "type", "RATE_LIMITED"], false, 0, 0, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, false], ["GraphqlRateLimitExceededException", "Lim.GitRestApi.GraphqlRateLimitExceededException", ["System.Exception"], [], "src/Lim.GitRestApi/Providers/Github/GithubRestApi.cs", 72, 0, {}, [], ["GraphqlRateLimitExceededException"], ["System", "System.Collections.Generic", "System.Linq", "System.Net", "System.Net.Http", "System.Threading.Tasks", "Infrastructure.Dotnet.Common", "JetBrains.Annotations", "Lim.Common.DotNET", "Microsoft.Extensions.Configuration", "Microsoft.Extensions.Logging", "Microsoft.VisualStudio.Services.Common", "Newtonsoft.Json.Linq", "Octokit", "Octokit.Internal", "RestSharp", "Lim.Common.DotNET.GitTag", "Octokit.Issue", "Lim.Common.DotNET.Project", "Octokit.PullRequest", "Lim.Common.DotNET.Repository"], false, false, [], false, false, [], {}, [], 0, false, false, false, 1, 1.0, [], 20.0, 20, 0.0, 100.0, 1, 0, true, false, false, false, "internal", false, [], [], false, true, false, false, [], false, 0, 0, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, false], ["GithubRestApi", "Lim.GitRestApi.GithubRestApi", [], ["Lim.GitRestApi.IGithubRestApi"], "src/Lim.GitRestApi/Providers/Github/GithubRestApi.cs", 79, 0, {"_configureUntrustedCertificatePolicy": "???.IConfigureUntrustedCertificatePolicy", "_logger": "???.ILogger<GithubRestApi>", "_serverRestApiBarrier": "Lim.GitRestApi.ServerRestApiBarrier"}, ["_configureUntrustedCertificatePolicy", "_logger", "_serverRestApiBarrier"], ["GithubRestApi", "VerifyConnectionAsync", "GetUserAsync", "GetPullRequestCommentsAsync", "GetPullRequestIssueKeys", "GetRepositoriesAsync", "GetRepositoryAsync", "GetPullRequestsAsync", "GetPullRequestReviewsAsync", "GetPullRequestCommitsAsync", "GetRepositoryContributorsAsync", "GetProjectContributorsAsync", "GetLanguagesAsync", "CreateIssueAsync", "IsUserProjectMemberAsync", "GetPullRequestAsync", "GetProjectsAsync", "GetIssuesAsync", "GetIssueCommentsAsync", "GetIssueAsync", "GetIssueTimelineAsync", "GetVulnerabilitiesCountAsync", "GetTotalIssueCountAsync", "GetRepositoryBranchesAsync", "GetRepositoryTagsAsync", "GetContributorsAsync", "GetPagedAsync", "GetIssuesPageAsync", "OrganizationFromUrl", "FixBaseUrl", "ExecuteAsync"], ["System", "System.Collections.Generic", "System.Linq", "System.Net", "System.Net.Http", "System.Threading.Tasks", "Infrastructure.Dotnet.Common", "JetBrains.Annotations", "Lim.Common.DotNET", "Microsoft.Extensions.Configuration", "Microsoft.Extensions.Logging", "Microsoft.VisualStudio.Services.Common", "Newtonsoft.Json.Linq", "Octokit", "Octokit.Internal", "RestSharp", "Lim.Common.DotNET.GitTag", "Octokit.Issue", "Lim.Common.DotNET.Project", "Octokit.PullRequest", "Lim.Common.DotNET.Repository"], false, false, ["UsedImplicitly"], false, false, [], {"_configureUntrustedCertificatePolicy": [], "_logger": [], "_serverRestApiBarrier": []}, [], 0, false, false, false, 37, 1.0, [], 504.8918918918919, 278, 5.405405405405405, 72.97297297297297, 1, 0, false, false, false, true, "public", false, ["Lim.GitRestApi.GithubApiExtensions.GetUserAsync", "Lim.GitRestApi.GithubApiExtensions.GraphqlAsync", "Lim.GitRestApi.ServerRestApiBarrier.BoundedExecuteAsync"], ["UrlUtils.GetSegments(server.Url)\n                    .ToList", "UrlUtils.GetSegments", "UrlUtils.VerifyDomain", "ExecuteAsync", "client.User.Current", "authenticatedUser.Login.EqualsIgnoreCase", "authenticatedUser.Email.EqualsIgnoreCase", "_logger.LogInformation", "segments.Last", "client.Organization.Get", "exception.ToStringShort", "client.PullRequest.ReviewComment.GetAll", "string.IsNullOrEmpty", "identityString.Contains", "client.User.Get", "client.Repository.GetAllForOrg", "client.Repository.Get", "GetPagedAsync<PullRequest>", "client.PullRequest.GetAllForRepository", "client.PullRequest.Review.GetAll", "client.PullRequest.Commits", "client.Repository.GetAllLanguages", "issue.Assignees.Add", "issue.Labels.AddRange", "client.Issue.Create", "client.Organization.Member.CheckMember", "client.PullRequest.Get", "issuesWithOrdinals.None", "Array.Empty<Issue>", "issuesWithOrdinals.Select(tuple => tuple.Item1)\n                            .Where(issue => issue.PullRequest == null)\n                            .ToList", "issuesWithOrdinals.Select(tuple => tuple.Item1)\n                            .Where", "issuesWithOrdinals.Select", "issues.Any", "client.Issue.Comment.GetAllForIssue", "int.Parse", "client.Issue.Get", "client.Issue.Timeline.GetAllForIssue", "vulnerabilityAlerts[\"nodes\"]!\n                            .Children", "dismissedAt!.Value<string>", "vulnerability[\"securityVulnerability\"]![\"severity\"]!\n                                .Value<string>", "vulnerabilitiesCountByLevel.AddOrUpdate", "vulnerabilityAlerts[\"pageInfo\"]![\"hasNextPage\"]!\n                            .Value<bool>", "vulnerabilityAlerts[\"pageInfo\"]![\"startCursor\"]!\n                                .Value<string>", "(await client.GraphqlAsync(\n                    GithubGraphqlQueries.TotalIssuesCount,\n                    new Dictionary<string, object>\n                    {\n                        {\"owner\", OrganizationFromUrl(server)},\n                        {\"repository_name\", repositoryName}\n                    }\n                ))[\"data\"]![\"repository\"]![\"issues\"]![\"totalCount\"]!.Value<int>", "(await client.GraphqlAsync(\n                        GithubGraphqlQueries.GetRefs,\n                        new Dictionary<string, object>\n                        {\n                            {\"owner\", OrganizationFromUrl(repository.Server)},\n                            {\"repository_name\", repository.Name},\n                            {\"ref_type\", \"refs/heads/\"},\n                            {\"count\", 20},\n                            {\"query\", query}\n                        }\n                    ))[\"data\"]![\"repository\"]![\"refs\"]![\"edges\"]!\n                    .Select(\n                        edge => new GitBranch\n                        {\n                            Name = edge[\"node\"]![\"name\"]!.Value<string>(),\n                            HeadSha = edge[\"node\"]![\"target\"]![\"oid\"]!.Value<string>()\n                        }\n                    )\n                    .ToList", "(await client.GraphqlAsync(\n                        GithubGraphqlQueries.GetRefs,\n                        new Dictionary<string, object>\n                        {\n                            {\"owner\", OrganizationFromUrl(repository.Server)},\n                            {\"repository_name\", repository.Name},\n                            {\"ref_type\", \"refs/heads/\"},\n                            {\"count\", 20},\n                            {\"query\", query}\n                        }\n                    ))[\"data\"]![\"repository\"]![\"refs\"]![\"edges\"]!\n                    .Select", "edge[\"node\"]![\"name\"]!.Value<string>", "edge[\"node\"]![\"target\"]![\"oid\"]!.Value<string>", "(await client.GraphqlAsync(\n                        GithubGraphqlQueries.GetRefs,\n                        new Dictionary<string, object>\n                        {\n                            {\"owner\", OrganizationFromUrl(repository.Server)},\n                            {\"repository_name\", repository.Name},\n                            {\"ref_type\", \"refs/tags/\"},\n                            {\"count\", 20},\n                            {\"query\", query}\n                        }\n                    ))[\"data\"]![\"repository\"]![\"refs\"]![\"edges\"]!\n                    .Select(\n                        edge => new GitTag\n                        {\n                            Name = edge[\"node\"]![\"name\"]!.Value<string>(),\n                            HeadSha = edge[\"node\"]![\"target\"]![\"commitResourcePath\"]!.Value<string>()\n                                ?.Split(\"/\")\n                                .Last()\n                        }\n                    )\n                    .ToList", "(await client.GraphqlAsync(\n                        GithubGraphqlQueries.GetRefs,\n                        new Dictionary<string, object>\n                        {\n                            {\"owner\", OrganizationFromUrl(repository.Server)},\n                            {\"repository_name\", repository.Name},\n                            {\"ref_type\", \"refs/tags/\"},\n                            {\"count\", 20},\n                            {\"query\", query}\n                        }\n                    ))[\"data\"]![\"repository\"]![\"refs\"]![\"edges\"]!\n                    .Select", "edge[\"node\"]![\"target\"]![\"commitResourcePath\"]!.Value<string>", ".Split(\"/\")\n                                .Last", ".Split", "client.Repository.GetAllContributors", "getPageAsync", "items\n                .Select((pullRequest, index) => (PullRequest: pullRequest, OrdinalId: (startPage - 1) * pageSize + index + 1))\n                .Where(tuple => tuple.OrdinalId > fromId)\n                .ToList", "items\n                .Select((pullRequest, index) => (PullRequest: pullRequest, OrdinalId: (startPage - 1) * pageSize + index + 1))\n                .Where", "items\n                .Select", "GetPagedAsync<Issue>", "client.Issue.GetAllForRepository", "UrlUtils.GetSegments(server.Url)\n                .First", "uri.Host.EndsWith", "asyncFunc"], false, false, false, false, ["https://github.com", "Failed to connect to Github at {url}", "owner", "repository_name", "next_cursor", "data", "repository", "vulnerabilityAlerts", "nodes", "dismissedAt", "securityVulnerability", "severity", "LOW", "MODERATE", "HIGH", "CRITICAL", "pageInfo", "hasNextPage", "startCursor", "issues", "totalCount", "ref_type", "refs/heads/", "count", "query", "refs", "edges", "node", "name", "target", "oid", "refs/tags/", "commitResourcePath", "/", "github.com", "/api/v3/", "lim", "Rate limit exceeded for github access", "Rate limit exceeded for github access. Need to wait another {minutes} minutes"], false, 0, 0, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, false], ["GitlabDeveloperIdentityTransformer", "Lim.GitRestApi.GitlabDeveloperIdentityTransformer", [], ["Lim.GitRestApi.IGitlabDeveloperIdentityTransformer"], "src/Lim.GitRestApi/Providers/Gitlab/GitlabDeveloperIdentityTransformer.cs", 9, 0, {"_developerIdentityProvider": "Lim.GitRestApi.IDeveloperIdentityProvider"}, ["_developerIdentityProvider"], ["GitlabDeveloperIdentityTransformer", "GetDeveloperIdentityAsync", "Transform"], ["System.Collections.Generic", "System.Linq", "System.Threading.Tasks", "GitLabApiClient.Models", "Lim.Common.DotNET"], false, false, [], false, false, [], {"_developerIdentityProvider": []}, [], 0, false, false, false, 3, 1.0, [], 299.0, 258, 0.0, 66.66666666666667, 1, 0, false, false, false, true, "public", false, ["Lim.GitRestApi.IDeveloperIdentityProvider.GetOrCreateDeveloperAsync"], ["identities.FirstOrDefault"], false, false, false, false, ["GitlabDisplayName", "GitlabAvatarUrl"], false, 0, 0, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, false], ["GitlabProvider", "Lim.GitRestApi.GitlabProvider", [], ["Lim.GitRestApi.IRepositoriesProvider", "Lim.GitRestApi.IProjectsProvider"], "src/Lim.GitRestApi/Providers/Gitlab/GitlabProvider.cs", 17, 0, {"_developerIdentityTransformer": "Lim.GitRestApi.IGitlabDeveloperIdentityTransformer", "_restApi": "Lim.GitRestApi.IGitlabRestApi"}, ["_developerIdentityTransformer", "_restApi"], ["GitlabProvider", "Lim.GitRestApi.ITypedConsumableProvider<Lim.Common.DotNET.Project>.GetConsumablesAsync", "GetActivityFactorAsync", "GetIssuesAsync", "GetIssueAsync", "CreateIssueAsync", "IsUserProjectMemberAsync", "NormalizedUrl", "VerifyConnectionAsync", "Lim.GitRestApi.ITypedConsumableProvider<Lim.Common.DotNET.Repository>.GetConsumablesAsync", "GetRepositoryAsync", "GetPullRequestsAsync", "GetRepositoryFilePathsAsync", "GetPullRequestMutableDetails", "GetRepositoryBranchesAsync", "GetRepositoryTagsAsync", "BuildUrl", "RepositoryHasIssues", "TransformRepository", "TransformIssueAsync", "GetIssueCommentsAsync", "GetDeveloperIdentityKeyAsync", "GetReviewerIdentitiesKeysAsync", "GetRepositoriesAsync", "GetRepositoryActivityFactorAsync", "GetRepositoryLanguagesAsync", "GetVulnerabilitiesCountAsync", "GetProjectsAsync", "GetProjectActivityFactorAsync"], ["System.Collections.Generic", "System.Linq", "System.Threading.Tasks", "AsyncUtilities", "GitLabApiClient.Models", "GitLabApiClient.Models.Issues.Responses", "GitLabApiClient.Models.MergeRequests.Responses", "GitLabApiClient.Models.Notes.Responses", "Infrastructure.Dotnet.Common", "JetBrains.Annotations", "Lim.Common.DotNET", "GitLabApiClient.Models.Issues.Responses.Issue", "Lim.Common.DotNET.Issue"], false, false, [], false, false, [], {"_developerIdentityTransformer": [], "_restApi": []}, ["UsedImplicitly"], 0, false, false, false, 30, 1.0, [], 298.7, 100, 3.3333333333333335, 53.333333333333336, 1, 0, false, false, false, true, "public", false, ["Lim.GitRestApi.IIssuesRestApi<GitLabApiClient.Models.Projects.Responses.Project, GitLabApiClient.Models.Issues.Responses.Issue, GitLabApiClient.Models.Notes.Responses.Note>.GetProjectsAsync", "Lim.GitRestApi.IGitlabRestApi.GetProjectMembersAsync", "Lim.GitRestApi.IIssuesRestApi<GitLabApiClient.Models.Projects.Responses.Project, GitLabApiClient.Models.Issues.Responses.Issue, GitLabApiClient.Models.Notes.Responses.Note>.GetIssuesAsync", "Lim.GitRestApi.IIssuesRestApi<GitLabApiClient.Models.Projects.Responses.Project, GitLabApiClient.Models.Issues.Responses.Issue, GitLabApiClient.Models.Notes.Responses.Note>.GetIssueAsync", "Lim.GitRestApi.IIssuesRestApi<GitLabApiClient.Models.Projects.Responses.Project, GitLabApiClient.Models.Issues.Responses.Issue, GitLabApiClient.Models.Notes.Responses.Note>.CreateIssueAsync", "Lim.GitRestApi.IIssuesRestApi<GitLabApiClient.Models.Projects.Responses.Project, GitLabApiClient.Models.Issues.Responses.Issue, GitLabApiClient.Models.Notes.Responses.Note>.IsUserProjectMemberAsync", "Lim.GitRestApi.IConsumableRestApi.VerifyConnectionAsync", "Lim.GitRestApi.IGitRestApi<GitLabApiClient.Models.Projects.Responses.Project, GitLabApiClient.Models.MergeRequests.Responses.MergeRequest, GitLabApiClient.Models.Users.Responses.User, GitLabApiClient.Models.Notes.Responses.Note>.GetRepositoriesAsync", "Lim.GitRestApi.IGitRestApi<GitLabApiClient.Models.Projects.Responses.Project, GitLabApiClient.Models.MergeRequests.Responses.MergeRequest, GitLabApiClient.Models.Users.Responses.User, GitLabApiClient.Models.Notes.Responses.Note>.GetRepositoryAsync", "Lim.GitRestApi.IGitRestApi<GitLabApiClient.Models.Projects.Responses.Project, GitLabApiClient.Models.MergeRequests.Responses.MergeRequest, GitLabApiClient.Models.Users.Responses.User, GitLabApiClient.Models.Notes.Responses.Note>.GetPullRequestsAsync", "Lim.GitRestApi.IGitlabRestApi.GetPullRequestCommitsShaAsync", "Lim.GitRestApi.IGitlabRestApi.GetRepositoryFilesAsync", "Lim.GitRestApi.IGitRestApi<GitLabApiClient.Models.Projects.Responses.Project, GitLabApiClient.Models.MergeRequests.Responses.MergeRequest, GitLabApiClient.Models.Users.Responses.User, GitLabApiClient.Models.Notes.Responses.Note>.GetPullRequestAsync", "Lim.GitRestApi.IGitRestApi<GitLabApiClient.Models.Projects.Responses.Project, GitLabApiClient.Models.MergeRequests.Responses.MergeRequest, GitLabApiClient.Models.Users.Responses.User, GitLabApiClient.Models.Notes.Responses.Note>.GetRepositoryBranchesAsync", "Lim.GitRestApi.IGitRestApi<GitLabApiClient.Models.Projects.Responses.Project, GitLabApiClient.Models.MergeRequests.Responses.MergeRequest, GitLabApiClient.Models.Users.Responses.User, GitLabApiClient.Models.Notes.Responses.Note>.GetRepositoryTagsAsync", "Lim.GitRestApi.GitConventions.NormalizeBranchName", "Lim.GitRestApi.GitlabExtensions.ToAssignee", "Lim.GitRestApi.IGitlabRestApi.GetRelatedPullRequestsAsync", "Lim.GitRestApi.IIssuesRestApi<GitLabApiClient.Models.Projects.Responses.Project, GitLabApiClient.Models.Issues.Responses.Issue, GitLabApiClient.Models.Notes.Responses.Note>.GetIssueCommentsAsync", "Lim.GitRestApi.IDeveloperIdentityTransformer<GitLabApiClient.Models.Assignee>.GetDeveloperIdentityAsync", "Lim.GitRestApi.IGitlabRestApi.GetPullRequestReviewersAsync", "Lim.GitRestApi.ITypedConsumableProvider<Lim.Common.DotNET.Repository>.GetConsumablesAsync", "Lim.GitRestApi.ITypedConsumableProvider<Lim.Common.DotNET.Repository>.GetActivityFactorAsync", "Lim.GitRestApi.ITypedConsumableProvider<Lim.Common.DotNET.Project>.GetConsumablesAsync", "Lim.GitRestApi.ITypedConsumableProvider<Lim.Common.DotNET.Project>.GetActivityFactorAsync"], ["(await _restApi.GetProjectsAsync(server))\n                .Where(repository => RepositoryHasIssues(server, repository))\n                .Select(\n                    repository => new Project\n                    {\n                        Id = repository.PathWithNamespace,\n                        Name = repository.NameWithNamespace,\n                        ServerUrl = server.Url,\n                        Url = repository.WebUrl\n                    }\n                )\n                .ToList", "(await _restApi.GetProjectsAsync(server))\n                .Where(repository => RepositoryHasIssues(server, repository))\n                .Select", "(await _restApi.GetProjectsAsync(server))\n                .Where", "url.TrimEnd", "UrlUtils.ToOneSegment(url)\n                    .TrimEnd", "UrlUtils.ToOneSegment", "(await _restApi.GetRepositoriesAsync(server))\n                .Select(\n                    repository => TransformRepository(server, repository)\n                )\n                .ToList", "(await _restApi.GetRepositoriesAsync(server))\n                .Select", "containedCommitsSha.AddIfNotNullOrEmpty", "containedCommitsSha.AddRange", "(await _restApi.GetRepositoryFilesAsync(repository))\n                .Where(tree => tree.Type == \"blob\")\n                .Select(tree => tree.Path)\n                .ToList", "(await _restApi.GetRepositoryFilesAsync(repository))\n                .Where(tree => tree.Type == \"blob\")\n                .Select", "(await _restApi.GetRepositoryFilesAsync(repository))\n                .Where", "UrlUtils.GetDomain", "participantIdentitiesKeys.Add", "assigneeIdentitiesKeys.Add", "issue.Id.ToString", "participantIdentitiesKeys.AddRange", "comments.Select(comment => comment.AuthorIdentityKey)\n                    .Union(assigneeIdentitiesKeys)\n                    .Where", "comments.Select(comment => comment.AuthorIdentityKey)\n                    .Union", "comments.Select", "issue.Labels\n                    .ToHashSet", "issue.CreatedAt.ToUniversalTime", "comments.ToList", "participantIdentitiesKeys.Compact", "(await _restApi.GetIssueCommentsAsync(project, issueId))\n                .SelectAsync", "note.Author.ToAssignee", "note.CreatedAt.ToUniversalTime", "(await (await _restApi.GetPullRequestReviewersAsync(repository, mergeRequest.Id))\n                    .Where(assignee => assignee.Id != mergeRequest.Author.Id)\n                    .Select(async assignee => await GetDeveloperIdentityKeyAsync(assignee, repository.Server)))\n                .WhereNotNull()\n                .ToHashSet", "(await (await _restApi.GetPullRequestReviewersAsync(repository, mergeRequest.Id))\n                    .Where(assignee => assignee.Id != mergeRequest.Author.Id)\n                    .Select(async assignee => await GetDeveloperIdentityKeyAsync(assignee, repository.Server)))\n                .WhereNotNull", "(await _restApi.GetPullRequestReviewersAsync(repository, mergeRequest.Id))\n                    .Where(assignee => assignee.Id != mergeRequest.Author.Id)\n                    .Select", "(await _restApi.GetPullRequestReviewersAsync(repository, mergeRequest.Id))\n                    .Where", "reviewerIdentitiesKeys.AddIfNotNull", "Task.FromResult"], false, false, false, false, ["blob", "#L", ""], false, 0, 0, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, false], ["GitlabExtensions", "Lim.GitRestApi.GitlabExtensions", [], [], "src/Lim.GitRestApi/Providers/Gitlab/GitlabProvider.cs", 263, 0, {}, [], ["ToAssignee"], ["System.Collections.Generic", "System.Linq", "System.Threading.Tasks", "AsyncUtilities", "GitLabApiClient.Models", "GitLabApiClient.Models.Issues.Responses", "GitLabApiClient.Models.MergeRequests.Responses", "GitLabApiClient.Models.Notes.Responses", "Infrastructure.Dotnet.Common", "JetBrains.Annotations", "Lim.Common.DotNET", "GitLabApiClient.Models.Issues.Responses.Issue", "Lim.Common.DotNET.Issue"], false, false, [], false, false, [], {}, [], 0, false, false, false, 2, 1.0, [], 326.0, 326, 100.0, 100.0, 0, 0, false, false, true, false, "public", false, [], [], false, false, false, false, [], false, 0, 0, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, false], ["GitlabRestApi", "Lim.GitRestApi.GitlabRestApi", [], ["Lim.GitRestApi.IGitlabRestApi"], "src/Lim.GitRestApi/Providers/Gitlab/GitlabRestApi.cs", 26, 0, {"_configureUntrustedCertificatePolicy": "???.IConfigureUntrustedCertificatePolicy", "_logger": "???.ILogger<GitlabRestApi>", "_serverRestApiBarrier": "Lim.GitRestApi.ServerRestApiBarrier"}, ["_configureUntrustedCertificatePolicy", "_logger", "_serverRestApiBarrier"], ["GitlabRestApi", "VerifyConnectionAsync", "GetRepositoriesAsync", "GetPullRequestsAsync", "GetPullRequestAsync", "GetPullRequestCommentsAsync", "GetPullRequestCommitsShaAsync", "GetPullRequestIssueKeys", "GetRepositoryBranchesAsync", "GetRepositoryTagsAsync", "GetIssueCommentsAsync", "GetRepositoryAsync", "GetRepositoryFilesAsync", "GetProjectMembersAsync", "GetPullRequestReviewersAsync", "GetRelatedPullRequestsAsync", "GetUserAsync", "GetProjectsAsync", "GetIssuesAsync", "GetIssueAsync", "CreateIssueAsync", "IsUserProjectMemberAsync", "GroupFromUrl", "ExecuteAsync", "NoRepositoryForProjectException"], ["System", "System.Collections.Generic", "System.Linq", "System.Net", "System.Net.Http", "System.Threading.Tasks", "GitLabApiClient", "GitLabApiClient.Models", "GitLabApiClient.Models.Issues.Requests", "GitLabApiClient.Models.Issues.Responses", "GitLabApiClient.Models.MergeRequests.Requests", "GitLabApiClient.Models.MergeRequests.Responses", "GitLabApiClient.Models.Notes.Responses", "GitLabApiClient.Models.Trees.Responses", "GitLabApiClient.Models.Users.Responses", "Infrastructure.Dotnet.Common", "Lim.Common.DotNET", "Microsoft.Extensions.Configuration", "Microsoft.Extensions.Logging", "RestSharp.Extensions", "GitLabApiClient.Models.Projects.Responses.Project", "GitLabApiClient.Models.Issues.Responses.Issue"], false, false, [], false, false, [], {"_configureUntrustedCertificatePolicy": [], "_logger": [], "_serverRestApiBarrier": []}, [], 0, false, false, false, 26, 1.0, [], 374.0, 182, 7.6923076923076925, 84.61538461538461, 1, 0, false, false, false, true, "public", false, ["Lim.GitRestApi.ServerRestApiBarrier.BoundedExecuteAsync"], ["ExecuteAsync", "client.Users.GetCurrentSessionAsync", "currentSession.Username.EqualsIgnoreCase", "currentSession.Email.EqualsIgnoreCase", "_logger.LogInformation", "client.Groups.GetAsync", "exception.ToStringShort", "(await ExecuteAsync(\n                    repository.Server,\n                    client => client.MergeRequests.GetAsync(\n                        repository.Id,\n                        options =>\n                        {\n                            options.State = QueryMergeRequestState.All;\n                            options.Scope = Scope.All;\n                            options.Order = MergeRequestsOrder.CreatedAt;\n                            options.SortOrder = SortOrder.Ascending;\n                        }\n                    )\n                ))\n                .Where(\n                    mergeRequest =>\n                        mergeRequest.TargetBranch == branch &&\n                        mergeRequest.Id > fromPullRequestOrdinalId &&\n                        mergeRequest.Id <= fromPullRequestOrdinalId + pageSize\n                )\n                .ToList", "(await ExecuteAsync(\n                    repository.Server,\n                    client => client.MergeRequests.GetAsync(\n                        repository.Id,\n                        options =>\n                        {\n                            options.State = QueryMergeRequestState.All;\n                            options.Scope = Scope.All;\n                            options.Order = MergeRequestsOrder.CreatedAt;\n                            options.SortOrder = SortOrder.Ascending;\n                        }\n                    )\n                ))\n                .Where", "client.MergeRequests.GetAsync", "(\n                await ExecuteAsync(\n                    repository.Server,\n                    client =>\n                        client.MergeRequests.GetAsync(repository.Id, options => options.MergeRequestsIds = new List<int> {pullRequestId})\n                )\n            ).FirstOrDefault", "(await client.MergeRequests.GetNotesAsync(repository.Id, pullRequestId)).ToList", "client.MergeRequests.GetNotesAsync", "Task.FromResult", "Array.Empty<string>", "(await client.Branches.GetAsync(\n                        repository.Id,\n                        options =>\n                        {\n                            options.Search = query;\n                        }\n                    ))\n                    .Select(\n                        branch => new GitBranch\n                        {\n                            Name = branch.Name,\n                            HeadSha = branch.Commit.Id\n                        }\n                    )\n                    .ToList", "(await client.Branches.GetAsync(\n                        repository.Id,\n                        options =>\n                        {\n                            options.Search = query;\n                        }\n                    ))\n                    .Select", "client.Branches.GetAsync", "(await client.Tags.GetAsync(\n                        repository.Id,\n                        options =>\n                        {\n                            options.Search = query;\n                        }\n                    ))\n                    .Select(\n                        branch => new GitTag\n                        {\n                            Name = branch.Name,\n                            HeadSha = branch.Commit.Id\n                        }\n                    )\n                    .ToList", "(await client.Tags.GetAsync(\n                        repository.Id,\n                        options =>\n                        {\n                            options.Search = query;\n                        }\n                    ))\n                    .Select", "client.Tags.GetAsync", "(await client.Issues.GetNotesAsync(project.Id, int.Parse(issueId))).ToList", "client.Issues.GetNotesAsync", "int.Parse", "client.Projects.GetAsync", "repository.Id.UrlEncode", "client.Trees.GetAsync", ".ToList", "client.Groups.GetMembersAsync", "client.Users.GetAsync", "(await ExecuteAsync(\n                    project.Server,\n                    client => client.Issues.GetAllAsync(\n                        project.Id,\n                        null,\n                        options =>\n                        {\n                            options.State = IssueState.All;\n                            options.Scope = Scope.All;\n                            options.Order = IssuesOrder.CreatedAt;\n                            options.SortOrder = SortOrder.Ascending;\n                        }\n                    )\n                ))\n                .Where(issue => issue.Id > fromIssueOrdinalId && issue.Id <= fromIssueOrdinalId + pageSize)\n                .ToList", "(await ExecuteAsync(\n                    project.Server,\n                    client => client.Issues.GetAllAsync(\n                        project.Id,\n                        null,\n                        options =>\n                        {\n                            options.State = IssueState.All;\n                            options.Scope = Scope.All;\n                            options.Order = IssuesOrder.CreatedAt;\n                            options.SortOrder = SortOrder.Ascending;\n                        }\n                    )\n                ))\n                .Where", "client.Issues.GetAllAsync", "client.Issues.GetAsync", "client.Issues.CreateAsync", "issueProperties.Labels.ToList", "(await ExecuteAsync(\n                server,\n                client =>\n                {\n                    if (server.Provider == Provider.GitlabServer)\n                    {\n                        return client.Projects.GetAsync(\n                            options =>\n                            {\n                                if (withIssuesEnabled.HasValue)\n                                {\n                                    options.WithIssuesEnabled = withIssuesEnabled.Value;\n                                }\n                            }\n                        );\n                    }\n\n                    var group = GroupFromUrl(server);\n                    return client.Groups.GetProjectsAsync(group, options => options.IncludeSubgroups = true);\n                }\n            )).ToList", "client.Groups.GetProjectsAsync", "UrlUtils.GetSegments(server.Url)\n                .First", "UrlUtils.GetSegments", "_configureUntrustedCertificatePolicy.SetRemoteCertificateValidationCallback", "UrlUtils.GetDomain", "asyncFunc", "gitLabException.Message.Contains"], false, false, false, false, ["Failed to connect to bitbucket server at {url}", "?statistics=true", "404"], false, 0, 0, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, false], ["IssuesConstants", "Lim.GitRestApi.IssuesConstants", [], [], "src/Lim.GitRestApi/Providers/IssuesConstants.cs", 6, 0, {"ClosedItemsStates": "System.Collections.Generic.ISet<string>"}, [], [], ["System", "System.Collections.Generic"], false, false, [], false, false, [], {"ClosedItemsStates": []}, [], 0, false, false, false, 0, 0.0, [], 0.0, 0, 0.0, 0.0, 0, 0, false, false, true, false, "public", false, [], [], false, false, false, false, ["Close", "Closed", "Done", "Resolved", "Removed", "Deleted", "Locked"], false, 0, 0, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, false], ["JiraDeveloperIdentityTransformer", "Lim.GitRestApi.JiraDeveloperIdentityTransformer", [], ["Lim.GitRestApi.IJiraDeveloperIdentityTransformer"], "src/Lim.GitRestApi/Providers/Jira/JiraDeveloperIdentityTransformer.cs", 9, 0, {"_developerIdentityProvider": "Lim.GitRestApi.IDeveloperIdentityProvider"}, ["_developerIdentityProvider"], ["JiraDeveloperIdentityTransformer", "GetDeveloperIdentityAsync", "Transform"], ["System.Collections.Generic", "System.Linq", "System.Threading.Tasks", "Atlassian.Jira", "Lim.Common.DotNET"], false, false, [], false, false, [], {"_developerIdentityProvider": []}, [], 0, false, false, false, 3, 1.0, [], 876.0, 693, 33.333333333333336, 66.66666666666667, 1, 0, false, false, false, true, "public", false, ["Lim.GitRestApi.IDeveloperIdentityProvider.GetOrCreateDeveloperAsync", "Lim.GitRestApi.GitConventions.UsernameFromEmail"], ["identities.FirstOrDefault", "string.IsNullOrWhiteSpace", "identities.Add"], false, false, false, false, ["JiraDisplayName", "JiraDescription", "JiraAccountId", "JiraAvatarUrl"], false, 0, 0, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, false], ["JiraIssueKeyUtil", "Lim.GitRestApi.JiraIssueKeyUtil", [], [], "src/Lim.GitRestApi/Providers/Jira/JiraIssueKeyUtil.cs", 9, 0, {"IssueKeyRegex": "System.Text.RegularExpressions.Regex"}, [], ["ProjectKeyFromIssueKey", "IssueOrdinalIdFromIssueKey", "ExtractIssueKeys"], ["System.Collections.Generic", "System.Linq", "System.Text.RegularExpressions", "Infrastructure.Dotnet.Common", "Lim.Common.DotNET"], false, false, [], false, false, [], {"IssueKeyRegex": []}, [], 0, false, false, false, 3, 1.0, [], 104.33333333333333, 103, 100.0, 100.0, 0, 0, false, false, true, false, "public", false, [], ["issueKey.Contains", "issueKey.Split(\"-\")\n                    .First", "issueKey.Split", "int.Parse", "issueKey.Split(\"-\")\n                    .Last", "IssueKeyRegex.AllMatches(\"id\", strings)\n                .ToHashSet", "IssueKeyRegex.AllMatches", "RegexUtils.GetCompiledRegex"], false, false, false, false, ["(?<id>[A-Z]+-\\d+)", "-", "id"], false, 0, 0, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, false], ["JiraProvider", "Lim.GitRestApi.JiraProvider", [], ["Lim.GitRestApi.IProjectsProvider"], "src/Lim.GitRestApi/Providers/Jira/JiraProvider.cs", 15, 0, {"_developerIdentityTransformer": "Lim.GitRestApi.IJiraDeveloperIdentityTransformer", "_restApi": "Lim.GitRestApi.IJiraRestApi"}, ["_developerIdentityTransformer", "_restApi"], ["JiraProvider", "NormalizedUrl", "VerifyConnectionAsync", "GetConsumablesAsync", "GetActivityFactorAsync", "GetIssuesAsync", "GetIssueAsync", "CreateIssueAsync", "IsUserProjectMemberAsync", "GetDeveloperIdentityKeyAsync", "TransformIssueAsync", "GetProjectsAsync", "GetProjectActivityFactorAsync"], ["System", "System.Collections.Generic", "System.Linq", "System.Threading.Tasks", "Atlassian.Jira", "Infrastructure.Dotnet.Common", "Lim.Common.DotNET", "Lim.Common.DotNET.Comment", "Lim.Common.DotNET.Issue", "Lim.Common.DotNET.IssueType", "Lim.Common.DotNET.Project"], false, false, [], false, false, [], {"_developerIdentityTransformer": [], "_restApi": []}, [], 0, false, false, false, 14, 1.0, [], 587.0, 124, 0.0, 64.28571428571429, 1, 0, false, false, false, true, "public", false, ["Lim.GitRestApi.IConsumableRestApi.VerifyConnectionAsync", "Lim.GitRestApi.IIssuesRestApi<Atlassian.Jira.Project, Atlassian.Jira.Issue, Atlassian.Jira.Comment>.GetProjectsAsync", "Lim.GitRestApi.IJiraRestApi.GetLatestIssueAsync", "Lim.GitRestApi.JiraIssueKeyUtil.IssueOrdinalIdFromIssueKey", "Lim.GitRestApi.IIssuesRestApi<Atlassian.Jira.Project, Atlassian.Jira.Issue, Atlassian.Jira.Comment>.GetIssuesAsync", "Lim.GitRestApi.IIssuesRestApi<Atlassian.Jira.Project, Atlassian.Jira.Issue, Atlassian.Jira.Comment>.GetIssueAsync", "Lim.GitRestApi.IIssuesRestApi<Atlassian.Jira.Project, Atlassian.Jira.Issue, Atlassian.Jira.Comment>.CreateIssueAsync", "Lim.GitRestApi.IIssuesRestApi<Atlassian.Jira.Project, Atlassian.Jira.Issue, Atlassian.Jira.Comment>.IsUserProjectMemberAsync", "Lim.GitRestApi.IJiraRestApi.GetUserByUsernameAsync", "Lim.GitRestApi.IJiraRestApi.GetUserByAccountIdAsync", "Lim.GitRestApi.IDeveloperIdentityTransformer<Atlassian.Jira.JiraUser>.GetDeveloperIdentityAsync", "Lim.GitRestApi.IJiraRestApi.GetIssueChangelogAsync", "Lim.GitRestApi.IJiraRestApi.GetDevStatusAsync", "Lim.GitRestApi.IJiraRestApi.GetIssueWatchersAsync", "Lim.GitRestApi.IIssuesRestApi<Atlassian.Jira.Project, Atlassian.Jira.Issue, Atlassian.Jira.Comment>.GetIssueCommentsAsync", "Lim.GitRestApi.ITypedConsumableProvider<Lim.Common.DotNET.Project>.GetConsumablesAsync", "Lim.GitRestApi.ITypedConsumableProvider<Lim.Common.DotNET.Project>.GetActivityFactorAsync"], ["url.TrimEnd", "UrlUtils.GetDomain", "(await (await _restApi.GetProjectsAsync(server))\n                    .SelectAsync(\n                        async project =>\n                        {\n                            var issueTypes = (await _restApi.GetIssueTypesAsync(server, project.Key))\n                                .Select(\n                                    type => new IssueType(type.Id, type.Name)\n                                    {\n                                        Description = type.Description,\n                                        IsSubTask = type.IsSubTask\n                                    }\n                                )\n                                .ToHashSet();\n\n                            var defaultIssueTypeId = IssueType.GuessDefault(issueTypes)\n                                ?.Id;\n\n                            return new Project\n                            {\n                                Id = project.Key,\n                                Name = project.Name,\n                                ServerUrl = server.Url,\n                                Url = $\"{server.Url}/projects/{project.Key}\",\n                                IssueTypes = issueTypes,\n                                DefaultIssueTypeId = defaultIssueTypeId\n                            };\n                        }\n                    ))\n                .ToList", "(await _restApi.GetProjectsAsync(server))\n                    .SelectAsync", "(await _restApi.GetIssueTypesAsync(server, project.Key))\n                                .Select(\n                                    type => new IssueType(type.Id, type.Name)\n                                    {\n                                        Description = type.Description,\n                                        IsSubTask = type.IsSubTask\n                                    }\n                                )\n                                .ToHashSet", "(await _restApi.GetIssueTypesAsync(server, project.Key))\n                                .Select", "_restApi.GetIssueTypesAsync", "IssueType.GuessDefault", "string.IsNullOrEmpty", "participantIdentitiesKeys.AddIfNotNull", ".SelectMany(detail => detail.PullRequests)\n                .WhereNotNull()\n                .ToHashSet", ".SelectMany(detail => detail.PullRequests)\n                .WhereNotNull", ".SelectMany", "(await (await _restApi.GetIssueWatchersAsync(project, issue.Key.Value))\n                    .SelectAsync(\n                        async watcher => await GetDeveloperIdentityKeyAsync(\n                            project.Server,\n                            watcher.Username,\n                            watcher.AccountId\n                        )\n                    ))\n                .Compact()\n                .ToHashSet", "(await (await _restApi.GetIssueWatchersAsync(project, issue.Key.Value))\n                    .SelectAsync(\n                        async watcher => await GetDeveloperIdentityKeyAsync(\n                            project.Server,\n                            watcher.Username,\n                            watcher.AccountId\n                        )\n                    ))\n                .Compact", "(await _restApi.GetIssueWatchersAsync(project, issue.Key.Value))\n                    .SelectAsync", "GetDeveloperIdentityKeyAsync", "participantIdentitiesKeys.AddRange", "(await changeLog?.SelectMany(changeLogItem => changeLogItem.Items)\n                    ?.Where(item => item.FieldName == \"assignee\")\n                    .Select(item => item.ToValue)\n                    .WhereNotNull()\n                    .SelectAsync(\n                        async assignee => await GetDeveloperIdentityKeyAsync(\n                            project.Server,\n                            $\"issue {issue.JiraIdentifier} assignee\"\n                        )\n                    ))\n                .Compact()\n                .ToHashSet", "(await changeLog?.SelectMany(changeLogItem => changeLogItem.Items)\n                    ?.Where(item => item.FieldName == \"assignee\")\n                    .Select(item => item.ToValue)\n                    .WhereNotNull()\n                    .SelectAsync(\n                        async assignee => await GetDeveloperIdentityKeyAsync(\n                            project.Server,\n                            $\"issue {issue.JiraIdentifier} assignee\"\n                        )\n                    ))\n                .Compact", ".Where(item => item.FieldName == \"assignee\")\n                    .Select(item => item.ToValue)\n                    .WhereNotNull()\n                    .SelectAsync", ".Where(item => item.FieldName == \"assignee\")\n                    .Select(item => item.ToValue)\n                    .WhereNotNull", ".Where(item => item.FieldName == \"assignee\")\n                    .Select", ".Where", "assigneeIdentitiesKeys.Add", "(await _restApi.GetIssueCommentsAsync(project, issue.Key.Value))\n                .SelectAsync(\n                    async comment => new Comment\n                    {\n                        AuthorIdentityKey = await GetDeveloperIdentityKeyAsync(\n                            project.Server,\n                            comment.Author,\n                            comment.AuthorUser.AccountId\n                        ),\n                        Content = comment.Body,\n                        CreationTime = comment.CreatedDate.GetValueOrDefault(DateTime.Now)\n                            .ToUniversalTime()\n                    }\n                )\n                .ToListAsync", "(await _restApi.GetIssueCommentsAsync(project, issue.Key.Value))\n                .SelectAsync", "comment.CreatedDate.GetValueOrDefault(DateTime.Now)\n                            .ToUniversalTime", "comment.CreatedDate.GetValueOrDefault", "comments.Select(comment => comment.AuthorIdentityKey)\n                    .Where", "comments.Select", "issue.CustomFields.ToDictionary", "fieldValue.Values.JoinToString", "nameof", "issue.Key.ToString", "issue.Labels\n                    .ToHashSet", "issue.Created.GetValueOrDefault", "IssuesConstants.ClosedItemsStates.Contains", "relatedPullRequests.Select(pr => new KeyValuePair<string, string>(pr.Destination.Repository.Url, pr.id))\n                    .ToHashSet", "relatedPullRequests.Select"], false, false, false, false, ["", "assignee", ";", "reporter", "reporterUser"], false, 0, 0, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, false], ["JiraRestApi", "Lim.GitRestApi.JiraRestApi", [], ["Lim.GitRestApi.IJiraRestApi"], "src/Lim.GitRestApi/Providers/Jira/JiraRestApi.cs", 20, 0, {"_configureUntrustedCertificatePolicy": "???.IConfigureUntrustedCertificatePolicy", "_logger": "???.ILogger<JiraRestApi>", "_serverRestApiBarrier": "Lim.GitRestApi.ServerRestApiBarrier"}, ["_configureUntrustedCertificatePolicy", "_logger", "_serverRestApiBarrier"], ["JiraRestApi", "VerifyConnectionAsync", "GetProjectsAsync", "GetIssuesAsync", "GetIssueCommentsAsync", "GetIssueChangelogAsync", "GetDevStatusAsync", "GetIssueWatchersAsync", "GetLatestIssueAsync", "GetIssueAsync", "CreateIssueAsync", "IsUserProjectMemberAsync", "GetIssueTypesAsync", "GetUserByUsernameAsync", "GetUserByAccountIdAsync", "ExecuteRawAsync", "ExecuteAsync"], ["System", "System.Collections.Generic", "System.Linq", "System.Threading.Tasks", "Atlassian.Jira", "Atlassian.Jira.Remote", "Infrastructure.Dotnet.Common", "JetBrains.Annotations", "Lim.Common.DotNET", "Microsoft.Extensions.Configuration", "Microsoft.Extensions.Logging", "RestSharp", "Atlassian.Jira.Comment", "Atlassian.Jira.Issue", "Atlassian.Jira.IssueType", "Atlassian.Jira.Project"], false, false, ["UsedImplicitly"], false, false, [], {"_configureUntrustedCertificatePolicy": [], "_logger": [], "_serverRestApiBarrier": []}, [], 0, false, false, false, 17, 1.0, [], 405.8235294117647, 303, 0.0, 88.23529411764706, 1, 0, false, false, false, true, "public", false, ["Lim.GitRestApi.ServerRestApiBarrier.BoundedExecuteAsync"], ["client.Projects.GetProjectsAsync", "_logger.LogInformation", "exception.ToStringShort", "ExecuteAsync", "client.Projects.GetProjectsAsync()\n                    .ToListAsync", "(await client.Issues.GetIssuesFromJqlAsync(\n                        $\"project = '{project.Id}' ORDER BY id ASC\",\n                        pageSize - fromIssueOrdinalId,\n                        fromIssueOrdinalId\n                    )).ToList", "client.Issues.GetIssuesFromJqlAsync", "client.Issues.GetCommentsAsync(issueId)\n                    .ToListAsync", "client.Issues.GetCommentsAsync", "client.Issues.GetChangeLogsAsync(issueId)\n                    .ToListAsync", "client.Issues.GetChangeLogsAsync", "client.Issues.GetWatchersAsync(issueId)\n                    .ToListAsync", "client.Issues.GetWatchersAsync", "(await client.Issues.GetIssuesFromJqlAsync(\n                    $\"project = '{project.Id}' ORDER BY id DESC\",\n                    1\n                )).FirstOrDefault", "client.Issues.GetIssueAsync", "issue.Labels.Add", "issueProperties.Labels.ToArray", "client.Issues.CreateIssueAsync", "client.Issues.AddWatcherAsync", "(await client.IssueTypes.GetIssueTypesForProjectAsync(projectKey)).ToList", "client.IssueTypes.GetIssueTypesForProjectAsync", "client.Users.GetUserAsync", "(await\n                ExecuteRawAsync<List<JiraUser>>(\n                    server,\n                    \"/rest/api/3/user/search\",\n                    false,\n                    (\"query\", identityString),\n                    (\"startAt\", \"0\"),\n                    (\"startAt\", \"0\"),\n                    (\"includeActive\", \"true\"),\n                    (\"includeInactive\", \"true\"),\n                    (\"maxResults\", \"1\")\n                )).FirstOrDefault", "request.AddQueryParameter", "client.RestClient.RestSharpClient.SafeExecuteTaskAsync", "response.FromJson<T>", "response.FormatErrorResponse", "Jira.CreateRestClient", "_configureUntrustedCertificatePolicy.SetRemoteCertificateValidationCallback", "asyncFunc"], false, false, false, false, ["Failed to connect to Jira server at {url}", "/rest/dev-status/1.0/issue/detail", "issueId", "applicationType", "stash", "dataType", "pullrequest", "/rest/api/3/user/search", "query", "startAt", "0", "includeActive", "true", "includeInactive", "maxResults", "1"], false, 0, 0, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, false], ["JiraWorkItemDevStatus", "Lim.GitRestApi.JiraWorkItemDevStatus", [], [], "src/Lim.GitRestApi/Providers/Jira/JiraWorkItemDevStatus.cs", 5, 0, {}, ["Detail"], ["Detail"], ["System.Collections.Generic"], false, false, [], false, false, [], {}, [], 1, false, false, false, 0, 0.0, [], 0.0, 0, 0.0, 100.0, 0, 0, false, false, false, false, "public", false, [], [], false, false, false, false, [], false, 1, 1, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, false], ["JiraRepository", "Lim.GitRestApi.JiraRepository", [], [], "src/Lim.GitRestApi/Providers/Jira/JiraWorkItemDevStatus.cs", 10, 0, {}, ["Url"], ["Url"], ["System.Collections.Generic"], false, false, [], false, false, [], {}, [], 1, false, false, false, 0, 0.0, [], 0.0, 0, 0.0, 100.0, 0, 0, false, false, false, false, "public", false, [], [], false, false, false, false, [], false, 1, 1, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, false], ["JiraDestination", "Lim.GitRestApi.JiraDestination", [], [], "src/Lim.GitRestApi/Providers/Jira/JiraWorkItemDevStatus.cs", 15, 0, {}, ["Repository"], ["Repository"], ["System.Collections.Generic"], false, false, [], false, false, [], {}, [], 1, false, false, false, 0, 0.0, [], 0.0, 0, 0.0, 100.0, 0, 0, false, false, false, false, "public", false, [], [], false, false, false, false, [], false, 1, 1, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, false], ["JiraPullRequest", "Lim.GitRestApi.JiraPullRequest", [], [], "src/Lim.GitRestApi/Providers/Jira/JiraWorkItemDevStatus.cs", 20, 0, {}, ["id", "Destination"], ["id", "Destination"], ["System.Collections.Generic"], false, false, [], true, false, [], {}, [], 2, false, false, false, 0, 0.0, [], 0.0, 0, 0.0, 100.0, 0, 0, false, false, false, false, "public", false, [], [], false, false, false, false, [], false, 2, 2, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, false], ["JiraDetail", "Lim.GitRestApi.JiraDetail", [], [], "src/Lim.GitRestApi/Providers/Jira/JiraWorkItemDevStatus.cs", 26, 0, {}, ["PullRequests"], ["PullRequests"], ["System.Collections.Generic"], false, false, [], false, false, [], {}, [], 1, false, false, false, 0, 0.0, [], 0.0, 0, 0.0, 100.0, 0, 0, false, false, false, false, "public", false, [], [], false, false, false, false, [], false, 1, 1, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, false], ["ProvidersRouter", "Lim.GitRestApi.ProvidersRouter", [], ["Lim.GitRestApi.IRepositoriesProvider", "Lim.GitRestApi.IProjectsProvider", "Lim.GitRestApi.ISecurityScansProvider"], "src/Lim.GitRestApi/Providers/ProvidersRouter.cs", 9, 0, {"_activityFactorCache": "???.IAsyncCache<(Consumable, string), int>", "_projectsProviders": "System.Collections.Generic.IDictionary<Provider, IProjectsProvider>", "_repositoriesByServerCache": "???.IAsyncCache<string, IReadOnlyCollection<Repository>>", "_repositoriesProviders": "System.Collections.Generic.IDictionary<Provider, IRepositoriesProvider>", "_securityScansProviders": "System.Collections.Generic.IDictionary<Provider, ISecurityScansProvider>"}, ["_activityFactorCache", "_projectsProviders", "_repositoriesByServerCache", "_repositoriesProviders", "_securityScansProviders"], ["ProvidersRouter", "Lim.GitRestApi.ITypedConsumableProvider<Lim.Common.DotNET.Project>.GetConsumablesAsync", "GetIssuesAsync", "GetIssueAsync", "CreateIssueAsync", "IsUserProjectMemberAsync", "GetActivityFactorAsync", "NormalizedUrl", "VerifyConnectionAsync", "Lim.GitRestApi.ITypedConsumableProvider<Lim.Common.DotNET.Repository>.GetConsumablesAsync", "GetRepositoryAsync", "GetPullRequestsAsync", "GetRepositoryFilePathsAsync", "GetRepositoryLanguagesAsync", "GetPullRequestMutableDetails", "GetVulnerabilitiesCountAsync", "GetRepositoryBranchesAsync", "GetRepositoryTagsAsync", "BuildUrl", "GetLatestSecurityScans", "GetNewSecurityScans", "Lim.GitRestApi.ITypedConsumableProvider<Lim.Common.DotNET.SecurityScansProject>.GetConsumablesAsync", "ConsumablesProvider", "RepositoriesProvider", "ProjectsProvider", "SecurityScansProjectsProvider", "GetRepositoriesAsync", "GetRepositoryActivityFactorAsync", "GetProjectsAsync", "GetProjectActivityFactorAsync"], ["System", "System.Collections.Generic", "System.Threading.Tasks", "Infrastructure.Dotnet.Common", "Lim.Common.DotNET"], false, false, [], false, false, [], {"_activityFactorCache": [], "_projectsProviders": [], "_repositoriesByServerCache": [], "_repositoriesProviders": [], "_securityScansProviders": []}, [], 0, false, false, false, 32, 1.0, [], 165.3125, 133, 0.0, 65.625, 1, 0, false, false, false, false, "public", false, ["Lim.GitRestApi.IProjectsProvider.GetProjectsAsync", "Lim.GitRestApi.IProjectsProvider.GetIssuesAsync", "Lim.GitRestApi.IProjectsProvider.GetIssueAsync", "Lim.GitRestApi.IProjectsProvider.CreateIssueAsync", "Lim.GitRestApi.IProjectsProvider.IsUserProjectMemberAsync", "Lim.GitRestApi.ITypedConsumableProvider<Lim.Common.DotNET.Project>.GetActivityFactorAsync", "Lim.GitRestApi.IConsumableProvider.NormalizedUrl", "Lim.GitRestApi.IConsumableProvider.VerifyConnectionAsync", "Lim.GitRestApi.IRepositoriesProvider.GetRepositoriesAsync", "Lim.GitRestApi.IRepositoriesProvider.GetRepositoryAsync", "Lim.GitRestApi.IRepositoriesProvider.GetPullRequestsAsync", "Lim.GitRestApi.ITypedConsumableProvider<Lim.Common.DotNET.Repository>.GetActivityFactorAsync", "Lim.GitRestApi.IRepositoriesProvider.GetRepositoryFilePathsAsync", "Lim.GitRestApi.IRepositoriesProvider.GetRepositoryLanguagesAsync", "Lim.GitRestApi.IRepositoriesProvider.GetPullRequestMutableDetails", "Lim.GitRestApi.IRepositoriesProvider.GetVulnerabilitiesCountAsync", "Lim.GitRestApi.IRepositoriesProvider.GetRepositoryBranchesAsync", "Lim.GitRestApi.IRepositoriesProvider.GetRepositoryTagsAsync", "Lim.GitRestApi.IRepositoriesProvider.BuildUrl", "Lim.GitRestApi.ISecurityScansProvider.GetLatestSecurityScans", "Lim.GitRestApi.ISecurityScansProvider.GetNewSecurityScans", "Lim.GitRestApi.ITypedConsumableProvider<Lim.Common.DotNET.SecurityScansProject>.GetConsumablesAsync", "Lim.GitRestApi.ITypedConsumableProvider<Lim.Common.DotNET.Repository>.GetConsumablesAsync", "Lim.GitRestApi.ITypedConsumableProvider<Lim.Common.DotNET.Project>.GetConsumablesAsync"], ["_activityFactorCache.GetOrAddAsync", "_repositoriesByServerCache.GetOrAddAsync", "Task.FromResult", "_repositoriesProviders.TryGetValue", "_projectsProviders.TryGetValue", "_securityScansProviders.TryGetValue", "repositoriesCacheBuilder", "TimeSpan.FromMinutes", "activityFactorCacheBuilder", "TimeSpan.FromHours"], false, false, false, false, [], false, 0, 0, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, false], ["PullRequestMutableDetails", "Lim.GitRestApi.PullRequestMutableDetails", [], ["Lim.Common.DotNET.IPullRequestMutableDetails"], "src/Lim.GitRestApi/Providers/PullRequestMutableDetails.cs", 6, 0, {}, ["Title", "ReviewersIdentitiesKeys", "Comments", "IssuesKeysByProjectId"], ["PullRequestMutableDetails", "Title", "ReviewersIdentitiesKeys", "IsOpen", "Comments", "IssuesKeysByProjectId"], ["System.Collections.Generic", "Lim.Common.DotNET"], false, false, [], false, false, [], {}, [], 5, false, false, false, 1, 0.16666666666666666, [], 38.666666666666664, 0, 0.0, 100.0, 1, 0, false, false, false, false, "public", false, [], [], false, false, false, false, [], false, 5, 0, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, false], ["ServerRestApiBarrier", "Lim.GitRestApi.ServerRestApiBarrier", [], [], "src/Lim.GitRestApi/Providers/ServerRestApiBarrier.cs", 10, 0, {"_asyncThrottlerBuilder": "System.Func<AsyncThrottler>", "_blockersByHashCode": "System.Collections.Concurrent.ConcurrentDictionary<int, (AsyncThrottler, RecurringErrorBarrier)>", "_recurringErrorBarrierBuilder": "System.Func<RecurringErrorBarrier>"}, ["_asyncThrottlerBuilder", "_blockersByHashCode", "_recurringErrorBarrierBuilder"], ["ServerRestApiBarrier", "ShouldIgnoreException", "BoundedExecuteAsync"], ["System", "System.Collections.Concurrent", "System.Threading.Tasks", "Infrastructure.Dotnet.Common", "Lim.Common.DotNET", "Microsoft.Extensions.Configuration"], false, false, [], false, false, [], {"_asyncThrottlerBuilder": [], "_blockersByHashCode": [], "_recurringErrorBarrierBuilder": []}, [], 0, false, false, false, 5, 1.0, [], 265.2, 294, 20.0, 60.0, 3, 0, false, false, false, true, "public", false, ["Lim.GitRestApi.ServerRestApiBarrier.ShouldIgnoreException"], ["exception.IsOrWrapping<NotSupportedException>", "exception.IsOrWrapping<TaskCanceledException>", "exception.IsOrWrapping<NullReferenceException>", "exception.IsOrWrapping<ProviderConnectionException>", "exception.AsOrUnwrap<ProviderConnectionException>", "_blockersByHashCode.GetOrAdd", "server.CredentialsHashCode", "_asyncThrottlerBuilder", "_recurringErrorBarrierBuilder", "throttler.ThrottleAsync", "errorBarrier.BlockRecurringErrorsAsync", "configuration.GetValueWithEnv", "TimeSpan.FromSeconds"], false, false, false, false, ["App:RestApiMaxRequestsPerMinute"], false, 0, 0, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, false], ["RegisterGitRestApi", "Lim.GitRestApi.RegisterGitRestApi", [], [], "src/Lim.GitRestApi/RegisterGitRestApi.cs", 11, 0, {}, [], ["RegisterProviders"], ["System", "System.Collections.Generic", "Infrastructure.Dotnet.Common", "Lim.Common.DotNET", "Lim.GitRestApi.Checkmarx", "Microsoft.Extensions.DependencyInjection", "Microsoft.VisualStudio.Services.Graph.Client"], false, false, [], false, false, [], {}, [], 0, false, false, false, 1, 1.0, [], 3933.0, 3933, 100.0, 100.0, 0, 0, false, false, true, false, "public", false, [], ["services.AddSingleton<IDeveloperIdentityProvider, DeveloperIdentityProvider>", "services.RegisterCacheBuilder<string, IReadOnlyDictionary<string, GraphUser>>", "services.RegisterCacheBuilder<string, Dictionary<RiskLevel, int>>", "services.AddSingleton<IAzureDevopsRestApi, AzureDevopsRestApi>", "services.AddSingleton<IBitbucketServerRestApi, BitbucketServerRestApi>", "services.AddSingleton<IBitbucketCloudRestApi, BitbucketCloudRestApi>", "services.AddSingleton<IGithubRestApi, GithubRestApi>", "services.AddSingleton<IGitlabRestApi, GitlabRestApi>", "services.AddSingleton<ICheckmarxProjectsRestApi, CheckmarxProjectsRestApi>", "services.AddSingleton<IJiraRestApi, JiraRestApi>", "services.AddMapping<Provider, IRepositoriesProvider>", "services.AddMapping<Provider, IProjectsProvider>", "services.AddMapping<Provider, ISecurityScansProvider>", "services.AddSingleton<ProvidersRouter>", "services.AddSingleton<IProjectsProvider>", "provider.GetRequiredService<ProvidersRouter>", "services.AddSingleton<IRepositoriesProvider>", "services.AddSingleton<ISecurityScansProvider>", "services.AddMapping<Provider, IIdentitiesExpander>", "services.AddSingleton<IAzureDevopsDeveloperIdentityTransformer, AzureDevopsDeveloperIdentityTransformer>", "services.AddSingleton<IBitbucketServerDeveloperIdentityTransformer, BitbucketServerDeveloperIdentityTransformer>", "services.AddSingleton<IBitbucketCloudDeveloperIdentityTransformer, BitbucketCloudDeveloperIdentityTransformer>", "services.AddSingleton<IGithubDeveloperIdentityTransformer, GithubDeveloperIdentityTransformer>", "services.AddSingleton<IGitlabDeveloperIdentityTransformer, GitlabDeveloperIdentityTransformer>", "services.AddSingleton<IJiraDeveloperIdentityTransformer, JiraDeveloperIdentityTransformer>"], false, false, false, false, [], false, 0, 0, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, false], ["ParserController", "Lim.FeaturesExtractor.Dotnet.ParserController", ["???.Controller"], [], "src/Lim.FeaturesExtractor.Dotnet/Controllers/ParserController.cs", 13, 0, {"_defaultOutputDirectory": "string", "_sourceFilesParser": "Lim.FeaturesExtractor.Dotnet.ISourceFilesParser"}, ["_defaultOutputDirectory", "_sourceFilesParser"], ["ParserController", "ParseRepositoryAsync", "OutputFilePath"], ["System", "System.Collections.Generic", "System.IO", "System.Threading", "System.Threading.Tasks", "Infrastructure.Dotnet.Common", "JetBrains.Annotations", "Microsoft.AspNetCore.Mvc", "Microsoft.Extensions.Configuration"], false, false, ["ApiController"], false, false, [], {"_defaultOutputDirectory": [], "_sourceFilesParser": []}, ["HttpPost"], 0, false, false, false, 3, 1.0, [], 474.6666666666667, 245, 0.0, 66.66666666666667, 1, 0, false, false, false, true, "public", false, ["Lim.FeaturesExtractor.Dotnet.ISourceFilesParser.ParseFilesAsync"], ["Guid.NewGuid()\n                .ToString", "Guid.NewGuid", "CancellationTokenSource.CreateLinkedTokenSource", "cancellationTokenSource.CancelAfter", "TimeSpan.FromSeconds", "Created", "Path.Combine", "configuration.GetValue<string>", "fileSystem.CreateDirectoryIfNotExists"], false, false, false, false, ["App:OutputDirectoryPath", "repository/parse", "output"], false, 0, 0, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, false], ["ClassExtractorsProvider", "Lim.FeaturesExtractor.Dotnet.ClassExtractorsProvider", ["Lim.FeaturesExtractor.Dotnet.ExtractorsProvider"], [], "src/Lim.FeaturesExtractor.Dotnet/Extractors/ClassExtractors/ClassExtractorsProvider.cs", 6, 0, {"ClassEntity": "Lim.FeaturesExtractor.Dotnet.ClassEntity", "_repositoryDataCollection": "Lim.FeaturesExtractor.Dotnet.RepositoryDataCollection"}, ["ClassEntity", "_repositoryDataCollection"], ["ClassExtractorsProvider", "IsExtendingOrImplementing", "CountMethods", "IsUsingNamespace", "HasClassAttribute", "ExtractorsProvider", "GetClassEntity", "ClassPredicate", "ClassFileLink", "IsSuspectedInterfaceName"], ["System", "System.Linq"], false, false, [], false, false, [], {"ClassEntity": [], "_repositoryDataCollection": []}, [], 0, false, false, false, 13, 1.0, [], 208.3846153846154, 138, 15.384615384615385, 0.0, 2, 0, false, true, false, false, "public", false, ["Lim.FeaturesExtractor.Dotnet.ExtractorsProvider.GetClassEntity", "Lim.FeaturesExtractor.Dotnet.ExtractorsProvider.IsUsingNamespace", "Lim.FeaturesExtractor.Dotnet.ExtractorsProvider.HasClassAttribute", "Lim.FeaturesExtractor.Dotnet.RepositoryDataCollection.GetClassEntity"], ["classEntity.BaseTypeNames.Any", "baseTypeName.Equals", "ClassEntity.MethodEntities.Count(_ => predicate(_))\n                .ToString", "ClassEntity.MethodEntities.Count", "predicate", "classEntity.BaseTypeFullNames.Any", "entity.UsingNamespaces.Contains", "entity.AttributeNames.Contains", "Path.GetFileName", "string.IsNullOrEmpty", "rootDirectoryName.Split", "fullName.Split(\".\")\n                .Last", "fullName.Split", "name.StartsWith", "char.IsUpper"], false, false, false, false, [], false, 0, 0, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, false], ["CommonClassExtractorsProvider", "Lim.FeaturesExtractor.Dotnet.CommonClassExtractorsProvider", ["Lim.FeaturesExtractor.Dotnet.ClassExtractorsProvider"], [], "src/Lim.FeaturesExtractor.Dotnet/Extractors/ClassExtractors/CommonClassExtractorsProvider.cs", 8, 0, {"IdentityFieldNames": "System.Collections.Generic.ISet<string>", "ObjectMethodNames": "System.Collections.Generic.ISet<string>", "_allNames": "System.Collections.Generic.ISet<string>", "_fieldEntities": "System.Collections.Generic.List<FieldEntity>", "_methodEntities": "System.Collections.Generic.List<MethodEntity>", "ClassEntity": "Lim.FeaturesExtractor.Dotnet.ClassEntity", "_repositoryDataCollection": "Lim.FeaturesExtractor.Dotnet.RepositoryDataCollection"}, ["_allNames", "_fieldEntities", "_methodEntities", "ClassEntity", "_repositoryDataCollection"], ["CommonClassExtractorsProvider", "ExpandFieldNameOptions", "ClassName", "QualifiedName", "ExtendedClasses", "ImplementedInterfaces", "Path", "LineNumber", "Link", "FieldTypesByName", "DataFieldNames", "MethodNames", "Usings", "IsSerializable", "IsComparable", "ClassAttributes", "HasId", "FieldAttributes", "MethodAttributes", "PropertiesCount", "HasEquals", "HasToString", "HasGetHashCode", "LogicMethodsCount", "ContainedByClasses", "AverageMethodBodyLen", "MedianMethodBodyLen", "StaticMethodsPercentage", "PublicMethodsPercentage", "ConstructorsCount", "DestructorsCount", "IsPrivateOrInternal", "IsAbstract", "IsStatic", "HasAsync", "Visibility", "IsGeneric", "MethodCallsCount", "IsAttribute", "IsException", "IsDisposable", "DefinedInParts", "ClassExtractorsProvider", "IsExtendingOrImplementing", "CountMethods", "IsUsingNamespace", "HasClassAttribute", "ExtractorsProvider", "GetClassEntity", "ClassPredicate", "ClassFileLink", "IsSuspectedInterfaceName"], ["System", "System.Collections.Generic", "System.Linq", "Infrastructure.Dotnet.Common"], false, false, [], false, false, [], {"IdentityFieldNames": [], "ObjectMethodNames": [], "_allNames": [], "_fieldEntities": [], "_methodEntities": [], "ClassEntity": [], "_repositoryDataCollection": []}, ["FeatureExtractor"], 0, false, false, false, 55, 1.0, [], 145.4, 67, 5.454545454545454, 74.54545454545455, 3, 0, false, false, false, false, "public", false, ["Lim.FeaturesExtractor.Dotnet.ExtractorsProvider.GetClassEntity", "Lim.FeaturesExtractor.Dotnet.ExtractorsProvider.IsSuspectedInterfaceName", "Lim.FeaturesExtractor.Dotnet.ExtractorsProvider.ClassFileLink", "Lim.FeaturesExtractor.Dotnet.ClassExtractorsProvider.IsExtendingOrImplementing", "Lim.FeaturesExtractor.Dotnet.ExtractorsProvider.IsUsingNamespace", "Lim.FeaturesExtractor.Dotnet.ExtractorsProvider.HasClassAttribute", "Lim.FeaturesExtractor.Dotnet.RepositoryDataCollection.GetClassEntity"], ["ClassEntity.BaseTypeFullNames.FirstOrDefault", "ClassEntity.BaseTypeFullNames.Where(\n                    baseTypeFullName =>\n                    {\n                        var baseTypeEntity = GetClassEntity(baseTypeFullName);\n                        // ReSharper disable once ArrangeRedundantParentheses\n                        return (baseTypeEntity != null && baseTypeEntity.EntityType == EntityType.Interface) ||\n                               IsSuspectedInterfaceName(baseTypeFullName);\n                    }\n                )\n                .ToList", "ClassEntity.BaseTypeFullNames.Where", "_fieldEntities.ToDictionary", "modifiers.Contains", "_fieldEntities\n                .Where(fieldEntity => ModifiersPredicate(fieldEntity.Modifiers) && TypeNamePredicate(fieldEntity.TypeName) && !fieldEntity.Name.All(char.IsUpper))\n                .Select(fieldEntity => fieldEntity.Name)\n                .ToHashSet", "_fieldEntities\n                .Where(fieldEntity => ModifiersPredicate(fieldEntity.Modifiers) && TypeNamePredicate(fieldEntity.TypeName) && !fieldEntity.Name.All(char.IsUpper))\n                .Select", "_fieldEntities\n                .Where", "fieldEntity.Name.All", "_methodEntities\n                .Where(methodEntity => methodEntity.IsProperty && TypeNamePredicate(methodEntity.ReturnTypeName))\n                .Select", "_methodEntities\n                .Where", "dataFieldNames.Union(dataPropertiesNames.Where(propertyName => !dataFieldNames.ContainsAny(ExpandFieldNameOptions(propertyName))))\n                .ToList", "dataFieldNames.Union", "dataPropertiesNames.Where", "dataFieldNames.ContainsAny", "_methodEntities.Select(methodEntity => methodEntity.Name)\n                .ToHashSet", "_methodEntities.Select", "ClassEntity.UsingNamespaces.ToList", "ClassEntity.AttributeNames.Contains", "ClassEntity.BaseTypeNames.Contains", "IdentityFieldNames.ContainsAny", "_fieldEntities.SelectMany(_ => _.AttributeNames)\n                .ToHashSet", "_fieldEntities.SelectMany", "_methodEntities.SelectMany(_ => _.AttributeNames)\n                .ToHashSet", "_methodEntities.SelectMany", "_methodEntities.Count", "_allNames.Contains", "nameof", "ObjectMethodNames.Contains", "ClassEntity.ContainingClassTypes.ToList", "_methodEntities.None", "_methodEntities.Average", "_methodEntities.Median", "entity.Modifiers.Contains", "ClassEntity.Modifiers.Contains", "_methodEntities.Any", "ClassEntity.MethodCalls.Count", "classEntity.BaseTypeNames.Any", "baseTypeName.Equals", "ClassEntity.MethodEntities.Count(_ => predicate(_))\n                .ToString", "ClassEntity.MethodEntities.Count", "predicate", "classEntity.BaseTypeFullNames.Any", "entity.UsingNamespaces.Contains", "entity.AttributeNames.Contains", "Path.GetFileName", "string.IsNullOrEmpty", "rootDirectoryName.Split", "fullName.Split(\".\")\n                .Last", "fullName.Split", "name.StartsWith", "char.IsUpper", "new[]\n            {\n                \"id\", \"slug\", \"name\", \"key\"\n            }.SelectMany(ExpandFieldNameOptions)\n            .ToHashSet", "new[]\n            {\n                \"id\", \"slug\", \"name\", \"key\"\n            }.SelectMany", "classEntity.FieldEntities.ToList", "classEntity.MethodEntities.ToList", "_fieldEntities.Select(entity => entity.Name)\n                .Union(_methodEntities.Select(entity => entity.Name))\n                .ToHashSet", "_fieldEntities.Select(entity => entity.Name)\n                .Union", "_fieldEntities.Select"], false, false, false, false, ["id", "slug", "name", "key", "bool", "Serializable", "IComparable"], false, 0, 0, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, false], ["DataAnnotationsFeaturesProvider", "Lim.FeaturesExtractor.Dotnet.DataAnnotationsFeaturesProvider", ["Lim.FeaturesExtractor.Dotnet.ClassExtractorsProvider"], [], "src/Lim.FeaturesExtractor.Dotnet/Extractors/ClassExtractors/DataAnnotationsFeaturesProvider.cs", 7, 0, {"SchemaAnnotationsNamespace": "string", "DataAnnotationsNamespace": "string", "SchemaAnnotationNames": "System.Collections.Generic.ISet<string>", "DataAnnotationNames": "System.Collections.Generic.ISet<string>", "ClassEntity": "Lim.FeaturesExtractor.Dotnet.ClassEntity", "_repositoryDataCollection": "Lim.FeaturesExtractor.Dotnet.RepositoryDataCollection"}, ["ClassEntity", "_repositoryDataCollection"], ["DataAnnotationsFeaturesProvider", "HasClassLevelSchemaAnnotations", "HasClassLevelDataAnnotations", "HasMethodLevelSchemaAnnotations", "HasMethodLevelDataAnnotations", "ClassExtractorsProvider", "IsExtendingOrImplementing", "CountMethods", "IsUsingNamespace", "HasClassAttribute", "ExtractorsProvider", "GetClassEntity", "ClassPredicate", "ClassFileLink", "IsSuspectedInterfaceName"], ["System.Collections.Generic", "System.Linq", "Infrastructure.Dotnet.Common"], false, false, [], false, false, [], {"SchemaAnnotationsNamespace": [], "DataAnnotationsNamespace": [], "SchemaAnnotationNames": [], "DataAnnotationNames": [], "ClassEntity": [], "_repositoryDataCollection": []}, ["FeatureExtractor"], 0, false, false, false, 18, 1.0, [], 193.72222222222223, 157, 11.11111111111111, 27.77777777777778, 3, 0, false, false, false, false, "public", false, ["Lim.FeaturesExtractor.Dotnet.ExtractorsProvider.GetClassEntity", "Lim.FeaturesExtractor.Dotnet.ExtractorsProvider.IsUsingNamespace", "Lim.FeaturesExtractor.Dotnet.ExtractorsProvider.HasClassAttribute", "Lim.FeaturesExtractor.Dotnet.RepositoryDataCollection.GetClassEntity"], ["ClassEntity.UsingNamespaces.Contains", "ClassEntity.AttributeNames.ContainsAny", "ClassEntity.MethodEntities.SelectMany(method => method.AttributeNames)\n                   .Any", "ClassEntity.MethodEntities.SelectMany", "classEntity.BaseTypeNames.Any", "baseTypeName.Equals", "ClassEntity.MethodEntities.Count(_ => predicate(_))\n                .ToString", "ClassEntity.MethodEntities.Count", "predicate", "classEntity.BaseTypeFullNames.Any", "entity.UsingNamespaces.Contains", "entity.AttributeNames.Contains", "Path.GetFileName", "string.IsNullOrEmpty", "rootDirectoryName.Split", "fullName.Split(\".\")\n                .Last", "fullName.Split", "name.StartsWith", "char.IsUpper"], false, false, false, false, ["System.ComponentModel.DataAnnotations.Schema", "System.ComponentModel.DataAnnotations", "Table", "Column", "ForeignKey", "ComplexType", "NotMapped", "DatabaseGenerated", "InverseProperty", "Key", "Association", "DataType", "EnumDataType", "Timestamp"], false, 0, 0, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, false], ["EntityFrameworkDataModelLabelsProvider", "Lim.FeaturesExtractor.Dotnet.EntityFrameworkDataModelLabelsProvider", ["Lim.FeaturesExtractor.Dotnet.ClassExtractorsProvider"], [], "src/Lim.FeaturesExtractor.Dotnet/Extractors/ClassExtractors/EntityFrameworkDataModelLabelsProvider.cs", 5, 0, {"_analysisHelper": "Lim.FeaturesExtractor.Dotnet.EntityFrameworkAnalysisHelper", "ClassEntity": "Lim.FeaturesExtractor.Dotnet.ClassEntity", "_repositoryDataCollection": "Lim.FeaturesExtractor.Dotnet.RepositoryDataCollection"}, ["_analysisHelper", "ClassEntity", "_repositoryDataCollection"], ["EntityFrameworkDataModelLabelsProvider", "IsEFDbSetPropertyDataModelAsync", "IsEFModelBuilderDataModelAsync", "IsEFTransitiveDataModelAsync", "ClassExtractorsProvider", "IsExtendingOrImplementing", "CountMethods", "IsUsingNamespace", "HasClassAttribute", "ExtractorsProvider", "GetClassEntity", "ClassPredicate", "ClassFileLink", "IsSuspectedInterfaceName"], ["System.Threading.Tasks"], false, false, [], false, false, [], {"_analysisHelper": [], "ClassEntity": [], "_repositoryDataCollection": []}, ["FeatureExtractor", "Label"], 0, false, false, false, 17, 1.0, [], 181.05882352941177, 94, 11.764705882352942, 23.529411764705884, 3, 0, false, false, false, true, "public", false, ["Lim.FeaturesExtractor.Dotnet.EntityFrameworkAnalysisHelper.IsDbSetPropertyTypeArgumentAsync", "Lim.FeaturesExtractor.Dotnet.EntityFrameworkAnalysisHelper.IsModelBuilderEntityTypeArgumentAsync", "Lim.FeaturesExtractor.Dotnet.ExtractorsProvider.GetClassEntity", "Lim.FeaturesExtractor.Dotnet.ExtractorsProvider.IsUsingNamespace", "Lim.FeaturesExtractor.Dotnet.ExtractorsProvider.HasClassAttribute", "Lim.FeaturesExtractor.Dotnet.RepositoryDataCollection.GetClassEntity", "Lim.FeaturesExtractor.Dotnet.EntityFrameworkAnalysisHelper.For"], ["_analysisHelper.IsNavigableFromExplicitDataModelAsync", "classEntity.BaseTypeNames.Any", "baseTypeName.Equals", "ClassEntity.MethodEntities.Count(_ => predicate(_))\n                .ToString", "ClassEntity.MethodEntities.Count", "predicate", "classEntity.BaseTypeFullNames.Any", "entity.UsingNamespaces.Contains", "entity.AttributeNames.Contains", "Path.GetFileName", "string.IsNullOrEmpty", "rootDirectoryName.Split", "fullName.Split(\".\")\n                .Last", "fullName.Split", "name.StartsWith", "char.IsUpper"], false, false, false, false, [], false, 0, 0, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, false], ["JsonSerializationFeaturesProvider", "Lim.FeaturesExtractor.Dotnet.JsonSerializationFeaturesProvider", ["Lim.FeaturesExtractor.Dotnet.ClassExtractorsProvider"], [], "src/Lim.FeaturesExtractor.Dotnet/Extractors/ClassExtractors/JsonSerializationFeaturesProvider.cs", 5, 0, {"ClassEntity": "Lim.FeaturesExtractor.Dotnet.ClassEntity", "_repositoryDataCollection": "Lim.FeaturesExtractor.Dotnet.RepositoryDataCollection"}, ["ClassEntity", "_repositoryDataCollection"], ["JsonSerializationFeaturesProvider", "HasJsonClassAnnotations", "HasJsonPropertyAnnotations", "IsJsonAttribute", "ClassExtractorsProvider", "IsExtendingOrImplementing", "CountMethods", "IsUsingNamespace", "HasClassAttribute", "ExtractorsProvider", "GetClassEntity", "ClassPredicate", "ClassFileLink", "IsSuspectedInterfaceName"], ["System.Linq"], false, false, [], false, false, [], {"ClassEntity": [], "_repositoryDataCollection": []}, ["FeatureExtractor"], 0, false, false, false, 17, 1.0, [], 174.76470588235293, 123, 17.647058823529413, 17.647058823529413, 3, 0, false, false, false, false, "public", false, ["Lim.FeaturesExtractor.Dotnet.ExtractorsProvider.GetClassEntity", "Lim.FeaturesExtractor.Dotnet.ExtractorsProvider.IsUsingNamespace", "Lim.FeaturesExtractor.Dotnet.ExtractorsProvider.HasClassAttribute", "Lim.FeaturesExtractor.Dotnet.RepositoryDataCollection.GetClassEntity"], [".Any", "ClassEntity.MethodEntities.SelectMany(method => method.AttributeNames)\n                .Any", "ClassEntity.MethodEntities.SelectMany", "attributeName.StartsWith", "classEntity.BaseTypeNames.Any", "baseTypeName.Equals", "ClassEntity.MethodEntities.Count(_ => predicate(_))\n                .ToString", "ClassEntity.MethodEntities.Count", "predicate", "classEntity.BaseTypeFullNames.Any", "entity.UsingNamespaces.Contains", "entity.AttributeNames.Contains", "Path.GetFileName", "string.IsNullOrEmpty", "rootDirectoryName.Split", "fullName.Split(\".\")\n                .Last", "fullName.Split", "name.StartsWith", "char.IsUpper"], false, false, false, false, ["Json"], false, 0, 0, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, false], ["LinqToDBDataModelLabelsProvider", "Lim.FeaturesExtractor.Dotnet.LinqToDBDataModelLabelsProvider", ["Lim.FeaturesExtractor.Dotnet.ClassExtractorsProvider"], [], "src/Lim.FeaturesExtractor.Dotnet/Extractors/ClassExtractors/LinqToDBDataModelLabelsProvider.cs", 8, 0, {"MappingAttributesNamespace": "string", "ClassAttributeNames": "System.Collections.Generic.ISet<string>", "MethodAttributeNames": "System.Collections.Generic.ISet<string>", "_analysisHelper": "Lim.FeaturesExtractor.Dotnet.LinqToDBAnalysisHelper", "ClassEntity": "Lim.FeaturesExtractor.Dotnet.ClassEntity", "_repositoryDataCollection": "Lim.FeaturesExtractor.Dotnet.RepositoryDataCollection"}, ["_analysisHelper", "ClassEntity", "_repositoryDataCollection"], ["LinqToDBDataModelLabelsProvider", "IsLinqToDBGetTableTypeArgumentAsync", "HasLinqToDBClassAnnotations", "HasLinqToDBPropertyAnnotations", "ClassExtractorsProvider", "IsExtendingOrImplementing", "CountMethods", "IsUsingNamespace", "HasClassAttribute", "ExtractorsProvider", "GetClassEntity", "ClassPredicate", "ClassFileLink", "IsSuspectedInterfaceName"], ["System.Collections.Generic", "System.Linq", "System.Threading.Tasks", "Infrastructure.Dotnet.Common"], false, false, [], false, false, [], {"MappingAttributesNamespace": [], "ClassAttributeNames": [], "MethodAttributeNames": [], "_analysisHelper": [], "ClassEntity": [], "_repositoryDataCollection": []}, ["FeatureExtractor", "Label"], 0, false, false, false, 17, 1.0, [], 195.35294117647058, 138, 11.764705882352942, 23.529411764705884, 3, 0, false, false, false, true, "public", false, ["Lim.FeaturesExtractor.Dotnet.LinqToDBAnalysisHelper.IsDataConnectionGetTableTypeArgumentAsync", "Lim.FeaturesExtractor.Dotnet.ExtractorsProvider.GetClassEntity", "Lim.FeaturesExtractor.Dotnet.ExtractorsProvider.IsUsingNamespace", "Lim.FeaturesExtractor.Dotnet.ExtractorsProvider.HasClassAttribute", "Lim.FeaturesExtractor.Dotnet.RepositoryDataCollection.GetClassEntity", "Lim.FeaturesExtractor.Dotnet.LinqToDBAnalysisHelper.For"], ["ClassEntity.UsingNamespaces.Contains", "ClassEntity.AttributeNames.ContainsAny", "ClassEntity.MethodEntities\n                   .Where(_ => _.IsProperty)\n                   .Any", "ClassEntity.MethodEntities\n                   .Where", "methodEntity.AttributeNames.ContainsAny", "classEntity.BaseTypeNames.Any", "baseTypeName.Equals", "ClassEntity.MethodEntities.Count(_ => predicate(_))\n                .ToString", "ClassEntity.MethodEntities.Count", "predicate", "classEntity.BaseTypeFullNames.Any", "entity.UsingNamespaces.Contains", "entity.AttributeNames.Contains", "Path.GetFileName", "string.IsNullOrEmpty", "rootDirectoryName.Split", "fullName.Split(\".\")\n                .Last", "fullName.Split", "name.StartsWith", "char.IsUpper"], false, false, false, false, ["LinqToDB.Mapping", "Table", "QueryFilter", "ScalarType", "Association", "Column", "ColumnAttribute", "DataType", "Identity", "MapValue", "NotNull", "Nullable", "PrimaryKey", "SequenceName", "SkipValuesOnInsert", "SkipValuesOnUpdate"], false, 0, 0, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, false], ["MongoDataModelLabelsProvider", "Lim.FeaturesExtractor.Dotnet.MongoDataModelLabelsProvider", ["Lim.FeaturesExtractor.Dotnet.ClassExtractorsProvider"], [], "src/Lim.FeaturesExtractor.Dotnet/Extractors/ClassExtractors/MongoDataModelLabelsProvider.cs", 6, 0, {"_analysisHelper": "Lim.FeaturesExtractor.Dotnet.MongoAnalysisHelper", "ClassEntity": "Lim.FeaturesExtractor.Dotnet.ClassEntity", "_repositoryDataCollection": "Lim.FeaturesExtractor.Dotnet.RepositoryDataCollection"}, ["_analysisHelper", "ClassEntity", "_repositoryDataCollection"], ["MongoDataModelLabelsProvider", "IsMongoGetCollectionTargetAsync", "IsMongoClassMapTargetAsync", "HasBsonClassAttributes", "HasBsonPropertyAttributes", "ClassExtractorsProvider", "IsExtendingOrImplementing", "CountMethods", "IsUsingNamespace", "HasClassAttribute", "ExtractorsProvider", "GetClassEntity", "ClassPredicate", "ClassFileLink", "IsSuspectedInterfaceName"], ["System.Linq", "System.Threading.Tasks"], false, false, [], false, false, [], {"_analysisHelper": [], "ClassEntity": [], "_repositoryDataCollection": []}, ["FeatureExtractor", "Label"], 0, false, false, false, 18, 1.0, [], 179.88888888888889, 115, 11.11111111111111, 27.77777777777778, 3, 0, false, false, false, true, "public", false, ["Lim.FeaturesExtractor.Dotnet.MongoAnalysisHelper.IsGetCollectionTypeArgumentAsync", "Lim.FeaturesExtractor.Dotnet.MongoAnalysisHelper.IsClassMapTypeArgumentAsync", "Lim.FeaturesExtractor.Dotnet.ExtractorsProvider.GetClassEntity", "Lim.FeaturesExtractor.Dotnet.ExtractorsProvider.IsUsingNamespace", "Lim.FeaturesExtractor.Dotnet.ExtractorsProvider.HasClassAttribute", "Lim.FeaturesExtractor.Dotnet.RepositoryDataCollection.GetClassEntity", "Lim.FeaturesExtractor.Dotnet.MongoAnalysisHelper.For"], ["ClassEntity.AttributeNames.Any", "_.StartsWith", "ClassEntity.MethodEntities\n                .Where(method => method.IsProperty)\n                .SelectMany(method => method.AttributeNames)\n                .Any", "ClassEntity.MethodEntities\n                .Where(method => method.IsProperty)\n                .SelectMany", "ClassEntity.MethodEntities\n                .Where", "classEntity.BaseTypeNames.Any", "baseTypeName.Equals", "ClassEntity.MethodEntities.Count(_ => predicate(_))\n                .ToString", "ClassEntity.MethodEntities.Count", "predicate", "classEntity.BaseTypeFullNames.Any", "entity.UsingNamespaces.Contains", "entity.AttributeNames.Contains", "Path.GetFileName", "string.IsNullOrEmpty", "rootDirectoryName.Split", "fullName.Split(\".\")\n                .Last", "fullName.Split", "name.StartsWith", "char.IsUpper"], false, false, false, false, ["Bson"], false, 0, 0, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, false], ["MongoSerializationFeaturesProvider", "Lim.FeaturesExtractor.Dotnet.MongoSerializationFeaturesProvider", ["Lim.FeaturesExtractor.Dotnet.ClassExtractorsProvider"], [], "src/Lim.FeaturesExtractor.Dotnet/Extractors/ClassExtractors/MongoSerializationFeaturesProvider.cs", 5, 0, {"ClassEntity": "Lim.FeaturesExtractor.Dotnet.ClassEntity", "_repositoryDataCollection": "Lim.FeaturesExtractor.Dotnet.RepositoryDataCollection"}, ["ClassEntity", "_repositoryDataCollection"], ["MongoSerializationFeaturesProvider", "ObjectIdTypedPropertiesCount", "BsonTypedPropertiesCount", "UsesMongoNamespaces", "ClassExtractorsProvider", "IsExtendingOrImplementing", "CountMethods", "IsUsingNamespace", "HasClassAttribute", "ExtractorsProvider", "GetClassEntity", "ClassPredicate", "ClassFileLink", "IsSuspectedInterfaceName"], ["System.Linq"], false, false, [], false, false, [], {"ClassEntity": [], "_repositoryDataCollection": []}, ["FeatureExtractor"], 0, false, false, false, 17, 1.0, [], 178.88235294117646, 120, 11.764705882352942, 23.529411764705884, 3, 0, false, false, false, false, "public", false, ["Lim.FeaturesExtractor.Dotnet.ExtractorsProvider.GetClassEntity", "Lim.FeaturesExtractor.Dotnet.ExtractorsProvider.IsUsingNamespace", "Lim.FeaturesExtractor.Dotnet.ExtractorsProvider.HasClassAttribute", "Lim.FeaturesExtractor.Dotnet.RepositoryDataCollection.GetClassEntity"], ["ClassEntity.MethodEntities.Count", "method.ReturnTypeName.StartsWith", "ClassEntity.UsingNamespaces.Any", "_.StartsWith", "classEntity.BaseTypeNames.Any", "baseTypeName.Equals", "ClassEntity.MethodEntities.Count(_ => predicate(_))\n                .ToString", "predicate", "classEntity.BaseTypeFullNames.Any", "entity.UsingNamespaces.Contains", "entity.AttributeNames.Contains", "Path.GetFileName", "string.IsNullOrEmpty", "rootDirectoryName.Split", "fullName.Split(\".\")\n                .Last", "fullName.Split", "name.StartsWith", "char.IsUpper"], false, false, false, false, ["ObjectId", "Bson", "MongoDB."], false, 0, 0, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, false], ["ExtractorsProvider", "Lim.FeaturesExtractor.Dotnet.ExtractorsProvider", [], [], "src/Lim.FeaturesExtractor.Dotnet/Extractors/ExtractorsProvider.cs", 7, 0, {"_repositoryDataCollection": "Lim.FeaturesExtractor.Dotnet.RepositoryDataCollection"}, ["_repositoryDataCollection"], ["ExtractorsProvider", "GetClassEntity", "ClassPredicate", "IsUsingNamespace", "HasClassAttribute", "ClassFileLink", "IsSuspectedInterfaceName"], ["System", "System.IO", "System.Linq"], false, false, [], false, false, [], {"_repositoryDataCollection": []}, [], 0, false, false, false, 7, 1.0, [], 241.71428571428572, 173, 28.571428571428573, 0.0, 1, 0, false, true, false, false, "public", false, ["Lim.FeaturesExtractor.Dotnet.RepositoryDataCollection.GetClassEntity"], ["predicate", "classEntity.BaseTypeFullNames.Any", "entity.UsingNamespaces.Contains", "entity.AttributeNames.Contains", "Path.GetFileName", "string.IsNullOrEmpty", "rootDirectoryName.Split", "fullName.Split(\".\")\n                .Last", "fullName.Split", "name.StartsWith", "char.IsUpper"], false, false, false, false, ["___", ".", "I"], false, 0, 0, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, false], ["FeatureExtractorAttribute", "Lim.FeaturesExtractor.Dotnet.FeatureExtractorAttribute", ["System.Attribute"], [], "src/Lim.FeaturesExtractor.Dotnet/Extractors/FeatureExtractorAttribute.cs", 6, 0, {}, ["FeatureName"], ["FeatureExtractorAttribute", "FeatureName"], ["System", "JetBrains.Annotations"], false, false, ["AttributeUsage", "MeansImplicitUse"], false, false, [], {}, [], 1, false, false, false, 1, 0.5, [], 20.0, 20, 0.0, 100.0, 1, 0, false, false, false, false, "public", false, [], [], true, false, false, false, [], false, 1, 0, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, false], ["FeaturesExtractor", "Lim.FeaturesExtractor.Dotnet.FeaturesExtractor", [], ["Lim.FeaturesExtractor.Dotnet.IFeaturesExtractor"], "src/Lim.FeaturesExtractor.Dotnet/Extractors/FeaturesExtractor.cs", 11, 0, {"ClassProviderBuilders": "System.Collections.Generic.List<Func<RepositoryDataCollection, ClassEntity, ClassExtractorsProvider>>", "MethodProviderBuilders": "System.Collections.Generic.List<Func<RepositoryDataCollection, MethodEntity, MethodExtractorsProvider>>", "FeatureExtractorsByType": "System.Collections.Generic.Dictionary<Type, List<MethodInfo>>", "ClassFeatureNames": "System.Collections.Generic.List<string>", "MethodFeatureNames": "System.Collections.Generic.List<string>", "UntypeTaskMethodDefinition": "System.Reflection.MethodInfo", "_logger": "???.ILogger<FeaturesExtractor>", "_repositoryDataCollection": "Lim.FeaturesExtractor.Dotnet.RepositoryDataCollection"}, ["_logger", "_repositoryDataCollection"], ["FeaturesExtractor", "ExtractForClassesAsync", "ExtractForMethodsAsync", "CollectExtractors", "GetFeatureName", "GetExtractorMethods", "ExtractFeaturesJsonAsync", "GetFeaturesAsync", "ToObjectTask", "UntypeTask"], ["System", "System.Collections.Generic", "System.Linq", "System.Reflection", "System.Threading.Tasks", "Infrastructure.Dotnet.Common", "Microsoft.Extensions.Logging"], false, false, [], false, false, [], {"ClassProviderBuilders": [], "MethodProviderBuilders": [], "FeatureExtractorsByType": [], "ClassFeatureNames": [], "MethodFeatureNames": [], "UntypeTaskMethodDefinition": [], "_logger": [], "_repositoryDataCollection": []}, [], 0, false, false, false, 11, 1.0, [], 384.72727272727275, 195, 54.54545454545455, 27.272727272727273, 2, 0, false, false, false, true, "public", false, ["Lim.FeaturesExtractor.Dotnet.FeaturesExtractor.CollectExtractors"], ["typeof(TProvider).GetDerivedTypes", "builders.Add", "extractorType.GetConstructor()\n                        .Invoke", "extractorType.GetConstructor", "GetExtractorMethods", "featureFetchers.Add", "featureNames.Add", "extractorMethod.GetCustomAttribute<FeatureExtractorAttribute>", "featureName.EndsWith", "featureName.Remove", "featureName.LastIndexOf", "extractorMethod.GetCustomAttribute<LabelAttribute>", "string.IsNullOrEmpty", "extractorType.GetMethods()\n                .Where", "extractorType.GetMethods", "methodInfo.HasCustomAttribute<FeatureExtractorAttribute>", "entities.SelectAsync(\n                        async entity => await GetFeaturesAsync(builders, entity)\n                            .ToListAsync()\n                    )\n                    .ToListAsync", "entities.SelectAsync", "GetFeaturesAsync(builders, entity)\n                            .ToListAsync", "GetFeaturesAsync", "builder", "provider.GetType", "extractor.Invoke", "_logger.LogError", "Activator.CreateInstance", "declaredType.GetGenericTypeDefinition", "Task.FromResult", "UntypeTaskMethodDefinition\n                .MakeGenericMethod(typeArgument)\n                .Invoke", "UntypeTaskMethodDefinition\n                .MakeGenericMethod", "typeof(FeaturesExtractor).GetMethod", "nameof"], false, false, false, false, ["Async", "Task", "", "Failed to extract feature {feature} for entity {entity}"], false, 0, 0, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, false], ["LabelAttribute", "Lim.FeaturesExtractor.Dotnet.LabelAttribute", ["System.Attribute"], [], "src/Lim.FeaturesExtractor.Dotnet/Extractors/LabelAttribute.cs", 5, 0, {}, ["LabelCategory"], ["LabelAttribute", "LabelCategory"], ["System"], false, false, ["AttributeUsage"], false, false, [], {}, [], 1, false, false, false, 1, 0.5, [], 22.0, 22, 0.0, 100.0, 1, 0, false, false, false, false, "public", false, [], [], true, false, false, false, [], false, 1, 0, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, false], ["Labels", "Lim.FeaturesExtractor.Dotnet.Labels", [], [], "src/Lim.FeaturesExtractor.Dotnet/Extractors/Labels.cs", 3, 0, {"DataModel": "string", "Api": "string"}, [], [], [], false, false, [], false, false, [], {"DataModel": [], "Api": []}, [], 0, false, false, false, 0, 0.0, [], 0.0, 0, 0.0, 0.0, 0, 0, false, false, true, false, "public", false, [], [], false, false, false, false, ["DataModel", "Api"], false, 0, 0, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, false], ["AspNetCoreFeaturesProvider", "Lim.FeaturesExtractor.Dotnet.AspNetCoreFeaturesProvider", ["Lim.FeaturesExtractor.Dotnet.MethodExtractorsProvider"], [], "src/Lim.FeaturesExtractor.Dotnet/Extractors/MethodExtractors/AspNetCoreFeaturesProvider.cs", 5, 0, {"_analysisHelper": "Lim.FeaturesExtractor.Dotnet.AspNetCoreAnalysisHelper", "ClassEntity": "Lim.FeaturesExtractor.Dotnet.ClassEntity", "MethodEntity": "Lim.FeaturesExtractor.Dotnet.MethodEntity", "_repositoryDataCollection": "Lim.FeaturesExtractor.Dotnet.RepositoryDataCollection"}, ["_analysisHelper", "ClassEntity", "MethodEntity", "_repositoryDataCollection"], ["AspNetCoreFeaturesProvider", "IsAspNetCoreBindingSourceAnnotatedMethod", "ReturnsAspNetCoreActionResult", "IsAspNetCoreControllerAction", "MethodExtractorsProvider", "ExtractorsProvider", "GetClassEntity", "ClassPredicate", "IsUsingNamespace", "HasClassAttribute", "ClassFileLink", "IsSuspectedInterfaceName"], ["Microsoft.CodeAnalysis"], false, false, [], false, false, [], {"_analysisHelper": [], "ClassEntity": [], "MethodEntity": [], "_repositoryDataCollection": []}, ["FeatureExtractor"], 0, false, false, false, 12, 1.0, [], 208.33333333333334, 175, 16.666666666666668, 33.333333333333336, 3, 0, false, false, false, false, "public", false, ["Lim.FeaturesExtractor.Dotnet.AspNetCoreAnalysisHelper.HasBindingSourceAnnotatedParameters", "Lim.FeaturesExtractor.Dotnet.AspNetCoreAnalysisHelper.ReturnsActionResult", "Lim.FeaturesExtractor.Dotnet.AspNetCoreAnalysisHelper.IsControllerClass", "Lim.FeaturesExtractor.Dotnet.RepositoryDataCollection.GetClassEntity"], ["predicate", "classEntity.BaseTypeFullNames.Any", "entity.UsingNamespaces.Contains", "entity.AttributeNames.Contains", "Path.GetFileName", "string.IsNullOrEmpty", "rootDirectoryName.Split", "fullName.Split(\".\")\n                .Last", "fullName.Split", "name.StartsWith", "char.IsUpper"], false, false, false, false, [], false, 0, 0, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, false], ["AspNetCoreLabelsProvider", "Lim.FeaturesExtractor.Dotnet.AspNetCoreLabelsProvider", ["Lim.FeaturesExtractor.Dotnet.MethodExtractorsProvider"], [], "src/Lim.FeaturesExtractor.Dotnet/Extractors/MethodExtractors/AspNetCoreLabelsProvider.cs", 5, 0, {"_analysisHelper": "Lim.FeaturesExtractor.Dotnet.AspNetCoreAnalysisHelper", "ClassEntity": "Lim.FeaturesExtractor.Dotnet.ClassEntity", "MethodEntity": "Lim.FeaturesExtractor.Dotnet.MethodEntity", "_repositoryDataCollection": "Lim.FeaturesExtractor.Dotnet.RepositoryDataCollection"}, ["_analysisHelper", "ClassEntity", "MethodEntity", "_repositoryDataCollection"], ["AspNetCoreLabelsProvider", "IsAspNetCoreRouteAnnotatedMethod", "MethodExtractorsProvider", "ExtractorsProvider", "GetClassEntity", "ClassPredicate", "IsUsingNamespace", "HasClassAttribute", "ClassFileLink", "IsSuspectedInterfaceName"], ["Microsoft.CodeAnalysis"], false, false, [], false, false, [], {"_analysisHelper": [], "ClassEntity": [], "MethodEntity": [], "_repositoryDataCollection": []}, ["FeatureExtractor", "Label"], 0, false, false, false, 10, 1.0, [], 208.3, 173, 20.0, 20.0, 3, 0, false, false, false, false, "public", false, ["Lim.FeaturesExtractor.Dotnet.AspNetCoreAnalysisHelper.HasRoutingAnnotation", "Lim.FeaturesExtractor.Dotnet.RepositoryDataCollection.GetClassEntity"], ["predicate", "classEntity.BaseTypeFullNames.Any", "entity.UsingNamespaces.Contains", "entity.AttributeNames.Contains", "Path.GetFileName", "string.IsNullOrEmpty", "rootDirectoryName.Split", "fullName.Split(\".\")\n                .Last", "fullName.Split", "name.StartsWith", "char.IsUpper"], false, false, false, false, [], false, 0, 0, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, false], ["CommonMethodExtractorsProvider", "Lim.FeaturesExtractor.Dotnet.CommonMethodExtractorsProvider", ["Lim.FeaturesExtractor.Dotnet.MethodExtractorsProvider"], [], "src/Lim.FeaturesExtractor.Dotnet/Extractors/MethodExtractors/CommonMethodExtractorsProvider.cs", 7, 0, {"HttpMethodKeywords": "System.Collections.Generic.IReadOnlyCollection<string>", "ClassEntity": "Lim.FeaturesExtractor.Dotnet.ClassEntity", "MethodEntity": "Lim.FeaturesExtractor.Dotnet.MethodEntity", "_repositoryDataCollection": "Lim.FeaturesExtractor.Dotnet.RepositoryDataCollection"}, ["ClassEntity", "MethodEntity", "_repositoryDataCollection"], ["CommonMethodExtractorsProvider", "MethodName", "MethodUniqueName", "ClassName", "ClassQualifiedName", "Path", "LineNumber", "Link", "Attributes", "DisplayString", "ReturnType", "EssentialReturnTypes", "Visibility", "IsStatic", "IsGeneric", "IsAsync", "IsAbstract", "IsVirtual", "IsOverriding", "BodyLength", "IsProperty", "IsConstructorOrDestructor", "HasHttpMethodAttribute", "HasHttpMethodName", "HasRouteLikeAttribute", "DeclaringTypeFullName", "DeclaredByInterface", "IsExtensionMethod", "MethodExtractorsProvider", "ExtractorsProvider", "GetClassEntity", "ClassPredicate", "IsUsingNamespace", "HasClassAttribute", "ClassFileLink", "IsSuspectedInterfaceName"], ["System.Collections.Generic", "System.Linq", "Infrastructure.Dotnet.Common"], false, false, [], false, false, [], {"HttpMethodKeywords": [], "ClassEntity": [], "MethodEntity": [], "_repositoryDataCollection": []}, ["FeatureExtractor"], 0, false, false, false, 36, 1.0, [], 93.22222222222223, 64, 5.555555555555555, 77.77777777777777, 3, 0, false, false, false, false, "public", false, ["Lim.FeaturesExtractor.Dotnet.ExtractorsProvider.ClassFileLink", "Lim.FeaturesExtractor.Dotnet.RepositoryDataCollection.GetClassEntity"], ["MethodEntity.EssentialReturnTypesFullNames.ToList", "MethodEntity.Modifiers.Contains", "MethodEntity.AttributeNames.Any", "attribute.ContainsAny", "MethodEntity.Name.ContainsAny", "MethodEntity.AttributeNameToParameters.Values.Flatten()\n                .Any", "MethodEntity.AttributeNameToParameters.Values.Flatten", "value.Contains", "MethodEntity.ExplicitDeclaringInterface.OrIfEmpty", "string.IsNullOrEmpty", "predicate", "classEntity.BaseTypeFullNames.Any", "entity.UsingNamespaces.Contains", "entity.AttributeNames.Contains", "Path.GetFileName", "rootDirectoryName.Split", "fullName.Split(\".\")\n                .Last", "fullName.Split", "name.StartsWith", "char.IsUpper", "new[]\n            {\n                \"post\",\n                \"put\",\n                \"get\",\n                \"delete\",\n                \"patch\"\n            }.SelectMany(\n                keyword => new[]\n                {\n                    char.ToUpper(keyword.First()) + keyword.Substring(1),\n                    keyword.ToUpper()\n                }\n            )\n            .ToList", "new[]\n            {\n                \"post\",\n                \"put\",\n                \"get\",\n                \"delete\",\n                \"patch\"\n            }.SelectMany", "char.ToUpper", "keyword.First", "keyword.Substring", "keyword.ToUpper"], false, false, false, false, ["post", "put", "get", "delete", "patch", "/"], false, 0, 0, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, false], ["MethodExtractorsProvider", "Lim.FeaturesExtractor.Dotnet.MethodExtractorsProvider", ["Lim.FeaturesExtractor.Dotnet.ExtractorsProvider"], [], "src/Lim.FeaturesExtractor.Dotnet/Extractors/MethodExtractors/MethodExtractorsProvider.cs", 3, 0, {"ClassEntity": "Lim.FeaturesExtractor.Dotnet.ClassEntity", "MethodEntity": "Lim.FeaturesExtractor.Dotnet.MethodEntity", "_repositoryDataCollection": "Lim.FeaturesExtractor.Dotnet.RepositoryDataCollection"}, ["ClassEntity", "MethodEntity", "_repositoryDataCollection"], ["MethodExtractorsProvider", "ExtractorsProvider", "GetClassEntity", "ClassPredicate", "IsUsingNamespace", "HasClassAttribute", "ClassFileLink", "IsSuspectedInterfaceName"], [], false, false, [], false, false, [], {"ClassEntity": [], "MethodEntity": [], "_repositoryDataCollection": []}, [], 0, false, false, false, 8, 1.0, [], 225.625, 173, 25.0, 0.0, 2, 0, false, false, false, false, "public", false, ["Lim.FeaturesExtractor.Dotnet.RepositoryDataCollection.GetClassEntity"], ["predicate", "classEntity.BaseTypeFullNames.Any", "entity.UsingNamespaces.Contains", "entity.AttributeNames.Contains", "Path.GetFileName", "string.IsNullOrEmpty", "rootDirectoryName.Split", "fullName.Split(\".\")\n                .Last", "fullName.Split", "name.StartsWith", "char.IsUpper"], false, false, false, false, [], false, 0, 0, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, false], ["ClassEntity", "Lim.FeaturesExtractor.Dotnet.ClassEntity", ["???.Entity<BaseTypeDeclarationSyntax, INamedTypeSymbol>"], ["System.IEquatable<ClassEntity>"], "src/Lim.FeaturesExtractor.Dotnet/Parser/Entities/ClassEntity.cs", 10, 0, {"_baseTypes": "System.Collections.Generic.List<ReferencedType>", "_containingClasses": "System.Collections.Generic.List<ClassEntity>", "_fieldEntitiesByName": "System.Collections.Generic.Dictionary<string, FieldEntity>", "_methodEntitiesBySignature": "System.Collections.Generic.Dictionary<string, MethodEntity>", "_orphanedMethodCalls": "System.Collections.Generic.ISet<string>", "_parentSourceFileEntity": "Lim.FeaturesExtractor.Dotnet.SourceFileEntity"}, ["_baseTypes", "_containingClasses", "_fieldEntitiesByName", "_methodEntitiesBySignature", "_orphanedMethodCalls", "_parentSourceFileEntity", "EntityType", "NamespaceName", "FullName", "TypeParameters", "UsingNamespaces", "BaseTypeFullNames", "BaseTypeNames", "MethodEntities", "FieldEntities", "FilePath", "RootDirectory", "ContainingClassTypes", "MethodCalls"], ["ClassEntity", "EntityType", "NamespaceName", "FullName", "DefinedInParts", "TypeParameters", "UsingNamespaces", "BaseTypeFullNames", "BaseTypeNames", "MethodEntities", "FieldEntities", "FilePath", "RootDirectory", "ContainingClassTypes", "IsGeneric", "MethodCalls", "Equals", "MergeFrom", "AddField", "AddFieldDeclaration", "AddMethod", "AddPropertyDeclaration", "AddMethodDeclaration", "AddConstructorDeclaration", "AddDestructorDeclaration", "ResolveTypes", "InheritFromBases", "InheritFrom", "AddMethodCall"], ["System", "System.Collections.Generic", "System.Linq", "Infrastructure.Dotnet.Common", "Microsoft.CodeAnalysis", "Microsoft.CodeAnalysis.CSharp.Syntax"], false, false, [], false, false, [], {"_baseTypes": [], "_containingClasses": [], "_fieldEntitiesByName": [], "_methodEntitiesBySignature": [], "_orphanedMethodCalls": [], "_parentSourceFileEntity": []}, [], 15, true, false, false, 13, 0.4482758620689655, [], 148.93103448275863, 0, 0.0, 89.65517241379311, 1, 0, false, false, false, false, "public", false, ["Lim.FeaturesExtractor.Dotnet.SourceFileTypeResolver.TryResolveType", "Lim.FeaturesExtractor.Dotnet.FieldEntity.ResolveTypes", "Lim.FeaturesExtractor.Dotnet.MethodEntity.ResolveTypes", "Lim.FeaturesExtractor.Dotnet.Entity<BaseTypeDeclarationSyntax, INamedTypeSymbol>.FormatTypeParameters"], ["_baseTypes.Select", "_containingClasses.Select", "TypeParameters.Any", "MethodEntities.SelectMany(entity => entity.MethodCalls)\n            .Union(_orphanedMethodCalls)\n            .Distinct", "MethodEntities.SelectMany(entity => entity.MethodCalls)\n            .Union", "MethodEntities.SelectMany", "UsingNamespaces.AddRange", "_orphanedMethodCalls.AddRange", "_fieldEntitiesByName.Add", "_methodEntitiesBySignature.Add", "classEntitiesByFullName.TryGetValue", "_fieldEntitiesByName.ContainsKey", "_methodEntitiesBySignature.ContainsKey", "_orphanedMethodCalls.Add", "node.Expression.ToString", "containingClass._containingClasses\n                    .Append(containingClass)\n                    .ToList", "containingClass._containingClasses\n                    .Append", "symbol.TypeKind.ToEntityType", ".Types.Select(\n                    baseType => new ReferencedType(baseType.Type)\n                )\n                .ToList", ".Types.Select", "_parentSourceFileEntity.UsingNamespaces.Union(_parentSourceFileEntity.NamespaceAliases.Values)\n                .ToHashSet", "_parentSourceFileEntity.UsingNamespaces.Union", "_baseTypes.Select(_ => _.DisplayName)\n                .ToHashSet", "typeDeclarationSyntax.TypeParameterList.ToNamesList"], false, false, false, false, [], false, 15, 1, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, false], ["Entity", "Lim.FeaturesExtractor.Dotnet.Entity<TNode, TSymbol>", [], ["Lim.FeaturesExtractor.Dotnet.IEntity<TNode, TSymbol>"], "src/Lim.FeaturesExtractor.Dotnet/Parser/Entities/Entity.cs", 22, 0, {}, ["LineNumber", "Modifiers", "AttributeNames", "Visibility", "AttributeNameToParameters", "Node", "Symbol", "Name"], ["Entity", "LineNumber", "Modifiers", "AttributeNames", "Visibility", "AttributeNameToParameters", "Node", "Symbol", "Name", "FormatTypeParameters"], ["System.Collections.Generic", "System.Linq", "Infrastructure.Dotnet.Common", "Microsoft.CodeAnalysis", "Microsoft.CodeAnalysis.CSharp.Syntax"], false, false, [], false, false, [], {}, [], 8, false, false, false, 2, 0.2, [], 91.3, 0, 10.0, 80.0, 1, 0, false, true, false, false, "public", true, [], ["Modifiers.Contains", "typeParameters.None", "typeParameters.JoinToString", "node.GetStartLineNumber", "node.Modifiers.Select(token => token.ValueText)\n                .ToHashSet", "node.Modifiers.Select", "node.AttributeLists.GetAttributeNameToParameters", "AttributeNameToParameters.Keys.ToHashSet"], false, false, false, false, ["", ", "], false, 8, 0, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, false], ["EntityTypeExtensions", "Lim.FeaturesExtractor.Dotnet.EntityTypeExtensions", [], [], "src/Lim.FeaturesExtractor.Dotnet/Parser/Entities/EntityType.cs", 14, 0, {}, [], ["ToEntityType", "ShouldExport"], ["System", "Microsoft.CodeAnalysis"], false, false, [], false, false, [], {}, [], 0, false, false, false, 2, 1.0, [], 452.5, 452, 100.0, 100.0, 0, 0, false, false, true, false, "public", false, [], ["nameof"], false, false, false, false, ["TypeKind value does not map to valid EntityType value"], false, 0, 0, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, false], ["FieldEntity", "Lim.FeaturesExtractor.Dotnet.FieldEntity", ["???.Entity<FieldDeclarationSyntax, IFieldSymbol>"], [], "src/Lim.FeaturesExtractor.Dotnet/Parser/Entities/FieldEntity.cs", 6, 0, {"_parentClass": "Lim.FeaturesExtractor.Dotnet.ClassEntity", "_type": "Lim.FeaturesExtractor.Dotnet.ReferencedType"}, ["_parentClass", "_type", "FullTypeName", "TypeName"], ["FieldEntity", "FullTypeName", "TypeName", "ResolveTypes"], ["Microsoft.CodeAnalysis", "Microsoft.CodeAnalysis.CSharp.Syntax"], false, false, [], false, false, [], {"_parentClass": [], "_type": []}, [], 2, false, false, false, 2, 0.5, [], 79.75, 70, 0.0, 100.0, 1, 0, false, false, false, false, "public", false, ["Lim.FeaturesExtractor.Dotnet.SourceFileTypeResolver.TryResolveType"], [], false, false, false, false, [], false, 2, 0, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, false], ["MethodEntity", "Lim.FeaturesExtractor.Dotnet.MethodEntity", ["???.Entity<MemberDeclarationSyntax, ISymbol>"], [], "src/Lim.FeaturesExtractor.Dotnet/Parser/Entities/MethodEntity.cs", 10, 0, {"_essentialReturnTypes": "System.Collections.Generic.List<ReferencedType>", "_explicitDeclaringInterface": "Lim.FeaturesExtractor.Dotnet.ReferencedType", "_isGetter": "bool", "_isSetter": "bool", "_parameterNameWithType": "System.Collections.Generic.List<(string Name, ReferencedType Type)>", "_returnType": "Lim.FeaturesExtractor.Dotnet.ReferencedType", "_typeParameters": "System.Collections.Generic.IReadOnlyCollection<string>"}, ["_essentialReturnTypes", "_explicitDeclaringInterface", "_parameterNameWithType", "_returnType", "_typeParameters", "ParentClass", "DisplayString", "BodyLength", "Signature", "FullName", "ReturnTypeName", "ReturnTypeFullName", "EssentialReturnTypesFullNames", "MethodCalls"], ["MethodEntity", "ParentClass", "DisplayString", "BodyLength", "IsConstructor", "IsStatic", "IsDestructor", "Signature", "FullName", "IsProperty", "ReturnTypeName", "ReturnTypeFullName", "EssentialReturnTypesFullNames", "IsAsync", "IsGeneric", "MethodCalls", "IsExtensionMethod", "ExplicitDeclaringInterface", "SetParameters", "ResolveTypes", "TryResolveType", "AddMethodCall"], ["System.Collections.Generic", "System.Linq", "Flurl.Util", "Infrastructure.Dotnet.Common", "Microsoft.CodeAnalysis", "Microsoft.CodeAnalysis.CSharp.Syntax"], false, false, [], false, false, [], {"_essentialReturnTypes": [], "_explicitDeclaringInterface": [], "_isGetter": [], "_isSetter": [], "_parameterNameWithType": [], "_returnType": [], "_typeParameters": []}, [], 17, false, false, false, 8, 0.32, [], 194.2, 0, 0.0, 84.0, 4, 0, false, false, false, false, "public", false, ["Lim.FeaturesExtractor.Dotnet.Entity<MemberDeclarationSyntax, ISymbol>.FormatTypeParameters", "Lim.FeaturesExtractor.Dotnet.SourceFileTypeResolver.TryResolveType", "Lim.FeaturesExtractor.Dotnet.TypeSyntaxExtensions.BreakDownInnerTypes", "Lim.FeaturesExtractor.Dotnet.MethodEntity.SetParameters"], ["Modifiers.Contains", "_parameterNameWithType.Select(tuple => tuple.Type.DisplayName).JoinToString", "_parameterNameWithType.Select", "_essentialReturnTypes.Select", "_typeParameters.Any", "parameters.None", "_parameterNameWithType.Add", "parameterSyntax.Identifier.ToInvariantString", "AttributeNameToParameters.Merge", "parameterSyntax.AttributeLists.GetAttributeNameToParameters", "parameters.First()\n                .Modifiers.Any", "parameters.First", "modifier.ToInvariantString", "ParentClass.TypeParameters.Union(_typeParameters)\n                .ToHashSet", "ParentClass.TypeParameters.Union", "MethodCalls.Add", "node.Expression.ToString", "accessorDeclarationSyntax.AttributeLists.GetAttributeNameToParameters", "propertyDeclarationSyntax.Modifiers.ToString", "propertyDeclarationSyntax.Type.ToString", "propertyDeclarationSyntax.Identifier.ToString", "methodDeclarationSyntax.TypeParameterList.ToNamesList", "SetParameters", "methodDeclarationSyntax.Modifiers.ToString", "methodDeclarationSyntax.ReturnType.ToString", "methodDeclarationSyntax.Identifier.ToString", "_parameterNameWithType.Select(pair => $\"{pair.Type} {pair.Name}\").JoinToString", "_parameterNameWithType.Select(pair => $\"{pair.Type.DisplayName} {pair.Name}\").JoinToString"], false, false, false, false, [" get; ", "", " set; ", ", ", "void", "static-", "Task"], false, 17, 1, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, false], ["ReferencedType", "Lim.FeaturesExtractor.Dotnet.ReferencedType", [], [], "src/Lim.FeaturesExtractor.Dotnet/Parser/Entities/ReferencedType.cs", 6, 0, {"UnknownNamespace": "string", "_genericSuffix": "string", "_isArray": "bool", "_isNullable": "bool"}, ["_genericSuffix", "NamespaceName", "Name", "DisplayName", "FullName"], ["ReferencedType", "NamespaceName", "Name", "DisplayName", "FullName", "IsResolved"], ["Flurl.Util", "Microsoft.CodeAnalysis.CSharp.Syntax"], false, false, [], false, false, [], {"UnknownNamespace": [], "_genericSuffix": [], "_isArray": [], "_isNullable": []}, [], 5, false, false, false, 2, 0.2857142857142857, [], 139.71428571428572, 0, 0.0, 100.0, 2, 0, false, false, false, false, "public", false, ["Lim.FeaturesExtractor.Dotnet.NameSyntaxExtensions.ToStringSanitized"], ["nullableTypeSyntax.ElementType.ToStringSanitized", "arrayTypeSyntax.ElementType.ToStringSanitized", "genericNameSyntax.TypeArgumentList.ToInvariantString", "genericNameSyntax.Identifier.ToInvariantString"], false, false, false, false, ["???", "[]", "", "?", "."], false, 5, 1, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, false], ["SourceFileEntity", "Lim.FeaturesExtractor.Dotnet.SourceFileEntity", [], [], "src/Lim.FeaturesExtractor.Dotnet/Parser/Entities/SourceFileEntity.cs", 10, 0, {"_classesByNamespace": "System.Collections.Generic.Dictionary<string, List<ClassEntity>>", "_namespaceAliases": "System.Collections.Generic.Dictionary<string, string>", "_parent": "Lim.FeaturesExtractor.Dotnet.RepositoryDataCollection", "_usingNamespaces": "System.Collections.Generic.HashSet<string>"}, ["_classesByNamespace", "_namespaceAliases", "_parent", "_usingNamespaces", "FilePath", "ClassEntities", "RootDirectory"], ["SourceFileEntity", "FilePath", "ClassEntities", "UsingNamespaces", "NamespaceAliases", "RootDirectory", "AddUsingDirective", "AddClassDeclaration", "AddInterfaceDeclaration", "AddStructDeclaration", "AddEnumDeclaration", "AddTypeDeclaration"], ["System.Collections.Generic", "System.IO", "System.Linq", "Infrastructure.Dotnet.Common", "Microsoft.CodeAnalysis", "Microsoft.CodeAnalysis.CSharp.Syntax"], false, false, [], false, false, [], {"_classesByNamespace": [], "_namespaceAliases": [], "_parent": [], "_usingNamespaces": []}, [], 5, false, false, false, 7, 0.5833333333333334, [], 137.08333333333334, 168, 0.0, 91.66666666666667, 1, 0, false, false, false, false, "public", false, [], ["_classesByNamespace.Values.Flatten()\n            .ToList", "_classesByNamespace.Values.Flatten", "_usingNamespaces.Add", "usingDirectiveSyntax.Name.ToFullString", "usingDirectiveSyntax.Alias.Name.ToFullString", "AddTypeDeclaration", "_classesByNamespace.AddOrUpdate", "classEntities.Add", "Path.GetRelativePath"], false, false, false, false, [], false, 5, 0, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, false], ["AttributeSyntaxExtensions", "Lim.FeaturesExtractor.Dotnet.AttributeSyntaxExtensions", [], [], "src/Lim.FeaturesExtractor.Dotnet/Parser/Extensions/AttributeSyntaxExtensions.cs", 8, 0, {}, [], ["GetAttributeNameToParameters", "GetParameters", "FormatParameter"], ["System.Collections.Generic", "System.Linq", "Microsoft.CodeAnalysis", "Microsoft.CodeAnalysis.CSharp.Syntax"], false, false, [], false, false, [], {}, [], 0, false, false, false, 3, 1.0, [], 307.3333333333333, 292, 100.0, 33.333333333333336, 0, 0, false, false, true, false, "public", false, [], ["attributeLists.SelectMany(attributeList => attributeList.Attributes)\n                .GroupBy(\n                    attribute => attribute.Name.ToString()\n                        .Trim()\n                )\n                .ToDictionary", "attributeLists.SelectMany(attributeList => attributeList.Attributes)\n                .GroupBy", "attributeLists.SelectMany", "attribute.Name.ToString()\n                        .Trim", "attribute.Name.ToString", "grouping.SelectMany(attribute => attribute.GetParameters())\n                        .ToHashSet", "grouping.SelectMany", "attribute.GetParameters", ".Arguments.Select(attributeArgument => attributeArgument.FormatParameter())\n                .ToHashSet", ".Arguments.Select", "attributeArgument.FormatParameter", "attributeArgumentSyntax.Expression.ToString()\n                .Trim", "attributeArgumentSyntax.Expression.ToString"], false, false, false, false, [], false, 0, 0, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, false], ["ExpressionSyntaxExtensions", "Lim.FeaturesExtractor.Dotnet.ExpressionSyntaxExtensions", [], [], "src/Lim.FeaturesExtractor.Dotnet/Parser/Extensions/ExpressionSyntaxExtensions.cs", 5, 0, {}, [], ["ExtractGenericName"], ["Microsoft.CodeAnalysis.CSharp.Syntax"], false, false, [], false, false, [], {}, [], 0, false, false, false, 1, 1.0, [], 294.0, 294, 100.0, 100.0, 0, 0, false, false, true, false, "public", false, [], [], false, false, false, false, [], false, 0, 0, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, false], ["NameSyntaxExtensions", "Lim.FeaturesExtractor.Dotnet.NameSyntaxExtensions", [], [], "src/Lim.FeaturesExtractor.Dotnet/Parser/Extensions/NameSyntaxExtensions.cs", 5, 0, {}, [], ["ToStringSanitized"], ["Microsoft.CodeAnalysis.CSharp.Syntax"], false, false, [], false, false, [], {}, [], 0, false, false, false, 2, 1.0, [], 60.0, 60, 100.0, 100.0, 0, 0, false, false, true, false, "public", false, [], ["nameSyntax.ToString()\n                .Trim", "nameSyntax.ToString"], false, false, false, false, [], false, 0, 0, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, false], ["SemanticModelExtensions", "Lim.FeaturesExtractor.Dotnet.SemanticModelExtensions", [], [], "src/Lim.FeaturesExtractor.Dotnet/Parser/Extensions/SemanticModelExtensions.cs", 5, 0, {}, [], ["GetDeclaredSymbol", "GetReferencedSymbol"], ["Microsoft.CodeAnalysis"], false, false, [], false, false, [], {}, [], 0, false, false, false, 2, 1.0, [], 371.0, 371, 100.0, 100.0, 0, 0, false, false, true, false, "public", false, [], ["semanticModel.GetDeclaredSymbol", "semanticModel.GetSymbolInfo"], false, false, false, false, [], false, 0, 0, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, false], ["SymbolExtensions", "Lim.FeaturesExtractor.Dotnet.SymbolExtensions", [], [], "src/Lim.FeaturesExtractor.Dotnet/Parser/Extensions/SymbolExtensions.cs", 9, 0, {}, [], ["SelfAndBaseTypes", "MatchesKnownType", "UnwrapTaskType", "IsNamedNamespace", "YieldNamespaceElements", "GetTypeSimpleName"], ["System", "System.Collections.Generic", "System.Linq", "System.Threading.Tasks", "Microsoft.CodeAnalysis"], false, false, [], false, false, [], {}, [], 0, false, false, false, 8, 1.0, [], 380.875, 251, 100.0, 75.0, 0, 0, false, false, true, false, "public", false, [], ["type.GetGenericArguments", "namedType.Equals", "namedType.TypeArguments\n                    .Zip(\n                        type.GetGenericArguments(),\n                        (typeArgumentSymbol, typeArgumentType) => typeArgumentSymbol.MatchesKnownType(typeArgumentType, context)\n                    )\n                    .All", "namedType.TypeArguments\n                    .Zip", "typeArgumentSymbol.MatchesKnownType", "namedTypeSymbol.ContainingNamespace.IsNamedNamespace", "namespaceFullName\n                .Split('.')\n                .Reverse()\n                .SequenceEqual", "namespaceFullName\n                .Split('.')\n                .Reverse", "namespaceFullName\n                .Split", "typeName.Substring", "typeName.IndexOf"], false, false, false, false, ["Attribute"], false, 0, 0, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, false], ["SyntaxNodeExtensions", "Lim.FeaturesExtractor.Dotnet.SyntaxNodeExtensions", [], [], "src/Lim.FeaturesExtractor.Dotnet/Parser/Extensions/SyntaxNodeExtensions.cs", 5, 0, {}, [], ["GetStartLineNumber"], ["Microsoft.CodeAnalysis"], false, false, [], false, false, [], {}, [], 0, false, false, false, 1, 1.0, [], 97.0, 97, 100.0, 100.0, 0, 0, false, false, true, false, "public", false, [], ["node.SyntaxTree.GetLineSpan"], false, false, false, false, [], false, 0, 0, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, false], ["TypeParameterSyntaxExtensions", "Lim.FeaturesExtractor.Dotnet.TypeParameterSyntaxExtensions", [], [], "src/Lim.FeaturesExtractor.Dotnet/Parser/Extensions/TypeParameterSyntaxExtensions.cs", 7, 0, {}, [], ["ToNamesList"], ["System.Collections.Generic", "System.Linq", "Microsoft.CodeAnalysis.CSharp.Syntax"], false, false, [], false, false, [], {}, [], 0, false, false, false, 1, 1.0, [], 134.0, 134, 100.0, 100.0, 0, 0, false, false, true, false, "public", false, [], [".Parameters.Select(_ => _.Identifier.ValueText)\n                .ToList", ".Parameters.Select"], false, false, false, false, [], false, 0, 0, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, false], ["TypeSyntaxExtensions", "Lim.FeaturesExtractor.Dotnet.TypeSyntaxExtensions", [], [], "src/Lim.FeaturesExtractor.Dotnet/Parser/Extensions/TypeSyntaxExtensions.cs", 6, 0, {}, [], ["BreakDownInnerTypes"], ["System.Collections.Generic", "Microsoft.CodeAnalysis.CSharp.Syntax"], false, false, [], false, false, [], {}, [], 0, false, false, false, 2, 1.0, [], 370.0, 370, 100.0, 50.0, 0, 0, false, false, true, false, "public", false, [], ["results.Add", "BreakDownInnerTypes"], false, false, false, false, [], false, 0, 0, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, false], ["RepositoryDataCollection", "Lim.FeaturesExtractor.Dotnet.RepositoryDataCollection", [], [], "src/Lim.FeaturesExtractor.Dotnet/Parser/RepositoryDataCollection.cs", 8, 0, {"_classesGraph": "???.DirectedAcyclicGraph<ClassEntity>", "_classEntitiesByFullName": "System.Collections.Generic.Dictionary<string, ClassEntity>"}, ["_classesGraph", "_classEntitiesByFullName", "RootDirectory", "Solution", "SourceFileEntityByPath", "ClassEntitiesToExport", "MethodEntitiesToExport"], ["RepositoryDataCollection", "RootDirectory", "Solution", "SourceFileEntityByPath", "ClassEntitiesToExport", "MethodEntitiesToExport", "AddSourceFile", "GetSourceFileByPath", "PostVisitEnrichments", "GetClassEntity", "MergeClassEntities"], ["System.Collections.Generic", "System.Linq", "Infrastructure.Dotnet.Common", "Microsoft.CodeAnalysis"], false, false, [], false, false, [], {"_classesGraph": [], "_classEntitiesByFullName": []}, [], 5, false, false, false, 6, 0.5454545454545454, [], 220.9090909090909, 65, 0.0, 81.81818181818181, 1, 0, false, false, false, false, "public", false, ["Lim.FeaturesExtractor.Dotnet.EntityTypeExtensions.ShouldExport", "Lim.FeaturesExtractor.Dotnet.ClassEntity.ResolveTypes", "Lim.FeaturesExtractor.Dotnet.ClassEntity.MergeFrom"], ["_classEntitiesByFullName.Values.Where", "ClassEntitiesToExport.SelectMany", "SourceFileEntityByPath.GetValueOrDefault", "SourceFileEntityByPath.Values.SelectMany(sourceFileEntity => sourceFileEntity.ClassEntities)\n                .GroupBy(classEntity => classEntity.FullName)\n                .ToDictionary", "SourceFileEntityByPath.Values.SelectMany(sourceFileEntity => sourceFileEntity.ClassEntities)\n                .GroupBy", "SourceFileEntityByPath.Values.SelectMany", "_classesGraph.AddVertex", "_classesGraph.AddEdge", "_classesGraph.TopologicalVisit", "entity.InheritFromBases", "_classEntitiesByFullName.GetValueOrDefault", "classEntities.ToList", "classEntitiesList.First", "classEntitiesList.Any", "entity.Modifiers.Contains", "classEntitiesList.Skip"], false, false, false, false, [], false, 5, 0, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, false], ["SourceFilesParser", "Lim.FeaturesExtractor.Dotnet.SourceFilesParser", [], ["Lim.FeaturesExtractor.Dotnet.ISourceFilesParser"], "src/Lim.FeaturesExtractor.Dotnet/Parser/SourceFilesParser.cs", 16, 0, {"TestDirectoryNames": "System.Collections.Generic.HashSet<string>", "_buildLock": "???.AsyncLock", "_builtinExternalTypes": "Lim.FeaturesExtractor.Dotnet.ExternalTypes", "_featuresExtractorBuilder": "System.Func<RepositoryDataCollection, IFeaturesExtractor>", "_fileSystem": "???.IFileSystem", "_logger": "???.ILogger<SourceFilesParser>"}, ["_buildLock", "_builtinExternalTypes", "_featuresExtractorBuilder", "_fileSystem", "_logger"], ["SourceFilesParser", "ParseFilesAsync", "IsSkippableProject", "IsTestProject", "LoadSolutionAsync", "LoadDlls"], ["System", "System.Collections.Generic", "System.IO", "System.Linq", "System.Reflection", "System.Threading", "System.Threading.Tasks", "AsyncUtilities", "Infrastructure.Dotnet.Common", "Microsoft.CodeAnalysis", "Microsoft.CodeAnalysis.MSBuild", "Microsoft.Extensions.Logging"], false, false, [], false, false, [], {"TestDirectoryNames": [], "_buildLock": [], "_builtinExternalTypes": [], "_featuresExtractorBuilder": [], "_fileSystem": [], "_logger": []}, [], 0, false, false, false, 6, 1.0, [], 864.8333333333334, 422, 33.333333333333336, 33.333333333333336, 1, 0, false, false, false, true, "public", false, ["Lim.FeaturesExtractor.Dotnet.RepositoryDataCollection.PostVisitEnrichments", "Lim.FeaturesExtractor.Dotnet.IFeaturesExtractor.ExtractForClassesAsync", "Lim.FeaturesExtractor.Dotnet.IFeaturesExtractor.ExtractForMethodsAsync", "Lim.FeaturesExtractor.Dotnet.ExternalTypes.AddFrom", "Lim.FeaturesExtractor.Dotnet.SourceFilesParser.LoadDlls"], ["IsSkippableProject", "_logger.LogInformation", "project.GetCompilationAsync", "_logger.LogError", "document.GetSyntaxRootAsync", "compilation.GetSemanticModel", "walker.Visit", "_featuresExtractorBuilder", "_fileSystem.WriteCompressedJsonAsync", "targetFileProvider", "project.Name.Split(\".\")\n                .Any", "project.Name.Split", "nameElement.EndsWith", "TestDirectoryNames.ContainsAny", "(project.FilePath ?? \"\").ToLower()\n                .Split", "(project.FilePath ?? \"\").ToLower", "_fileSystem\n                .GetFilePathsRecursive(rootDirectory, \"*.sln\")\n                .ToList", "_fileSystem\n                .GetFilePathsRecursive", "_buildLock.LockAsync", "MSBuildWorkspace.Create", "_logger.LogWarning", "solutionFiles.None", "solutionFiles.JoinToString", "workspace.OpenSolutionAsync", "_fileSystem.GetFilePathsRecursive", "Assembly.LoadFile", "_logger.LogDebug", "Path.GetDirectoryName"], false, false, false, false, ["tests", "e2e", "automation", "class", "method", "C#", ".", "Tests", "", "*.sln", "Can't find solution file; using empty solution.", ", ", "*.dll", "Failed to load data from dll at '{path}'"], false, 0, 0, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, false], ["SymbolResolutionException", "Lim.FeaturesExtractor.Dotnet.SymbolResolutionException", ["System.Exception"], [], "src/Lim.FeaturesExtractor.Dotnet/Parser/SymbolResolutionException.cs", 7, 0, {}, ["Node", "Symbol"], ["SymbolResolutionException", "Node", "Symbol", "FormatMessage"], ["System", "Microsoft.CodeAnalysis", "Microsoft.CodeAnalysis.CSharp"], false, false, [], false, false, [], {}, [], 2, false, false, false, 2, 0.5, [], 186.75, 37, 25.0, 75.0, 1, 0, false, false, false, false, "public", false, ["Lim.FeaturesExtractor.Dotnet.SymbolResolutionException.FormatMessage"], ["node.GetLocation", "location.GetLineSpan", "node.Kind"], false, true, false, false, ["null", ""], false, 2, 0, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, false], ["SyntaxWalker", "Lim.FeaturesExtractor.Dotnet.SyntaxWalker", ["???.CSharpSyntaxWalker"], [], "src/Lim.FeaturesExtractor.Dotnet/Parser/SyntaxWalker.cs", 7, 0, {"_visitContext": "Lim.FeaturesExtractor.Dotnet.VisitContext"}, ["_visitContext", "RepositoryDataCollection", "SemanticModel", "CurrentSourceFileEntity", "CurrentNamespaceName", "CurrentClassEntity", "CurrentMethodEntity"], ["SyntaxWalker", "RepositoryDataCollection", "SemanticModel", "CurrentSourceFileEntity", "CurrentNamespaceName", "CurrentClassEntity", "CurrentMethodEntity", "Visit", "VisitUsingDirective", "VisitNamespaceDeclaration", "VisitClassDeclaration", "VisitInterfaceDeclaration", "VisitStructDeclaration", "VisitEnumDeclaration", "VisitFieldDeclaration", "VisitPropertyDeclaration", "VisitMethodDeclaration", "VisitConstructorDeclaration", "VisitDestructorDeclaration", "VisitInvocationExpression"], ["Microsoft.CodeAnalysis", "Microsoft.CodeAnalysis.CSharp", "Microsoft.CodeAnalysis.CSharp.Syntax"], false, false, [], false, false, [], {"_visitContext": []}, [], 6, false, false, false, 14, 0.7, [], 243.6, 208, 0.0, 70.0, 1, 0, false, false, false, false, "public", false, ["Lim.FeaturesExtractor.Dotnet.RepositoryDataCollection.GetSourceFileByPath", "Lim.FeaturesExtractor.Dotnet.VisitContext.GetContext", "Lim.FeaturesExtractor.Dotnet.VisitContext.EnterContext", "Lim.FeaturesExtractor.Dotnet.RepositoryDataCollection.AddSourceFile", "Lim.FeaturesExtractor.Dotnet.SourceFileEntity.AddUsingDirective", "Lim.FeaturesExtractor.Dotnet.VisitContext.PeekLevel", "Lim.FeaturesExtractor.Dotnet.SourceFileEntity.AddClassDeclaration", "Lim.FeaturesExtractor.Dotnet.SourceFileEntity.AddInterfaceDeclaration", "Lim.FeaturesExtractor.Dotnet.SourceFileEntity.AddStructDeclaration", "Lim.FeaturesExtractor.Dotnet.SourceFileEntity.AddEnumDeclaration", "Lim.FeaturesExtractor.Dotnet.ClassEntity.AddFieldDeclaration", "Lim.FeaturesExtractor.Dotnet.ClassEntity.AddPropertyDeclaration", "Lim.FeaturesExtractor.Dotnet.ClassEntity.AddMethodDeclaration", "Lim.FeaturesExtractor.Dotnet.ClassEntity.AddConstructorDeclaration", "Lim.FeaturesExtractor.Dotnet.ClassEntity.AddDestructorDeclaration", "Lim.FeaturesExtractor.Dotnet.MethodEntity.AddMethodCall", "Lim.FeaturesExtractor.Dotnet.ClassEntity.AddMethodCall"], ["base.Visit", "base.VisitUsingDirective", "node.Name.ToStringSanitized", "base.VisitNamespaceDeclaration", "SemanticModel.GetDeclaredSymbol<INamedTypeSymbol>", "base.VisitClassDeclaration", "base.VisitInterfaceDeclaration", "base.VisitStructDeclaration", "base.VisitEnumDeclaration", "SemanticModel.GetDeclaredSymbol<IFieldSymbol>", "base.VisitFieldDeclaration", "SemanticModel.GetDeclaredSymbol<IPropertySymbol>", "base.VisitPropertyDeclaration", "SemanticModel.GetDeclaredSymbol<IMethodSymbol>", "base.VisitMethodDeclaration", "base.VisitConstructorDeclaration", "base.VisitDestructorDeclaration", "base.VisitInvocationExpression"], false, false, false, false, ["", "."], false, 6, 0, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, false], ["CommandLineOptions", "Lim.FeaturesExtractor.Dotnet.CommandLineOptions", [], [], "src/Lim.FeaturesExtractor.Dotnet/Parser/Utils/CommandLineOptions.cs", 6, 0, {}, ["Directory", "DirectoryRepeat", "GithubListFilePath", "TimeoutSeconds"], ["Directory", "DirectoryRepeat", "GithubListFilePath", "TimeoutSeconds"], ["CommandLine", "JetBrains.Annotations"], false, false, ["UsedImplicitly"], false, false, [], {}, ["Option"], 4, false, false, false, 0, 0.0, [], 0.0, 0, 0.0, 100.0, 0, 0, false, false, false, false, "public", false, [], [], false, false, false, false, ["dir", "repeat", "ghlist", "timeout"], false, 4, 4, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, false], ["ExternalTypes", "Lim.FeaturesExtractor.Dotnet.ExternalTypes", [], [], "src/Lim.FeaturesExtractor.Dotnet/Parser/Utils/ExternalTypes.cs", 8, 0, {"_fullNames": "System.Collections.Generic.HashSet<string>"}, ["_fullNames"], ["ExternalTypes", "AddFrom", "Contains"], ["System.Collections.Generic", "System.Linq", "System.Reflection", "Infrastructure.Dotnet.Common"], false, false, [], false, false, [], {"_fullNames": []}, [], 0, false, false, false, 4, 1.0, [], 127.0, 56, 0.0, 100.0, 2, 0, false, false, false, false, "public", false, [], ["_fullNames.AddRange", "assembly.GetTypes()\n                    .Where(type => !string.IsNullOrEmpty(type.FullName))\n                    .Select(\n                        type => type.FullName.Split(\"`\")\n                            .First()\n                    )\n                    .Where", "assembly.GetTypes()\n                    .Where(type => !string.IsNullOrEmpty(type.FullName))\n                    .Select", "assembly.GetTypes()\n                    .Where", "assembly.GetTypes", "string.IsNullOrEmpty", "type.FullName.Split(\"`\")\n                            .First", "type.FullName.Split", "_fullNames.Contains"], false, false, false, false, ["`"], false, 0, 0, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, false], ["Modifiers", "Lim.FeaturesExtractor.Dotnet.Modifiers", [], [], "src/Lim.FeaturesExtractor.Dotnet/Parser/Utils/Modifiers.cs", 5, 0, {"Public": "string", "Private": "string", "Internal": "string", "Protected": "string", "Static": "string", "Const": "string", "Abstract": "string", "Async": "string", "Virtual": "string", "Override": "string", "This": "string", "Partial": "string"}, ["VisibilityModifiers"], ["VisibilityModifiers"], ["System.Collections.Generic"], false, false, [], false, false, [], {"Public": [], "Private": [], "Internal": [], "Protected": [], "Static": [], "Const": [], "Abstract": [], "Async": [], "Virtual": [], "Override": [], "This": [], "Partial": []}, [], 1, false, false, false, 0, 0.0, [], 0.0, 0, 100.0, 100.0, 0, 0, false, false, true, false, "public", false, [], [], false, false, false, false, ["public", "private", "internal", "protected", "static", "const", "abstract", "async", "virtual", "override", "this", "partial"], false, 1, 0, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, false], ["SourceFileTypeResolver", "Lim.FeaturesExtractor.Dotnet.SourceFileTypeResolver", [], [], "src/Lim.FeaturesExtractor.Dotnet/Parser/Utils/SourceFileTypeResolver.cs", 8, 0, {"ValueTypes": "System.Collections.Generic.ISet<string>", "_classEntitiesByFullName": "System.Collections.Generic.IReadOnlyDictionary<string, ClassEntity>", "_externalTypes": "Lim.FeaturesExtractor.Dotnet.ExternalTypes", "_namespaceAliases": "System.Collections.Generic.IReadOnlyDictionary<string, string>", "_typeNameToNamespaceCache": "System.Collections.Concurrent.ConcurrentDictionary<string, string>", "_usingNamespaces": "System.Collections.Generic.IReadOnlyCollection<string>"}, ["_classEntitiesByFullName", "_externalTypes", "_namespaceAliases", "_typeNameToNamespaceCache", "_usingNamespaces"], ["SourceFileTypeResolver", "TryResolveType"], ["System.Collections.Concurrent", "System.Collections.Generic", "System.Linq", "Infrastructure.Dotnet.Common"], false, false, [], false, false, [], {"ValueTypes": [], "_classEntitiesByFullName": [], "_externalTypes": [], "_namespaceAliases": [], "_typeNameToNamespaceCache": [], "_usingNamespaces": []}, [], 0, false, false, false, 3, 1.0, [], 577.6666666666666, 542, 0.0, 66.66666666666667, 1, 0, false, false, false, false, "public", false, ["Lim.FeaturesExtractor.Dotnet.ExternalTypes.Contains"], ["typeParameters.Contains", "_typeNameToNamespaceCache.GetOrAdd", "ValueTypes.Contains", "typeName.StartsWith", "typeName.Split('.')\n                .Select(\n                    typePart => _namespaceAliases.TryGetValue(typePart, out var resolvedPart)\n                        ? resolvedPart\n                        : typePart\n                )\n                .JoinToString", "typeName.Split('.')\n                .Select", "typeName.Split", "_namespaceAliases.TryGetValue", "_usingNamespaces.Prepend", "_classEntitiesByFullName.ContainsKey"], false, false, false, false, ["void", "bool", "byte", "char", "decimal", "double", "float", "int", "long", "sbyte", "short", "uint", "ulong", "ushort", "object", "string", "dynamic", "", "(", "."], false, 0, 0, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, false], ["VisitContext", "Lim.FeaturesExtractor.Dotnet.VisitContext", [], [], "src/Lim.FeaturesExtractor.Dotnet/Parser/Utils/VisitContext.cs", 9, 0, {"_objects": "System.Collections.Generic.Stack<(object Value, VisitContextLevel Key)>"}, ["_objects"], ["EnterContext", "GetContext", "PeekLevel"], ["System", "System.Collections.Generic", "System.Linq", "Infrastructure.Dotnet.Common", "Nito.Disposables"], false, false, [], false, false, [], {"_objects": []}, [], 0, false, false, false, 4, 1.0, [], 103.5, 116, 0.0, 100.0, 0, 0, false, false, false, false, "public", false, [], ["_objects.Push", "_objects.Pop", "_objects.FirstOrDefault", "typeof(T).GetDisplayName", "_objects.First"], false, false, false, false, [], false, 0, 0, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, false], ["Program", "Lim.FeaturesExtractor.Dotnet.Program", [], [], "src/Lim.FeaturesExtractor.Dotnet/Program.cs", 15, 0, {}, [], ["Main", "RunAsCommandLine", "ConfigureLogging", "ConfigureServices"], ["System.Collections.Generic", "System.Linq", "System.Reflection", "System.Threading.Tasks", "CommandLine", "Infrastructure.Dotnet.Common", "Microsoft.AspNetCore", "Microsoft.AspNetCore.Hosting", "Microsoft.Extensions.Configuration", "Microsoft.Extensions.DependencyInjection", "Microsoft.Extensions.Logging"], false, false, [], false, false, [], {}, [], 0, false, false, false, 4, 1.0, [], 579.75, 594, 100.0, 25.0, 0, 0, false, false, true, true, "public", false, [], ["args.Any", "WebHost.CreateDefaultBuilder(args)\n                    .ConfigureAppConfiguration(\n                        (hostContext, configApp) =>\n                        {\n                            hostContext.HostingEnvironment.ApplicationName = \"Lim.FeaturesExtractor.Dotnet\";\n                        }\n                    )\n                    .ConfigureServices(ConfigureServices)\n                    .ConfigureLogging(ConfigureLogging)\n                    .UseStartup<Startup>()\n                    .Build()\n                    .RunAsyncSafe", "WebHost.CreateDefaultBuilder(args)\n                    .ConfigureAppConfiguration(\n                        (hostContext, configApp) =>\n                        {\n                            hostContext.HostingEnvironment.ApplicationName = \"Lim.FeaturesExtractor.Dotnet\";\n                        }\n                    )\n                    .ConfigureServices(ConfigureServices)\n                    .ConfigureLogging(ConfigureLogging)\n                    .UseStartup<Startup>()\n                    .Build", "WebHost.CreateDefaultBuilder(args)\n                    .ConfigureAppConfiguration(\n                        (hostContext, configApp) =>\n                        {\n                            hostContext.HostingEnvironment.ApplicationName = \"Lim.FeaturesExtractor.Dotnet\";\n                        }\n                    )\n                    .ConfigureServices(ConfigureServices)\n                    .ConfigureLogging(ConfigureLogging)\n                    .UseStartup<Startup>", "WebHost.CreateDefaultBuilder(args)\n                    .ConfigureAppConfiguration(\n                        (hostContext, configApp) =>\n                        {\n                            hostContext.HostingEnvironment.ApplicationName = \"Lim.FeaturesExtractor.Dotnet\";\n                        }\n                    )\n                    .ConfigureServices(ConfigureServices)\n                    .ConfigureLogging", "WebHost.CreateDefaultBuilder(args)\n                    .ConfigureAppConfiguration(\n                        (hostContext, configApp) =>\n                        {\n                            hostContext.HostingEnvironment.ApplicationName = \"Lim.FeaturesExtractor.Dotnet\";\n                        }\n                    )\n                    .ConfigureServices", "WebHost.CreateDefaultBuilder(args)\n                    .ConfigureAppConfiguration", "WebHost.CreateDefaultBuilder", "Parser.Default.ParseArguments<CommandLineOptions>", "string.IsNullOrEmpty", "Enumerable.Range", "configLogging.ClearProviders", "configLogging.AddConfiguration", "hostContext.Configuration.GetSection", "configLogging.AddFile", "hostContext.Configuration.GetSection(\"FileLoggingOptions\")\n                        .Bind", "configLogging.AddConsoleLogger", "hostContext.Configuration.GetValue<bool>", "services.AddSingleton", "services.RegisterServicesFromAssembly", "Assembly.Load", "services.AddSingleton<ISourceFilesParser, SourceFilesParser>", "services.AddBuilder<IFeaturesExtractor, FeaturesExtractor, RepositoryDataCollection>"], false, false, false, false, ["Lim.FeaturesExtractor.Dotnet", "Logging", "FileLoggingOptions", "Logging:SilenceLivenessChecks", "Infrastructure.Dotnet.Common"], false, 0, 0, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, false], ["AspNetCoreAnalysisHelper", "Lim.FeaturesExtractor.Dotnet.AspNetCoreAnalysisHelper", [], [], "src/Lim.FeaturesExtractor.Dotnet/SemanticAnalysis/AspNetCoreAnalysisHelper.cs", 7, 0, {}, [], ["IsControllerClass", "HasRoutingAnnotation", "HasBindingSourceAnnotatedParameters", "ReturnsActionResult"], ["System.Linq", "Infrastructure.Dotnet.Common", "Microsoft.CodeAnalysis"], false, false, [], false, false, [], {}, [], 0, false, false, false, 4, 1.0, [], 576.25, 580, 0.0, 100.0, 0, 0, false, false, false, false, "public", false, ["Lim.FeaturesExtractor.Dotnet.SymbolExtensions.MatchesKnownType", "Lim.FeaturesExtractor.Dotnet.SymbolExtensions.SelfAndBaseTypes"], ["classEntity.Symbol\n                .SelfAndBaseTypes()\n                .Skip(1)\n                .Any", "classEntity.Symbol\n                .SelfAndBaseTypes()\n                .Skip", "classEntity.Symbol\n                .SelfAndBaseTypes", "baseType\n                            .GetAttributes()\n                            .Any", "baseType\n                            .GetAttributes", "attributeData.AttributeClass.MatchesKnownType", "methodSymbol.GetAttributes()\n                .Select(_ => _.AttributeClass)\n                .WhereNotNull()\n                .Any", "methodSymbol.GetAttributes()\n                .Select(_ => _.AttributeClass)\n                .WhereNotNull", "methodSymbol.GetAttributes()\n                .Select", "methodSymbol.GetAttributes", "attributeClass.MatchesKnownType", "AspNetCoreKnownTypes.HttpVerbAttributes.Any", "methodSymbol.Parameters.Any", "parameter\n                        .GetAttributes()\n                        .Select(_ => _.AttributeClass)\n                        .WhereNotNull()\n                        .Any", "parameter\n                        .GetAttributes()\n                        .Select(_ => _.AttributeClass)\n                        .WhereNotNull", "parameter\n                        .GetAttributes()\n                        .Select", "parameter\n                        .GetAttributes", "AspNetCoreKnownTypes.BindingSourceAttributes.Any", "methodSymbol.ReturnType.UnwrapTaskType", "returnType.SelfAndBaseTypes()\n                .Any"], false, false, false, false, [], false, 0, 0, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, false], ["AspNetCoreKnownTypes", "Lim.FeaturesExtractor.Dotnet.AspNetCoreKnownTypes", [], [], "src/Lim.FeaturesExtractor.Dotnet/SemanticAnalysis/AspNetCoreKnownTypes.cs", 6, 0, {"MvcNamespace": "Lim.FeaturesExtractor.Dotnet.KnownNamespace", "Controller": "Lim.FeaturesExtractor.Dotnet.KnownType", "ControllerBase": "Lim.FeaturesExtractor.Dotnet.KnownType", "ApiControllerAttribute": "Lim.FeaturesExtractor.Dotnet.KnownType", "IActionResult": "Lim.FeaturesExtractor.Dotnet.KnownType", "ActionResultOfT": "Lim.FeaturesExtractor.Dotnet.KnownType", "RouteAttribute": "Lim.FeaturesExtractor.Dotnet.KnownType", "HttpVerbAttributes": "System.Collections.Generic.ISet<KnownType>", "BindingSourceAttributes": "System.Collections.Generic.ISet<KnownType>"}, [], [], ["System.Collections.Generic", "System.Linq"], false, false, [], false, false, [], {"MvcNamespace": [], "Controller": [], "ControllerBase": [], "ApiControllerAttribute": [], "IActionResult": [], "ActionResultOfT": [], "RouteAttribute": [], "HttpVerbAttributes": [], "BindingSourceAttributes": []}, [], 0, false, false, false, 0, 0.0, [], 0.0, 0, 0.0, 0.0, 0, 0, false, false, true, false, "public", false, ["Lim.FeaturesExtractor.Dotnet.KnownNamespace.Type"], ["new[] {\"Get\", \"Post\", \"Put\", \"Delete\", \"Patch\", \"Head\", \"Options\"}\n            .Select(verb => MvcNamespace.Type($\"Http{verb}Attribute\"))\n            .ToHashSet", "new[] {\"Get\", \"Post\", \"Put\", \"Delete\", \"Patch\", \"Head\", \"Options\"}\n            .Select", "new[] {\"Body\", \"From\", \"Header\", \"Query\", \"Route\", \"Services\"}\n            .Select(source => MvcNamespace.Type($\"From{source}Attribute\"))\n            .ToHashSet", "new[] {\"Body\", \"From\", \"Header\", \"Query\", \"Route\", \"Services\"}\n            .Select"], false, false, false, false, ["Microsoft.AspNetCore.Mvc", "Controller", "ControllerBase", "ApiControllerAttribute", "IActionResult", "ActionResult", "RouteAttribute", "Get", "Post", "Put", "Delete", "Patch", "Head", "Options", "Body", "From", "Header", "Query", "Route", "Services"], false, 0, 0, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, false], ["EntityFrameworkAnalysisHelper", "Lim.FeaturesExtractor.Dotnet.EntityFrameworkAnalysisHelper", [], [], "src/Lim.FeaturesExtractor.Dotnet/SemanticAnalysis/EntityFrameworkAnalysisHelper.cs", 13, 0, {"InstanceCache": "???.WeakCache", "_analyzer": "Lim.FeaturesExtractor.Dotnet.SemanticAnalyzer", "_memoizer": "???.AsyncMemoizer", "_repositoryDataCollection": "Lim.FeaturesExtractor.Dotnet.RepositoryDataCollection"}, ["_analyzer", "_memoizer", "_repositoryDataCollection"], ["EntityFrameworkAnalysisHelper", "For", "IsDbSetPropertyTypeArgumentAsync", "IsModelBuilderEntityTypeArgumentAsync", "FindDbSetPropertyTypeArgumentsAsync", "FindModelBuilderEntityTypeArgumentsAsync", "IsNavigableFromExplicitDataModelAsync"], ["System.Collections.Generic", "System.Linq", "System.Runtime.CompilerServices", "System.Threading.Tasks", "Infrastructure.Dotnet.Common", "Microsoft.CodeAnalysis", "Microsoft.CodeAnalysis.CSharp.Syntax", "ConditionalWeakTable<RepositoryDataCollection, EntityFrameworkAnalysisHelper>"], false, false, [], false, false, [], {"InstanceCache": [], "_analyzer": [], "_memoizer": [], "_repositoryDataCollection": []}, [], 0, false, false, false, 7, 1.0, [], 663.2857142857143, 224, 14.285714285714286, 57.142857142857146, 1, 0, false, false, false, true, "public", false, ["Lim.FeaturesExtractor.Dotnet.SemanticAnalyzer.ResolveTypesAsync"], ["InstanceCache.GetValue", "(await FindDbSetPropertyTypeArgumentsAsync()).Contains", "(await FindModelBuilderEntityTypeArgumentsAsync()).Contains", "_memoizer.Memoize", "_repositoryDataCollection.ClassEntitiesToExport\n                        .Where", "classEntity\n                                .Symbol\n                                .SelfAndBaseTypes()\n                                .Skip(1)\n                                .Any", "classEntity\n                                .Symbol\n                                .SelfAndBaseTypes()\n                                .Skip", "classEntity\n                                .Symbol\n                                .SelfAndBaseTypes", "dbContextClasses.SelectMany", "(await _analyzer.ResolveTypesAsync(dbSetPropertyTypeArguments))\n                        .Values\n                        .WhereNotNull()\n                        .ToHashSet", "(await _analyzer.ResolveTypesAsync(dbSetPropertyTypeArguments))\n                        .Values\n                        .WhereNotNull", "classEntity.MethodEntities\n                    .Where(methodEntity => methodEntity.IsProperty)\n                    .Select(_ => _.Node)\n                    .OfType<PropertyDeclarationSyntax>", "classEntity.MethodEntities\n                    .Where(methodEntity => methodEntity.IsProperty)\n                    .Select", "classEntity.MethodEntities\n                    .Where", "propertyDeclaration.Type.ExtractGenericName", "YieldModelBuilderEntityTypeArgumentNodesAsync()\n                        .ToListAsync", "_analyzer.ResolveTypesAsync", "_analyzer.ExpandTypeParametersAsync", "_repositoryDataCollection.MethodEntitiesToExport\n                    .Select(_ => _.Node)\n                    .SelectMany(node => node.DescendantNodes())\n                    .OfType<InvocationExpressionSyntax>", "_repositoryDataCollection.MethodEntitiesToExport\n                    .Select(_ => _.Node)\n                    .SelectMany", "_repositoryDataCollection.MethodEntitiesToExport\n                    .Select", "node.DescendantNodes", "(await _analyzer.GetSemanticModelAsync(methodTarget))\n                        .GetTypeInfo", "_analyzer.GetSemanticModelAsync", "new[] {FindDbSetPropertyTypeArgumentsAsync(), FindModelBuilderEntityTypeArgumentsAsync()}\n                .ToAsyncEnumerable()\n                .SelectManyAwait", "new[] {FindDbSetPropertyTypeArgumentsAsync(), FindModelBuilderEntityTypeArgumentsAsync()}\n                .ToAsyncEnumerable", "(await typeSetTask).ToAsyncEnumerable", "sourceTypes.AnyAsync", "navigationGraph.HasPath"], false, false, false, false, ["DbContext", "DbSet", "Entity", "ModelBuilder"], false, 0, 0, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, false], ["KnownNamespace", "Lim.FeaturesExtractor.Dotnet.KnownNamespace", [], [], "src/Lim.FeaturesExtractor.Dotnet/SemanticAnalysis/KnownNamespace.cs", 3, 0, {}, ["Name"], ["KnownNamespace", "Name", "Type"], [], false, false, [], false, false, [], {}, [], 1, false, false, false, 2, 0.6666666666666666, [], 45.0, 26, 0.0, 100.0, 1, 0, false, false, false, false, "public", false, [], [], false, false, false, false, [], false, 1, 0, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, false], ["KnownType", "Lim.FeaturesExtractor.Dotnet.KnownType", [], [], "src/Lim.FeaturesExtractor.Dotnet/SemanticAnalysis/KnownType.cs", 3, 0, {}, ["Name", "Namespace", "Arity"], ["KnownType", "Name", "Namespace", "Arity"], [], false, false, [], false, false, [], {}, [], 3, false, false, false, 1, 0.25, [], 28.75, 0, 0.0, 100.0, 1, 0, false, false, false, false, "public", false, [], [], false, false, false, false, [], false, 3, 0, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, false], ["LinqToDBAnalysisHelper", "Lim.FeaturesExtractor.Dotnet.LinqToDBAnalysisHelper", [], [], "src/Lim.FeaturesExtractor.Dotnet/SemanticAnalysis/LinqToDBAnalysisHelper.cs", 14, 0, {"InstanceCache": "???.WeakCache", "DataConnectionType": "Lim.FeaturesExtractor.Dotnet.KnownType", "_analyzer": "Lim.FeaturesExtractor.Dotnet.SemanticAnalyzer", "_memoizer": "???.AsyncMemoizer", "_repositoryDataCollection": "Lim.FeaturesExtractor.Dotnet.RepositoryDataCollection"}, ["_analyzer", "_memoizer", "_repositoryDataCollection"], ["LinqToDBAnalysisHelper", "For", "IsDataConnectionGetTableTypeArgumentAsync", "FindDataConnectionGetTableTypeArgumentsAsync", "IsPossibleDataConnectionType"], ["System.Collections.Generic", "System.Linq", "System.Runtime.CompilerServices", "System.Threading.Tasks", "Infrastructure.Dotnet.Common", "Microsoft.CodeAnalysis", "Microsoft.CodeAnalysis.CSharp", "Microsoft.CodeAnalysis.CSharp.Syntax", "ConditionalWeakTable<RepositoryDataCollection, LinqToDBAnalysisHelper>"], false, false, [], false, false, [], {"InstanceCache": [], "DataConnectionType": [], "_analyzer": [], "_memoizer": [], "_repositoryDataCollection": []}, [], 0, false, false, false, 5, 1.0, [], 586.0, 184, 20.0, 40.0, 1, 0, false, false, false, true, "public", false, ["Lim.FeaturesExtractor.Dotnet.SymbolExtensions.SelfAndBaseTypes", "Lim.FeaturesExtractor.Dotnet.SymbolExtensions.MatchesKnownType"], ["InstanceCache.GetValue", "(await FindDataConnectionGetTableTypeArgumentsAsync()).Contains", "_memoizer.Memoize", "YieldDataConnectionGetTableTypeArgumentNodesAsync()\n                        .ToListAsync", "_analyzer.ResolveTypesAsync", "_analyzer.ExpandTypeParametersAsync", "_repositoryDataCollection.MethodEntitiesToExport\n                    .Select(_ => _.Node)\n                    .SelectMany(node => node.DescendantNodes())\n                    .OfType<InvocationExpressionSyntax>", "_repositoryDataCollection.MethodEntitiesToExport\n                    .Select(_ => _.Node)\n                    .SelectMany", "_repositoryDataCollection.MethodEntitiesToExport\n                    .Select", "node.DescendantNodes", "invocation.Expression.ExtractGenericName", "_analyzer.GetSemanticModelAsync", "semanticModel.GetTypeInfo", "semanticModel.GetSpeculativeTypeInfo", "SyntaxFactory.ThisExpression", "IsPossibleDataConnectionType", "typeSymbol.SelfAndBaseTypes()\n                .Any"], false, false, false, false, ["DataConnection", "LinqToDB", "GetTable"], false, 0, 0, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, false], ["MongoAnalysisHelper", "Lim.FeaturesExtractor.Dotnet.MongoAnalysisHelper", [], [], "src/Lim.FeaturesExtractor.Dotnet/SemanticAnalysis/MongoAnalysisHelper.cs", 13, 0, {"InstanceCache": "???.WeakCache", "_analyzer": "Lim.FeaturesExtractor.Dotnet.SemanticAnalyzer", "_memoizer": "???.AsyncMemoizer", "_repositoryDataCollection": "Lim.FeaturesExtractor.Dotnet.RepositoryDataCollection"}, ["_analyzer", "_memoizer", "_repositoryDataCollection"], ["MongoAnalysisHelper", "For", "IsGetCollectionTypeArgumentAsync", "IsClassMapTypeArgumentAsync", "FindGetCollectionTerminalTypeArgumentsAsync", "FindClassMapTerminalTypeArgumentsAsync", "FindGenericMethodInvocations"], ["System.Collections.Generic", "System.Linq", "System.Runtime.CompilerServices", "System.Threading.Tasks", "Infrastructure.Dotnet.Common", "Microsoft.CodeAnalysis", "Microsoft.CodeAnalysis.CSharp.Syntax", "ConditionalWeakTable<RepositoryDataCollection, MongoAnalysisHelper>"], false, false, [], false, false, [], {"InstanceCache": [], "_analyzer": [], "_memoizer": [], "_repositoryDataCollection": []}, [], 0, false, false, false, 7, 1.0, [], 386.57142857142856, 214, 14.285714285714286, 42.857142857142854, 1, 0, false, false, false, true, "public", false, [], ["InstanceCache.GetValue", "(await FindGetCollectionTerminalTypeArgumentsAsync())\n                .Contains", "(await FindClassMapTerminalTypeArgumentsAsync())\n                .Contains", "_memoizer.Memoize", "FindGenericMethodInvocations(\"GetCollection\")\n                        .Where(methodName => methodName.TypeArgumentList.Arguments.Count == 1)\n                        .Where(methodName => methodName.FirstAncestorOrSelf<InvocationExpressionSyntax>()!.ArgumentList.Arguments.Count >= 1)\n                        .Select", "FindGenericMethodInvocations(\"GetCollection\")\n                        .Where(methodName => methodName.TypeArgumentList.Arguments.Count == 1)\n                        .Where", "FindGenericMethodInvocations(\"GetCollection\")\n                        .Where", "methodName.FirstAncestorOrSelf<InvocationExpressionSyntax>", "_analyzer.ResolveTypesAsync", "_analyzer.ExpandTypeParametersAsync", "new[] {\"RegisterClassMap\", \"LookupClassMap\"}\n                        .SelectMany", "invocations\n                        .Where(methodName => methodName.TypeArgumentList.Arguments.Count == 1)\n                        .Select", "invocations\n                        .Where", "_repositoryDataCollection\n                .MethodEntitiesToExport\n                .SelectMany", "methodEntity.Node\n                        .DescendantNodes()\n                        .OfType<InvocationExpressionSyntax>()\n                        .Select(invocation => invocation.Expression.ExtractGenericName())\n                        .WhereNotNull()\n                        .Where", "methodEntity.Node\n                        .DescendantNodes()\n                        .OfType<InvocationExpressionSyntax>()\n                        .Select(invocation => invocation.Expression.ExtractGenericName())\n                        .WhereNotNull", "methodEntity.Node\n                        .DescendantNodes()\n                        .OfType<InvocationExpressionSyntax>()\n                        .Select", "methodEntity.Node\n                        .DescendantNodes()\n                        .OfType<InvocationExpressionSyntax>", "methodEntity.Node\n                        .DescendantNodes", "invocation.Expression.ExtractGenericName"], false, false, false, false, ["GetCollection", "RegisterClassMap", "LookupClassMap"], false, 0, 0, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, false], ["SemanticAnalyzer", "Lim.FeaturesExtractor.Dotnet.SemanticAnalyzer", [], [], "src/Lim.FeaturesExtractor.Dotnet/SemanticAnalysis/SemanticAnalyzer.cs", 11, 0, {"_solution": "???.Solution"}, ["_solution", "TypeNavigabilityGraph"], ["SemanticAnalyzer", "TypeNavigabilityGraph", "GetSemanticModelAsync", "ResolveTypesAsync", "ExpandTypeParameterAsync", "ExpandTypeParametersAsync", "FindConstructedUsagesAsync", "GetSymbolGenericDefinition", "FindSourceReferencesAsync"], ["System.Collections.Generic", "System.Linq", "System.Threading.Tasks", "Infrastructure.Dotnet.Common", "Microsoft.CodeAnalysis", "Microsoft.CodeAnalysis.CSharp.Syntax", "Microsoft.CodeAnalysis.FindSymbols"], false, false, [], false, false, [], {"_solution": []}, [], 1, false, false, false, 11, 0.9166666666666666, [], 477.0, 261, 8.333333333333334, 83.33333333333333, 1, 0, false, false, false, true, "public", false, [], ["GetSemanticModelAsync", "_solution.GetDocument", "document.GetSemanticModelAsync", "typeNodes.GroupBy", "semanticModel.GetReferencedSymbol<ITypeSymbol>", "expandStack.Push", "expandStack.TryPop", "seen.Contains", "seen.Add", "FindConstructedUsagesAsync(typeParameterSymbol.DeclaringMethod)\n                                .Select", "FindConstructedUsagesAsync", "FindConstructedUsagesAsync(typeParameterSymbol.DeclaringType)\n                                .Select", "typeArguments.Distinct()\n                            .ForEachAsync", "typeArguments.Distinct", "sourceTypeSymbols\n                .Distinct()\n                .ForEachAsync", "sourceTypeSymbols\n                .Distinct", "ExpandTypeParameterAsync(sourceType)\n                            .ForEachAsync", "ExpandTypeParameterAsync", "expandedTypes.Add", "FindSourceReferencesAsync", "usage\n                    .AncestorsAndSelf()\n                    .Select(\n                        node => (\n                            Node: node,\n                            referenceSemanticModel.GetSymbolInfo(node)\n                                .Symbol)\n                    )\n                    .FirstOrDefault", "usage\n                    .AncestorsAndSelf()\n                    .Select", "usage\n                    .AncestorsAndSelf", "referenceSemanticModel.GetSymbolInfo", "genericDefinitionSymbol.Equals", "GetSymbolGenericDefinition", "SymbolFinder.FindReferencesAsync", "referenceLocation.Document.GetSemanticModelAsync", "(await referenceSemanticModel.SyntaxTree.GetRootAsync())\n                        .FindNode", "referenceSemanticModel.SyntaxTree.GetRootAsync"], false, false, false, false, [], false, 1, 0, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, false], ["TypeNavigabilityGraph", "Lim.FeaturesExtractor.Dotnet.TypeNavigabilityGraph", [], [], "src/Lim.FeaturesExtractor.Dotnet/SemanticAnalysis/TypeNavigabilityGraph.cs", 9, 0, {"_adjacencyMap": "System.Collections.Generic.IDictionary<ITypeSymbol, ISet<ITypeSymbol>>", "_reachabilityMap": "System.Collections.Generic.IDictionary<ITypeSymbol, ISet<ITypeSymbol>>"}, ["_adjacencyMap", "_reachabilityMap"], ["HasPath", "ProcessVertex", "IsTerminalVertex", "FindAdjacentVertices"], ["System.Collections.Concurrent", "System.Collections.Generic", "System.Linq", "Microsoft.CodeAnalysis", "Microsoft.CodeAnalysis.CSharp.Extensions"], false, false, [], false, false, [], {"_adjacencyMap": [], "_reachabilityMap": []}, [], 0, false, false, false, 4, 1.0, [], 699.75, 696, 0.0, 25.0, 0, 0, false, false, false, false, "public", false, [], ["_reachabilityMap.ContainsKey", "_reachabilityMap[source]\n                .Contains", "_adjacencyMap.ContainsKey", "reachableTypes.UnionWith", "reachableTypes.SelectMany(\n                            adjacentType => _reachabilityMap.TryGetValue(adjacentType, out var adjacentReachables)\n                                ? adjacentReachables\n                                : _adjacencyMap[adjacentType]\n                        )\n                        .ToHashSet", "reachableTypes.SelectMany", "_reachabilityMap.TryGetValue", "typeSymbol.IsPrimitive", "typeSymbol.ContainingNamespace.IsNamedNamespace", "typeSymbol.GetProperties()\n                .Where(property => property.DeclaredAccessibility == Accessibility.Public)\n                .Select", "typeSymbol.GetProperties()\n                .Where", "typeSymbol.GetProperties", "typeSymbol.GetFields()\n                .Where(field => field.DeclaredAccessibility == Accessibility.Public)\n                .Select", "typeSymbol.GetFields()\n                .Where", "typeSymbol.GetFields", "namedTypeSymbol.ConstructedFrom.MatchesKnownType", "typeSymbol.AllInterfaces\n                    .Where(interfaceType => interfaceType.ConstructedFrom.MatchesKnownType(typeof(IEnumerable<>)))\n                    .Select", "typeSymbol.AllInterfaces\n                    .Where", "interfaceType.ConstructedFrom.MatchesKnownType", "propertyTypes\n                .Concat(fieldTypes)\n                .Concat(elementTypes)\n                .ToHashSet", "propertyTypes\n                .Concat(fieldTypes)\n                .Concat", "propertyTypes\n                .Concat"], false, false, false, false, ["System"], false, 0, 0, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, false], ["Startup", "Lim.FeaturesExtractor.Dotnet.Startup", [], [], "src/Lim.FeaturesExtractor.Dotnet/Startup.cs", 16, 0, {}, [], ["ConfigureServices", "Configure"], ["Infrastructure.Dotnet.SPA", "JetBrains.Annotations", "Microsoft.AspNetCore.Builder", "Microsoft.AspNetCore.Hosting", "Microsoft.AspNetCore.HttpOverrides", "Microsoft.AspNetCore.Mvc", "Microsoft.Build.Locator", "Microsoft.Extensions.DependencyInjection", "Microsoft.Extensions.Hosting", "Newtonsoft.Json.Converters"], false, false, [], false, false, [], {}, ["UsedImplicitly"], 0, false, false, false, 2, 1.0, [], 630.5, 630, 0.0, 100.0, 0, 0, false, false, false, false, "public", false, [], ["MSBuildLocator.RegisterDefaults", "services.AddResponseCompression", "services.AddMvc(mvcOptions => mvcOptions.EnableEndpointRouting = false)\n                .AddNewtonsoftJson(options => options.SerializerSettings.Converters.Add(new StringEnumConverter()))\n                .SetCompatibilityVersion(CompatibilityVersion.Version_3_0)\n                .ConfigureApiBehaviorOptions", "services.AddMvc(mvcOptions => mvcOptions.EnableEndpointRouting = false)\n                .AddNewtonsoftJson(options => options.SerializerSettings.Converters.Add(new StringEnumConverter()))\n                .SetCompatibilityVersion", "services.AddMvc(mvcOptions => mvcOptions.EnableEndpointRouting = false)\n                .AddNewtonsoftJson", "services.AddMvc", "options.SerializerSettings.Converters.Add", "app.UseForwardedHeaders", "env.IsDevelopment", "env.IsTest", "app.UseDeveloperExceptionPage", "app.UseExceptionHandler", "app.UseHsts", "app.UseResponseCompression", "app.UseMiddleware<ErrorLoggingMiddleware>", "app.UseMvc", "routes.MapRoute", "app.UseRouting"], false, false, false, false, ["/Error", "default", "{controller}/{action=Index}/{id?}"], false, 0, 0, [], false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, false]]}
